meta:
  id: yuanshen_config_types
  endian: le
  application: YuanShen / Genshin Impact
  license: AGPL-3.0-or-later
  imports:
    - aux_types
doc: |
  This is an autogenerated file that contains definitions required for parsing the data
  of the YuanShen / Genshin Impact game.
types:
  ks__disp__config_ability:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_ability
            1: config_dummy_ability
            _: aux_types::error
  ks__disp__config_ability_action:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_ability_action
            1: base_utility_action
            2: apply_modifier
            3: apply_level_modifier
            4: attach_modifier
            5: remove_unique_modifier
            6: fire_effect
            7: fire_sub_emitter_effect
            8: fire_effect_for_storm
            9: fire_effect_to_target
            10: fire_hit_effect
            11: avatar_skill_start
            12: entity_do_skill
            13: avatar_enter_focus
            14: avatar_exit_focus
            15: avatar_enter_view_bias
            16: avatar_exit_view_bias
            17: avatar_exit_climb
            18: avatar_camera_param
            19: avatar_enter_camera_shot
            20: avatar_exit_camera_shot
            21: play_emo_sync
            22: control_emotion
            23: spawn_attach
            24: turn_direction
            25: turn_direction_to_pos
            26: set_camera_lock_time
            27: fire_monster_being_hit_after_image
            28: fire_avatar_being_hit_after_image
            29: attach_effect
            30: attach_light
            31: add_global_value
            32: set_global_value
            33: multiply_global_value
            34: copy_global_value
            35: set_global_value_list
            36: set_global_value_to_override_map
            37: set_random_override_map_value
            38: set_override_map_value
            39: set_crystal_shield_hp_to_override_map
            40: set_system_value_to_override_map
            41: set_global_value_by_target_distance
            42: clear_global_value
            43: sum_target_weight_to_self_global_value
            44: set_global_pos
            45: add_global_pos
            46: clear_global_pos
            47: set_global_dir
            48: push_pos
            49: clear_pos
            50: get_pos
            51: damage_by_attack_value
            52: heal_sp
            53: heal_hp
            54: lose_hp
            55: enable_rocket_jump
            56: force_trigger_jump
            57: enable_after_image
            58: act_time_slow
            59: trigger_ability
            60: remove_modifier
            61: set_ai_param
            62: act_camera_shake
            63: act_camera_radial_blur
            64: set_animator_bool
            65: set_animator_int
            66: set_animator_float
            67: set_animator_trigger
            68: reset_animator_trigger
            69: set_material_param_float_by_transform
            70: debug_log
            71: trigger_bullet
            72: trigger_attack_event
            73: trigger_attack_target_map_event
            74: enable_wet_electric_hit_box
            75: create_entity
            76: try_trigger_platform_start_move
            77: kill_gadget
            78: kill_self
            79: trigger_audio
            80: trigger_drop_equip_parts
            81: trigger_throw_equip_part
            82: trigger_create_gadget_to_equip_part
            83: trigger_aux_weapon_trans
            84: trigger_gadget_interactive
            85: trigger_set_visible
            86: trigger_set_cast_shadow
            87: trigger_set_pass_through
            88: trigger_set_renderers_enable
            89: trigger_hide_weapon
            90: trigger_taunt
            91: trigger_set_chest_lock
            92: clear_lock_target
            93: set_pose_bool
            94: set_pose_int
            95: set_pose_float
            96: trigger_face_animation
            97: enable_crash_damage
            98: set_crash_damage
            99: try_find_blink_point
            100: try_find_blink_point_by_born
            101: do_blink
            102: avatar_do_blink
            103: enable_hit_box_by_name
            104: enable_push_collider_name
            105: enable_scene_transform_by_name
            106: generate_elem_ball
            107: randomed
            108: hide_ui_bill_board
            109: send_effect_trigger
            110: change_follow_damp_time
            111: set_self_attack_target
            112: force_init_massive_entity
            113: enable_head_control
            114: enable_part_control
            115: start_dither
            116: summon
            117: attach_ability_state_resistance
            118: fire_ai_sound_event
            119: add_element_durability
            120: set_part_control_target
            121: drop_subfield
            122: enable_gadget_intee
            123: remove_velocity_force
            124: execute_group_trigger
            125: re_trigger_ai_skill_initial_cd
            126: set_ai_skill_cd_available_now
            127: set_ai_skill_gcd
            128: enable_ai_stealthy
            129: unlock_skill
            130: add_avatar_skill_info
            131: remove_avatar_skill_info
            132: set_can_die_immediately
            133: play_emoji_bubble
            134: attach_bullet_aim_point
            135: enable_bullet_collision_plugin_trigger
            136: guide_paimon_disappear_end
            137: set_paimon_look_at_camera
            138: paimon_action
            139: set_paimon_look_at_avatar
            140: set_paimon_temp_offset
            141: set_keep_in_air_velocity_force
            142: force_air_state_fly
            143: to_nearst_anchor_point
            144: push_dvalin_s01process
            145: set_dvalin_s01fly_state
            146: regist_to_stage_script
            147: sync_to_stage_script
            148: calc_dvalin_s04reborn_point
            149: trigger_player_die
            150: reset_enviro_eular
            151: set_emission_scaler
            152: enter_camera_lock
            153: show_ui_combat_bar
            154: show_screen_effect
            155: add_server_buff
            156: remove_server_buff
            157: modify_avatar_skill_cd
            158: modify_vehicle_skill_cd
            159: reset_ability_special
            160: enable_avatar_fly_state_trail
            161: show_reminder
            162: update_reaction_damage
            163: execute_gadget_lua
            164: set_weapon_bind_state
            165: set_weapon_attach_point_real_name
            166: set_avatar_can_shake_off
            167: enable_main_interface
            168: change_play_mode
            169: enable_camera_dof
            170: enable_hit_auto_redirect
            171: clear_endura
            172: rush_move
            173: reset_ai_attack_target
            174: reset_ai_resist_taunt_level
            175: change_collider_surface
            176: set_surround_anchor
            177: set_combat_fixed_move_point
            178: set_avatar_hit_buckets
            179: reset_avatar_hit_buckets
            180: set_ai_skill_cd_multiplier
            181: register_ai_action_point
            182: release_ai_action_point
            183: set_neuron_enable
            184: set_neuron_mute
            185: broadcast_neuron_stimulate
            186: issue_command
            187: reset_ai_threat_broadcast_range
            188: set_ai_hit_feeling
            189: set_velocity_ignore_air_gy
            190: use_item
            191: repeated
            192: set_entity_scale
            193: call_lua_task
            194: dungeon_fog_effects
            195: do_tile_action
            196: do_watcher_system_action
            197: show_progress_bar_action
            198: change_tag
            199: use_skill_elite_set
            200: fixed_monster_rush_move
            201: fixed_avatar_rush_move
            202: attach_element_type_resistance
            203: add_global_value_to_target
            204: revive_elem_energy
            205: add_climate_meter
            206: reset_climate_meter
            207: fire_gain_crystal_seed_event
            208: enable_monster_move_on_water
            209: enable_avatar_move_on_water
            210: change_enviro_weather
            211: sync_entity_position_by_normalized_time
            212: equip_affix_start
            213: show_extra_ability
            214: set_extra_ability_enable
            215: set_extra_ability_state
            216: update_uid_value
            217: force_use_skill_success
            218: server_lua_call
            219: do_widget_system_action
            220: change_gadget_ui_interact_hint
            221: kill_play_entity
            222: dummy_action
            223: ban_entity_mark
            224: fire_ui_effect
            225: attach_ui_effect
            226: set_skill_anchor
            227: add_charge_value
            228: set_charge_ratio
            229: enable_light_core_component
            230: server_monster_log
            231: enable_position_synchronization
            232: revive_stamina
            233: add_charge_bar_value
            234: set_charge_bar_value
            235: set_ui_combat_bar_spark
            236: refresh_ui_combat_bar_layout
            237: enable_gadget_special_camera
            238: kill_server_gadget
            239: show_text_map
            240: fire_charge_bar_effect
            241: enable_weather_lock
            242: push_inter_action_by_config_path
            243: ignore_move_col_to_rock_col
            244: create_tile
            245: destroy_tile
            246: clear_tile
            247: change_shield_value
            248: fire_fishing_event
            249: send_evt_electric_core_move_enter_p1
            250: send_evt_electric_core_move_interrupt
            251: get_fight_property
            252: get_team_total_max_energy_to_overridemap
            253: predicated
            254: revive_avatar
            255: revive_dead_avatar
            256: create_gadget
            257: create_moving_platform
            _: aux_types::error
  ks__disp__select_targets:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: select_targets
            1: select_targets_by_shape
            2: select_targets_by_equip_parts
            3: select_targets_by_children
            4: select_targets_by_children_entity_type
            5: select_targets_by_tag
            6: select_targets_by_self_group
            7: select_targets_by_lc_trigger
            8: select_targets_by_lc_trigger_all
            _: aux_types::error
  ks__disp__config_ability_mixin:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_ability_mixin
            1: debug_mixin
            2: rely_on_element_mixin
            3: replace_event_pattern_mixin
            4: attach_to_state_id_mixin
            5: attach_to_monster_air_state_mixin
            6: attach_to_normalized_time_mixin
            7: attach_to_pose_id_mixin
            8: attach_to_gadget_state_mixin
            9: attach_to_gadget_state_mutex_mixin
            10: attach_modifier_by_stacking_mixin
            11: attach_to_ai_alertness_mixin
            12: attach_modifier_to_predicate_mixin
            13: do_action_by_event_mixin
            14: button_hold_charge_mixin
            15: skill_button_hold_charge_mixin
            16: avatar_steer_by_camera_mixin
            17: steer_attack_mixin
            18: shield_bar_mixin
            19: charge_bar_mixin
            20: element_shield_mixin
            21: elite_shield_mixin
            22: override_attack_event_mixin
            23: attach_modifier_to_self_global_value_mixin
            24: attach_modifier_to_self_global_value_no_init_mixin
            25: attach_modifier_to_global_value_mixin
            26: trigger_type_support_mixin
            27: wind_zone_mixin
            28: tornado_mixin
            29: air_flow_mixin
            30: wind_seed_spawner_mixin
            31: collision_mixin
            32: velocity_detect_mixin
            33: weight_detect_region_mixin
            34: change_field_mixin
            35: switch_skill_id_mixin
            36: avatar_change_skill_mixin
            37: avatar_level_skill_mixin
            38: on_avatar_use_skill_mixin
            39: cost_stamina_mixin
            40: entity_defence_mixin
            41: being_hit_mixin
            42: attack_hitting_scene_mixin
            43: trigger_witch_time_mixin
            44: trigger_weather_mixin
            45: trigger_post_process_effect_mixin
            46: modify_damage_mixin
            47: cluster_trigger_mixin
            48: modify_skill_cd_by_modifier_count_mixin
            49: revive_elem_energy_mixin
            50: reject_attack_mixin
            51: reject_attack_mixin_v2
            52: attack_cost_element_mixin
            53: apply_inertia_velocity_mixin
            54: change_prop_type_value_mixin
            55: extend_lifetime_by_picked_gadget_mixin
            56: do_action_by_energy_change_mixin
            57: do_revive_mixin
            58: ice_floor_mixin
            59: hit_level_gauge_mixin
            60: recycle_modifier_mixin
            61: cur_local_avatar_mixin
            62: local_avatars_mixin
            63: cur_local_avatar_mixin_v2
            64: attach_to_day_night_mixin
            65: do_action_by_create_gadget_mixin
            66: enviro_follow_rotate_mixin
            67: box_clamp_wind_zone_mixin
            68: dvalin_s01box_moxe_mixin
            69: fix_dvalin_s04move_mixin
            70: dvalin_s01path_effs_mixin
            71: camera_lock_mixin
            72: avatar_lock_forward_fly_mixin
            73: trigger_resist_damage_text_mixin
            74: stage_ready_mixin
            75: attach_modifier_to_element_durability_mixin
            76: do_action_by_state_id_mixin
            77: do_action_by_animator_state_id_mixin
            78: do_action_by_pose_id_mixin
            79: override_stick_elem_ui_mixin
            80: global_main_shield_mixin
            81: global_sub_shield_mixin
            82: attach_modifier_to_hp_percent_mixin
            83: do_action_by_team_status_mixin
            84: do_action_by_element_reaction_mixin
            85: animator_rotation_compensate_mixin
            86: tile_attack_mixin
            87: tile_complex_mixin
            88: tile_attack_manager_mixin
            89: do_tile_action_manager_mixin
            90: tile_complex_manager_mixin
            91: monster_ready_mixin
            92: do_action_by_killing_mixin
            93: shader_lerp_mixin
            94: element_adjust_mixin
            95: attach_to_element_type_mixin
            96: attach_to_ability_state_mixin
            97: watcher_system_mixin
            98: element_outer_glow_effect_mixin
            99: apply_modifier_with_shared_durability_mixin
            100: player_uid_notify_mixin
            101: attach_to_play_stage_mixin
            102: server_create_gadget_on_kill_mixin
            103: camera_blur_mixin
            104: do_action_by_gain_crystal_seed_mixin
            105: modify_element_decrate_mixin
            106: element_hitting_other_predicated_mixin
            107: resist_climate_mixin
            108: server_update_global_value_mixin
            109: element_reaction_shock_mixin
            110: billboard_mark_mixin
            111: billboard_fixed_mark_mixin
            112: attach_modifier_to_target_distance_mixin
            113: move_state_mixin
            114: server_finish_watcher_mixin
            115: dummy_mixin
            116: urgent_hot_fix_mixin
            117: field_entity_count_change_mixin
            118: td_play_mixin
            119: td_play_mixin_v2
            120: circle_barrage_mixin
            121: velocity_force_mixin
            122: scene_prop_sync_mixin
            123: ban_entity_mark_mixin
            124: entity_mark_show_type_mixin
            125: entity_dither_mixin
            126: entity_in_visible_mixin
            127: set_skill_can_use_in_state_mixin
            128: gadget_charge_mixin
            129: homeworld_enter_editor_mixin
            130: gadget_upgrade_chain_mixin
            131: interact_trigger_ability
            132: interact_trigger_ability_mixin
            133: attach_to_widget_state_mixin
            134: widget_mp_support_mixin
            135: follow_attach_point_effect_mixin
            136: multi_badminton_shoot_mixin
            137: element_convert_to_charge_bar_value_mixin
            138: dynamic_collision_mixin
            139: ai_perception_mixin
            140: attach_modifier_by_neuron_mixin
            141: override_monster_move_speed_ratio_mixin
            142: connect_line_mixin
            143: electric_core_move_mixin
            144: send_postion_to_shader_cut_mixin
            145: fishing_aim_parabola_mixin
            146: electric_core_line_mixin
            147: streaming_modifier_mixin
            148: self_add_durability_mixin
            149: clamp_damage_received_mixin
            150: do_action_by_damage_received_mixin
            151: attach_modifier_to_climate_meter_mixin
            152: change_lock_type_mixin
            153: effect_change_alpha_mixin
            154: replace_face_animation_mixin
            155: dig_attach_modifier_to_target_distance_mixin
            156: rigid_body_freeze_mixin
            157: do_action_on_global_value_change_mixin
            158: die_pattern_switch_mixin
            159: attach_to_animator_state_id_mixin
            160: steer_attack_move_mixin
            161: steer_attack_trace_mixin
            162: steer_attack_trace_to_pos_mixin
            163: trigger_element_support_mixin
            164: trigger_be_hit_support_mixin
            165: trigger_rage_support_mixin
            166: monster_defend_mixin
            167: auto_defence_mixin
            _: aux_types::error
  ks__disp__tile_shape_info:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: tile_shape_info
            1: sphere_tile_shape_info
            _: aux_types::error
  ks__disp__config_ability_predicate:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_ability_predicate
            1: relational_operation_predicate
            2: by_target_raycast_visiable
            3: by_hit_critical
            4: by_wet_hit_collider
            5: by_hit_box_name
            6: by_hit_box_type
            7: by_has_element
            8: by_has_ability_state
            9: by_not
            10: by_any
            11: by_has_attack_target
            12: by_target_is_ghost_to_enemy
            13: by_target_is_self
            14: by_target_element
            15: by_host_or_guest
            16: by_target_global_value
            17: by_scene_prop_state
            18: by_avatar_in_water_depth
            19: by_entity_types
            20: by_hit_impulse
            21: by_hit_element
            22: by_hit_strike_type
            23: by_is_move_on_water
            24: by_attack_tags
            25: by_scene_surface_type
            26: by_unlock_talent_param
            27: by_conductive
            28: by_skill_ready
            29: by_is_combat
            30: by_vehicle_is_combat
            31: by_stage_is_ready_temp
            32: by_item_number
            33: by_has_component_tag
            34: by_has_feature_tag
            35: by_avatar_element_type
            36: by_avatar_weapon_type
            37: by_avatar_body_type
            38: by_cur_team_has_feature_tag
            39: by_cur_team_has_element_type
            40: by_cur_team_element_type_sort
            41: by_cur_team_has_weapon_type
            42: by_cur_team_weapon_type_sort
            43: by_cur_team_has_body_type
            44: by_cur_team_body_type_sort
            45: by_big_team_has_feature_tag
            46: by_big_team_has_element_type
            47: by_big_team_element_type_sort
            48: by_big_team_has_weapon_type
            49: by_big_team_weapon_type_sort
            50: by_big_team_has_body_type
            51: by_big_team_body_type_sort
            52: by_attack_type
            53: by_entity_appear_vision_type
            54: by_element_trigger_entity_type
            55: by_element_reaction_source_type
            56: by_element_reaction_type
            57: by_target_config_id
            58: by_is_local_avatar
            59: by_target_gadget_state
            60: by_die_state_flag
            61: by_has_shield
            62: by_equip_affix_ready
            63: by_target_in_area
            64: by_is_target_camp
            65: by_has_child_gadget
            66: by_target_layout_area
            67: by_player_climate_type
            68: by_target_weather_name
            69: by_is_gadget_exist_around
            70: by_entity_is_alive
            71: by_monster_air_state
            72: by_game_time_is_locked
            73: by_target_is_caster
            74: by_hit_element_durability
            75: by_has_tag
            76: by_current_scene_types
            77: by_target_type
            78: by_current_scene_id
            79: by_target_charge_value
            80: by_has_modifier
            81: by_find_blink_point_success
            82: by_target_hp_ratio
            83: by_local_avatar_stamina
            84: by_local_avatar_stamina_ratio
            85: by_target_hp_value
            86: by_hit_damage
            87: by_hit_en_break
            88: by_target_override_map_value
            89: by_target_weight
            90: by_animator_float
            91: by_animator_int
            92: by_animator_bool
            93: by_target_position_to_self_position
            94: by_target_forward_and_self_position
            95: by_self_forward_and_target_position
            96: by_energy_ratio
            97: by_energy
            98: by_summon_tag_value
            99: by_attack_not_hit_scene
            100: by_target_altitude
            101: by_compare_with_target
            102: by_global_pos_to_ground
            _: aux_types::error
  ks__disp__config_ability_task:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_ability_task
            1: config_dummy_ability_task
            2: config_trigger_massive_element_task
            _: aux_types::error
  ks__disp__config_ai_threat_score_base_setting:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_ai_threat_score_base_setting
            1: config_aits_ability_global_value_setting
            2: config_aits_target_distance_setting
            3: config_aits_target_bearing_setting
            _: aux_types::error
  ks__disp__config_ai_tactic_base_setting:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_ai_tactic_base_setting
            1: config_ai_return_to_born_pos_setting
            2: config_ai_wander_setting
            3: config_ai_follow_scripted_path_setting
            4: config_ai_follow_server_route_setting
            5: config_ai_investigate_setting
            6: config_ai_react_action_point_setting
            7: config_ai_patrol_follow_setting
            8: config_ai_combat_follow_move_setting
            9: config_ai_melee_charge_setting
            10: config_ai_facing_move_setting
            11: config_ai_surround_setting
            12: config_ai_group_surround_setting
            13: config_ai_find_back_setting
            14: config_ai_combat_fixed_move_setting
            15: config_ai_crab_move_setting
            16: config_ai_flee_setting
            17: config_ai_flee_on_block_avatar_landing_setting
            18: config_ai_spacial_chase_setting
            19: config_ai_spacial_probe_setting
            20: config_ai_spacial_adjust_setting
            21: config_ai_bird_circling_setting
            22: config_ai_scripted_move_to_setting
            23: config_ai_landing_setting
            24: config_ai_extraction_setting
            25: config_ai_brownian_motion_setting
            26: config_ai_fishing_bites_bait_setting
            27: config_ai_fishing_pretend_bites_setting
            28: config_ai_fishing_flee_setting
            29: config_ai_spacial_facing_move_setting
            _: aux_types::error
  ks__disp__config_base_attack_pattern:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_base_attack_pattern
            1: config_simple_attack_pattern
            2: config_attack_use_prefab
            3: config_attack_trail
            4: config_attack_box
            5: config_attack_circle
            6: config_attack_sphere
            7: config_attack_double_trail
            _: aux_types::error
  ks__disp__config_audio_event_culling_rule_base:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_audio_event_culling_rule_base
            1: config_rule_culling_distance
            2: config_rule_wait_distance
            3: config_rule_limit_frame_global
            4: config_rule_limit_frame
            5: config_rule_culling_event_name_contain
            6: config_rule_culling_event
            _: aux_types::error
  ks__disp__config_audio_operation:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_audio_operation
            1: config_audio_event_op
            2: config_audio_emitter_op
            3: config_audio_positioned_op
            4: config_audio_positioned_event_op
            5: config_audio_positioned_emitter_op
            _: aux_types::error
  ks__disp__audio_setting_slider:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: audio_setting_slider
            1: audio_setting_slider_post_event
            2: audio_setting_slider_post_voice
            _: aux_types::error
  ks__disp__config_climate_info_base:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_climate_info_base
            1: config_climate_info
            _: aux_types::error
  ks__disp__config_be_hit_blend_shake:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_be_hit_blend_shake
            1: config_be_hit_blend_shake_by_ainmator
            _: aux_types::error
  ks__disp__config_special_camera:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_special_camera
            1: config_gadget_special_camera
            _: aux_types::error
  ks__disp__config_effect_attach_shape:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_effect_attach_shape
            1: config_effect_attach_box
            2: config_effect_attach_skinned_mesh
            3: config_effect_attach_mesh
            _: aux_types::error
  ks__disp__config_billboard:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_billboard
            1: config_combat_billboard
            2: config_progress_billboard
            3: config_gadget_icon_billboard
            _: aux_types::error
  ks__disp__config_coop_base_node:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_coop_base_node
            1: config_coop_talk_node
            2: config_coop_cond_node
            3: config_coop_select_node
            4: config_coop_action_node
            5: config_coop_end_node
            _: aux_types::error
  ks__disp__config_base_cutscene:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_base_cutscene
            1: config_timeline
            _: aux_types::error
  ks__disp__config_polygon_zone:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_polygon_zone
            1: config_danger_zone
            2: config_fishing_zone
            _: aux_types::error
  ks__disp__debug_blletin_info:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: debug_blletin_info
            1: debug_board_info
            _: aux_types::error
  ks__disp__config_born_direction_type:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_born_direction_type
            1: config_direction_by_default
            2: config_direction_by_entity
            3: config_direction_by_attack_target
            4: config_direction_by_attach_point
            5: config_direction_by_back_to_hit_box_center
            6: config_direction_by_look_at_entity
            7: config_direction_by_ground_normal
            8: config_direction_by_global_value
            9: config_direction_by_world
            10: config_direction_by_ground_normal_range
            _: aux_types::error
  ks__disp__born_random:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: born_random
            1: born_random_from_center
            2: born_random_in_shape
            _: aux_types::error
  ks__disp__config_born_type:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_born_type
            1: config_born_by_target
            2: config_born_by_self
            3: config_born_by_self_owner
            4: config_born_by_attach_point
            5: config_born_by_storm_lightning
            6: config_born_by_world
            7: config_born_by_global_value
            8: config_born_by_collision_point
            9: config_born_by_rush_to_point
            10: config_born_by_teleport_to_point
            11: config_born_by_predicate_point
            12: config_born_by_hit_point
            13: config_born_by_element_pos
            14: config_born_by_action_point
            15: config_born_by_target_linear_point
            _: aux_types::error
  ks__disp__config_action_point_select_type:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_action_point_select_type
            1: select_action_point_by_id
            2: select_action_point_by_self_pos
            3: select_action_point_by_target_pos
            4: select_action_point_by_away_from_avatar
            5: select_action_point_by_target_orientation
            6: select_action_point_by_all_avatars_orientation
            _: aux_types::error
  ks__disp__config_head_control:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_head_control
            1: config_monster_head_control
            _: aux_types::error
  ks__disp__config_entity:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_entity
            1: config_gadget
            2: config_character
            3: config_level_entity
            4: config_trans_point_entity
            5: config_avatar
            6: config_monster
            7: config_npc
            _: aux_types::error
  ks__disp__config_gadget_predicate:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_gadget_predicate
            1: config_predicate_by_time
            2: config_predicate_by_platform
            3: config_predicate_by_interact
            _: aux_types::error
  ks__disp__config_gadget_state_action:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_gadget_state_action
            1: config_gadget_state_fire_effect
            2: config_gadget_state_set_anim_trigger
            3: config_gadget_state_set_anim_int
            4: config_gadget_state_fire_ai_sound
            5: config_gadget_state_enable_gadget_intee
            6: config_gadget_state_enable_action
            7: config_gadget_state_send_effect_trigger
            _: aux_types::error
  ks__disp__config_control_part:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_control_part
            1: config_control_part_by_ik
            2: config_control_part_by_ikccd
            _: aux_types::error
  ks__disp__config_entity_audio:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_entity_audio
            1: config_gadget_audio
            2: config_character_audio
            3: config_vehicle_audio
            4: config_avatar_audio
            5: config_monster_audio
            _: aux_types::error
  ks__disp__config_base_gadget_trigger_action:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_base_gadget_trigger_action
            1: config_gadget_do_attack_event
            2: config_gadget_trigger_ability
            3: config_gadget_damage_by_attack_value
            _: aux_types::error
  ks__disp__config_gadget_pattern:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_gadget_pattern
            1: config_gadget_collided_pattern
            2: config_bullet_pattern
            _: aux_types::error
  ks__disp__config_base_guide:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_base_guide
            1: config_guide_action
            2: config_guide_condition
            3: config_guide_ui_mask_action
            4: config_guide_show_page
            5: config_guide_info_dialog_action
            6: config_guide_set_open_state_action
            7: config_guide_add_task_action
            8: config_guide_end_task_action
            9: config_guide_pause_action
            10: config_guide_force_avatar_move_action
            11: config_guide_camera_control_action
            12: config_guide_add_cmd
            13: config_guide_delay_do_action
            14: config_guide_do_action_by_predicate
            15: config_guide_show_tutorial_action
            16: config_guide_show_panel_action
            17: config_guide_switch_input_context_action
            18: config_guide_finish_quest_action
            19: config_avatar_equip_changed_condition
            20: config_guide_open_state_condition
            21: config_guide_level_condition
            22: config_guide_open_ui_condition
            23: config_guide_avatar_change_condition
            24: config_guide_can_get_personal_line_key_condition
            25: config_guide_climate_type_condition
            26: config_guide_team_member_condition
            27: config_guide_avatar_state_condition
            28: config_guide_button_click_condition
            29: config_guide_tab_item_condition
            30: config_guide_theatre_mechanicus_building_select_condition
            31: config_guide_theatre_mechanicus_info_select_condition
            32: config_guide_has_item_condition
            33: config_guide_camera_condition
            34: config_guide_avatar_action_condition
            35: config_guide_delay_finish_condition
            36: config_guide_multi_single_player_condition
            37: config_guide_multi_player_condition
            38: config_guide_has_avatar_condition
            39: config_guide_kill_monster_condition
            40: config_guide_check_task_finish_condition
            41: config_guide_check_quest_state_condition
            42: config_guide_navigation_condition
            43: config_guide_open_paimon_navigation_condition
            44: config_guide_virtual_dial_action_condition
            45: config_guide_check_platform_condition
            46: config_guide_check_aim_condition
            47: config_guide_level_type_condition
            48: config_guide_press_key_condition
            49: config_guide_map_click_condition
            50: config_guide_scene_id_condition
            51: config_guide_dungeon_id_condition
            52: config_guide_home_scene_condition
            53: config_guide_foundation_build_condition
            54: config_guide_mechanicus_pick_card_condition
            55: config_guide_mechanicus_curse_card_condition
            56: config_guide_page_check_base_condition
            57: config_guide_anchor_unlock_condition
            58: config_guide_fly_start_condition
            59: config_guide_fly_finish_condition
            60: config_guide_fly_fail_condition
            61: config_guide_hideand_seek_skill_category_condition
            _: aux_types::error
  ks__disp__config_base_inter_action:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_base_inter_action
            1: config_lua_action
            2: config_dialog_inter_action
            3: config_dialog_next_action
            4: config_dialog_select_action
            5: config_body_lang_inter_action
            6: config_steer_inter_action
            7: config_look_at_inter_action
            8: config_look_at_eye_ctrl_inter_action
            9: config_camera_move_inter_action
            10: config_cutscene_inter_action
            11: config_visible_inter_action
            12: config_audio_state_inter_action
            13: config_shop_exchange_inter_action
            14: config_gadget_touch_action
            15: config_ui_trigger_inter_action
            16: config_emo_sync_inter_action
            17: config_emotion_inter_action
            18: config_black_screen_action
            19: config_camera_shake_action
            20: config_show_message_action
            21: config_audio_play_action
            22: config_video_play_action
            23: config_first_sight_action
            24: config_camera_dof_action
            25: config_move_to_action
            26: config_request_msg_action
            27: config_emoji_bubble_action
            28: config_time_protect_action
            29: config_simple_black_screen_action
            30: config_simple_ui_show_inter_action
            31: config_open_blossom_mark_inter_action
            32: config_speech_bubble_action
            33: config_emotion_template_action
            34: config_sit_or_stand_action
            35: config_play_effect_action
            36: config_teleport_to_action
            37: config_set_animator_action
            38: config_play_post_effect_action
            39: config_play_frame_face_animation_action
            40: config_hide_widget_pet
            41: config_local_gadget_op
            _: aux_types::error
  ks__disp__config_lc_base_intee:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_lc_base_intee
            1: config_lc_gadget_intee
            _: aux_types::error
  ks__disp__indicator_condition:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: indicator_condition
            1: indicator_condition_gadget_state
            2: indicator_condition_allow_interact
            3: indicator_condition_dummy_point_distance
            4: indicator_condition_avatar_distance
            5: indicator_condition_killed
            _: aux_types::error
  ks__disp__config_l_base_mark:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_l_base_mark
            1: config_l_map_mark
            _: aux_types::error
  ks__disp__config_v_base_mark:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_v_base_mark
            1: config_v_map_mark
            2: config_v_custom_map_mark
            _: aux_types::error
  ks__disp__config_move:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_move
            1: config_simple_move
            2: config_rigidbody_move
            3: config_vehicle_move
            4: config_animator_move
            5: config_platform_move
            6: config_scene_prop_animator_move
            7: config_windmill_move
            8: config_bullet_move
            9: config_follow_move
            10: config_boat_move
            11: config_skiff_move
            12: config_npc_move
            13: config_liner_bullet_move
            14: config_animation_bullet_move
            15: config_surround_bullet_move
            16: config_pinball_bullet_move
            17: config_parabola_bullet_move
            18: config_fishing_aim_parabola_bullet_move
            19: config_track_bullet_move
            20: config_itano_circus_bullet_move
            21: config_liner_parabola_bullet_move
            _: aux_types::error
  ks__disp__config_move_correction:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_move_correction
            1: config_parabola_bullet_move_correction
            _: aux_types::error
  ks__disp__config_bullet_move_angle:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_bullet_move_angle
            1: config_bullet_move_angle_by_velocity
            2: config_bullet_move_angle_rotating
            _: aux_types::error
  ks__disp__config_music_condition:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_music_condition
            1: config_music_true_condition
            2: config_music_negative_condition
            3: config_music_binary_condition
            4: config_music_parameter_condition
            5: config_music_conjunctive_condition
            6: config_music_disjunctive_condition
            7: config_music_int32condition
            8: config_music_u_int32condition
            9: config_music_u_int32multi_condition
            10: config_music_single_condition
            11: config_music_double_condition
            12: config_music_boolean_condition
            13: config_music_string_condition
            14: config_music_u_int32list_condition
            15: config_music_int32equality_condition
            16: config_music_int32inequality_condition
            17: config_music_int32greater_than_condition
            18: config_music_int32less_than_condition
            19: config_music_int32no_greater_than_condition
            20: config_music_int32no_less_than_condition
            21: config_music_u_int32equality_condition
            22: config_music_u_int32inequality_condition
            23: config_music_u_int32greater_than_condition
            24: config_music_u_int32less_than_condition
            25: config_music_u_int32no_greater_than_condition
            26: config_music_u_int32no_less_than_condition
            27: config_music_single_equality_condition
            28: config_music_single_inequality_condition
            29: config_music_single_greater_than_condition
            30: config_music_single_less_than_condition
            31: config_music_single_no_greater_than_condition
            32: config_music_single_no_less_than_condition
            33: config_music_double_equality_condition
            34: config_music_double_inequality_condition
            35: config_music_double_greater_than_condition
            36: config_music_double_less_than_condition
            37: config_music_double_no_greater_than_condition
            38: config_music_double_no_less_than_condition
            39: config_music_string_equality_condition
            40: config_music_string_containment_condition
            41: config_music_u_int32list_emptiness_condition
            42: config_music_u_int32list_member_condition
            43: config_music_u_int32list_multi_member_condition
            44: config_music_u_int32list_presence_condition
            45: config_music_u_int32list_absence_condition
            46: config_music_u_int32list_all_presence_condition
            47: config_music_u_int32list_none_presence_condition
            48: config_music_u_int32list_partial_presence_condition
            _: aux_types::error
  ks__disp__config_music_stimulus_handler:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_music_stimulus_handler
            1: config_music_parameterized_stimulus_handler
            2: config_music_int_stimulus_handler
            3: config_music_u_int_stimulus_handler
            4: config_music_float_stimulus_handler
            5: config_music_string_stimulus_handler
            6: config_music_multi_value_parameterized_stimulus_handler
            7: config_music_u_int_multi_value_stimulus_handler
            8: config_music_string_multi_value_stimulus_handler
            9: config_music_u_int_presence_stimulus_handler
            10: config_music_u_int_absence_stimulus_handler
            11: config_music_string_presence_stimulus_handler
            12: config_music_string_absence_stimulus_handler
            _: aux_types::error
  ks__disp__config_level_npc_born_pos:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_level_npc_born_pos
            1: config_level_npc_born_pos_no_group
            _: aux_types::error
  ks__disp__config_qte_step_base_cond:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_qte_step_base_cond
            1: config_qte_step_power_bar_cond
            _: aux_types::error
  ks__disp__config_qte_step_base_action:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_qte_step_base_action
            1: config_qte_step_power_bar_action
            2: config_qte_step_play_audio_action
            3: config_qte_step_base_inter_action
            4: config_qte_step_camera_move_action
            _: aux_types::error
  ks__disp__config_qte_step_base_component:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_qte_step_base_component
            1: config_qte_step_button_component
            2: config_qte_step_power_bar_component
            _: aux_types::error
  ks__disp__config_record_actor_base:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_record_actor_base
            1: config_record_entity
            2: config_record_effect
            _: aux_types::error
  ks__disp__config_scene_point:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_scene_point
            1: scene_trans_point
            2: dungeon_exit
            3: dungeon_way_point
            4: dungeon_slip_revive_point
            5: dungeon_quit_point
            6: dungeon_reward_point
            7: personal_scene_jump_point
            8: scene_building_point
            9: scene_vehicle_summon_point
            10: config_force_field
            11: config_local_entity
            12: config_loading_door
            13: virtual_trans_point
            14: dungeon_entry
            15: config_const_force_field
            16: config_rise_field
            17: config_airflow_field
            18: config_speedup_field
            19: config_light_core
            20: config_fire_grass_airflow_field
            21: config_cannon_field
            22: config_windmill
            23: config_local_trigger
            _: aux_types::error
  ks__disp__config_base_shape:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_base_shape
            1: config_shape_circle
            2: config_shape_rect
            3: config_shape_sector
            4: config_shape_polygon
            5: config_shape_sphere
            _: aux_types::error
  ks__disp__template_param:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: template_param
            1: template_param_float
            2: template_param_int32
            3: template_param_string
            _: aux_types::error
  ks__disp__config_skin:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_skin
            1: config_monster_skin
            _: aux_types::error
  ks__disp__config_base_state_id_info:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_base_state_id_info
            1: config_normal_state_id_info
            2: config_avatar_state_id_info
            3: config_monster_state_id_info
            4: config_npc_state_id_info
            _: aux_types::error
  ks__disp__config_base_state_layer:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_base_state_layer
            1: config_normal_state_layer
            _: aux_types::error
  ks__disp__config_talent_mixin:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_talent_mixin
            1: add_ability
            2: modify_ability
            3: unlock_talent_param
            4: unlock_controller_conditions
            5: modify_skill_cd
            6: modify_skill_cost
            7: modify_skill_point
            8: add_talent_extra_level
            _: aux_types::error
  ks__disp__config_dialog_group:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_dialog_group
            1: config_free_dialog_group
            2: config_narrator_dialog_group
            3: config_blossom_dialog_group
            4: config_activity_dialog_group
            5: config_coop_dialog_group
            6: config_gadget_dialog_group
            _: aux_types::error
  ks__disp__config_base_input_action:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_base_input_action
            1: config_compound_input_action
            _: aux_types::error
  ks__disp__context_condition:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: context_condition
            1: context_condition_and
            2: context_condition_or
            3: context_condition_not
            4: context_condition_quest_state
            5: context_condition_main_quest_state
            6: context_condition_main_quest_visible
            7: context_condition_chapter_quest_state
            8: context_condition_chapter_quest_visible
            9: context_condition_quest_global_var
            _: aux_types::error
  ks__disp__context_action:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: context_action
            1: context_action_execute_all
            2: context_action_select_monster_mark
            3: context_action_select_main_quest
            4: context_action_select_scene_mark
            5: context_action_select_legend_quest
            6: context_action_select_chapter_ongoing_main_quest
            7: context_action_set_text
            8: context_action_set_text_with_main_quest_name
            9: context_action_set_active
            10: context_action_set_animator_trigger
            11: context_action_report_activity_buried_point
            _: aux_types::error
  ks__disp__config_vod_player:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_vod_player
            1: config_live_player
            _: aux_types::error
  ks__disp__config_base_widget:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_base_widget
            1: config_widget_anchor_point
            2: config_widget_bonfire
            3: config_widget_condense_resin
            4: config_widget_lunch_box
            5: config_widget_oneoff_gather_point_detector
            6: config_widget_client_detector
            7: config_widget_client_collector
            8: config_widget_attach_avatar
            9: config_widget_treasure_map_detector
            10: config_widget_gadget_builder
            11: config_widget_take_photo
            12: config_widget_blessing_camera
            13: config_widget_miracle_ring
            14: config_widget_water_sprite
            15: config_widget_water_sprite_toy
            16: config_widget_ability_group_generator
            17: config_widget_open_page
            18: config_widget_use_attach_ability_group_toy
            19: config_widget_use_item_toy
            20: config_widget_add_buff_toy
            _: aux_types::error
  ks__disp__config_base_widget_toy:
    seq:
      - id: type_code
        type: aux_types::vlq_base128_le_u
      - id: data
        type:
          switch-on: type_code.value
          cases:
            0: config_base_widget_toy
            1: config_widget_toy_anchor_point
            2: config_widget_toy_bonfire
            3: config_widget_toy_lunch_box
            4: config_widget_toy_clint_detector
            5: config_widget_toy_oneoff_gather_point_detector
            6: config_widget_toy_clint_collector
            7: config_widget_toy_treasure_map_detector
            8: config_widget_toy_blessing_camera
            9: config_widget_toy_gadget_builder
            10: config_widget_toy_miracle_ring
            11: config_widget_toy_open_page
            12: config_widget_toy_water_sprite
            13: config_widget_toy_take_photo
            14: config_widget_toy_feather
            15: config_widget_toy_create_gadget_base
            16: config_widget_add_buff
            17: config_widget_toy_camera
            18: config_widget_toy_ability_group_generator
            19: config_widget_use_attach_ability_group
            20: config_widget_use_attach_ability_trigger
            21: config_widget_toy_adepti_abode
            22: config_widget_dig_scanner
            _: aux_types::error
  ks__array_of__aux_types__vlq_base128_le_u__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: aux_types::vlq_base128_le_u
        repeat: expr
        repeat-expr: length.value
  ks__array_of__f4__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: f4
        repeat: expr
        repeat-expr: length.value
  buoyant_combat_level_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: gallery_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gallery_id
      - id: group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_group_id
      - id: day_index
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_day_index
      - id: reward_preview
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_preview
      - id: level_rule
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level_rule
      - id: level_rule_brief
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level_rule_brief
      - id: watcher_id
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_watcher_id
      - id: watcher_score
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_watcher_score
      - id: recommend_level
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_recommend_level
      - id: icon_position
        type: ks__array_of__f4__length_u
        if: ks__has_field_icon_position
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_gallery_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_group_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_day_index: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_reward_preview: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_level_rule: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_level_rule_brief: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_watcher_id: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_watcher_score: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_recommend_level: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_icon_position: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
  ks__enum__luna_rite_region_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: luna_rite_region_type
  luna_rite_searching_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: region_type
        type: ks__enum__luna_rite_region_type
        if: ks__has_field_region_type
      - id: open_day
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_open_day
      - id: progress_watcher_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_progress_watcher_id
      - id: watcher_id
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_watcher_id
      - id: region_center
        type: ks__array_of__f4__length_u
        if: ks__has_field_region_center
      - id: region_name_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_region_name_hash
      - id: region_name_hash_pre
        type: s1
        if: ks__has_field_region_name_hash
      - id: region_radius
        type: f4
        if: ks__has_field_region_radius
      - id: chest_cond
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_chest_cond
      - id: rune_cond
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_rune_cond
      - id: chest_mark_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_chest_mark_num
      - id: rune_mark_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_rune_mark_num
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_region_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_open_day: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_progress_watcher_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_watcher_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_region_center: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_region_name_hash: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_region_radius: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_chest_cond: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_rune_cond: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_chest_mark_num: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_rune_mark_num: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
  luna_rite_battle_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: region_type
        type: ks__enum__luna_rite_region_type
        if: ks__has_field_region_type
      - id: consecrate_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_consecrate_id
      - id: group_bundle_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_group_bundle_id
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
      - id: challenge_icon
        type: aux_types::string
        if: ks__has_field_challenge_icon
      - id: monster_info
        type: aux_types::string
        if: ks__has_field_monster_info
      - id: elite_monster_info
        type: aux_types::string
        if: ks__has_field_elite_monster_info
      - id: ruler
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_ruler
      - id: recipe_source
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_recipe_source
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_region_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_consecrate_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_group_bundle_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_reward_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_challenge_icon: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_monster_info: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_elite_monster_info: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_ruler: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_recipe_source: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
  id_count_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_count
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_count: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__id_count_config__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: id_count_config
        repeat: expr
        repeat-expr: length.value
  activity_salesman_daily_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: daily_config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_daily_config_id
      - id: cost_item_list
        type: ks__array_of__id_count_config__length_s
        if: ks__has_field_cost_item_list
      - id: clus_pos
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_clus_pos
      - id: npc_talk
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_npc_talk
      - id: intro
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_intro
      - id: trace_position
        type: aux_types::string
        if: ks__has_field_trace_position
    instances:
      ks__has_field_daily_config_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_cost_item_list: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_clus_pos: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_npc_talk: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_intro: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_trace_position: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
  ks__enum__avatar_use_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: avatar_use_type
  ks__enum__body_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: body_type
  ks__enum__quality_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: quality_type
  ks__enum__weapon_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: weapon_type
  ks__enum__avatar_identity_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: avatar_identity_type
  ks__enum__fight_prop_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: fight_prop_type
  ks__enum__grow_curve_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: grow_curve_type
  fight_prop_grow_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: type
        type: ks__enum__fight_prop_type
        if: ks__has_field_type
      - id: grow_curve
        type: ks__enum__grow_curve_type
        if: ks__has_field_grow_curve
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_grow_curve: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__fight_prop_grow_config__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: fight_prop_grow_config
        repeat: expr
        repeat-expr: length.value
  avatar_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: use_type
        type: ks__enum__avatar_use_type
        if: ks__has_field_use_type
      - id: body_type
        type: ks__enum__body_type
        if: ks__has_field_body_type
      - id: script_data_path_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_script_data_path_hash
      - id: script_data_path_hash_pre
        type: s1
        if: ks__has_field_script_data_path_hash
      - id: icon_name
        type: aux_types::string
        if: ks__has_field_icon_name
      - id: side_icon_name
        type: aux_types::string
        if: ks__has_field_side_icon_name
      - id: quality_type
        type: ks__enum__quality_type
        if: ks__has_field_quality_type
      - id: charge_efficiency
        type: f4
        if: ks__has_field_charge_efficiency
      - id: heal_add
        type: f4
        if: ks__has_field_heal_add
      - id: healed_add
        type: f4
        if: ks__has_field_healed_add
      - id: combat_config_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_combat_config_hash
      - id: combat_config_hash_pre
        type: s1
        if: ks__has_field_combat_config_hash
      - id: is_range_attack
        type: u1
        if: ks__has_field_is_range_attack
      - id: initial_weapon
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_initial_weapon
      - id: weapon_type
        type: ks__enum__weapon_type
        if: ks__has_field_weapon_type
      - id: manekin_path_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_manekin_path_hash
      - id: manekin_path_hash_pre
        type: s1
        if: ks__has_field_manekin_path_hash
      - id: image_name
        type: aux_types::string
        if: ks__has_field_image_name
      - id: gacha_card_name_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gacha_card_name_hash
      - id: gacha_card_name_hash_pre
        type: s1
        if: ks__has_field_gacha_card_name_hash
      - id: gacha_image_name_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gacha_image_name_hash
      - id: gacha_image_name_hash_pre
        type: s1
        if: ks__has_field_gacha_image_name_hash
      - id: coop_pic_name_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_coop_pic_name_hash
      - id: coop_pic_name_hash_pre
        type: s1
        if: ks__has_field_coop_pic_name_hash
      - id: cutscene_show
        type: aux_types::string
        if: ks__has_field_cutscene_show
      - id: skill_depot_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_skill_depot_id
      - id: stamina_recover_speed
        type: f4
        if: ks__has_field_stamina_recover_speed
      - id: cand_skill_depot_ids
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_cand_skill_depot_ids
      - id: manekin_json_config_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_manekin_json_config_hash
      - id: manekin_json_config_hash_pre
        type: s1
        if: ks__has_field_manekin_json_config_hash
      - id: manekin_motion_config
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_manekin_motion_config
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: avatar_identity_type
        type: ks__enum__avatar_identity_type
        if: ks__has_field_avatar_identity_type
      - id: avatar_promote_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_avatar_promote_id
      - id: avatar_promote_reward_level_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_avatar_promote_reward_level_list
      - id: avatar_promote_reward_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_avatar_promote_reward_id_list
      - id: feature_tag_group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_feature_tag_group_id
      - id: info_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_info_desc
      - id: hp_base
        type: f4
        if: ks__has_field_hp_base
      - id: attack_base
        type: f4
        if: ks__has_field_attack_base
      - id: defense_base
        type: f4
        if: ks__has_field_defense_base
      - id: critical
        type: f4
        if: ks__has_field_critical
      - id: anti_critical
        type: f4
        if: ks__has_field_anti_critical
      - id: critical_hurt
        type: f4
        if: ks__has_field_critical_hurt
      - id: fire_sub_hurt
        type: f4
        if: ks__has_field_fire_sub_hurt
      - id: grass_sub_hurt
        type: f4
        if: ks__has_field_grass_sub_hurt
      - id: water_sub_hurt
        type: f4
        if: ks__has_field_water_sub_hurt
      - id: elec_sub_hurt
        type: f4
        if: ks__has_field_elec_sub_hurt
      - id: wind_sub_hurt
        type: f4
        if: ks__has_field_wind_sub_hurt
      - id: ice_sub_hurt
        type: f4
        if: ks__has_field_ice_sub_hurt
      - id: rock_sub_hurt
        type: f4
        if: ks__has_field_rock_sub_hurt
      - id: fire_add_hurt
        type: f4
        if: ks__has_field_fire_add_hurt
      - id: grass_add_hurt
        type: f4
        if: ks__has_field_grass_add_hurt
      - id: water_add_hurt
        type: f4
        if: ks__has_field_water_add_hurt
      - id: elec_add_hurt
        type: f4
        if: ks__has_field_elec_add_hurt
      - id: wind_add_hurt
        type: f4
        if: ks__has_field_wind_add_hurt
      - id: ice_add_hurt
        type: f4
        if: ks__has_field_ice_add_hurt
      - id: rock_add_hurt
        type: f4
        if: ks__has_field_rock_add_hurt
      - id: prop_grow_curves
        type: ks__array_of__fight_prop_grow_config__length_s
        if: ks__has_field_prop_grow_curves
      - id: element_mastery
        type: f4
        if: ks__has_field_element_mastery
      - id: physical_sub_hurt
        type: f4
        if: ks__has_field_physical_sub_hurt
      - id: physical_add_hurt
        type: f4
        if: ks__has_field_physical_add_hurt
      - id: prefab_path_ragdoll_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_prefab_path_ragdoll_hash
      - id: prefab_path_ragdoll_hash_pre
        type: s1
        if: ks__has_field_prefab_path_ragdoll_hash
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: prefab_path_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_prefab_path_hash
      - id: prefab_path_hash_pre
        type: s1
        if: ks__has_field_prefab_path_hash
      - id: prefab_path_remote_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_prefab_path_remote_hash
      - id: prefab_path_remote_hash_pre
        type: s1
        if: ks__has_field_prefab_path_remote_hash
      - id: controller_path_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_controller_path_hash
      - id: controller_path_hash_pre
        type: s1
        if: ks__has_field_controller_path_hash
      - id: controller_path_remote_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_controller_path_remote_hash
      - id: controller_path_remote_hash_pre
        type: s1
        if: ks__has_field_controller_path_remote_hash
      - id: camp_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_camp_id
      - id: lod_pattern_name
        type: aux_types::string
        if: ks__has_field_lod_pattern_name
    instances:
      ks__has_field_use_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_body_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_script_data_path_hash: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_icon_name: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_side_icon_name: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_quality_type: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_charge_efficiency: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_heal_add: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_healed_add: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_combat_config_hash: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_is_range_attack: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_initial_weapon: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_weapon_type: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_manekin_path_hash: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_image_name: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_gacha_card_name_hash: # Field №15
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
      ks__has_field_gacha_image_name_hash: # Field №16
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000001) != 0)
      ks__has_field_coop_pic_name_hash: # Field №17
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000010) != 0)
      ks__has_field_cutscene_show: # Field №18
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000100) != 0)
      ks__has_field_skill_depot_id: # Field №19
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00001000) != 0)
      ks__has_field_stamina_recover_speed: # Field №20
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00010000) != 0)
      ks__has_field_cand_skill_depot_ids: # Field №21
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00100000) != 0)
      ks__has_field_manekin_json_config_hash: # Field №22
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b01000000) != 0)
      ks__has_field_manekin_motion_config: # Field №23
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b10000000) != 0)
      ks__has_field_desc: # Field №24
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000001) != 0)
      ks__has_field_avatar_identity_type: # Field №25
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000010) != 0)
      ks__has_field_avatar_promote_id: # Field №26
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000100) != 0)
      ks__has_field_avatar_promote_reward_level_list: # Field №27
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00001000) != 0)
      ks__has_field_avatar_promote_reward_id_list: # Field №28
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00010000) != 0)
      ks__has_field_feature_tag_group_id: # Field №29
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00100000) != 0)
      ks__has_field_info_desc: # Field №30
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b01000000) != 0)
      ks__has_field_hp_base: # Field №31
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b10000000) != 0)
      ks__has_field_attack_base: # Field №32
        value: (ks__bit_field.length.value >= (0b00000100 + 1)) and ((ks__bit_field.bitfield[0b00000100] & 0b00000001) != 0)
      ks__has_field_defense_base: # Field №33
        value: (ks__bit_field.length.value >= (0b00000100 + 1)) and ((ks__bit_field.bitfield[0b00000100] & 0b00000010) != 0)
      ks__has_field_critical: # Field №34
        value: (ks__bit_field.length.value >= (0b00000100 + 1)) and ((ks__bit_field.bitfield[0b00000100] & 0b00000100) != 0)
      ks__has_field_anti_critical: # Field №35
        value: (ks__bit_field.length.value >= (0b00000100 + 1)) and ((ks__bit_field.bitfield[0b00000100] & 0b00001000) != 0)
      ks__has_field_critical_hurt: # Field №36
        value: (ks__bit_field.length.value >= (0b00000100 + 1)) and ((ks__bit_field.bitfield[0b00000100] & 0b00010000) != 0)
      ks__has_field_fire_sub_hurt: # Field №37
        value: (ks__bit_field.length.value >= (0b00000100 + 1)) and ((ks__bit_field.bitfield[0b00000100] & 0b00100000) != 0)
      ks__has_field_grass_sub_hurt: # Field №38
        value: (ks__bit_field.length.value >= (0b00000100 + 1)) and ((ks__bit_field.bitfield[0b00000100] & 0b01000000) != 0)
      ks__has_field_water_sub_hurt: # Field №39
        value: (ks__bit_field.length.value >= (0b00000100 + 1)) and ((ks__bit_field.bitfield[0b00000100] & 0b10000000) != 0)
      ks__has_field_elec_sub_hurt: # Field №40
        value: (ks__bit_field.length.value >= (0b00000101 + 1)) and ((ks__bit_field.bitfield[0b00000101] & 0b00000001) != 0)
      ks__has_field_wind_sub_hurt: # Field №41
        value: (ks__bit_field.length.value >= (0b00000101 + 1)) and ((ks__bit_field.bitfield[0b00000101] & 0b00000010) != 0)
      ks__has_field_ice_sub_hurt: # Field №42
        value: (ks__bit_field.length.value >= (0b00000101 + 1)) and ((ks__bit_field.bitfield[0b00000101] & 0b00000100) != 0)
      ks__has_field_rock_sub_hurt: # Field №43
        value: (ks__bit_field.length.value >= (0b00000101 + 1)) and ((ks__bit_field.bitfield[0b00000101] & 0b00001000) != 0)
      ks__has_field_fire_add_hurt: # Field №44
        value: (ks__bit_field.length.value >= (0b00000101 + 1)) and ((ks__bit_field.bitfield[0b00000101] & 0b00010000) != 0)
      ks__has_field_grass_add_hurt: # Field №45
        value: (ks__bit_field.length.value >= (0b00000101 + 1)) and ((ks__bit_field.bitfield[0b00000101] & 0b00100000) != 0)
      ks__has_field_water_add_hurt: # Field №46
        value: (ks__bit_field.length.value >= (0b00000101 + 1)) and ((ks__bit_field.bitfield[0b00000101] & 0b01000000) != 0)
      ks__has_field_elec_add_hurt: # Field №47
        value: (ks__bit_field.length.value >= (0b00000101 + 1)) and ((ks__bit_field.bitfield[0b00000101] & 0b10000000) != 0)
      ks__has_field_wind_add_hurt: # Field №48
        value: (ks__bit_field.length.value >= (0b00000110 + 1)) and ((ks__bit_field.bitfield[0b00000110] & 0b00000001) != 0)
      ks__has_field_ice_add_hurt: # Field №49
        value: (ks__bit_field.length.value >= (0b00000110 + 1)) and ((ks__bit_field.bitfield[0b00000110] & 0b00000010) != 0)
      ks__has_field_rock_add_hurt: # Field №50
        value: (ks__bit_field.length.value >= (0b00000110 + 1)) and ((ks__bit_field.bitfield[0b00000110] & 0b00000100) != 0)
      ks__has_field_prop_grow_curves: # Field №51
        value: (ks__bit_field.length.value >= (0b00000110 + 1)) and ((ks__bit_field.bitfield[0b00000110] & 0b00001000) != 0)
      ks__has_field_element_mastery: # Field №52
        value: (ks__bit_field.length.value >= (0b00000110 + 1)) and ((ks__bit_field.bitfield[0b00000110] & 0b00010000) != 0)
      ks__has_field_physical_sub_hurt: # Field №53
        value: (ks__bit_field.length.value >= (0b00000110 + 1)) and ((ks__bit_field.bitfield[0b00000110] & 0b00100000) != 0)
      ks__has_field_physical_add_hurt: # Field №54
        value: (ks__bit_field.length.value >= (0b00000110 + 1)) and ((ks__bit_field.bitfield[0b00000110] & 0b01000000) != 0)
      ks__has_field_prefab_path_ragdoll_hash: # Field №55
        value: (ks__bit_field.length.value >= (0b00000110 + 1)) and ((ks__bit_field.bitfield[0b00000110] & 0b10000000) != 0)
      ks__has_field_id: # Field №56
        value: (ks__bit_field.length.value >= (0b00000111 + 1)) and ((ks__bit_field.bitfield[0b00000111] & 0b00000001) != 0)
      ks__has_field_name: # Field №57
        value: (ks__bit_field.length.value >= (0b00000111 + 1)) and ((ks__bit_field.bitfield[0b00000111] & 0b00000010) != 0)
      ks__has_field_prefab_path_hash: # Field №58
        value: (ks__bit_field.length.value >= (0b00000111 + 1)) and ((ks__bit_field.bitfield[0b00000111] & 0b00000100) != 0)
      ks__has_field_prefab_path_remote_hash: # Field №59
        value: (ks__bit_field.length.value >= (0b00000111 + 1)) and ((ks__bit_field.bitfield[0b00000111] & 0b00001000) != 0)
      ks__has_field_controller_path_hash: # Field №60
        value: (ks__bit_field.length.value >= (0b00000111 + 1)) and ((ks__bit_field.bitfield[0b00000111] & 0b00010000) != 0)
      ks__has_field_controller_path_remote_hash: # Field №61
        value: (ks__bit_field.length.value >= (0b00000111 + 1)) and ((ks__bit_field.bitfield[0b00000111] & 0b00100000) != 0)
      ks__has_field_camp_id: # Field №62
        value: (ks__bit_field.length.value >= (0b00000111 + 1)) and ((ks__bit_field.bitfield[0b00000111] & 0b01000000) != 0)
      ks__has_field_lod_pattern_name: # Field №63
        value: (ks__bit_field.length.value >= (0b00000111 + 1)) and ((ks__bit_field.bitfield[0b00000111] & 0b10000000) != 0)
  camp_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: trophic_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_trophic_level
      - id: enemy_camp_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_enemy_camp_list
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_trophic_level: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_enemy_camp_list: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  prop_val_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: prop_type
        type: ks__enum__fight_prop_type
        if: ks__has_field_prop_type
      - id: value
        type: f4
        if: ks__has_field_value
    instances:
      ks__has_field_prop_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_value: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__prop_val_config__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: prop_val_config
        repeat: expr
        repeat-expr: length.value
  avatar_talent_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: talent_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_talent_id
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: icon
        type: aux_types::string
        if: ks__has_field_icon
      - id: prev_talent
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_prev_talent
      - id: main_cost_item_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_main_cost_item_id
      - id: main_cost_item_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_main_cost_item_count
      - id: vice_cost_item_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_vice_cost_item_id
      - id: vice_cost_item_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_vice_cost_item_count
      - id: open_config
        type: aux_types::string
        if: ks__has_field_open_config
      - id: add_props
        type: ks__array_of__prop_val_config__length_s
        if: ks__has_field_add_props
      - id: param_list
        type: ks__array_of__f4__length_u
        if: ks__has_field_param_list
    instances:
      ks__has_field_talent_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_desc: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_icon: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_prev_talent: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_main_cost_item_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_main_cost_item_count: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_vice_cost_item_id: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_vice_cost_item_count: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_open_config: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_add_props: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_param_list: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
  ks__enum__talent_filter_cond:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: talent_filter_cond
  ks__array_of__ks__enum__talent_filter_cond__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: ks__enum__talent_filter_cond
        repeat: expr
        repeat-expr: length.value
  ks__enum__proud_life_effect_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: proud_life_effect_type
  ks__array_of__aux_types__string__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: aux_types::string
        repeat: expr
        repeat-expr: length.value
  proud_skill_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: proud_skill_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_proud_skill_id
      - id: proud_skill_group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_proud_skill_group_id
      - id: level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level
      - id: proud_skill_type
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_proud_skill_type
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: unlock_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_unlock_desc
      - id: icon
        type: aux_types::string
        if: ks__has_field_icon
      - id: coin_cost
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_coin_cost
      - id: cost_items
        type: ks__array_of__id_count_config__length_s
        if: ks__has_field_cost_items
      - id: filter_conds
        type: ks__array_of__ks__enum__talent_filter_cond__length_s
        if: ks__has_field_filter_conds
      - id: break_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_break_level
      - id: param_desc_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_param_desc_list
      - id: life_effect_type
        type: ks__enum__proud_life_effect_type
        if: ks__has_field_life_effect_type
      - id: life_effect_params
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_life_effect_params
      - id: effective_for_team
        type: s1
        if: ks__has_field_effective_for_team
      - id: is_hide_life_proud_skill
        type: u1
        if: ks__has_field_is_hide_life_proud_skill
      - id: open_config
        type: aux_types::string
        if: ks__has_field_open_config
      - id: add_props
        type: ks__array_of__prop_val_config__length_s
        if: ks__has_field_add_props
      - id: param_list
        type: ks__array_of__f4__length_u
        if: ks__has_field_param_list
    instances:
      ks__has_field_proud_skill_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_proud_skill_group_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_level: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_proud_skill_type: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_name: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_desc: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_unlock_desc: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_icon: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_coin_cost: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_cost_items: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_filter_conds: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_break_level: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_param_desc_list: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_life_effect_type: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_life_effect_params: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_effective_for_team: # Field №15
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
      ks__has_field_is_hide_life_proud_skill: # Field №16
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000001) != 0)
      ks__has_field_open_config: # Field №17
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000010) != 0)
      ks__has_field_add_props: # Field №18
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000100) != 0)
      ks__has_field_param_list: # Field №19
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00001000) != 0)
  equip_affix_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: affix_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_affix_id
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: open_config
        type: aux_types::string
        if: ks__has_field_open_config
      - id: add_props
        type: ks__array_of__prop_val_config__length_s
        if: ks__has_field_add_props
      - id: param_list
        type: ks__array_of__f4__length_u
        if: ks__has_field_param_list
    instances:
      ks__has_field_affix_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_level: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_name: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_desc: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_open_config: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_add_props: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_param_list: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
  ks__enum__const_value_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: const_value_type
  const_value_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: name
        type: ks__enum__const_value_type
        if: ks__has_field_name
      - id: value
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_value
    instances:
      ks__has_field_name: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_value: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__enum__cook_food_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: cook_food_type
  ks__enum__cook_method_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: cook_method_type
  cook_recipe_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: rank_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_rank_level
      - id: icon
        type: aux_types::string
        if: ks__has_field_icon
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: effect_desc
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_effect_desc
      - id: food_type
        type: ks__enum__cook_food_type
        if: ks__has_field_food_type
      - id: cook_method
        type: ks__enum__cook_method_type
        if: ks__has_field_cook_method
      - id: is_default_unlocked
        type: u1
        if: ks__has_field_is_default_unlocked
      - id: max_proficiency
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_proficiency
      - id: quality_output_vec
        type: ks__array_of__id_count_config__length_s
        if: ks__has_field_quality_output_vec
      - id: input_vec
        type: ks__array_of__id_count_config__length_s
        if: ks__has_field_input_vec
      - id: qte_param
        type: aux_types::string
        if: ks__has_field_qte_param
      - id: qte_quality_weight_vec
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_qte_quality_weight_vec
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_rank_level: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_icon: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_desc: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_effect_desc: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_food_type: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_cook_method: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_is_default_unlocked: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_max_proficiency: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_quality_output_vec: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_input_vec: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_qte_param: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_qte_quality_weight_vec: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
  ks__enum__compound_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: compound_type
  compound_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_group_id
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: rank_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_rank_level
      - id: type
        type: ks__enum__compound_type
        if: ks__has_field_type
      - id: is_default_unlocked
        type: u1
        if: ks__has_field_is_default_unlocked
      - id: cost_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cost_time
      - id: queue_size
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_queue_size
      - id: input_vec
        type: ks__array_of__id_count_config__length_s
        if: ks__has_field_input_vec
      - id: output_vec
        type: ks__array_of__id_count_config__length_s
        if: ks__has_field_output_vec
      - id: icon
        type: aux_types::string
        if: ks__has_field_icon
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: count_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_count_desc
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_group_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_name: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_rank_level: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_type: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_is_default_unlocked: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_cost_time: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_queue_size: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_input_vec: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_output_vec: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_icon: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_desc: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_count_desc: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
  ks__enum__daily_task_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: daily_task_type
  ks__enum__daily_task_finish_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: daily_task_finish_type
  daily_task_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: city_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_city_id
      - id: pool_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_pool_id
      - id: type
        type: ks__enum__daily_task_type
        if: ks__has_field_type
      - id: rarity
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_rarity
      - id: quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_quest_id
      - id: old_group_vec
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_old_group_vec
      - id: new_group_vec
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_new_group_vec
      - id: finish_type
        type: ks__enum__daily_task_finish_type
        if: ks__has_field_finish_type
      - id: finish_param1
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_finish_param1
      - id: finish_param2
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_finish_param2
      - id: finish_progress
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_finish_progress
      - id: task_reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_task_reward_id
      - id: center_position
        type: aux_types::string
        if: ks__has_field_center_position
      - id: enter_distance
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_enter_distance
      - id: exit_distance
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_exit_distance
      - id: title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title
      - id: description
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_description
      - id: target
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_target
      - id: radar_radius
        type: f4
        if: ks__has_field_radar_radius
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_city_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_pool_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_type: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_rarity: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_quest_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_old_group_vec: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_new_group_vec: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_finish_type: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_finish_param1: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_finish_param2: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_finish_progress: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_task_reward_id: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_center_position: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_enter_distance: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_exit_distance: # Field №15
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
      ks__has_field_title: # Field №16
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000001) != 0)
      ks__has_field_description: # Field №17
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000010) != 0)
      ks__has_field_target: # Field №18
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000100) != 0)
      ks__has_field_radar_radius: # Field №19
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00001000) != 0)
  ks__enum__player_die_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: player_die_type
  die_type_tips_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: die_type
        type: ks__enum__player_die_type
        if: ks__has_field_die_type
      - id: monster_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_monster_id
      - id: tips
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_tips
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_die_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_monster_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_tips: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  ks__enum__dungeon_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: dungeon_type
  ks__enum__dungeon_play_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: dungeon_play_type
  ks__enum__involve_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: involve_type
  ks__enum__settle_show_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: settle_show_type
  ks__array_of__ks__enum__settle_show_type__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: ks__enum__settle_show_type
        repeat: expr
        repeat-expr: length.value
  ks__enum__settle_ui_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: settle_ui_type
  ks__enum__element_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: element_type
  ks__array_of__ks__enum__element_type__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__enum__element_type
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__aux_types__vlq_base128_le_u_aux_types__vlq_base128_le_u:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_u
      - id: value
        type: aux_types::vlq_base128_le_u
  ks__dict_of__aux_types__vlq_base128_le_u_aux_types__vlq_base128_le_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_u_aux_types__vlq_base128_le_u
        repeat: expr
        repeat-expr: length.value
  ks__enum__dungeon_state_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: dungeon_state_type
  dungeon_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: display_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_display_name
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: type
        type: ks__enum__dungeon_type
        if: ks__has_field_type
      - id: is_dynamic_level
        type: u1
        if: ks__has_field_is_dynamic_level
      - id: serial_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_serial_id
      - id: play_type
        type: ks__enum__dungeon_play_type
        if: ks__has_field_play_type
      - id: scene_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scene_id
      - id: event_interval
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_event_interval
      - id: involve_type
        type: ks__enum__involve_type
        if: ks__has_field_involve_type
      - id: show_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_show_level
      - id: avatar_limit_type
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_avatar_limit_type
      - id: limit_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_limit_level
      - id: level_revise
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_level_revise
      - id: prev_dungeon_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_prev_dungeon_id
      - id: require_avatar_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_require_avatar_id
      - id: pass_cond
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_pass_cond
      - id: pass_jump_dungeon
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_pass_jump_dungeon
      - id: revive_interval_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_revive_interval_time
      - id: revive_max_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_revive_max_count
      - id: day_enter_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_day_enter_count
      - id: enter_cost_items
        type: ks__array_of__id_count_config__length_s
        if: ks__has_field_enter_cost_items
      - id: first_pass_reward_preview_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_first_pass_reward_preview_id
      - id: pass_reward_preview_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_pass_reward_preview_id
      - id: settle_countdown_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_settle_countdown_time
      - id: fail_settle_countdown_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_fail_settle_countdown_time
      - id: quit_settle_countdown_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_quit_settle_countdown_time
      - id: settle_shows
        type: ks__array_of__ks__enum__settle_show_type__length_s
        if: ks__has_field_settle_shows
      - id: forbidden_restart
        type: u1
        if: ks__has_field_forbidden_restart
      - id: settle_ui_type
        type: ks__enum__settle_ui_type
        if: ks__has_field_settle_ui_type
      - id: statue_cost_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_statue_cost_id
      - id: statue_cost_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_statue_cost_count
      - id: statue_drop
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_statue_drop
      - id: recommend_element_types
        type: ks__array_of__ks__enum__element_type__length_u
        if: ks__has_field_recommend_element_types
      - id: level_config_map
        type: ks__dict_of__aux_types__vlq_base128_le_u_aux_types__vlq_base128_le_u
        if: ks__has_field_level_config_map
      - id: preview_monster_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_preview_monster_list
      - id: gear_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gear_desc
      - id: city_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_city_id
      - id: dont_show_push_tips
        type: u1
        if: ks__has_field_dont_show_push_tips
      - id: entry_pic_path
        type: aux_types::string
        if: ks__has_field_entry_pic_path
      - id: state_type
        type: ks__enum__dungeon_state_type
        if: ks__has_field_state_type
      - id: factor_pic
        type: aux_types::string
        if: ks__has_field_factor_pic
      - id: factor_icon
        type: aux_types::string
        if: ks__has_field_factor_icon
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_display_name: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_desc: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_type: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_is_dynamic_level: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_serial_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_play_type: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_scene_id: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_event_interval: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_involve_type: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_show_level: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_avatar_limit_type: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_limit_level: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_level_revise: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_prev_dungeon_id: # Field №15
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
      ks__has_field_require_avatar_id: # Field №16
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000001) != 0)
      ks__has_field_pass_cond: # Field №17
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000010) != 0)
      ks__has_field_pass_jump_dungeon: # Field №18
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000100) != 0)
      ks__has_field_revive_interval_time: # Field №19
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00001000) != 0)
      ks__has_field_revive_max_count: # Field №20
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00010000) != 0)
      ks__has_field_day_enter_count: # Field №21
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00100000) != 0)
      ks__has_field_enter_cost_items: # Field №22
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b01000000) != 0)
      ks__has_field_first_pass_reward_preview_id: # Field №23
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b10000000) != 0)
      ks__has_field_pass_reward_preview_id: # Field №24
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000001) != 0)
      ks__has_field_settle_countdown_time: # Field №25
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000010) != 0)
      ks__has_field_fail_settle_countdown_time: # Field №26
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000100) != 0)
      ks__has_field_quit_settle_countdown_time: # Field №27
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00001000) != 0)
      ks__has_field_settle_shows: # Field №28
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00010000) != 0)
      ks__has_field_forbidden_restart: # Field №29
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00100000) != 0)
      ks__has_field_settle_ui_type: # Field №30
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b01000000) != 0)
      ks__has_field_statue_cost_id: # Field №31
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b10000000) != 0)
      ks__has_field_statue_cost_count: # Field №32
        value: (ks__bit_field.length.value >= (0b00000100 + 1)) and ((ks__bit_field.bitfield[0b00000100] & 0b00000001) != 0)
      ks__has_field_statue_drop: # Field №33
        value: (ks__bit_field.length.value >= (0b00000100 + 1)) and ((ks__bit_field.bitfield[0b00000100] & 0b00000010) != 0)
      ks__has_field_recommend_element_types: # Field №34
        value: (ks__bit_field.length.value >= (0b00000100 + 1)) and ((ks__bit_field.bitfield[0b00000100] & 0b00000100) != 0)
      ks__has_field_level_config_map: # Field №35
        value: (ks__bit_field.length.value >= (0b00000100 + 1)) and ((ks__bit_field.bitfield[0b00000100] & 0b00001000) != 0)
      ks__has_field_preview_monster_list: # Field №36
        value: (ks__bit_field.length.value >= (0b00000100 + 1)) and ((ks__bit_field.bitfield[0b00000100] & 0b00010000) != 0)
      ks__has_field_gear_desc: # Field №37
        value: (ks__bit_field.length.value >= (0b00000100 + 1)) and ((ks__bit_field.bitfield[0b00000100] & 0b00100000) != 0)
      ks__has_field_city_id: # Field №38
        value: (ks__bit_field.length.value >= (0b00000100 + 1)) and ((ks__bit_field.bitfield[0b00000100] & 0b01000000) != 0)
      ks__has_field_dont_show_push_tips: # Field №39
        value: (ks__bit_field.length.value >= (0b00000100 + 1)) and ((ks__bit_field.bitfield[0b00000100] & 0b10000000) != 0)
      ks__has_field_entry_pic_path: # Field №40
        value: (ks__bit_field.length.value >= (0b00000101 + 1)) and ((ks__bit_field.bitfield[0b00000101] & 0b00000001) != 0)
      ks__has_field_state_type: # Field №41
        value: (ks__bit_field.length.value >= (0b00000101 + 1)) and ((ks__bit_field.bitfield[0b00000101] & 0b00000010) != 0)
      ks__has_field_factor_pic: # Field №42
        value: (ks__bit_field.length.value >= (0b00000101 + 1)) and ((ks__bit_field.bitfield[0b00000101] & 0b00000100) != 0)
      ks__has_field_factor_icon: # Field №43
        value: (ks__bit_field.length.value >= (0b00000101 + 1)) and ((ks__bit_field.bitfield[0b00000101] & 0b00001000) != 0)
  ks__enum__fetter_cond_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: fetter_cond_type
  fetter_condition_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: cond_type
        type: ks__enum__fetter_cond_type
        if: ks__has_field_cond_type
      - id: param_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_param_list
    instances:
      ks__has_field_cond_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_param_list: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__fetter_condition_config__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: fetter_condition_config
        repeat: expr
        repeat-expr: length.value
  fetters_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: type
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_type
      - id: is_hiden
        type: u1
        if: ks__has_field_is_hiden
      - id: tips
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_tips
      - id: voice_title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_voice_title
      - id: voice_file
        type: aux_types::string
        if: ks__has_field_voice_file
      - id: voice_file_text
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_voice_file_text
      - id: voice_title_locked
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_voice_title_locked
      - id: fetter_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_fetter_id
      - id: avatar_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_avatar_id
      - id: open_conds
        type: ks__array_of__fetter_condition_config__length_s
        if: ks__has_field_open_conds
      - id: finish_conds
        type: ks__array_of__fetter_condition_config__length_s
        if: ks__has_field_finish_conds
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_is_hiden: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_tips: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_voice_title: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_voice_file: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_voice_file_text: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_voice_title_locked: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_fetter_id: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_avatar_id: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_open_conds: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_finish_conds: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
  ks__enum__gallery_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: gallery_type
  gallery_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: type
        type: ks__enum__gallery_type
        if: ks__has_field_type
      - id: param
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_param
      - id: is_enable_single_prepare
        type: u1
        if: ks__has_field_is_enable_single_prepare
      - id: single_prepare_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_single_prepare_time
      - id: is_enable_mp_prepare
        type: u1
        if: ks__has_field_is_enable_mp_prepare
      - id: mp_prepare_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mp_prepare_time
      - id: can_interrupt_by_client
        type: u1
        if: ks__has_field_can_interrupt_by_client
      - id: scene_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scene_id
      - id: control_group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_control_group_id
      - id: group_id
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_group_id
      - id: revive_point_group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_revive_point_group_id
      - id: revive_point_config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_revive_point_config_id
      - id: ability_group
        type: aux_types::string
        if: ks__has_field_ability_group
      - id: ability_group_list
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_ability_group_list
      - id: limit_region
        type: aux_types::string
        if: ks__has_field_limit_region
      - id: center_scene_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_center_scene_id
      - id: center_pos_list
        type: ks__array_of__f4__length_u
        if: ks__has_field_center_pos_list
      - id: center_radius
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_center_radius
      - id: duration
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_duration
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: gallery_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gallery_name
      - id: gallery_msg
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gallery_msg
      - id: pic
        type: aux_types::string
        if: ks__has_field_pic
      - id: target
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_target
      - id: start_audio_values
        type: aux_types::string
        if: ks__has_field_start_audio_values
      - id: end_audio_values
        type: aux_types::string
        if: ks__has_field_end_audio_values
      - id: selectable_ability_groups
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_selectable_ability_groups
      - id: team_ability_group_list
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_team_ability_group_list
      - id: selectable_team_ability_group_list
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_selectable_team_ability_group_list
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_param: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_is_enable_single_prepare: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_single_prepare_time: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_is_enable_mp_prepare: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_mp_prepare_time: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_can_interrupt_by_client: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_scene_id: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_control_group_id: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_group_id: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_revive_point_group_id: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_revive_point_config_id: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_ability_group: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_ability_group_list: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_limit_region: # Field №15
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
      ks__has_field_center_scene_id: # Field №16
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000001) != 0)
      ks__has_field_center_pos_list: # Field №17
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000010) != 0)
      ks__has_field_center_radius: # Field №18
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000100) != 0)
      ks__has_field_duration: # Field №19
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00001000) != 0)
      ks__has_field_name: # Field №20
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00010000) != 0)
      ks__has_field_desc: # Field №21
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00100000) != 0)
      ks__has_field_gallery_name: # Field №22
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b01000000) != 0)
      ks__has_field_gallery_msg: # Field №23
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b10000000) != 0)
      ks__has_field_pic: # Field №24
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000001) != 0)
      ks__has_field_target: # Field №25
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000010) != 0)
      ks__has_field_start_audio_values: # Field №26
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000100) != 0)
      ks__has_field_end_audio_values: # Field №27
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00001000) != 0)
      ks__has_field_selectable_ability_groups: # Field №28
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00010000) != 0)
      ks__has_field_team_ability_group_list: # Field №29
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00100000) != 0)
      ks__has_field_selectable_team_ability_group_list: # Field №30
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b01000000) != 0)
  furniture_suite_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: suite_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_suite_id
      - id: json_name
        type: aux_types::string
        if: ks__has_field_json_name
      - id: suite_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_suite_name
      - id: suite_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_suite_desc
      - id: drawing_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_drawing_id
      - id: favorite_npc_excel_id_vec
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_favorite_npc_excel_id_vec
      - id: trans_str
        type: aux_types::string
        if: ks__has_field_trans_str
      - id: furn_type
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_furn_type
      - id: item_icon
        type: aux_types::string
        if: ks__has_field_item_icon
      - id: map_icon
        type: aux_types::string
        if: ks__has_field_map_icon
      - id: inter_ratio
        type: f4
        if: ks__has_field_inter_ratio
    instances:
      ks__has_field_suite_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_json_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_suite_name: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_suite_desc: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_drawing_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_favorite_npc_excel_id_vec: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_trans_str: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_furn_type: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_item_icon: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_map_icon: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_inter_ratio: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
  ks__enum__home_world_area_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: home_world_area_type
  home_world_area_comfort_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_config_id
      - id: scene_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scene_id
      - id: area_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_area_id
      - id: area_type
        type: ks__enum__home_world_area_type
        if: ks__has_field_area_type
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: max_comfort
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_comfort
      - id: safe_point_str
        type: aux_types::string
        if: ks__has_field_safe_point_str
      - id: low_load_limit
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_low_load_limit
      - id: middle_load_limit
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_middle_load_limit
      - id: high_load_limit
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_high_load_limit
      - id: area_center_pos
        type: ks__array_of__f4__length_u
        if: ks__has_field_area_center_pos
      - id: area_center_rot
        type: ks__array_of__f4__length_u
        if: ks__has_field_area_center_rot
    instances:
      ks__has_field_config_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_scene_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_area_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_area_type: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_name: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_max_comfort: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_safe_point_str: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_low_load_limit: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_middle_load_limit: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_high_load_limit: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_area_center_pos: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_area_center_rot: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
  ks__enum__furniture_deploy_surface_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: furniture_deploy_surface_type
  ks__enum__speical_furniture_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: speical_furniture_type
  ks__enum__item_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: item_type
  home_world_furniture_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: furniture_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_furniture_id
      - id: furniture_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_furniture_name
      - id: furniture_gadget_id
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_furniture_gadget_id
      - id: furn_type
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_furn_type
      - id: surface_type
        type: ks__enum__furniture_deploy_surface_type
        if: ks__has_field_surface_type
      - id: arrange_limit
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_arrange_limit
      - id: is_special_furniture
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_is_special_furniture
      - id: special_furniture_type
        type: ks__enum__speical_furniture_type
        if: ks__has_field_special_furniture_type
      - id: room_scene_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_room_scene_id
      - id: grid_style
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_grid_style
      - id: comfort
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_comfort
      - id: stack_limit
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_stack_limit
      - id: cost
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cost
      - id: discount_cost
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_discount_cost
      - id: height
        type: f4
        if: ks__has_field_height
      - id: can_float
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_can_float
      - id: is_unique
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_is_unique
      - id: item_icon
        type: aux_types::string
        if: ks__has_field_item_icon
      - id: effect_icon
        type: aux_types::string
        if: ks__has_field_effect_icon
      - id: clamp_distance
        type: f4
        if: ks__has_field_clamp_distance
      - id: editor_clamp_distance
        type: f4
        if: ks__has_field_editor_clamp_distance
      - id: deploy_glitch_index
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_deploy_glitch_index
      - id: rank_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_rank_level
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: icon
        type: aux_types::string
        if: ks__has_field_icon
      - id: item_type
        type: ks__enum__item_type
        if: ks__has_field_item_type
      - id: weight
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_weight
      - id: rank
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_rank
      - id: gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gadget_id
      - id: dropable
        type: u1
        if: ks__has_field_dropable
      - id: use_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_use_level
      - id: global_item_limit
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_global_item_limit
    instances:
      ks__has_field_furniture_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_furniture_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_furniture_gadget_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_furn_type: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_surface_type: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_arrange_limit: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_is_special_furniture: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_special_furniture_type: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_room_scene_id: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_grid_style: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_comfort: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_stack_limit: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_cost: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_discount_cost: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_height: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_can_float: # Field №15
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
      ks__has_field_is_unique: # Field №16
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000001) != 0)
      ks__has_field_item_icon: # Field №17
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000010) != 0)
      ks__has_field_effect_icon: # Field №18
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000100) != 0)
      ks__has_field_clamp_distance: # Field №19
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00001000) != 0)
      ks__has_field_editor_clamp_distance: # Field №20
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00010000) != 0)
      ks__has_field_deploy_glitch_index: # Field №21
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00100000) != 0)
      ks__has_field_rank_level: # Field №22
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b01000000) != 0)
      ks__has_field_id: # Field №23
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b10000000) != 0)
      ks__has_field_name: # Field №24
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000001) != 0)
      ks__has_field_desc: # Field №25
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000010) != 0)
      ks__has_field_icon: # Field №26
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000100) != 0)
      ks__has_field_item_type: # Field №27
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00001000) != 0)
      ks__has_field_weight: # Field №28
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00010000) != 0)
      ks__has_field_rank: # Field №29
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00100000) != 0)
      ks__has_field_gadget_id: # Field №30
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b01000000) != 0)
      ks__has_field_dropable: # Field №31
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b10000000) != 0)
      ks__has_field_use_level: # Field №32
        value: (ks__bit_field.length.value >= (0b00000100 + 1)) and ((ks__bit_field.bitfield[0b00000100] & 0b00000001) != 0)
      ks__has_field_global_item_limit: # Field №33
        value: (ks__bit_field.length.value >= (0b00000100 + 1)) and ((ks__bit_field.bitfield[0b00000100] & 0b00000010) != 0)
  config_home_gather:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: home_gather_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_home_gather_id
      - id: bundle_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_bundle_id
      - id: drop_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_drop_id
      - id: weight
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_weight
    instances:
      ks__has_field_home_gather_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_bundle_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_drop_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_weight: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  ks__array_of__config_home_gather__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: config_home_gather
        repeat: expr
        repeat-expr: length.value
  home_world_plant_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: seed_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_seed_id
      - id: gather_id_vec
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_gather_id_vec
      - id: home_gather_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_home_gather_id
      - id: bundle_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_bundle_id
      - id: drop_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_drop_id
      - id: config_home_gather
        type: ks__array_of__config_home_gather__length_s
        if: ks__has_field_config_home_gather
      - id: field_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_field_id
      - id: time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_time
      - id: sprout_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sprout_time
      - id: collect_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_collect_num
      - id: sprout_gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sprout_gadget_id
      - id: order
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_order
      - id: intee_icon_name
        type: aux_types::string
        if: ks__has_field_intee_icon_name
      - id: intee_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_intee_name
    instances:
      ks__has_field_seed_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_gather_id_vec: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_home_gather_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_bundle_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_drop_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_config_home_gather: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_field_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_time: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_sprout_time: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_collect_num: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_sprout_gadget_id: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_order: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_intee_icon_name: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_intee_name: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
  ks__enum__hunting_monster_finish_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: hunting_monster_finish_type
  ks__enum__hunting_monster_create_pos_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: hunting_monster_create_pos_type
  ks__enum__hunting_offer_difficulty_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: hunting_offer_difficulty_type
  ks__enum__hunting_refresh_cond_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: hunting_refresh_cond_type
  hunting_refresh_cond:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: cond_type
        type: ks__enum__hunting_refresh_cond_type
        if: ks__has_field_cond_type
      - id: param
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_param
    instances:
      ks__has_field_cond_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_param: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__hunting_refresh_cond__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: hunting_refresh_cond
        repeat: expr
        repeat-expr: length.value
  hunting_monster_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_config_id
      - id: monster_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_monster_id
      - id: associated_monster_group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_associated_monster_group_id
      - id: hunting_finish_type
        type: ks__enum__hunting_monster_finish_type
        if: ks__has_field_hunting_finish_type
      - id: affix
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_affix
      - id: ability_group
        type: aux_types::string
        if: ks__has_field_ability_group
      - id: create_pos_type
        type: ks__enum__hunting_monster_create_pos_type
        if: ks__has_field_create_pos_type
      - id: level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level
      - id: revise_level_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_revise_level_id
      - id: city_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_city_list
      - id: difficulty
        type: ks__enum__hunting_offer_difficulty_type
        if: ks__has_field_difficulty
      - id: limit_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_limit_time
      - id: search_point_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_search_point_num
      - id: refresh_cond
        type: ks__array_of__hunting_refresh_cond__length_s
        if: ks__has_field_refresh_cond
      - id: initial_pose
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_initial_pose
      - id: clue_text_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_clue_text_id_list
      - id: news_text
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_news_text
      - id: trait_text
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_trait_text
      - id: mechanism_title1
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mechanism_title1
      - id: mechanism_desc1
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mechanism_desc1
      - id: mechanism_title2
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mechanism_title2
      - id: mechanism_desc2
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mechanism_desc2
      - id: suite_id
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_suite_id
      - id: is_disable_wandering
        type: u1
        if: ks__has_field_is_disable_wandering
      - id: route_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_route_id
    instances:
      ks__has_field_config_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_monster_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_associated_monster_group_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_hunting_finish_type: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_affix: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_ability_group: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_create_pos_type: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_level: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_revise_level_id: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_city_list: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_difficulty: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_limit_time: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_search_point_num: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_refresh_cond: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_initial_pose: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_clue_text_id_list: # Field №15
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
      ks__has_field_news_text: # Field №16
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000001) != 0)
      ks__has_field_trait_text: # Field №17
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000010) != 0)
      ks__has_field_mechanism_title1: # Field №18
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000100) != 0)
      ks__has_field_mechanism_desc1: # Field №19
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00001000) != 0)
      ks__has_field_mechanism_title2: # Field №20
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00010000) != 0)
      ks__has_field_mechanism_desc2: # Field №21
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00100000) != 0)
      ks__has_field_suite_id: # Field №22
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b01000000) != 0)
      ks__has_field_is_disable_wandering: # Field №23
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b10000000) != 0)
      ks__has_field_route_id: # Field №24
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000001) != 0)
  ks__enum__open_state_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: open_state_type
  ks__enum__limit_region_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: limit_region_type
  limit_region_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: name
        type: aux_types::string
        if: ks__has_field_name
      - id: openstate
        type: ks__enum__open_state_type
        if: ks__has_field_openstate
      - id: scene_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scene_id
      - id: type
        type: ks__enum__limit_region_type
        if: ks__has_field_type
      - id: order
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_order
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_openstate: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_scene_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_type: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_order: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
  ks__enum__material_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: material_type
  ks__enum__item_use_target:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: item_use_target
  ks__enum__item_use_op:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: item_use_op
  item_use_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: use_op
        type: ks__enum__item_use_op
        if: ks__has_field_use_op
      - id: use_param
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_use_param
    instances:
      ks__has_field_use_op: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_use_param: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__item_use_config__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: item_use_config
        repeat: expr
        repeat-expr: length.value
  ks__enum__food_quality_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: food_quality_type
  ks__enum__material_destroy_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: material_destroy_type
  material_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: interaction_title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_interaction_title
      - id: material_type
        type: ks__enum__material_type
        if: ks__has_field_material_type
      - id: cd_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cd_time
      - id: cd_group
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cd_group
      - id: stack_limit
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_stack_limit
      - id: max_use_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_use_count
      - id: use_on_gain
        type: u1
        if: ks__has_field_use_on_gain
      - id: no_first_get_hint
        type: u1
        if: ks__has_field_no_first_get_hint
      - id: play_gain_effect
        type: u1
        if: ks__has_field_play_gain_effect
      - id: use_target
        type: ks__enum__item_use_target
        if: ks__has_field_use_target
      - id: item_use
        type: ks__array_of__item_use_config__length_s
        if: ks__has_field_item_use
      - id: rank_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_rank_level
      - id: food_quality
        type: ks__enum__food_quality_type
        if: ks__has_field_food_quality
      - id: effect_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_effect_desc
      - id: special_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_special_desc
      - id: type_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_type_desc
      - id: effect_icon
        type: aux_types::string
        if: ks__has_field_effect_icon
      - id: effect_gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_effect_gadget_id
      - id: effect_name
        type: aux_types::string
        if: ks__has_field_effect_name
      - id: pic_path
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_pic_path
      - id: is_split_drop
        type: u1
        if: ks__has_field_is_split_drop
      - id: close_bag_after_used
        type: u1
        if: ks__has_field_close_bag_after_used
      - id: satiation_params
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_satiation_params
      - id: destroy_rule
        type: ks__enum__material_destroy_type
        if: ks__has_field_destroy_rule
      - id: destroy_return_material
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_destroy_return_material
      - id: destroy_return_material_count
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_destroy_return_material_count
      - id: set_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_set_id
      - id: is_hidden
        type: u1
        if: ks__has_field_is_hidden
      - id: is_force_get_hint
        type: u1
        if: ks__has_field_is_force_get_hint
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: icon
        type: aux_types::string
        if: ks__has_field_icon
      - id: item_type
        type: ks__enum__item_type
        if: ks__has_field_item_type
      - id: weight
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_weight
      - id: rank
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_rank
      - id: gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gadget_id
      - id: dropable
        type: u1
        if: ks__has_field_dropable
      - id: use_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_use_level
      - id: global_item_limit
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_global_item_limit
    instances:
      ks__has_field_interaction_title: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_material_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_cd_time: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_cd_group: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_stack_limit: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_max_use_count: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_use_on_gain: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_no_first_get_hint: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_play_gain_effect: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_use_target: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_item_use: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_rank_level: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_food_quality: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_effect_desc: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_special_desc: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_type_desc: # Field №15
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
      ks__has_field_effect_icon: # Field №16
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000001) != 0)
      ks__has_field_effect_gadget_id: # Field №17
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000010) != 0)
      ks__has_field_effect_name: # Field №18
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000100) != 0)
      ks__has_field_pic_path: # Field №19
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00001000) != 0)
      ks__has_field_is_split_drop: # Field №20
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00010000) != 0)
      ks__has_field_close_bag_after_used: # Field №21
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00100000) != 0)
      ks__has_field_satiation_params: # Field №22
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b01000000) != 0)
      ks__has_field_destroy_rule: # Field №23
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b10000000) != 0)
      ks__has_field_destroy_return_material: # Field №24
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000001) != 0)
      ks__has_field_destroy_return_material_count: # Field №25
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000010) != 0)
      ks__has_field_set_id: # Field №26
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000100) != 0)
      ks__has_field_is_hidden: # Field №27
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00001000) != 0)
      ks__has_field_is_force_get_hint: # Field №28
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00010000) != 0)
      ks__has_field_id: # Field №29
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00100000) != 0)
      ks__has_field_name: # Field №30
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b01000000) != 0)
      ks__has_field_desc: # Field №31
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b10000000) != 0)
      ks__has_field_icon: # Field №32
        value: (ks__bit_field.length.value >= (0b00000100 + 1)) and ((ks__bit_field.bitfield[0b00000100] & 0b00000001) != 0)
      ks__has_field_item_type: # Field №33
        value: (ks__bit_field.length.value >= (0b00000100 + 1)) and ((ks__bit_field.bitfield[0b00000100] & 0b00000010) != 0)
      ks__has_field_weight: # Field №34
        value: (ks__bit_field.length.value >= (0b00000100 + 1)) and ((ks__bit_field.bitfield[0b00000100] & 0b00000100) != 0)
      ks__has_field_rank: # Field №35
        value: (ks__bit_field.length.value >= (0b00000100 + 1)) and ((ks__bit_field.bitfield[0b00000100] & 0b00001000) != 0)
      ks__has_field_gadget_id: # Field №36
        value: (ks__bit_field.length.value >= (0b00000100 + 1)) and ((ks__bit_field.bitfield[0b00000100] & 0b00010000) != 0)
      ks__has_field_dropable: # Field №37
        value: (ks__bit_field.length.value >= (0b00000100 + 1)) and ((ks__bit_field.bitfield[0b00000100] & 0b00100000) != 0)
      ks__has_field_use_level: # Field №38
        value: (ks__bit_field.length.value >= (0b00000100 + 1)) and ((ks__bit_field.bitfield[0b00000100] & 0b01000000) != 0)
      ks__has_field_global_item_limit: # Field №39
        value: (ks__bit_field.length.value >= (0b00000100 + 1)) and ((ks__bit_field.bitfield[0b00000100] & 0b10000000) != 0)
  new_activity_avatar_selection_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: schedule_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_schedule_id
      - id: cond_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cond_id
      - id: watcher_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_watcher_id_list
      - id: avatar_reward_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_avatar_reward_list
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: cost_item_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_cost_item_id_list
      - id: cost_item_num_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_cost_item_num_list
      - id: is_blocked
        type: u1
        if: ks__has_field_is_blocked
    instances:
      ks__has_field_schedule_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_cond_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_watcher_id_list: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_avatar_reward_list: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_desc: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_cost_item_id_list: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_cost_item_num_list: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_is_blocked: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
  ks__enum__op_activity_bonus_source_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: op_activity_bonus_source_type
  ks__enum__op_activity_track_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: op_activity_track_type
  op_activity_bonus_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: bonus_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_bonus_id
      - id: source_type
        type: ks__enum__op_activity_bonus_source_type
        if: ks__has_field_source_type
      - id: source_param
        type: aux_types::string
        if: ks__has_field_source_param
      - id: open_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_open_level
      - id: bonus_ratio
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_bonus_ratio
      - id: text_map_id_list
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_text_map_id_list
      - id: track_type
        type: ks__enum__op_activity_track_type
        if: ks__has_field_track_type
      - id: track_para
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_track_para
    instances:
      ks__has_field_bonus_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_source_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_source_param: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_open_level: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_bonus_ratio: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_text_map_id_list: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_track_type: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_track_para: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
  ks__enum__overflow_transform_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: overflow_transform_type
  ks__enum__item_limit_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: item_limit_type
  overflow_transform_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: transform_type
        type: ks__enum__overflow_transform_type
        if: ks__has_field_transform_type
      - id: transform_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_transform_id
      - id: transform_base_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_transform_base_count
      - id: transform_results
        type: ks__array_of__id_count_config__length_s
        if: ks__has_field_transform_results
      - id: transform_item_limit_type
        type: ks__enum__item_limit_type
        if: ks__has_field_transform_item_limit_type
    instances:
      ks__has_field_transform_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_transform_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_transform_base_count: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_transform_results: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_transform_item_limit_type: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  player_level_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: max_exp
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_exp
      - id: level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level
      - id: exp
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_exp
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
      - id: expedition_limit_add
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_expedition_limit_add
      - id: unlock_world_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_unlock_world_level
      - id: unlock_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_unlock_desc
    instances:
      ks__has_field_max_exp: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_level: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_exp: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_reward_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_expedition_limit_add: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_unlock_world_level: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_unlock_desc: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
  ks__enum__quest_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: quest_type
  ks__enum__main_quest_tag_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: main_quest_tag_type
  ks__enum__play_mode:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: play_mode
  ks__enum__quest_show_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: quest_show_type
  main_quest_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: series
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_series
      - id: type
        type: ks__enum__quest_type
        if: ks__has_field_type
      - id: main_quest_tag
        type: ks__enum__main_quest_tag_type
        if: ks__has_field_main_quest_tag
      - id: active_mode
        type: ks__enum__play_mode
        if: ks__has_field_active_mode
      - id: title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: lua_path
        type: aux_types::string
        if: ks__has_field_lua_path
      - id: recommend_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_recommend_level
      - id: repeatable
        type: u1
        if: ks__has_field_repeatable
      - id: suggest_track_main_quest_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_suggest_track_main_quest_list
      - id: suggest_track_out_of_order
        type: u1
        if: ks__has_field_suggest_track_out_of_order
      - id: reward_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_reward_id_list
      - id: show_type
        type: ks__enum__quest_show_type
        if: ks__has_field_show_type
      - id: chapter_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_chapter_id
      - id: task_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_task_id
      - id: show_red_point
        type: u1
        if: ks__has_field_show_red_point
      - id: activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_id
      - id: is_release
        type: u1
        if: ks__has_field_is_release
      - id: special_show_cond_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_special_show_cond_id_list
      - id: special_show_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_special_show_quest_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_series: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_type: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_main_quest_tag: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_active_mode: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_title: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_desc: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_lua_path: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_recommend_level: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_repeatable: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_suggest_track_main_quest_list: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_suggest_track_out_of_order: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_reward_id_list: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_show_type: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_chapter_id: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_task_id: # Field №15
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
      ks__has_field_show_red_point: # Field №16
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000001) != 0)
      ks__has_field_activity_id: # Field №17
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000010) != 0)
      ks__has_field_is_release: # Field №18
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000100) != 0)
      ks__has_field_special_show_cond_id_list: # Field №19
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00001000) != 0)
      ks__has_field_special_show_quest_id: # Field №20
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00010000) != 0)
  ks__enum__talk_begin_way:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: talk_begin_way
  ks__enum__logic_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: logic_type
  ks__enum__quest_cond_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: quest_cond_type
  talk_cond:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: type
        type: ks__enum__quest_cond_type
        if: ks__has_field_type
      - id: param
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_param
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_param: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__talk_cond__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: talk_cond
        repeat: expr
        repeat-expr: length.value
  ks__enum__talk_hero_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: talk_hero_type
  ks__enum__talk_load_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: talk_load_type
  ks__enum__talk_mark_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: talk_mark_type
  ks__enum__talk_exec_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: talk_exec_type
  talk_exec:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: type
        type: ks__enum__talk_exec_type
        if: ks__has_field_type
      - id: param
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_param
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_param: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__talk_exec__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: talk_exec
        repeat: expr
        repeat-expr: length.value
  talk_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: begin_way
        type: ks__enum__talk_begin_way
        if: ks__has_field_begin_way
      - id: active_mode
        type: ks__enum__play_mode
        if: ks__has_field_active_mode
      - id: begin_cond_comb
        type: ks__enum__logic_type
        if: ks__has_field_begin_cond_comb
      - id: begin_cond
        type: ks__array_of__talk_cond__length_s
        if: ks__has_field_begin_cond
      - id: priority
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_priority
      - id: next_talks
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_next_talks
      - id: init_dialog
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_init_dialog
      - id: decorator_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_decorator_id
      - id: next_random_talks
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_next_random_talks
      - id: show_random_talk_count
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_show_random_talk_count
      - id: npc_id
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_npc_id
      - id: participant_id
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_participant_id
      - id: perform_cfg
        type: aux_types::string
        if: ks__has_field_perform_cfg
      - id: hero_talk
        type: ks__enum__talk_hero_type
        if: ks__has_field_hero_talk
      - id: load_type
        type: ks__enum__talk_load_type
        if: ks__has_field_load_type
      - id: quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_quest_id
      - id: extra_load_mark_id
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_extra_load_mark_id
      - id: dont_block_daily
        type: u1
        if: ks__has_field_dont_block_daily
      - id: pre_perform_cfg
        type: aux_types::string
        if: ks__has_field_pre_perform_cfg
      - id: stay_free_style
        type: u1
        if: ks__has_field_stay_free_style
      - id: enable_camera_displacement
        type: u1
        if: ks__has_field_enable_camera_displacement
      - id: lock_game_time
        type: u1
        if: ks__has_field_lock_game_time
      - id: talk_mark_type
        type: ks__enum__talk_mark_type
        if: ks__has_field_talk_mark_type
      - id: quest_idle_talk
        type: u1
        if: ks__has_field_quest_idle_talk
      - id: low_priority
        type: u1
        if: ks__has_field_low_priority
      - id: finish_exec
        type: ks__array_of__talk_exec__length_s
        if: ks__has_field_finish_exec
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_begin_way: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_active_mode: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_begin_cond_comb: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_begin_cond: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_priority: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_next_talks: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_init_dialog: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_decorator_id: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_next_random_talks: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_show_random_talk_count: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_npc_id: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_participant_id: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_perform_cfg: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_hero_talk: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_load_type: # Field №15
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
      ks__has_field_quest_id: # Field №16
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000001) != 0)
      ks__has_field_extra_load_mark_id: # Field №17
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000010) != 0)
      ks__has_field_dont_block_daily: # Field №18
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000100) != 0)
      ks__has_field_pre_perform_cfg: # Field №19
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00001000) != 0)
      ks__has_field_stay_free_style: # Field №20
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00010000) != 0)
      ks__has_field_enable_camera_displacement: # Field №21
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00100000) != 0)
      ks__has_field_lock_game_time: # Field №22
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b01000000) != 0)
      ks__has_field_talk_mark_type: # Field №23
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b10000000) != 0)
      ks__has_field_quest_idle_talk: # Field №24
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000001) != 0)
      ks__has_field_low_priority: # Field №25
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000010) != 0)
      ks__has_field_finish_exec: # Field №26
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000100) != 0)
  ks__enum__talk_show_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: talk_show_type
  ks__enum__talk_role_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: talk_role_type
  talk_role:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: type
        type: ks__enum__talk_role_type
        if: ks__has_field_type
      - id: id
        type: aux_types::string
        if: ks__has_field_id
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  dialog_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: next_dialog
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_next_dialog
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: next_dialogs
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_next_dialogs
      - id: talk_show_type
        type: ks__enum__talk_show_type
        if: ks__has_field_talk_show_type
      - id: talk_role
        type: talk_role
        if: ks__has_field_talk_role
      - id: talk_content
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_talk_content
      - id: talk_title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_talk_title
      - id: talk_role_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_talk_role_name
      - id: talk_asset_path
        type: aux_types::string
        if: ks__has_field_talk_asset_path
      - id: talk_asset_path_alter
        type: aux_types::string
        if: ks__has_field_talk_asset_path_alter
      - id: talk_audio_name
        type: aux_types::string
        if: ks__has_field_talk_audio_name
      - id: action_before
        type: aux_types::string
        if: ks__has_field_action_before
      - id: action_while
        type: aux_types::string
        if: ks__has_field_action_while
      - id: action_after
        type: aux_types::string
        if: ks__has_field_action_after
      - id: show_duration
        type: f4
        if: ks__has_field_show_duration
      - id: group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_group_id
      - id: option_icon
        type: aux_types::string
        if: ks__has_field_option_icon
    instances:
      ks__has_field_next_dialog: # Field №0
        value: false
      ks__has_field_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_next_dialogs: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_talk_show_type: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_talk_role: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_talk_content: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_talk_title: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_talk_role_name: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_talk_asset_path: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_talk_asset_path_alter: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_talk_audio_name: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_action_before: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_action_while: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
      ks__has_field_action_after: # Field №13
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000001) != 0)
      ks__has_field_show_duration: # Field №14
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000010) != 0)
      ks__has_field_group_id: # Field №15
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000100) != 0)
      ks__has_field_option_icon: # Field №16
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00001000) != 0)
  ks__enum__reminder_style_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: reminder_style_type
  reminder_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: speaker
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_speaker
      - id: content
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_content
      - id: delay
        type: f4
        if: ks__has_field_delay
      - id: show_time
        type: f4
        if: ks__has_field_show_time
      - id: next_reminder_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_next_reminder_id
      - id: sound_effect
        type: aux_types::string
        if: ks__has_field_sound_effect
      - id: style
        type: ks__enum__reminder_style_type
        if: ks__has_field_style
      - id: has_audio
        type: u1
        if: ks__has_field_has_audio
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_speaker: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_content: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_delay: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_show_time: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_next_reminder_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_sound_effect: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_style: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_has_audio: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
  reputation_level_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level
      - id: city_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_city_id
      - id: level_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level_name
      - id: next_level_exp
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_next_level_exp
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
      - id: request_group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_request_group_id
      - id: request_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_request_num
      - id: request_accept_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_request_accept_num
      - id: function_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_function_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_level: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_city_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_level_name: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_next_level_exp: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_reward_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_request_group_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_request_num: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_request_accept_num: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_function_id: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
  ks__enum__reputation_entrance_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: reputation_entrance_type
  ks__enum__reputation_entrance_cond_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: reputation_entrance_cond_type
  reputation_entrance_cond:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: type
        type: ks__enum__reputation_entrance_cond_type
        if: ks__has_field_type
      - id: param1
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_param1
      - id: param2
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_param2
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_param1: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_param2: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  ks__array_of__reputation_entrance_cond__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: reputation_entrance_cond
        repeat: expr
        repeat-expr: length.value
  reputation_entrance_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: text_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_text_id
      - id: entrance_id
        type: ks__enum__reputation_entrance_type
        if: ks__has_field_entrance_id
      - id: city_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_city_id
      - id: cond_comb
        type: ks__enum__logic_type
        if: ks__has_field_cond_comb
      - id: cond_vec
        type: ks__array_of__reputation_entrance_cond__length_s
        if: ks__has_field_cond_vec
      - id: cond_name_vec
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_cond_name_vec
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title
      - id: explain_title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_explain_title
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: icon_name
        type: aux_types::string
        if: ks__has_field_icon_name
      - id: order
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_order
    instances:
      ks__has_field_text_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_entrance_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_city_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_cond_comb: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_cond_vec: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_cond_name_vec: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_name: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_title: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_explain_title: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_desc: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_icon_name: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_order: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
  revise_level_grow_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: grade
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_grade
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_grade: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  reward_item_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: item_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_item_id
      - id: item_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_item_count
    instances:
      ks__has_field_item_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_item_count: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__reward_item_config__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: reward_item_config
        repeat: expr
        repeat-expr: length.value
  optional_limit_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: is_unlimited
        type: u1
        if: ks__has_field_is_unlimited
      - id: limit_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_limit_count
    instances:
      ks__has_field_is_unlimited: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_limit_count: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  reward_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
      - id: hcoin
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_hcoin
      - id: scoin
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scoin
      - id: player_exp
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_player_exp
      - id: avatar_exp
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_avatar_exp
      - id: fetter_exp
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_fetter_exp
      - id: resin
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_resin
      - id: reward_item_list
        type: ks__array_of__reward_item_config__length_s
        if: ks__has_field_reward_item_list
      - id: daily_output_limit
        type: optional_limit_config
        if: ks__has_field_daily_output_limit
      - id: total_output_limit
        type: optional_limit_config
        if: ks__has_field_total_output_limit
      - id: activity_output_limit
        type: optional_limit_config
        if: ks__has_field_activity_output_limit
    instances:
      ks__has_field_reward_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_hcoin: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_scoin: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_player_exp: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_avatar_exp: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_fetter_exp: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_resin: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_reward_item_list: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_daily_output_limit: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_total_output_limit: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_activity_output_limit: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
  id_count_str_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: count
        type: aux_types::string
        if: ks__has_field_count
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_count: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__id_count_str_config__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: id_count_str_config
        repeat: expr
        repeat-expr: length.value
  reward_preview_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: desc
        type: aux_types::string
        if: ks__has_field_desc
      - id: preview_items
        type: ks__array_of__id_count_str_config__length_s
        if: ks__has_field_preview_items
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_desc: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_preview_items: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  ks__enum__general_routine_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: general_routine_type
  ks__enum__routine_finish_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: routine_finish_type
  routine_finish_content:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: finish_type
        type: ks__enum__routine_finish_type
        if: ks__has_field_finish_type
      - id: param1
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_param1
      - id: param2
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_param2
      - id: progress
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_progress
    instances:
      ks__has_field_finish_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_param1: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_param2: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_progress: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  ks__enum__routine_cond_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: routine_cond_type
  routine_cond_content:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: type
        type: ks__enum__routine_cond_type
        if: ks__has_field_type
      - id: param1
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_param1
      - id: param2
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_param2
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_param1: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_param2: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  ks__array_of__routine_cond_content__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: routine_cond_content
        repeat: expr
        repeat-expr: length.value
  ks__enum__routine_actionype:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: routine_actionype
  routine_action_content:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: type
        type: ks__enum__routine_actionype
        if: ks__has_field_type
      - id: param1
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_param1
      - id: param2
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_param2
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_param1: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_param2: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  ks__array_of__routine_action_content__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: routine_action_content
        repeat: expr
        repeat-expr: length.value
  routine_detail_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: routine_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_routine_id
      - id: routine_type
        type: ks__enum__general_routine_type
        if: ks__has_field_routine_type
      - id: group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_group_id
      - id: tag
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_tag
      - id: is_backup
        type: u1
        if: ks__has_field_is_backup
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
      - id: finish_content
        type: routine_finish_content
        if: ks__has_field_finish_content
      - id: cond_comb
        type: ks__enum__logic_type
        if: ks__has_field_cond_comb
      - id: cond_vec
        type: ks__array_of__routine_cond_content__length_s
        if: ks__has_field_cond_vec
      - id: action_vec
        type: ks__array_of__routine_action_content__length_s
        if: ks__has_field_action_vec
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: goal
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_goal
      - id: center_position
        type: aux_types::string
        if: ks__has_field_center_position
      - id: radar_radius
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_radar_radius
      - id: enter_distance
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_enter_distance
      - id: exit_distance
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_exit_distance
    instances:
      ks__has_field_routine_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_routine_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_group_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_tag: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_is_backup: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_reward_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_finish_content: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_cond_comb: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_cond_vec: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_action_vec: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_name: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_desc: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_goal: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_center_position: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_radar_radius: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_enter_distance: # Field №15
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
      ks__has_field_exit_distance: # Field №16
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000001) != 0)
  widget_camera_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: hint_distance
        type: f4
        if: ks__has_field_hint_distance
      - id: ui_path
        type: aux_types::string
        if: ks__has_field_ui_path
      - id: tips
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_tips
      - id: scan_tips
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scan_tips
      - id: scan_success_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scan_success_desc
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_hint_distance: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_ui_path: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_tips: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_scan_tips: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_scan_success_desc: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
  ability_override_param_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: param_name
        type: aux_types::string
        if: ks__has_field_param_name
      - id: param_value
        type: f4
        if: ks__has_field_param_value
    instances:
      ks__has_field_param_name: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_param_value: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__ability_override_param_config__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: ability_override_param_config
        repeat: expr
        repeat-expr: length.value
  ability_override_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: ability_name
        type: aux_types::string
        if: ks__has_field_ability_name
      - id: ability_special_param_config
        type: ks__array_of__ability_override_param_config__length_s
        if: ks__has_field_ability_special_param_config
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_ability_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_ability_special_param_config: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  ability_prop_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: prop_name
        type: aux_types::string
        if: ks__has_field_prop_name
      - id: overall_min
        type: f4
        if: ks__has_field_overall_min
      - id: overall_max
        type: f4
        if: ks__has_field_overall_max
      - id: limit_tag_min
        type: f4
        if: ks__has_field_limit_tag_min
      - id: limit_tag_max
        type: f4
        if: ks__has_field_limit_tag_max
      - id: succeed_owner
        type: u1
        if: ks__has_field_succeed_owner
    instances:
      ks__has_field_prop_name: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_overall_min: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_overall_max: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_limit_tag_min: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_limit_tag_max: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_succeed_owner: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
  ks__enum__show_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: show_type
  ks__enum__progress_show_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: progress_show_type
  ks__enum__watcher_trigger_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: watcher_trigger_type
  watcher_trigger_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: trigger_type
        type: ks__enum__watcher_trigger_type
        if: ks__has_field_trigger_type
      - id: param_list
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_param_list
    instances:
      ks__has_field_trigger_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_param_list: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  achievement_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: goal_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_goal_id
      - id: order_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_order_id
      - id: pre_stage_achievement_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_pre_stage_achievement_id
      - id: title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: is_show
        type: ks__enum__show_type
        if: ks__has_field_is_show
      - id: ps4group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_ps4group_id
      - id: ps5group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_ps5group_id
      - id: ps5title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_ps5title
      - id: ttype
        type: aux_types::string
        if: ks__has_field_ttype
      - id: ps_trophy_id
        type: aux_types::string
        if: ks__has_field_ps_trophy_id
      - id: ps4trophy_id
        type: aux_types::string
        if: ks__has_field_ps4trophy_id
      - id: ps5trophy_id
        type: aux_types::string
        if: ks__has_field_ps5trophy_id
      - id: icon
        type: aux_types::string
        if: ks__has_field_icon
      - id: finish_reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_finish_reward_id
      - id: is_delete_watcher_after_finish
        type: u1
        if: ks__has_field_is_delete_watcher_after_finish
      - id: progress_show_type
        type: ks__enum__progress_show_type
        if: ks__has_field_progress_show_type
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: trigger_config
        type: watcher_trigger_config
        if: ks__has_field_trigger_config
      - id: progress
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_progress
      - id: is_disuse
        type: u1
        if: ks__has_field_is_disuse
    instances:
      ks__has_field_goal_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_order_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_pre_stage_achievement_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_title: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_desc: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_is_show: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_ps4group_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_ps5group_id: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_ps5title: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_ttype: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_ps_trophy_id: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_ps4trophy_id: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_ps5trophy_id: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_icon: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_finish_reward_id: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_is_delete_watcher_after_finish: # Field №15
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
      ks__has_field_progress_show_type: # Field №16
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000001) != 0)
      ks__has_field_id: # Field №17
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000010) != 0)
      ks__has_field_trigger_config: # Field №18
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000100) != 0)
      ks__has_field_progress: # Field №19
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00001000) != 0)
      ks__has_field_is_disuse: # Field №20
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00010000) != 0)
  achievement_goal_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: order_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_order_id
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: finish_reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_finish_reward_id
      - id: icon_path
        type: aux_types::string
        if: ks__has_field_icon_path
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_order_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_name: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_finish_reward_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_icon_path: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  ps4group_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: icon_path
        type: aux_types::string
        if: ks__has_field_icon_path
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_desc: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_icon_path: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  ps5group_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: icon_path
        type: aux_types::string
        if: ks__has_field_icon_path
      - id: export_version
        type: aux_types::string
        if: ks__has_field_export_version
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_icon_path: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_export_version: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  activity_ability_group_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: index
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_index
      - id: activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_id
      - id: avatar_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_avatar_id
      - id: weapon_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_weapon_id
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
    instances:
      ks__has_field_index: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_activity_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_avatar_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_weapon_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_name: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  activity_up_avatar_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_id
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: avatar_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_avatar_id_list
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_activity_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_name: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_avatar_id_list: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  activity_arena_challenge_preview_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: schedule_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_schedule_id
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
      - id: center_pos_list
        type: ks__array_of__f4__length_u
        if: ks__has_field_center_pos_list
      - id: guide_main_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_guide_main_quest_id
      - id: guide_side_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_guide_side_quest_id
      - id: guide_quest_id1
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_guide_quest_id1
    instances:
      ks__has_field_schedule_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_reward_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_center_pos_list: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_guide_main_quest_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_guide_side_quest_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_guide_quest_id1: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
  activity_arena_challenge_level_info_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: schedule_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_schedule_id
      - id: level_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level_id
      - id: level_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level_name
      - id: monster_preview_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_monster_preview_id
      - id: monster_config
        type: aux_types::string
        if: ks__has_field_monster_config
      - id: level_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level_desc
      - id: level_desc_params
        type: aux_types::string
        if: ks__has_field_level_desc_params
      - id: monster_preview_id_hard_challenge
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_monster_preview_id_hard_challenge
      - id: monster_config_hard_challenge
        type: aux_types::string
        if: ks__has_field_monster_config_hard_challenge
      - id: level_hard_challenge_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level_hard_challenge_desc
      - id: level_hard_challenge_desc_params
        type: aux_types::string
        if: ks__has_field_level_hard_challenge_desc_params
      - id: level_detail_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level_detail_desc
      - id: challenge_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_challenge_id_list
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_schedule_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_level_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_level_name: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_monster_preview_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_monster_config: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_level_desc: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_level_desc_params: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_monster_preview_id_hard_challenge: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_monster_config_hard_challenge: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_level_hard_challenge_desc: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_level_hard_challenge_desc_params: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_level_detail_desc: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_challenge_id_list: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
  activity_arena_challenge_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: schedule_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_schedule_id
      - id: arena_challenge_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_arena_challenge_id
      - id: arena_challenge_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_arena_challenge_level
      - id: is_extra_level
        type: u1
        if: ks__has_field_is_extra_level
      - id: watcher_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_watcher_id
      - id: challenge_target
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_challenge_target
      - id: challenge_target1
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_challenge_target1
      - id: challenge_target2
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_challenge_target2
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_schedule_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_arena_challenge_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_arena_challenge_level: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_is_extra_level: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_watcher_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_challenge_target: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_challenge_target1: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_challenge_target2: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
  aster_little_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: stage_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_stage_id
      - id: next_stage_id_vec
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_next_stage_id_vec
      - id: open_day
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_open_day
      - id: mission_vec
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_mission_vec
      - id: watcher_id_vec
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_watcher_id_vec
      - id: title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
    instances:
      ks__has_field_stage_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_next_stage_id_vec: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_open_day: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_mission_vec: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_watcher_id_vec: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_title: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_desc: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
  aster_mid_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: camp_vec
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_camp_vec
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_camp_vec: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  aster_mid_groups_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_group_id
      - id: battle_group_vec
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_battle_group_vec
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_group_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_battle_group_vec: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  aster_mid_difficulty_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: world_level_vec
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_world_level_vec
      - id: drop_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_drop_id
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
      - id: resin
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_resin
      - id: recommend_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_recommend_level
      - id: monster_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_monster_level
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_world_level_vec: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_drop_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_reward_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_resin: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_recommend_level: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_monster_level: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
  aster_mission_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: mission_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mission_id
      - id: phase
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_phase
      - id: watcher_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_watcher_id
      - id: trans_point_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_trans_point_id
      - id: trace_point
        type: aux_types::string
        if: ks__has_field_trace_point
      - id: perfab_path_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_perfab_path_hash
      - id: perfab_path_hash_pre
        type: s1
        if: ks__has_field_perfab_path_hash
    instances:
      ks__has_field_mission_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_phase: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_watcher_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_trans_point_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_trace_point: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_perfab_path_hash: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
  aster_stage_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_id
      - id: chapter_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_chapter_id
      - id: title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title
      - id: stage_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_stage_name
      - id: openday
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_openday
      - id: open_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_open_quest_id
      - id: intro
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_intro
      - id: story
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_story
      - id: unlock_score
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_unlock_score
      - id: quest_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_quest_id_list
      - id: reward_preview_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_preview_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_activity_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_chapter_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_title: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_stage_name: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_openday: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_open_quest_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_intro: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_story: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_unlock_score: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_quest_id_list: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_reward_preview_id: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
  aster_activity_perview_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_id
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: unlock_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_unlock_level
      - id: reward_preview_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_preview_id
      - id: watcher_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_watcher_list
      - id: special_reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_special_reward_id
      - id: activity_stay_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_stay_time
      - id: perfab_change_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_perfab_change_quest_id
    instances:
      ks__has_field_activity_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_desc: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_unlock_level: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_reward_preview_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_watcher_list: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_special_reward_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_activity_stay_time: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_perfab_change_quest_id: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
  aster_avatar_up_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_id
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: avatar_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_avatar_id_list
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_activity_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_name: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_avatar_id_list: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  aster_team_buff_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_id
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: icon
        type: aux_types::string
        if: ks__has_field_icon
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_activity_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_name: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_desc: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_icon: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  ks__enum__activity_banner_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: activity_banner_type
  activity_banner_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_id
      - id: banner_type
        type: ks__enum__activity_banner_type
        if: ks__has_field_banner_type
      - id: reward_preview_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_preview_id
      - id: json_config_name
        type: aux_types::string
        if: ks__has_field_json_config_name
      - id: prefab_path
        type: aux_types::string
        if: ks__has_field_prefab_path
    instances:
      ks__has_field_activity_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_banner_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_reward_preview_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_json_config_name: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_prefab_path: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  ks__enum__blessing_scan_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: blessing_scan_type
  blessing_pic_up_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: prob
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_prob
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_prob: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__blessing_pic_up_config__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: blessing_pic_up_config
        repeat: expr
        repeat-expr: length.value
  blessing_scan_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: type_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_type_id
      - id: scan_type
        type: ks__enum__blessing_scan_type
        if: ks__has_field_scan_type
      - id: ref_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_ref_id
      - id: pic_up_config
        type: ks__array_of__blessing_pic_up_config__length_s
        if: ks__has_field_pic_up_config
      - id: scan_duration
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scan_duration
      - id: scan_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scan_time
      - id: hit_boxes_node_name
        type: aux_types::string
        if: ks__has_field_hit_boxes_node_name
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_type_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_scan_type: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_ref_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_pic_up_config: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_scan_duration: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_scan_time: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_hit_boxes_node_name: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
  blessing_scan_type_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: type_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_type_id
      - id: priority
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_priority
      - id: up_pool_id
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_up_pool_id
      - id: daily_scan_limit
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_daily_scan_limit
      - id: type_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_type_name
      - id: type_name_with_color
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_type_name_with_color
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_type_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_priority: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_up_pool_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_daily_scan_limit: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_type_name: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_type_name_with_color: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
  blessing_scan_pic_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: grant_reward_cost
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_grant_reward_cost
      - id: icon_name
        type: aux_types::string
        if: ks__has_field_icon_name
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_grant_reward_cost: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_icon_name: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_name: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  blitz_rush_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_id
      - id: content_duration
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_content_duration
      - id: dungeon_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_dungeon_id
      - id: dungeon_entry_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_dungeon_entry_id
      - id: dungeon_reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_dungeon_reward_id
      - id: pre_pre_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_pre_pre_quest_id
      - id: pre_quest_id
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_pre_quest_id
      - id: reward_preview
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_preview
      - id: hide_oath_entrance
        type: u1
        if: ks__has_field_hide_oath_entrance
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_activity_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_content_duration: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_dungeon_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_dungeon_entry_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_dungeon_reward_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_pre_pre_quest_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_pre_quest_id: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_reward_preview: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_hide_oath_entrance: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
  blitz_rush_stage_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: open_day
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_open_day
      - id: watcher_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_watcher_id_list
      - id: stage_title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_stage_title
      - id: game_play_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_game_play_desc
      - id: guidetask_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_guidetask_desc
      - id: guide_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_guide_quest_id
      - id: push_tips_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_push_tips_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_open_day: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_watcher_id_list: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_stage_title: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_game_play_desc: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_guidetask_desc: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_guide_quest_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_push_tips_id: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
  blitz_rush_parkour_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: open_day
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_open_day
      - id: group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_group_id
      - id: title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: watcher_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_watcher_id_list
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_open_day: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_group_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_title: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_desc: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_watcher_id_list: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
  bounce_conjuring_preview_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_id
      - id: activity_stay_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_stay_time
      - id: pre_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_pre_quest_id
      - id: quest_watcher_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_quest_watcher_id
      - id: reward_preview_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_preview_id
      - id: match_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_match_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_activity_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_activity_stay_time: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_pre_quest_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_quest_watcher_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_reward_preview_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_match_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
  bounce_conjuring_chapter_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: chapter_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_chapter_id
      - id: open_day
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_open_day
      - id: gallery_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gallery_id
      - id: draft_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_draft_id
      - id: watcher_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_watcher_id_list
      - id: title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: other_ball_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_other_ball_list
      - id: new_ball_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_new_ball_list
      - id: other_item_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_other_item_list
      - id: up_item_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_up_item_list
      - id: pos
        type: ks__array_of__f4__length_u
        if: ks__has_field_pos
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_chapter_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_open_day: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_gallery_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_draft_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_watcher_id_list: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_title: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_desc: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_other_ball_list: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_new_ball_list: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_other_item_list: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_up_item_list: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_pos: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
  bounce_conjuring_item_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: bg_icon_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_bg_icon_hash
      - id: bg_icon_hash_pre
        type: s1
        if: ks__has_field_bg_icon_hash
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_title: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_desc: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_bg_icon_hash: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  buoyant_combat_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_id
      - id: reward_preview_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_preview_id
      - id: push_tips_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_push_tips_id
      - id: level_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_level_id_list
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_activity_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_reward_preview_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_push_tips_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_level_id_list: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  channeller_slab_preview_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_id
      - id: activity_stay_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_stay_time
      - id: unlock_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_unlock_quest_id
      - id: slab_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_slab_quest_id
      - id: unlock_player_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_unlock_player_level
      - id: level_reward_gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level_reward_gadget_id
      - id: is_mask_avatar_reward
        type: u1
        if: ks__has_field_is_mask_avatar_reward
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_activity_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_activity_stay_time: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_unlock_quest_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_slab_quest_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_unlock_player_level: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_level_reward_gadget_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_is_mask_avatar_reward: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
  channeller_slab_chapter_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: chapter_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_chapter_id
      - id: open_day
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_open_day
      - id: title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title
      - id: pre_quest
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_pre_quest
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_chapter_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_open_day: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_title: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_pre_quest: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  channeller_slab_level_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: stage_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_stage_id
      - id: wave_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_wave_id
      - id: point_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_point_name
      - id: camp_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_camp_name
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: preview_reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_preview_reward_id
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
      - id: group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_group_id
      - id: buff_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_buff_num
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_stage_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_wave_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_point_name: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_camp_name: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_desc: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_preview_reward_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_reward_id: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_group_id: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_buff_num: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
  channeller_slab_dungeon_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: stage_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_stage_id
      - id: dungeon_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_dungeon_id
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
      - id: point_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_point_id
      - id: pos
        type: ks__array_of__f4__length_u
        if: ks__has_field_pos
      - id: title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
    instances:
      ks__has_field_stage_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_dungeon_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_reward_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_point_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_pos: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_title: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_desc: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
  ks__enum__channeller_slab_buff_quality:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: channeller_slab_buff_quality
  channeller_slab_buff_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: buff_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_buff_name
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: desc_param
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_desc_param
      - id: material_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_material_id
      - id: icon
        type: aux_types::string
        if: ks__has_field_icon
      - id: cost
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cost
      - id: buff_quality
        type: ks__enum__channeller_slab_buff_quality
        if: ks__has_field_buff_quality
      - id: buff_quality_type
        type: ks__enum__quality_type
        if: ks__has_field_buff_quality_type
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_buff_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_desc: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_desc_param: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_material_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_icon: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_cost: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_buff_quality: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_buff_quality_type: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
  channeller_slab_buff_energy_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: avatar_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_avatar_level
      - id: single_energy
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_single_energy
      - id: mp_energy
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mp_energy
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_avatar_level: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_single_energy: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_mp_energy: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  channeller_slab_buff_cost_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: buff_quality_type
        type: ks__enum__quality_type
        if: ks__has_field_buff_quality_type
      - id: buff_cost
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_buff_cost
      - id: item_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_item_id
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_buff_quality_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_buff_cost: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_item_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_desc: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  channeller_slab_loop_dungeon_preview_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_id
      - id: title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title
      - id: entry_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_entry_desc
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: open_day
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_open_day
      - id: point_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_point_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_activity_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_title: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_entry_desc: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_desc: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_open_day: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_point_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
  channeller_slab_loop_dungeon_reward_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: score_grade
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_score_grade
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_score_grade: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_reward_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  ks__enum__channeller_slab_difficulty:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: channeller_slab_difficulty
  channeller_slab_loop_dungeon_difficulty_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: dungeon_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_dungeon_id
      - id: stage_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_stage_id
      - id: difficulty
        type: ks__enum__channeller_slab_difficulty
        if: ks__has_field_difficulty
      - id: monster_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_monster_level
      - id: score_ratio
        type: f4
        if: ks__has_field_score_ratio
      - id: base_score
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_base_score
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_dungeon_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_stage_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_difficulty: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_monster_level: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_score_ratio: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_base_score: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
  ks__enum__channeller_slab_condition:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: channeller_slab_condition
  channeller_slab_loop_dungeon_condition_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: condition_type
        type: ks__enum__channeller_slab_condition
        if: ks__has_field_condition_type
      - id: icon
        type: aux_types::string
        if: ks__has_field_icon
      - id: condition_param1
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_condition_param1
      - id: condition_param2
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_condition_param2
      - id: exclusive_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_exclusive_id
      - id: score
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_score
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_desc: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_condition_type: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_icon: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_condition_param1: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_condition_param2: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_exclusive_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_score: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
  channeller_slab_loop_dungeon_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: open_day
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_open_day
      - id: title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title
      - id: content
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_content
      - id: monster_id_vec
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_monster_id_vec
      - id: limiting_condition_vec
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_limiting_condition_vec
      - id: first_pass_reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_first_pass_reward_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_open_day: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_title: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_content: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_monster_id_vec: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_limiting_condition_vec: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_first_pass_reward_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
  activity_chess_preview_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_id
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: reward_preview_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_preview_id
      - id: pre_quest_main_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_pre_quest_main_id
      - id: open_quest_main_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_open_quest_main_id
      - id: watcher_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_watcher_list
      - id: match_player_limit
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_match_player_limit
      - id: open_teach_dungeon
        type: u1
        if: ks__has_field_open_teach_dungeon
      - id: teach_dungeon_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_teach_dungeon_id
      - id: teach_map_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_teach_map_id
      - id: punish_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_punish_time
      - id: coin_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_coin_id
      - id: series_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_series_id
      - id: teach_score_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_teach_score_id_list
    instances:
      ks__has_field_activity_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_desc: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_reward_preview_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_pre_quest_main_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_open_quest_main_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_watcher_list: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_match_player_limit: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_open_teach_dungeon: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_teach_dungeon_id: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_teach_map_id: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_punish_time: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_coin_id: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_series_id: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_teach_score_id_list: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
  ks__enum__card_fortune_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: card_fortune_type
  activity_chess_level_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: exp_to_next
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_exp_to_next
      - id: home_hp
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_home_hp
      - id: initial_build
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_initial_build
      - id: card_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_card_count
      - id: card_cost
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_card_cost
      - id: card_fortune
        type: ks__enum__card_fortune_type
        if: ks__has_field_card_fortune
      - id: fortune_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_fortune_list
      - id: free_card_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_free_card_count
      - id: is_new_gear_unlocked
        type: u1
        if: ks__has_field_is_new_gear_unlocked
      - id: is_new_card_unlocked
        type: u1
        if: ks__has_field_is_new_card_unlocked
    instances:
      ks__has_field_level: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_desc: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_exp_to_next: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_home_hp: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_initial_build: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_card_count: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_card_cost: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_card_fortune: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_fortune_list: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_free_card_count: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_is_new_gear_unlocked: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_is_new_card_unlocked: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
  activity_chess_map_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: chess_map_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_chess_map_id
      - id: map_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_map_name
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: unlock_tips
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_unlock_tips
      - id: map_icon_path
        type: aux_types::string
        if: ks__has_field_map_icon_path
      - id: build_gear_limit
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_build_gear_limit
      - id: dungeon_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_dungeon_id
      - id: entry_point_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_entry_point_id
      - id: unlock_day
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_unlock_day
      - id: is_teach_map
        type: u1
        if: ks__has_field_is_teach_map
      - id: prev_map_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_prev_map_id
      - id: show
        type: u1
        if: ks__has_field_show
      - id: entrance_point_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_entrance_point_id_list
      - id: exit_point_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_exit_point_id_list
    instances:
      ks__has_field_chess_map_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_map_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_desc: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_unlock_tips: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_map_icon_path: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_build_gear_limit: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_dungeon_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_entry_point_id: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_unlock_day: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_is_teach_map: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_prev_map_id: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_show: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_entrance_point_id_list: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_exit_point_id_list: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
  activity_chess_schedule_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: day
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_day
      - id: exp_up_limit
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_exp_up_limit
      - id: open_map_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_open_map_list
      - id: cond_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cond_id
    instances:
      ks__has_field_day: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_exp_up_limit: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_open_map_list: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_cond_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  activity_chess_gear_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: gear_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gear_id
      - id: gear_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gear_name
      - id: gear_short_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gear_short_name
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: gear_icon_path
        type: aux_types::string
        if: ks__has_field_gear_icon_path
      - id: tag_icon_path
        type: aux_types::string
        if: ks__has_field_tag_icon_path
      - id: attack
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_attack
      - id: mastery
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_mastery
      - id: attack_speed
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_attack_speed
      - id: attack_range
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_attack_range
      - id: build_cost
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_build_cost
      - id: demolition_refund
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_demolition_refund
      - id: gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gadget_id
      - id: build_limit
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_build_limit
      - id: ban_dungeon_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_ban_dungeon_list
      - id: is_enable_rotate
        type: u1
        if: ks__has_field_is_enable_rotate
      - id: init_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_init_level
      - id: need_chess_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_need_chess_level
    instances:
      ks__has_field_gear_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_gear_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_gear_short_name: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_desc: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_gear_icon_path: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_tag_icon_path: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_attack: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_mastery: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_attack_speed: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_attack_range: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_build_cost: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_demolition_refund: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_gadget_id: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_build_limit: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_ban_dungeon_list: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_is_enable_rotate: # Field №15
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
      ks__has_field_init_level: # Field №16
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000001) != 0)
      ks__has_field_need_chess_level: # Field №17
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000010) != 0)
  ks__enum__chess_card_tag:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: chess_card_tag
  ks__array_of__ks__array_of__f4__length_u__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__array_of__f4__length_u
        repeat: expr
        repeat-expr: length.value
  ks__array_of__u1__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: u1
        repeat: expr
        repeat-expr: length.value
  ks__enum__chess_card_numerical_modification_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: chess_card_numerical_modification_type
  ks__enum__chess_card_numerical_modification_mode:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: chess_card_numerical_modification_mode
  ks__enum__chess_card_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: chess_card_type
  ks__enum__chess_card_quality_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: chess_card_quality_type
  ks__enum__chess_card_target_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: chess_card_target_type
  ks__enum__chess_card_effect_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: chess_card_effect_type
  chess_card_effect:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: target_type
        type: ks__enum__chess_card_target_type
        if: ks__has_field_target_type
      - id: target_param_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_target_param_list
      - id: effect_type
        type: ks__enum__chess_card_effect_type
        if: ks__has_field_effect_type
      - id: effect_str_param
        type: aux_types::string
        if: ks__has_field_effect_str_param
      - id: effect_param1
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_effect_param1
      - id: effect_param2
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_effect_param2
      - id: effect_param3
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_effect_param3
      - id: begin_round
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_begin_round
      - id: active_rounds
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_active_rounds
      - id: effect_index
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_effect_index
    instances:
      ks__has_field_target_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_target_param_list: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_effect_type: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_effect_str_param: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_effect_param1: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_effect_param2: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_effect_param3: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_begin_round: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_active_rounds: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_effect_index: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
  ks__array_of__chess_card_effect__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: chess_card_effect
        repeat: expr
        repeat-expr: length.value
  activity_chess_card_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: number
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_number
      - id: tag
        type: ks__enum__chess_card_tag
        if: ks__has_field_tag
      - id: need_chess_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_need_chess_level
      - id: card_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_card_name
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: extra_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_extra_desc
      - id: extra_desc2
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_extra_desc2
      - id: desc_param_list
        type: ks__array_of__ks__array_of__f4__length_u__length_u
        if: ks__has_field_desc_param_list
      - id: desc_param_superposition_list
        type: ks__array_of__u1__length_u
        if: ks__has_field_desc_param_superposition_list
      - id: is_disused
        type: u1
        if: ks__has_field_is_disused
      - id: card_numerical_modification_type
        type: ks__enum__chess_card_numerical_modification_type
        if: ks__has_field_card_numerical_modification_type
      - id: card_numerical_modification_mode
        type: ks__enum__chess_card_numerical_modification_mode
        if: ks__has_field_card_numerical_modification_mode
      - id: card_numerical_modification_value
        type: f4
        if: ks__has_field_card_numerical_modification_value
      - id: cost_points
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cost_points
      - id: card_type
        type: ks__enum__chess_card_type
        if: ks__has_field_card_type
      - id: card_quality_type
        type: ks__enum__chess_card_quality_type
        if: ks__has_field_card_quality_type
      - id: card_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_card_count
      - id: effect
        type: chess_card_effect
        if: ks__has_field_effect
      - id: curse_weight
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_curse_weight
      - id: is_can_attach_curse
        type: u1
        if: ks__has_field_is_can_attach_curse
      - id: is_remove_on_pick
        type: u1
        if: ks__has_field_is_remove_on_pick
      - id: is_show_on_pick
        type: u1
        if: ks__has_field_is_show_on_pick
      - id: extra_effect_list
        type: ks__array_of__chess_card_effect__length_s
        if: ks__has_field_extra_effect_list
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_number: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_tag: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_need_chess_level: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_card_name: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_desc: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_extra_desc: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_extra_desc2: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_desc_param_list: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_desc_param_superposition_list: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_is_disused: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_card_numerical_modification_type: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_card_numerical_modification_mode: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_card_numerical_modification_value: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_cost_points: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_card_type: # Field №15
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
      ks__has_field_card_quality_type: # Field №16
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000001) != 0)
      ks__has_field_card_count: # Field №17
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000010) != 0)
      ks__has_field_effect: # Field №18
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000100) != 0)
      ks__has_field_curse_weight: # Field №19
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00001000) != 0)
      ks__has_field_is_can_attach_curse: # Field №20
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00010000) != 0)
      ks__has_field_is_remove_on_pick: # Field №21
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00100000) != 0)
      ks__has_field_is_show_on_pick: # Field №22
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b01000000) != 0)
      ks__has_field_extra_effect_list: # Field №23
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b10000000) != 0)
  activity_chess_map_point_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: coord_x
        type: f4
        if: ks__has_field_coord_x
      - id: coord_y
        type: f4
        if: ks__has_field_coord_y
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_coord_x: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_coord_y: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  activity_chess_affix_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_desc: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  activity_delivery_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: schedule_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_schedule_id
      - id: daily_config_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_daily_config_id_list
      - id: need_player_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_need_player_level
    instances:
      ks__has_field_schedule_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_daily_config_id_list: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_need_player_level: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  delivery_quest_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: parent_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_parent_quest_id
      - id: delivery_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_delivery_quest_id
      - id: start_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_start_quest_id
      - id: talk_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_talk_quest_id
      - id: watcher_id
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_watcher_id
      - id: item_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_item_id
    instances:
      ks__has_field_parent_quest_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_delivery_quest_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_start_quest_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_talk_quest_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_watcher_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_item_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
  ks__array_of__delivery_quest_config__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: delivery_quest_config
        repeat: expr
        repeat-expr: length.value
  activity_delivery_daily_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: daily_config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_daily_config_id
      - id: delivery_quest_config
        type: ks__array_of__delivery_quest_config__length_s
        if: ks__has_field_delivery_quest_config
      - id: task_desc
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_task_desc
      - id: daily_reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_daily_reward_id
    instances:
      ks__has_field_daily_config_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_delivery_quest_config: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_task_desc: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_daily_reward_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  activity_delivery_watcher_data_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: trigger_config
        type: watcher_trigger_config
        if: ks__has_field_trigger_config
      - id: progress
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_progress
      - id: is_disuse
        type: u1
        if: ks__has_field_is_disuse
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_trigger_config: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_progress: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_is_disuse: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  dig_over_all_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_id
      - id: duration
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_duration
      - id: quest_unlock_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_quest_unlock_id
      - id: quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_quest_id
      - id: stage_unlock_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_stage_unlock_id
      - id: reward_preview_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_preview_id
      - id: end_quest_show_cond
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_end_quest_show_cond
      - id: end_quest_finish_cond
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_end_quest_finish_cond
      - id: end_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_end_quest_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_activity_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_duration: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_quest_unlock_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_quest_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_stage_unlock_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_reward_preview_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_end_quest_show_cond: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_end_quest_finish_cond: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_end_quest_id: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
  dig_stage_data_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: stage_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_stage_id
      - id: quest_unlock_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_quest_unlock_id
      - id: quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_quest_id
      - id: stage_unlock_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_stage_unlock_id
      - id: quest_title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_quest_title
      - id: quest_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_quest_desc
      - id: push_tips_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_push_tips_id
      - id: unlock_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_unlock_time
    instances:
      ks__has_field_stage_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_quest_unlock_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_quest_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_stage_unlock_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_quest_title: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_quest_desc: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_push_tips_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_unlock_time: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
  dig_group_link_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: stage
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_stage
      - id: group_link_bundle_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_group_link_bundle_id
      - id: group_link_bundle_id2
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_group_link_bundle_id2
      - id: group_link_change_cond
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_group_link_change_cond
      - id: area_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_area_name
      - id: watcher_id
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_watcher_id
      - id: background
        type: aux_types::string
        if: ks__has_field_background
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_stage: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_group_link_bundle_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_group_link_bundle_id2: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_group_link_change_cond: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_area_name: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_watcher_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_background: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
  dragon_spine_preview_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_id
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: pre_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_pre_quest_id
      - id: unlock_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_unlock_level
      - id: reward_preview_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_preview_id
      - id: content_duration
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_content_duration
      - id: quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_quest_id
      - id: quest_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_quest_id_list
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_activity_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_desc: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_pre_quest_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_unlock_level: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_reward_preview_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_content_duration: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_quest_id: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_quest_id_list: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
  dragon_spine_stage_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: chapter_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_chapter_id
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: coin_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_coin_id_list
      - id: openday
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_openday
      - id: pre_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_pre_quest_id
      - id: mission_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_mission_id_list
      - id: reward_preview_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_preview_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_chapter_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_desc: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_coin_id_list: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_openday: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_pre_quest_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_mission_id_list: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_reward_preview_id: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
  ks__enum__dragon_spine_mission_finish_exec_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: dragon_spine_mission_finish_exec_type
  dragon_spine_mission_finish_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: type
        type: ks__enum__dragon_spine_mission_finish_exec_type
        if: ks__has_field_type
      - id: param
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_param
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_param: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__dragon_spine_mission_finish_config__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: dragon_spine_mission_finish_config
        repeat: expr
        repeat-expr: length.value
  dragon_spine_mission_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: chapter_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_chapter_id
      - id: watcher_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_watcher_id
      - id: finish_exec
        type: ks__array_of__dragon_spine_mission_finish_config__length_s
        if: ks__has_field_finish_exec
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_chapter_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_watcher_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_finish_exec: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  dragon_spine_enhance_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: activity_ability_group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_ability_group_id
      - id: process
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_process
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_activity_ability_group_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_process: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_desc: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  echo_shell_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: story_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_story_id
      - id: voice_title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_voice_title
      - id: voice_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_voice_desc
      - id: voice_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_voice_list
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_story_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_voice_title: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_voice_desc: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_voice_list: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  echo_shell_reward_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
      - id: shell_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_shell_count
      - id: show_at_top
        type: u1
        if: ks__has_field_show_at_top
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_reward_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_shell_count: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_show_at_top: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  echo_shell_story_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: story_title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_story_title
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_story_title: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  echo_shell_float_signal_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_group_id
      - id: config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_config_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_group_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_config_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  effigy_challenge_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: day_index
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_day_index
      - id: dungeon_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_dungeon_id
      - id: prefab
        type: aux_types::string
        if: ks__has_field_prefab
      - id: title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title
      - id: content
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_content
      - id: limiting_condition_vec
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_limiting_condition_vec
      - id: up_avatar_vec
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_up_avatar_vec
      - id: first_pass_reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_first_pass_reward_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_day_index: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_dungeon_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_prefab: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_title: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_content: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_limiting_condition_vec: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_up_avatar_vec: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_first_pass_reward_id: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
  ks__enum__effigy_difficulty:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: effigy_difficulty
  effigy_difficulty_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: challenge_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_challenge_id
      - id: base_score
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_base_score
      - id: monster_difficulty
        type: ks__enum__effigy_difficulty
        if: ks__has_field_monster_difficulty
      - id: monster_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_monster_level
      - id: score_ratio
        type: f4
        if: ks__has_field_score_ratio
      - id: finish_challenge_index
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_finish_challenge_index
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_challenge_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_base_score: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_monster_difficulty: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_monster_level: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_score_ratio: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_finish_challenge_index: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
  effigy_reward_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: score_grade
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_score_grade
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_score_grade: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_reward_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  ks__enum__effigy_condition:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: effigy_condition
  effigy_limiting_condition_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: condition_type
        type: ks__enum__effigy_condition
        if: ks__has_field_condition_type
      - id: icon
        type: aux_types::string
        if: ks__has_field_icon
      - id: condition_param1
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_condition_param1
      - id: condition_param2
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_condition_param2
      - id: exclusive_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_exclusive_id
      - id: is_in_row
        type: u1
        if: ks__has_field_is_in_row
      - id: exclusive_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_exclusive_desc
      - id: score
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_score
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_desc: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_condition_type: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_icon: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_condition_param1: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_condition_param2: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_exclusive_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_is_in_row: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_exclusive_desc: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_score: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
  expedition_activity_preview_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_quest_id
      - id: prequest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_prequest_id
      - id: npc_city_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_npc_city_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_quest_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_prequest_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_npc_city_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  expedition_path_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: difficulty_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_difficulty_id
      - id: super_element
        type: aux_types::string
        if: ks__has_field_super_element
      - id: basic_reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_basic_reward_id
      - id: bonus_reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_bonus_reward_id
      - id: path_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_path_name
      - id: path_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_path_desc
      - id: level_reward_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_level_reward_list
      - id: reward_preview_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_preview_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_difficulty_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_super_element: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_basic_reward_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_bonus_reward_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_path_name: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_path_desc: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_level_reward_list: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_reward_preview_id: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
  expedition_difficulty_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: need_hours
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_need_hours
      - id: min_player
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_min_player
      - id: max_player
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_player
      - id: min_refresh_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_min_refresh_count
      - id: max_refresh_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_refresh_count
      - id: coef
        type: f4
        if: ks__has_field_coef
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_need_hours: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_min_player: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_max_player: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_min_refresh_count: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_max_refresh_count: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_coef: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
  expedition_bonus_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: avatar_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_avatar_level
      - id: probability
        type: f4
        if: ks__has_field_probability
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_avatar_level: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_probability: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  expedition_activity_marker_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: pos_x
        type: f4
        if: ks__has_field_pos_x
      - id: pos_y
        type: f4
        if: ks__has_field_pos_y
      - id: picture_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_picture_hash
      - id: picture_hash_pre
        type: s1
        if: ks__has_field_picture_hash
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_pos_x: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_pos_y: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_picture_hash: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  expedition_challenge_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: unlock_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_unlock_time
      - id: group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_group_id
      - id: reward_challenge_index
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_challenge_index
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
      - id: challenge_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_challenge_name
      - id: challenge_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_challenge_desc
      - id: super_element
        type: aux_types::string
        if: ks__has_field_super_element
      - id: center_pos_list
        type: ks__array_of__f4__length_u
        if: ks__has_field_center_pos_list
      - id: center_radius
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_center_radius
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_unlock_time: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_group_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_reward_challenge_index: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_reward_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_challenge_name: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_challenge_desc: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_super_element: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_center_pos_list: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_center_radius: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
  fleur_fair_preview_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_id
      - id: activity_stay_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_stay_time
      - id: unlock_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_unlock_quest_id
      - id: unlock_player_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_unlock_player_level
      - id: gameplay_pre_quest
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gameplay_pre_quest
      - id: reward_preview
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_preview
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_activity_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_activity_stay_time: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_unlock_quest_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_unlock_player_level: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_gameplay_pre_quest: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_reward_preview: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
  fleur_fair_chapter_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: chapter_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_chapter_id
      - id: open_day
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_open_day
      - id: title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: main_quest
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_main_quest
      - id: pre_quest
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_pre_quest
      - id: mini_quest
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_mini_quest
      - id: icon
        type: aux_types::string
        if: ks__has_field_icon
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_chapter_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_open_day: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_title: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_desc: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_main_quest: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_pre_quest: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_mini_quest: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_icon: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
  ks__enum__fleur_fair_mini_game_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: fleur_fair_mini_game_type
  fleur_fair_mini_game_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: mini_game_type
        type: ks__enum__fleur_fair_mini_game_type
        if: ks__has_field_mini_game_type
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: gallery_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gallery_id
      - id: config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_config_id
      - id: open_day
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_open_day
      - id: quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_quest_id
      - id: reward_rank_low
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_rank_low
      - id: reward_rank_middle
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_rank_middle
      - id: reward_rank_high
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_rank_high
      - id: watcher_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_watcher_id_list
      - id: avatar_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_avatar_id_list
      - id: avatar_score
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_avatar_score
      - id: tips_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_tips_id_list
      - id: tips_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_tips_desc
      - id: pos
        type: ks__array_of__f4__length_u
        if: ks__has_field_pos
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_mini_game_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_desc: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_gallery_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_config_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_open_day: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_quest_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_reward_rank_low: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_reward_rank_middle: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_reward_rank_high: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_watcher_id_list: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_avatar_id_list: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_avatar_score: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_tips_id_list: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_tips_desc: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_pos: # Field №15
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
  fleur_fair_tips_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: icon
        type: aux_types::string
        if: ks__has_field_icon
      - id: title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_icon: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_title: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_desc: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  fleur_fair_dungeon_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: section_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_section_id
      - id: open_day
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_open_day
      - id: obtain_coin_limit
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_obtain_coin_limit
      - id: activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_id
      - id: watcher_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_watcher_id_list
      - id: dungeon_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_dungeon_id
      - id: mini_game_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_mini_game_list
      - id: monster_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_monster_list
      - id: energy_grade_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_energy_grade_list
      - id: initial_energy
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_initial_energy
      - id: energy_limit
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_energy_limit
      - id: success_reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_success_reward_id
      - id: failure_reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_failure_reward_id
      - id: punish_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_punish_time
      - id: title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_section_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_open_day: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_obtain_coin_limit: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_activity_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_watcher_id_list: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_dungeon_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_mini_game_list: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_monster_list: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_energy_grade_list: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_initial_energy: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_energy_limit: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_success_reward_id: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_failure_reward_id: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_punish_time: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_title: # Field №15
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
      ks__has_field_desc: # Field №16
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000001) != 0)
  ks__enum__fleur_fair_dungeon_stat_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: fleur_fair_dungeon_stat_type
  ks__enum__ordering_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: ordering_type
  ks__enum__fleur_fair_dungeon_stat_method:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: fleur_fair_dungeon_stat_method
  fleur_fair_dungeon_stat_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: gallery_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gallery_id
      - id: stat_type
        type: ks__enum__fleur_fair_dungeon_stat_type
        if: ks__has_field_stat_type
      - id: stat_param_list
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_stat_param_list
      - id: ordering_type
        type: ks__enum__ordering_type
        if: ks__has_field_ordering_type
      - id: stat_method
        type: ks__enum__fleur_fair_dungeon_stat_method
        if: ks__has_field_stat_method
      - id: priority
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_priority
      - id: title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_gallery_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_stat_type: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_stat_param_list: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_ordering_type: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_stat_method: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_priority: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_title: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_desc: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
  fleur_fair_buff_energy_stat_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: gallery_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gallery_id
      - id: stat_param
        type: aux_types::string
        if: ks__has_field_stat_param
      - id: priority
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_priority
      - id: title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_gallery_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_stat_param: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_priority: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_title: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  flight_daily_point_factor:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: time_factor
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_time_factor
      - id: gold_factor
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gold_factor
    instances:
      ks__has_field_time_factor: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_gold_factor: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__flight_daily_point_factor__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: flight_daily_point_factor
        repeat: expr
        repeat-expr: length.value
  flight_activity_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_id
      - id: preview_reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_preview_reward_id
      - id: start_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_start_quest_id
      - id: npc_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_npc_id
      - id: medal_id
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_medal_id
      - id: daily_factor_vec
        type: ks__array_of__flight_daily_point_factor__length_s
        if: ks__has_field_daily_factor_vec
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_activity_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_preview_reward_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_start_quest_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_npc_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_medal_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_daily_factor_vec: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
  flight_daily_info:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: watcher
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_watcher
    instances:
      ks__has_field_watcher: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
  ks__array_of__flight_daily_info__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: flight_daily_info
        repeat: expr
        repeat-expr: length.value
  flight_activity_medal_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: medal_icon
        type: aux_types::string
        if: ks__has_field_medal_icon
      - id: daily_info
        type: ks__array_of__flight_daily_info__length_s
        if: ks__has_field_daily_info
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_medal_icon: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_daily_info: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  flight_activity_day_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: pos
        type: ks__array_of__f4__length_u
        if: ks__has_field_pos
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_pos: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  activity_group_links_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: link_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_link_id
      - id: set_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_set_list
    instances:
      ks__has_field_link_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_set_list: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__enum__activity_group_link_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: activity_group_link_type
  ks__enum__activity_group_link_reward_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: activity_group_link_reward_type
  group_links_bundle_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: link_type
        type: ks__enum__activity_group_link_type
        if: ks__has_field_link_type
      - id: group_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_group_list
      - id: hint_group
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_hint_group
      - id: hint_radius
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_hint_radius
      - id: reward_type
        type: ks__enum__activity_group_link_reward_type
        if: ks__has_field_reward_type
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
      - id: revise_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_revise_level
      - id: icon
        type: aux_types::string
        if: ks__has_field_icon
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: tips
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_tips
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_link_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_group_list: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_hint_group: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_hint_radius: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_reward_type: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_reward_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_revise_level: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_icon: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_name: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_tips: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
  group_links_bundle_reward_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
      - id: reward_preview_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_preview_id
      - id: drop_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_drop_id
    instances:
      ks__has_field_reward_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_reward_preview_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_drop_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  activity_hide_and_seek_basic_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_id
      - id: title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: push_tips_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_push_tips_id
      - id: reward_preview_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_preview_id
      - id: one_time_reward_preview_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_one_time_reward_preview_id
      - id: unlock_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_unlock_quest_id
      - id: match_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_match_id
      - id: draft_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_draft_id
      - id: score_unlock_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_score_unlock_list
      - id: watcher_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_watcher_list
      - id: skill_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_skill_list
      - id: map_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_map_list
      - id: chanllenge_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_chanllenge_list
      - id: score_item_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_score_item_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_activity_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_title: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_desc: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_push_tips_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_reward_preview_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_one_time_reward_preview_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_unlock_quest_id: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_match_id: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_draft_id: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_score_unlock_list: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_watcher_list: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_skill_list: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_map_list: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_chanllenge_list: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_score_item_id: # Field №15
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
  ks__enum__hide_and_seek_skill_category:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: hide_and_seek_skill_category
  ks__enum__hide_and_seek_skill_sub_category:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: hide_and_seek_skill_sub_category
  hide_and_seek_skill_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: challenge_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_challenge_id
      - id: skill_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_skill_id
      - id: order
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_order
      - id: skill_category
        type: ks__enum__hide_and_seek_skill_category
        if: ks__has_field_skill_category
      - id: skill_sub_category
        type: ks__enum__hide_and_seek_skill_sub_category
        if: ks__has_field_skill_sub_category
      - id: is_default
        type: u1
        if: ks__has_field_is_default
      - id: category_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_category_desc
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_challenge_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_skill_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_order: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_skill_category: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_skill_sub_category: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_is_default: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_category_desc: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
  ks__enum__match_limit_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: match_limit_type
  match_cond:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: type
        type: ks__enum__match_limit_type
        if: ks__has_field_type
      - id: param
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_param
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_param: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__match_cond__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: match_cond
        repeat: expr
        repeat-expr: length.value
  hide_and_seek_match_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title
      - id: unlock_tips
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_unlock_tips
      - id: dsc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_dsc
      - id: map_icon_path_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_map_icon_path_hash
      - id: map_icon_path_hash_pre
        type: s1
        if: ks__has_field_map_icon_path_hash
      - id: map_small_icon_path_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_map_small_icon_path_hash
      - id: map_small_icon_path_hash_pre
        type: s1
        if: ks__has_field_map_small_icon_path_hash
      - id: group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_group_id
      - id: transport_point_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_transport_point_list
      - id: duration_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_duration_list
      - id: gallery_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gallery_id
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: cond
        type: ks__array_of__match_cond__length_s
        if: ks__has_field_cond
    instances:
      ks__has_field_title: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_unlock_tips: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_dsc: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_map_icon_path_hash: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_map_small_icon_path_hash: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_group_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_transport_point_list: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_duration_list: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_gallery_id: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_id: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_cond: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
  luna_rite_preview_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_id
      - id: unlock_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_unlock_quest_id
      - id: unlock_quest_id2
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_unlock_quest_id2
      - id: unlock_player_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_unlock_player_level
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
      - id: activity_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_quest_id
      - id: guide_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_guide_quest_id
      - id: challenge_push_tips_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_challenge_push_tips_id
      - id: plot_push_tips_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_plot_push_tips_id
      - id: plot_push_tips_pre_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_plot_push_tips_pre_quest_id
      - id: max_atmosphere
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_atmosphere
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_activity_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_unlock_quest_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_unlock_quest_id2: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_unlock_player_level: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_reward_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_activity_quest_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_guide_quest_id: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_challenge_push_tips_id: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_plot_push_tips_id: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_plot_push_tips_pre_quest_id: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_max_atmosphere: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
  ks__enum__luna_rite_quest_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: luna_rite_quest_type
  luna_rite_quest_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_quest_id
      - id: quest_type
        type: ks__enum__luna_rite_quest_type
        if: ks__has_field_quest_type
      - id: open_day
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_open_day
      - id: pre_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_pre_quest_id
      - id: atmosphere_need
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_atmosphere_need
      - id: chapter_icon
        type: aux_types::string
        if: ks__has_field_chapter_icon
      - id: chapter
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_chapter
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_quest_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_quest_type: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_open_day: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_pre_quest_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_atmosphere_need: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_chapter_icon: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_chapter: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_name: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_desc: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
  luna_rite_battle_buff_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: region_type
        type: ks__enum__luna_rite_region_type
        if: ks__has_field_region_type
      - id: number
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_number
      - id: buff
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_buff
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_region_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_number: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_buff: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_reward_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  find_hilichurl_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_id
      - id: reward_preview_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_preview_id
      - id: guide_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_guide_quest_id
      - id: end_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_end_quest_id
      - id: assignment_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_assignment_id_list
      - id: hili_wei_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_hili_wei_id_list
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_activity_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_reward_preview_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_guide_quest_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_end_quest_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_assignment_id_list: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_hili_wei_id_list: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
  ks__enum__find_hilichurl_assignment_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: find_hilichurl_assignment_type
  find_hilichurl_assignment_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: index
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_index
      - id: day_index
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_day_index
      - id: quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_quest_id
      - id: assignment_type
        type: ks__enum__find_hilichurl_assignment_type
        if: ks__has_field_assignment_type
      - id: key_word
        type: aux_types::string
        if: ks__has_field_key_word
      - id: hint_sub_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_hint_sub_quest_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_index: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_day_index: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_quest_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_assignment_type: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_key_word: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_hint_sub_quest_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
  find_hilichurl_hili_wei_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: day_index
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_day_index
      - id: duration_hint
        type: aux_types::string
        if: ks__has_field_duration_hint
      - id: group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_group_id
      - id: position_center
        type: ks__array_of__f4__length_u
        if: ks__has_field_position_center
      - id: position_radius
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_position_radius
      - id: watcher_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_watcher_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_day_index: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_duration_hint: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_group_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_position_center: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_position_radius: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_watcher_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
  activity_mist_trial_level_data_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: schedule_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_schedule_id
      - id: level_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level_id
      - id: level_title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level_title
      - id: level_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level_desc
      - id: monster_preview_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_monster_preview_id_list
      - id: open_day
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_open_day
      - id: challenge_mission_watcher_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_challenge_mission_watcher_list
      - id: statistics_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_statistics_id_list
      - id: bg_icon_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_bg_icon_hash
      - id: bg_icon_hash_pre
        type: s1
        if: ks__has_field_bg_icon_hash
      - id: dungeon_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_dungeon_id
      - id: dungeon_factor_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_dungeon_factor_id_list
      - id: fail_tips
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_fail_tips
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_schedule_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_level_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_level_title: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_level_desc: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_monster_preview_id_list: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_open_day: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_challenge_mission_watcher_list: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_statistics_id_list: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_bg_icon_hash: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_dungeon_id: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_dungeon_factor_id_list: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_fail_tips: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
  activity_mist_trial_avatar_data_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: schedule_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_schedule_id
      - id: trial_avatar_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_trial_avatar_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_schedule_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_trial_avatar_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  ks__enum__mist_trial_client_sync_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: mist_trial_client_sync_type
  activity_mist_trial_watcher_list_data_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: schedule_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_schedule_id
      - id: challenge_watcher_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_challenge_watcher_id
      - id: dungeon_show_content_type
        type: ks__enum__mist_trial_client_sync_type
        if: ks__has_field_dungeon_show_content_type
      - id: show_param
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_show_param
      - id: progress_format
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_progress_format
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_schedule_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_challenge_watcher_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_dungeon_show_content_type: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_show_param: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_progress_format: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
  ks__enum__mist_trial_statistic_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: mist_trial_statistic_type
  activity_mist_trial_statistics_list_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: schedule_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_schedule_id
      - id: stat_name
        type: ks__enum__mist_trial_statistic_type
        if: ks__has_field_stat_name
      - id: param
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_param
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_schedule_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_stat_name: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_param: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  moonfin_trial_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_id
      - id: level_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_level_id_list
      - id: activity_fish_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_fish_id
      - id: activity_fish_gain_limit
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_fish_gain_limit
      - id: activity_fish_pool_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_fish_pool_id
      - id: activity_reward_preview_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_reward_preview_id
      - id: push_tips_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_push_tips_id
      - id: main_quest_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_main_quest_list
      - id: precondition_main_quest_ids
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_precondition_main_quest_ids
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_activity_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_level_id_list: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_activity_fish_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_activity_fish_gain_limit: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_activity_fish_pool_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_activity_reward_preview_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_push_tips_id: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_main_quest_list: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_precondition_main_quest_ids: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
  ks__enum__moonfin_trial_activity_level_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: moonfin_trial_activity_level_type
  moonfin_trial_level_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: level_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level_id
      - id: level_type
        type: ks__enum__moonfin_trial_activity_level_type
        if: ks__has_field_level_type
      - id: specific_fish_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_specific_fish_id
      - id: gallery_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gallery_id
      - id: challenge_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_challenge_id
      - id: open_day
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_open_day
      - id: watcher_id
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_watcher_id
      - id: leading_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_leading_level
      - id: leading_main_quest
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_leading_main_quest
      - id: main_quest
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_main_quest
      - id: mark_position
        type: ks__array_of__f4__length_u
        if: ks__has_field_mark_position
      - id: reward_preview_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_preview_id
      - id: level_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level_name
      - id: description
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_description
      - id: title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title
    instances:
      ks__has_field_level_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_level_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_specific_fish_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_gallery_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_challenge_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_open_day: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_watcher_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_leading_level: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_leading_main_quest: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_main_quest: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_mark_position: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_reward_preview_id: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_level_name: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_description: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_title: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
  combo_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: combo_up_limit
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_combo_up_limit
      - id: rate
        type: f4
        if: ks__has_field_rate
    instances:
      ks__has_field_combo_up_limit: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_rate: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__combo_config__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: combo_config
        repeat: expr
        repeat-expr: length.value
  solo_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: solo_start
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_solo_start
      - id: solo_end
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_solo_end
      - id: is_self
        type: u1
        if: ks__has_field_is_self
    instances:
      ks__has_field_solo_start: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_solo_end: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_is_self: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  ks__array_of__solo_config__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: solo_config
        repeat: expr
        repeat-expr: length.value
  music_game_basic_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: music_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_music_id
      - id: music_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_music_level
      - id: json_path
        type: aux_types::string
        if: ks__has_field_json_path
      - id: long_press_interval
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_long_press_interval
      - id: long_press_down_speed
        type: f4
        if: ks__has_field_long_press_down_speed
      - id: long_press_pre_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_long_press_pre_time
      - id: success_pre_point
        type: f4
        if: ks__has_field_success_pre_point
      - id: success_late_point
        type: f4
        if: ks__has_field_success_late_point
      - id: scale_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scale_time
      - id: scale_range
        type: f4
        if: ks__has_field_scale_range
      - id: score_level_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_score_level_list
      - id: score_one_key
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_score_one_key
      - id: combo_config
        type: ks__array_of__combo_config__length_s
        if: ks__has_field_combo_config
      - id: unlock_tips
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_unlock_tips
      - id: solo_config
        type: ks__array_of__solo_config__length_s
        if: ks__has_field_solo_config
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_music_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_music_level: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_json_path: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_long_press_interval: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_long_press_down_speed: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_long_press_pre_time: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_success_pre_point: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_success_late_point: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_scale_time: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_scale_range: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_score_level_list: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_score_one_key: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_combo_config: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_unlock_tips: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_solo_config: # Field №15
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
  music_info_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: music_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_music_id
      - id: music_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_music_time
      - id: level_id
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_level_id
      - id: music_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_music_name
      - id: music_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_music_desc
      - id: mark_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mark_name
      - id: mark_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mark_desc
      - id: cond_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cond_id
      - id: watcher_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_watcher_list
      - id: avatar_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_avatar_id
      - id: point_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_point_id
      - id: instrument_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_instrument_id
      - id: avatar_instrument_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_avatar_instrument_id
    instances:
      ks__has_field_music_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_music_time: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_level_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_music_name: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_music_desc: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_mark_name: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_mark_desc: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_cond_id: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_watcher_list: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_avatar_id: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_point_id: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_instrument_id: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_avatar_instrument_id: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
  music_game_preview_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_id
      - id: music_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_music_id_list
    instances:
      ks__has_field_activity_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_music_id_list: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  music_game_position_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: inter_npcid
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_inter_npcid
      - id: npc_position
        type: ks__array_of__f4__length_u
        if: ks__has_field_npc_position
      - id: npc_rotation
        type: f4
        if: ks__has_field_npc_rotation
      - id: npc_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_npc_id
      - id: mark_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mark_id
      - id: free_style_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_free_style_id
      - id: ban_config
        type: aux_types::string
        if: ks__has_field_ban_config
    instances:
      ks__has_field_inter_npcid: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_npc_position: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_npc_rotation: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_npc_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_mark_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_free_style_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_ban_config: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
  music_instrument_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: instrument_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_instrument_id
      - id: widget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_widget_id
      - id: perform_id
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_perform_id
      - id: free_mode_perfab_path
        type: aux_types::string
        if: ks__has_field_free_mode_perfab_path
    instances:
      ks__has_field_instrument_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_widget_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_perform_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_free_mode_perfab_path: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  activity_plant_flower_main_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: schedule_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_schedule_id
      - id: flower_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_flower_id_list
      - id: seed_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_seed_id_list
      - id: max_wish_flower_kinds
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_wish_flower_kinds
      - id: reward_preview_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_preview_id
      - id: guarantee_start_times
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_guarantee_start_times
      - id: pre_quest_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_pre_quest_id_list
      - id: open_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_open_quest_id
      - id: content_day
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_content_day
      - id: daily_config_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_daily_config_id_list
    instances:
      ks__has_field_schedule_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_flower_id_list: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_seed_id_list: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_max_wish_flower_kinds: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_reward_preview_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_guarantee_start_times: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_pre_quest_id_list: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_open_quest_id: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_content_day: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_daily_config_id_list: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
  activity_plant_flower_daily_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: daily_config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_daily_config_id
      - id: cost_item_list
        type: ks__array_of__id_count_config__length_s
        if: ks__has_field_cost_item_list
      - id: reward_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_reward_id_list
    instances:
      ks__has_field_daily_config_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_cost_item_list: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_reward_id_list: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  ks__enum__region_search_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: region_search_type
  region_search_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: search_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_search_name
      - id: search_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_search_desc
      - id: search_complete
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_search_complete
      - id: tutorial_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_tutorial_id
      - id: mark_icon_type_name
        type: aux_types::string
        if: ks__has_field_mark_icon_type_name
      - id: search_type
        type: ks__enum__region_search_type
        if: ks__has_field_search_type
      - id: material_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_material_id
      - id: is_clear_material
        type: u1
        if: ks__has_field_is_clear_material
      - id: search_group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_search_group_id
      - id: revise_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_revise_level
      - id: ability_group
        type: aux_types::string
        if: ks__has_field_ability_group
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_search_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_search_desc: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_search_complete: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_tutorial_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_mark_icon_type_name: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_search_type: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_material_id: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_is_clear_material: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_search_group_id: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_revise_level: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_ability_group: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
  ks__enum__region_search_cond_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: region_search_cond_type
  ks__array_of__aux_types__vlq_base128_le_s__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: aux_types::vlq_base128_le_s
        repeat: expr
        repeat-expr: length.value
  region_search_cond:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: type
        type: ks__enum__region_search_cond_type
        if: ks__has_field_type
      - id: param
        type: ks__array_of__aux_types__vlq_base128_le_s__length_u
        if: ks__has_field_param
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_param: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__region_search_cond__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: region_search_cond
        repeat: expr
        repeat-expr: length.value
  region_search_cond_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: search_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_search_name
      - id: search_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_search_desc
      - id: search_map_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_search_map_desc
      - id: group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_group_id
      - id: logic_type
        type: ks__enum__logic_type
        if: ks__has_field_logic_type
      - id: cond
        type: ks__array_of__region_search_cond__length_s
        if: ks__has_field_cond
      - id: region_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_region_list
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
      - id: total_progress
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_total_progress
      - id: reminder_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reminder_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_search_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_search_desc: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_search_map_desc: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_group_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_logic_type: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_cond: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_region_list: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_reward_id: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_total_progress: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_reminder_id: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
  ks__enum__region_search_recycle_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: region_search_recycle_type
  region_search_region_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: region_center
        type: ks__array_of__f4__length_u
        if: ks__has_field_region_center
      - id: region_radius
        type: f4
        if: ks__has_field_region_radius
      - id: oneoff_group_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_oneoff_group_list
      - id: oneoff_group_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_oneoff_group_num
      - id: recycle_group_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_recycle_group_list
      - id: recycle_group_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_recycle_group_num
      - id: recycle_type
        type: ks__enum__region_search_recycle_type
        if: ks__has_field_recycle_type
      - id: recycle_param
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_recycle_param
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_region_center: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_region_radius: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_oneoff_group_list: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_oneoff_group_num: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_recycle_group_list: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_recycle_group_num: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_recycle_type: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_recycle_param: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
  ks__array_of__ks__array_of__aux_types__vlq_base128_le_u__length_u__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        repeat: expr
        repeat-expr: length.value
  rogue_stage_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: stage_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_stage_id
      - id: first_pass_reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_first_pass_reward_id
      - id: preview_reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_preview_reward_id
      - id: open_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_open_time
      - id: max_coin
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_coin
      - id: max_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_level
      - id: revise_level_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_revise_level_id
      - id: stage_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_stage_name
      - id: stage_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_stage_desc
      - id: boss_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_boss_id_list
      - id: monster_id_list
        type: ks__array_of__ks__array_of__aux_types__vlq_base128_le_u__length_u__length_u
        if: ks__has_field_monster_id_list
      - id: level_boss_id_list
        type: ks__array_of__ks__array_of__aux_types__vlq_base128_le_u__length_u__length_u
        if: ks__has_field_level_boss_id_list
      - id: pre_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_pre_quest_id
      - id: goto_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_goto_quest_id
      - id: unlock_rune_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_unlock_rune_list
      - id: gckcmgmogfe
        type: u1
        if: ks__has_field_gckcmgmogfe
    instances:
      ks__has_field_stage_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_first_pass_reward_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_preview_reward_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_open_time: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_max_coin: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_max_level: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_revise_level_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_stage_name: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_stage_desc: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_boss_id_list: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_monster_id_list: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_level_boss_id_list: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_pre_quest_id: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_goto_quest_id: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_unlock_rune_list: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_gckcmgmogfe: # Field №15
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
  roguelike_rune_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: is_default_unlock
        type: u1
        if: ks__has_field_is_default_unlock
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: rune_icon
        type: aux_types::string
        if: ks__has_field_rune_icon
      - id: rune_icon1
        type: aux_types::string
        if: ks__has_field_rune_icon1
      - id: rune_icon2
        type: aux_types::string
        if: ks__has_field_rune_icon2
      - id: rune_icon3
        type: aux_types::string
        if: ks__has_field_rune_icon3
      - id: default_use_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_default_use_count
      - id: element_type
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_element_type
      - id: ability_name
        type: aux_types::string
        if: ks__has_field_ability_name
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_is_default_unlock: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_name: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_desc: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_rune_icon: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_rune_icon1: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_rune_icon2: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_rune_icon3: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_default_use_count: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_element_type: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_ability_name: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
  ks__enum__roguelike_shikigami_unlock_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: roguelike_shikigami_unlock_type
  roguelike_shikigami_unlock_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: type
        type: ks__enum__roguelike_shikigami_unlock_type
        if: ks__has_field_type
      - id: param
        type: aux_types::string
        if: ks__has_field_param
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_param: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__roguelike_shikigami_unlock_config__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: roguelike_shikigami_unlock_config
        repeat: expr
        repeat-expr: length.value
  roguelike_shikigami_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: sequence_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sequence_id
      - id: group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_group_id
      - id: level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level
      - id: unlock_cond
        type: ks__array_of__roguelike_shikigami_unlock_config__length_s
        if: ks__has_field_unlock_cond
      - id: cost_item_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cost_item_id
      - id: cost_item_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cost_item_count
      - id: shiki_skill_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_shiki_skill_name
      - id: shiki_skill_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_shiki_skill_desc
    instances:
      ks__has_field_sequence_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_group_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_level: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_unlock_cond: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_cost_item_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_cost_item_count: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_shiki_skill_name: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_shiki_skill_desc: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
  ks__enum__roguelike_effect_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: roguelike_effect_type
  roguelike_effect_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: effect_type
        type: ks__enum__roguelike_effect_type
        if: ks__has_field_effect_type
      - id: effect_key
        type: aux_types::string
        if: ks__has_field_effect_key
      - id: effect_param
        type: aux_types::string
        if: ks__has_field_effect_param
      - id: display_offset
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_display_offset
    instances:
      ks__has_field_effect_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_effect_key: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_effect_param: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_display_offset: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  roguelike_shikigami_group_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: effect_config
        type: roguelike_effect_excel_config
        if: ks__has_field_effect_config
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_effect_config: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  roguelike_curse_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level
      - id: group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_group_id
      - id: curse_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_curse_name
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: effect_config
        type: roguelike_effect_excel_config
        if: ks__has_field_effect_config
      - id: is_dynamic_show
        type: u1
        if: ks__has_field_is_dynamic_show
      - id: is_clear_at_next_level
        type: u1
        if: ks__has_field_is_clear_at_next_level
      - id: desc_param_list
        type: ks__array_of__f4__length_u
        if: ks__has_field_desc_param_list
      - id: desc_param_superposition_list
        type: ks__array_of__u1__length_u
        if: ks__has_field_desc_param_superposition_list
    instances:
      ks__has_field_level: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_group_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_curse_name: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_desc: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_effect_config: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_is_dynamic_show: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_is_clear_at_next_level: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_desc_param_list: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_desc_param_superposition_list: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
  roguelike_curse_pool_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: sequence_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sequence_id
      - id: pool_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_pool_id
      - id: group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_group_id
    instances:
      ks__has_field_sequence_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_pool_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_group_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  ks__enum__roguelike_card_label:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: roguelike_card_label
  ks__enum__roguelike_card_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: roguelike_card_type
  roguelike_card_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: sort_order
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sort_order
      - id: label
        type: ks__enum__roguelike_card_label
        if: ks__has_field_label
      - id: type
        type: ks__enum__roguelike_card_type
        if: ks__has_field_type
      - id: related_rune_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_related_rune_list
      - id: related_element_list
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_related_element_list
      - id: effect_config
        type: roguelike_effect_excel_config
        if: ks__has_field_effect_config
      - id: is_clear_at_next_level
        type: u1
        if: ks__has_field_is_clear_at_next_level
      - id: is_dynamic_show
        type: u1
        if: ks__has_field_is_dynamic_show
      - id: card_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_card_name
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: extra_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_extra_desc
      - id: desc_param_list
        type: ks__array_of__f4__length_u
        if: ks__has_field_desc_param_list
      - id: desc_param_superposition_list
        type: ks__array_of__u1__length_u
        if: ks__has_field_desc_param_superposition_list
      - id: jeooeboecbg
        type: ks__array_of__f4__length_u
        if: ks__has_field_jeooeboecbg
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_sort_order: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_label: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_type: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_related_rune_list: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_related_element_list: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_effect_config: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_is_clear_at_next_level: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_is_dynamic_show: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_card_name: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_desc: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_extra_desc: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_desc_param_list: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_desc_param_superposition_list: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_jeooeboecbg: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
  ks__enum__rogue_cell_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: rogue_cell_type
  rogue_dungeon_cell_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: dungeon_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_dungeon_id
      - id: cell_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cell_id
      - id: cell_center_pos
        type: ks__array_of__f4__length_u
        if: ks__has_field_cell_center_pos
      - id: map_coordinate
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_map_coordinate
      - id: adjacency_cell_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_adjacency_cell_list
      - id: group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_group_id
      - id: weight_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_weight_id
      - id: operator_delta_y
        type: f4
        if: ks__has_field_operator_delta_y
      - id: door_offset
        type: f4
        if: ks__has_field_door_offset
      - id: special_type
        type: ks__enum__rogue_cell_type
        if: ks__has_field_special_type
      - id: door_delta_y
        type: f4
        if: ks__has_field_door_delta_y
      - id: is_init_cell
        type: u1
        if: ks__has_field_is_init_cell
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_dungeon_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_cell_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_cell_center_pos: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_map_coordinate: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_adjacency_cell_list: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_group_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_weight_id: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_operator_delta_y: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_door_offset: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_special_type: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_door_delta_y: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_is_init_cell: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
  rogue_cell_weight_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: spring_weight
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_spring_weight
      - id: store_weight
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_store_weight
      - id: elite_weight
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_elite_weight
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_spring_weight: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_store_weight: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_elite_weight: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  rogue_sequence_cell_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: type
        type: ks__enum__rogue_cell_type
        if: ks__has_field_type
      - id: range
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_range
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_range: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__rogue_sequence_cell_config__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: rogue_sequence_cell_config
        repeat: expr
        repeat-expr: length.value
  rogue_sequence_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: dungeon_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_dungeon_id
      - id: sequence_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sequence_id
      - id: cell_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_cell_list
      - id: cell_priority
        type: ks__dict_of__aux_types__vlq_base128_le_u_aux_types__vlq_base128_le_u
        if: ks__has_field_cell_priority
      - id: cell_seq_list
        type: ks__array_of__rogue_sequence_cell_config__length_s
        if: ks__has_field_cell_seq_list
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_dungeon_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_sequence_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_cell_list: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_cell_priority: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_cell_seq_list: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
  ks__enum__rogue_create_gadget_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: rogue_create_gadget_type
  ks__enum__rogue_gadget_state_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: rogue_gadget_state_type
  rogue_gadget_state_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: state
        type: ks__enum__rogue_gadget_state_type
        if: ks__has_field_state
      - id: gadget_state
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gadget_state
    instances:
      ks__has_field_state: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_gadget_state: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__rogue_gadget_state_config__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: rogue_gadget_state_config
        repeat: expr
        repeat-expr: length.value
  rogue_gadget_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: gadget_type
        type: ks__enum__rogue_create_gadget_type
        if: ks__has_field_gadget_type
      - id: gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gadget_id
      - id: gadget_state_config_list
        type: ks__array_of__rogue_gadget_state_config__length_s
        if: ks__has_field_gadget_state_config_list
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_gadget_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_gadget_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_gadget_state_config_list: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  ks__enum__rogue_gadget_dir_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: rogue_gadget_dir_type
  rogue_gadget_rot_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: dir
        type: ks__enum__rogue_gadget_dir_type
        if: ks__has_field_dir
      - id: rotation
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_rotation
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_dir: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_rotation: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  ks__enum__rogue_monster_pool_difficulty_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: rogue_monster_pool_difficulty_type
  rogue_monster_pool_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: dungeon_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_dungeon_id
      - id: difficulty
        type: ks__enum__rogue_monster_pool_difficulty_type
        if: ks__has_field_difficulty
      - id: pool_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_pool_id_list
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_dungeon_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_difficulty: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_pool_id_list: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  rogue_token_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: stage_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_stage_id
      - id: level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level
      - id: cell_type
        type: ks__enum__rogue_monster_pool_difficulty_type
        if: ks__has_field_cell_type
      - id: coin_a_num
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_coin_a_num
      - id: coin_b_num
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_coin_b_num
      - id: coin_c_num
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_coin_c_num
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_stage_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_level: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_cell_type: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_coin_a_num: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_coin_b_num: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_coin_c_num: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
  ks__enum__salesman_special_reward_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: salesman_special_reward_type
  ks__enum__salesman_special_reward_obtain_method:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: salesman_special_reward_obtain_method
  salesman_special_reward:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: reward_type
        type: ks__enum__salesman_special_reward_type
        if: ks__has_field_reward_type
      - id: obtain_method
        type: ks__enum__salesman_special_reward_obtain_method
        if: ks__has_field_obtain_method
      - id: obtain_param
        type: aux_types::string
        if: ks__has_field_obtain_param
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: preview_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_preview_id
    instances:
      ks__has_field_reward_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_obtain_method: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_obtain_param: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_preview_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  activity_salesman_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: schedule_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_schedule_id
      - id: daily_config_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_daily_config_id_list
      - id: normal_reward_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_normal_reward_id_list
      - id: special_reward_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_special_reward_id_list
      - id: special_prob_list
        type: ks__array_of__f4__length_u
        if: ks__has_field_special_prob_list
      - id: special_reward
        type: salesman_special_reward
        if: ks__has_field_special_reward
    instances:
      ks__has_field_schedule_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_daily_config_id_list: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_normal_reward_id_list: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_special_reward_id_list: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_special_prob_list: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_special_reward: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
  ks__enum__reward_resource_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: reward_resource_type
  activity_salesman_reward_match_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
      - id: reourece_type
        type: ks__enum__reward_resource_type
        if: ks__has_field_reourece_type
      - id: box_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_box_name
    instances:
      ks__has_field_reward_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_reourece_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_box_name: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  lamp_contribution_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: contribution
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_contribution
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_contribution: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_reward_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  lamp_phase_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: phase_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_phase_id
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: end_progress
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_end_progress
      - id: material_vec
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_material_vec
      - id: giving_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_giving_id
      - id: contribution
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_contribution
      - id: add_progress
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_add_progress
      - id: is_display
        type: u1
        if: ks__has_field_is_display
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
      - id: notify_group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_notify_group_id
      - id: gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gadget_id
    instances:
      ks__has_field_phase_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_end_progress: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_material_vec: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_giving_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_contribution: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_add_progress: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_is_display: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_reward_id: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_notify_group_id: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_gadget_id: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
  lamp_progress_control_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: hour
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_hour
      - id: min_progress
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_min_progress
      - id: max_progress
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_progress
    instances:
      ks__has_field_hour: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_min_progress: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_max_progress: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  lamp_region_data_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: region
        type: aux_types::string
        if: ks__has_field_region
      - id: factor
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_factor
    instances:
      ks__has_field_region: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_factor: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  sea_lamp_section_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: section_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_section_id
      - id: activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_id
      - id: main_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_main_quest_id
      - id: mini_quest_id
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_mini_quest_id
      - id: watcher_id_vec
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_watcher_id_vec
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_section_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_activity_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_main_quest_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_mini_quest_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_watcher_id_vec: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_desc: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_title: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_name: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
  sea_lamp_section_main_quest_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: quest_id
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_quest_id
      - id: intro
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_intro
      - id: open_day
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_open_day
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_desc: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_quest_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_intro: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_open_day: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
  sea_lamp_section_mini_quest_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: section_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_section_id
      - id: open_day
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_open_day
      - id: is_special
        type: u1
        if: ks__has_field_is_special
      - id: mini_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mini_quest_id
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_section_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_open_day: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_is_special: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_mini_quest_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_name: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_desc: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
  ks__enum__shop_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: shop_type
  activity_shop_overall_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: schedule_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_schedule_id
      - id: shop_type
        type: ks__enum__shop_type
        if: ks__has_field_shop_type
      - id: sheet_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_sheet_list
    instances:
      ks__has_field_schedule_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_shop_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_sheet_list: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  ks__enum__activity_shop_sheet_cond_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: activity_shop_sheet_cond_type
  activity_shop_sheet_cond:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: type
        type: ks__enum__activity_shop_sheet_cond_type
        if: ks__has_field_type
      - id: param
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_param
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_param: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__activity_shop_sheet_cond__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: activity_shop_sheet_cond
        repeat: expr
        repeat-expr: length.value
  activity_shop_sheet_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: is_ahead_preview
        type: u1
        if: ks__has_field_is_ahead_preview
      - id: cond_comb
        type: ks__enum__logic_type
        if: ks__has_field_cond_comb
      - id: sheet_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sheet_name
      - id: cond
        type: ks__array_of__activity_shop_sheet_cond__length_s
        if: ks__has_field_cond
      - id: sort_level
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_sort_level
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_is_ahead_preview: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_cond_comb: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_sheet_name: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_cond: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_sort_level: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
  activity_summer_time_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: unlock_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_unlock_quest_id
      - id: content_duration
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_content_duration
      - id: unlock_player_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_unlock_player_level
      - id: personal_pre_quest
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_personal_pre_quest
      - id: pre_quest_of_pre_quest
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_pre_quest_of_pre_quest
      - id: reward_preview
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_preview
      - id: quest_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_quest_id_list
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_unlock_quest_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_content_duration: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_unlock_player_level: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_personal_pre_quest: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_pre_quest_of_pre_quest: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_reward_preview: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_quest_id_list: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
  activity_summer_time_stage_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: stage_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_stage_id
      - id: open_day
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_open_day
      - id: watcher_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_watcher_id_list
      - id: main_quest
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_main_quest
      - id: pre_quest
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_pre_quest
      - id: guide_button_quest
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_guide_button_quest
      - id: guide_pushtips_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_guide_pushtips_id
      - id: quest_title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_quest_title
      - id: quest_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_quest_desc
      - id: gameplay_title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gameplay_title
      - id: gameplay_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gameplay_desc
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_stage_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_open_day: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_watcher_id_list: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_main_quest: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_pre_quest: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_guide_button_quest: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_guide_pushtips_id: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_quest_title: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_quest_desc: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_gameplay_title: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_gameplay_desc: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
  activity_summer_time_float_signal_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_group_id
      - id: config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_config_id
      - id: mist_zone_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mist_zone_id
      - id: is_transfer_anchor
        type: u1
        if: ks__has_field_is_transfer_anchor
      - id: vehicle_config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_vehicle_config_id
      - id: vehicle_gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_vehicle_gadget_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_group_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_config_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_mist_zone_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_is_transfer_anchor: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_vehicle_config_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_vehicle_gadget_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
  activity_summer_time_race_preview_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: level_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level_desc
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_level_desc: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  activity_summer_time_race_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: medal_watcher
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_medal_watcher
      - id: world_coord
        type: ks__array_of__f4__length_u
        if: ks__has_field_world_coord
      - id: medal_point
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_medal_point
      - id: level_title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level_title
      - id: time_factor
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_time_factor
      - id: gold_factor
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gold_factor
      - id: activity_cond_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_cond_id
      - id: group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_group_id
      - id: open_day
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_open_day
      - id: boat_point_config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_boat_point_config_id
      - id: player_point_config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_player_point_config_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_medal_watcher: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_world_coord: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_medal_point: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_level_title: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_time_factor: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_gold_factor: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_activity_cond_id: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_group_id: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_open_day: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_boat_point_config_id: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_player_point_config_id: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
  activity_sumo_overall_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_id
      - id: prerequisite_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_prerequisite_quest_id
      - id: lead_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_lead_quest_id
      - id: reward_preview_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_preview_id
      - id: dungeon_entry_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_dungeon_entry_id
      - id: global_watcher_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_global_watcher_id
      - id: push_tips_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_push_tips_id
      - id: team_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_team_num
      - id: max_team_member_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_team_member_num
      - id: team_selectable_skill_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_team_selectable_skill_num
      - id: switch_team_cd
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_switch_team_cd
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_activity_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_prerequisite_quest_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_lead_quest_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_reward_preview_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_dungeon_entry_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_global_watcher_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_push_tips_id: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_team_num: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_max_team_member_num: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_team_selectable_skill_num: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_switch_team_cd: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
  activity_sumo_monster_preview:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: boss
        type: aux_types::string
        if: ks__has_field_boss
      - id: normal
        type: aux_types::string
        if: ks__has_field_normal
    instances:
      ks__has_field_boss: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_normal: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__activity_sumo_monster_preview__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: activity_sumo_monster_preview
        repeat: expr
        repeat-expr: length.value
  activity_sumo_stage_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: scheduld_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scheduld_id
      - id: open_day
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_open_day
      - id: dungeon_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_dungeon_id
      - id: watcher_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_watcher_list
      - id: trial_avatar_pool
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_trial_avatar_pool
      - id: skill_pool
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_skill_pool
      - id: gallery_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gallery_id
      - id: title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: score_ranks
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_score_ranks
      - id: monster_preview_vec
        type: ks__array_of__activity_sumo_monster_preview__length_s
        if: ks__has_field_monster_preview_vec
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_scheduld_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_open_day: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_dungeon_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_watcher_list: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_trial_avatar_pool: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_skill_pool: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_gallery_id: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_title: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_desc: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_score_ranks: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_monster_preview_vec: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
  activity_sumo_switch_skill_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: scheduld_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scheduld_id
      - id: ability_group_name
        type: aux_types::string
        if: ks__has_field_ability_group_name
      - id: title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: desc_param
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_desc_param
      - id: icon_name_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_icon_name_hash
      - id: icon_name_hash_pre
        type: s1
        if: ks__has_field_icon_name_hash
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_scheduld_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_ability_group_name: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_title: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_desc: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_desc_param: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_icon_name_hash: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
  ks__enum__sumo_difficulty_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: sumo_difficulty_type
  activity_sumo_difficulty_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: scheduld_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scheduld_id
      - id: difficulty
        type: ks__enum__sumo_difficulty_type
        if: ks__has_field_difficulty
      - id: monster_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_monster_level
      - id: dungeon_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_dungeon_level
      - id: ratio
        type: f4
        if: ks__has_field_ratio
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_scheduld_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_difficulty: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_monster_level: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_dungeon_level: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_ratio: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_desc: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
  treasure_map_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_id
      - id: preview_reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_preview_reward_id
      - id: npc_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_npc_id
      - id: npc_pos
        type: ks__array_of__f4__length_u
        if: ks__has_field_npc_pos
      - id: treasure_days
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_treasure_days
      - id: quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_quest_id
      - id: monster_probability
        type: f4
        if: ks__has_field_monster_probability
      - id: reward_worktop_gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_worktop_gadget_id
      - id: token_material_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_token_material_id
      - id: unit_token_drop_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_unit_token_drop_id
      - id: mp_reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mp_reward_id
      - id: host_reward_limit
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_host_reward_limit
      - id: guest_reward_limit
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_guest_reward_limit
      - id: mp_challenge_index
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mp_challenge_index
      - id: bonus_challenge_index
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_bonus_challenge_index
      - id: challenge_gadget_suite
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_challenge_gadget_suite
      - id: spot_revise_level_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_spot_revise_level_id
      - id: detector_material_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_detector_material_id
      - id: guide_child_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_guide_child_quest_id
      - id: front_child_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_front_child_quest_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_activity_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_preview_reward_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_npc_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_npc_pos: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_treasure_days: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_quest_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_monster_probability: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_reward_worktop_gadget_id: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_token_material_id: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_unit_token_drop_id: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_mp_reward_id: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_host_reward_limit: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_guest_reward_limit: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_mp_challenge_index: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_bonus_challenge_index: # Field №15
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
      ks__has_field_challenge_gadget_suite: # Field №16
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000001) != 0)
      ks__has_field_spot_revise_level_id: # Field №17
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000010) != 0)
      ks__has_field_detector_material_id: # Field №18
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000100) != 0)
      ks__has_field_guide_child_quest_id: # Field №19
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00001000) != 0)
      ks__has_field_front_child_quest_id: # Field №20
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00010000) != 0)
  treasure_map_bonus_region_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: unlock_region_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_unlock_region_id
      - id: group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_group_id
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
      - id: reward_preview_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_preview_id
      - id: revise_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_revise_level
      - id: map_title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_map_title
      - id: map_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_map_desc
      - id: show_image
        type: aux_types::string
        if: ks__has_field_show_image
      - id: fragment_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_fragment_num
      - id: region_center
        type: ks__array_of__f4__length_u
        if: ks__has_field_region_center
      - id: region_radius
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_region_radius
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_unlock_region_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_group_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_reward_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_reward_preview_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_revise_level: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_map_title: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_map_desc: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_show_image: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_fragment_num: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_region_center: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_region_radius: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
  treasure_map_region_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: unlock_day
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_unlock_day
      - id: token_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_token_num
      - id: region_center
        type: ks__array_of__f4__length_u
        if: ks__has_field_region_center
      - id: region_radius
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_region_radius
      - id: region_entry_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_region_entry_id
      - id: group_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_group_list
      - id: revise_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_revise_level
      - id: spot_num_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_spot_num_list
      - id: token_num_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_token_num_list
      - id: misc_drop_prob_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_misc_drop_prob_list
      - id: misc_drop_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_misc_drop_id
      - id: mp_group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mp_group_id
      - id: backup_group_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_backup_group_list
      - id: mp_token_threshold
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mp_token_threshold
      - id: mp_type_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mp_type_id
      - id: mp_position
        type: ks__array_of__f4__length_u
        if: ks__has_field_mp_position
      - id: mp_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mp_desc
      - id: mp_reward_preview_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mp_reward_preview_id
      - id: fragment_bonus_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_fragment_bonus_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_unlock_day: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_token_num: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_region_center: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_region_radius: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_region_entry_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_group_list: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_revise_level: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_spot_num_list: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_token_num_list: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_misc_drop_prob_list: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_misc_drop_id: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_mp_group_id: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_backup_group_list: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_mp_token_threshold: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_mp_type_id: # Field №15
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
      ks__has_field_mp_position: # Field №16
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000001) != 0)
      ks__has_field_mp_desc: # Field №17
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000010) != 0)
      ks__has_field_mp_reward_preview_id: # Field №18
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000100) != 0)
      ks__has_field_fragment_bonus_id: # Field №19
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00001000) != 0)
  bonus_treasure_solution_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: show_image_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_show_image_hash
      - id: show_image_hash_pre
        type: s1
        if: ks__has_field_show_image_hash
      - id: solution
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_solution
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_show_image_hash: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_solution: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  icon_adsorb_effect_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: effect_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_effect_id
      - id: icon_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_icon_id_list
    instances:
      ks__has_field_effect_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_icon_id_list: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  avatar_codex_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: sort_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sort_id
      - id: sort_factor
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sort_factor
      - id: avatar_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_avatar_id
      - id: begin_time
        type: aux_types::string
        if: ks__has_field_begin_time
      - id: hide_when_dont_have
        type: u1
        if: ks__has_field_hide_when_dont_have
    instances:
      ks__has_field_sort_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_sort_factor: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_avatar_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_begin_time: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_hide_when_dont_have: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  avatar_level_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level
      - id: exp
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_exp
      - id: small_talent_point
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_small_talent_point
    instances:
      ks__has_field_level: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_exp: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_small_talent_point: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  avatar_promote_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: avatar_promote_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_avatar_promote_id
      - id: promote_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_promote_level
      - id: promote_audio
        type: aux_types::string
        if: ks__has_field_promote_audio
      - id: scoin_cost
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scoin_cost
      - id: cost_items
        type: ks__array_of__id_count_config__length_s
        if: ks__has_field_cost_items
      - id: unlock_max_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_unlock_max_level
      - id: add_props
        type: ks__array_of__prop_val_config__length_s
        if: ks__has_field_add_props
      - id: required_player_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_required_player_level
    instances:
      ks__has_field_avatar_promote_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_promote_level: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_promote_audio: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_scoin_cost: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_cost_items: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_unlock_max_level: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_add_props: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_required_player_level: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
  avatar_fetters_level_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: fetter_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_fetter_level
      - id: need_exp
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_need_exp
    instances:
      ks__has_field_fetter_level: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_need_exp: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  avatar_hero_entity_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: avatar_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_avatar_id
      - id: prefab_path_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_prefab_path_hash
      - id: prefab_path_hash_pre
        type: s1
        if: ks__has_field_prefab_path_hash
    instances:
      ks__has_field_avatar_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_prefab_path_hash: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  avatar_flycloak_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: flycloak_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_flycloak_id
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: prefab_path
        type: aux_types::string
        if: ks__has_field_prefab_path
      - id: json_name
        type: aux_types::string
        if: ks__has_field_json_name
      - id: icon
        type: aux_types::string
        if: ks__has_field_icon
      - id: material_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_material_id
      - id: hide
        type: u1
        if: ks__has_field_hide
    instances:
      ks__has_field_flycloak_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_desc: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_prefab_path: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_json_name: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_icon: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_material_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_hide: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
  avatar_costume_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: skin_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_skin_id
      - id: index_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_index_id
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: item_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_item_id
      - id: character_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_character_id
      - id: json_name
        type: aux_types::string
        if: ks__has_field_json_name
      - id: prefab_path_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_prefab_path_hash
      - id: prefab_path_hash_pre
        type: s1
        if: ks__has_field_prefab_path_hash
      - id: prefab_remote_path_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_prefab_remote_path_hash
      - id: prefab_remote_path_hash_pre
        type: s1
        if: ks__has_field_prefab_remote_path_hash
      - id: prefab_npc_path_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_prefab_npc_path_hash
      - id: prefab_npc_path_hash_pre
        type: s1
        if: ks__has_field_prefab_npc_path_hash
      - id: prefab_manekin_path_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_prefab_manekin_path_hash
      - id: prefab_manekin_path_hash_pre
        type: s1
        if: ks__has_field_prefab_manekin_path_hash
      - id: is_default
        type: u1
        if: ks__has_field_is_default
      - id: quality
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_quality
      - id: hide
        type: u1
        if: ks__has_field_hide
      - id: front_icon_name
        type: aux_types::string
        if: ks__has_field_front_icon_name
      - id: side_icon_name
        type: aux_types::string
        if: ks__has_field_side_icon_name
      - id: image_name_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_image_name_hash
      - id: image_name_hash_pre
        type: s1
        if: ks__has_field_image_name_hash
    instances:
      ks__has_field_skin_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_index_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_name: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_desc: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_item_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_character_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_json_name: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_prefab_path_hash: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_prefab_remote_path_hash: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_prefab_npc_path_hash: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_prefab_manekin_path_hash: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_is_default: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_quality: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_hide: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_front_icon_name: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_side_icon_name: # Field №15
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
      ks__has_field_image_name_hash: # Field №16
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000001) != 0)
  ks__enum__skill_drag:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: skill_drag
  ks__enum__monitor_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: monitor_type
  avatar_skill_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: ability_name
        type: aux_types::string
        if: ks__has_field_ability_name
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: skill_icon
        type: aux_types::string
        if: ks__has_field_skill_icon
      - id: is_ranged
        type: u1
        if: ks__has_field_is_ranged
      - id: cd_time
        type: f4
        if: ks__has_field_cd_time
      - id: ignore_cd_minus_ratio
        type: u1
        if: ks__has_field_ignore_cd_minus_ratio
      - id: cost_stamina
        type: f4
        if: ks__has_field_cost_stamina
      - id: cost_elem_type
        type: ks__enum__element_type
        if: ks__has_field_cost_elem_type
      - id: cost_elem_val
        type: f4
        if: ks__has_field_cost_elem_val
      - id: max_charge_num
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_max_charge_num
      - id: trigger_id
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_trigger_id
      - id: lock_shape
        type: aux_types::string
        if: ks__has_field_lock_shape
      - id: lock_weight_params
        type: ks__array_of__f4__length_u
        if: ks__has_field_lock_weight_params
      - id: is_attack_camera_lock
        type: u1
        if: ks__has_field_is_attack_camera_lock
      - id: drag_type
        type: ks__enum__skill_drag
        if: ks__has_field_drag_type
      - id: show_icon_arrow
        type: u1
        if: ks__has_field_show_icon_arrow
      - id: need_monitor
        type: ks__enum__monitor_type
        if: ks__has_field_need_monitor
      - id: default_locked
        type: u1
        if: ks__has_field_default_locked
      - id: buff_icon
        type: aux_types::string
        if: ks__has_field_buff_icon
      - id: proud_skill_group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_proud_skill_group_id
      - id: global_value_key
        type: aux_types::string
        if: ks__has_field_global_value_key
      - id: energy_min
        type: f4
        if: ks__has_field_energy_min
      - id: force_can_do_skill
        type: u1
        if: ks__has_field_force_can_do_skill
      - id: cd_slot
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cd_slot
      - id: need_store
        type: u1
        if: ks__has_field_need_store
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_ability_name: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_desc: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_skill_icon: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_is_ranged: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_cd_time: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_ignore_cd_minus_ratio: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_cost_stamina: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_cost_elem_type: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_cost_elem_val: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_max_charge_num: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_trigger_id: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_lock_shape: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_lock_weight_params: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_is_attack_camera_lock: # Field №15
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
      ks__has_field_drag_type: # Field №16
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000001) != 0)
      ks__has_field_show_icon_arrow: # Field №17
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000010) != 0)
      ks__has_field_need_monitor: # Field №18
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000100) != 0)
      ks__has_field_default_locked: # Field №19
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00001000) != 0)
      ks__has_field_buff_icon: # Field №20
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00010000) != 0)
      ks__has_field_proud_skill_group_id: # Field №21
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00100000) != 0)
      ks__has_field_global_value_key: # Field №22
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b01000000) != 0)
      ks__has_field_energy_min: # Field №23
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b10000000) != 0)
      ks__has_field_force_can_do_skill: # Field №24
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000001) != 0)
      ks__has_field_cd_slot: # Field №25
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000010) != 0)
      ks__has_field_need_store: # Field №26
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000100) != 0)
  proud_skill_open_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: proud_skill_group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_proud_skill_group_id
      - id: need_avatar_promote_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_need_avatar_promote_level
    instances:
      ks__has_field_proud_skill_group_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_need_avatar_promote_level: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__proud_skill_open_config__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: proud_skill_open_config
        repeat: expr
        repeat-expr: length.value
  avatar_skill_depot_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: energy_skill
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_energy_skill
      - id: talent_skill
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_talent_skill
      - id: skills
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_skills
      - id: sub_skills
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_sub_skills
      - id: attack_mode_skill
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_attack_mode_skill
      - id: leader_talent
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_leader_talent
      - id: extra_abilities
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_extra_abilities
      - id: talents
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_talents
      - id: talent_star_name
        type: aux_types::string
        if: ks__has_field_talent_star_name
      - id: core_proud_skill_group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_core_proud_skill_group_id
      - id: core_proud_avatar_promote_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_core_proud_avatar_promote_level
      - id: inherent_proud_skill_opens
        type: ks__array_of__proud_skill_open_config__length_s
        if: ks__has_field_inherent_proud_skill_opens
      - id: skill_depot_ability_group
        type: aux_types::string
        if: ks__has_field_skill_depot_ability_group
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_energy_skill: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_talent_skill: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_skills: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_sub_skills: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_attack_mode_skill: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_leader_talent: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_extra_abilities: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_talents: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_talent_star_name: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_core_proud_skill_group_id: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_core_proud_avatar_promote_level: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_inherent_proud_skill_opens: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_skill_depot_ability_group: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
  ks__enum__ability_state:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_u
    instances:
      value:
        value: data.value
        enum: ability_state
  ks__array_of__ks__enum__ability_state__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__enum__ability_state
        repeat: expr
        repeat-expr: length.value
  ability_state_resistance_by_id_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: ability_states
        type: ks__array_of__ks__enum__ability_state__length_u
        if: ks__has_field_ability_states
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_ability_states: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__enum__activity_skill_target:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: activity_skill_target
  activity_skill_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: skill_target
        type: ks__enum__activity_skill_target
        if: ks__has_field_skill_target
      - id: ability_name
        type: aux_types::string
        if: ks__has_field_ability_name
      - id: global_value_key
        type: aux_types::string
        if: ks__has_field_global_value_key
      - id: energy_min
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_energy_min
      - id: energy_max
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_energy_max
      - id: cd_time
        type: f4
        if: ks__has_field_cd_time
      - id: guide_time
        type: f4
        if: ks__has_field_guide_time
      - id: skill_icon
        type: aux_types::string
        if: ks__has_field_skill_icon
      - id: guide_key
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_guide_key
      - id: guide_open_state
        type: ks__enum__open_state_type
        if: ks__has_field_guide_open_state
      - id: unable_text
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_unable_text
      - id: channel_text
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_channel_text
      - id: interrupt_text
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_interrupt_text
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_skill_target: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_ability_name: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_global_value_key: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_energy_min: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_energy_max: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_cd_time: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_guide_time: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_skill_icon: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_guide_key: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_guide_open_state: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_unable_text: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_channel_text: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_interrupt_text: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
  bargain_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_quest_id
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: dialog_id
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_dialog_id
      - id: expected_value
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_expected_value
      - id: space
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_space
      - id: success_talk_id
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_success_talk_id
      - id: fail_talk_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_fail_talk_id
      - id: mood_npc_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mood_npc_id
      - id: mood_upper_limit
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mood_upper_limit
      - id: random_mood
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_random_mood
      - id: mood_alert_limit
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mood_alert_limit
      - id: mood_low_limit
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_mood_low_limit
      - id: mood_low_limit_text
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mood_low_limit_text
      - id: single_fail_mood_deduction
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_single_fail_mood_deduction
      - id: single_fail_talk_id
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_single_fail_talk_id
      - id: delete_item
        type: u1
        if: ks__has_field_delete_item
      - id: item_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_item_id
      - id: title_text
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title_text
      - id: afford_text
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_afford_text
      - id: storage_text
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_storage_text
      - id: mood_hint_text
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mood_hint_text
      - id: mood_desc_text
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mood_desc_text
    instances:
      ks__has_field_quest_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_dialog_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_expected_value: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_space: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_success_talk_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_fail_talk_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_mood_npc_id: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_mood_upper_limit: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_random_mood: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_mood_alert_limit: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_mood_low_limit: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_mood_low_limit_text: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_single_fail_mood_deduction: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_single_fail_talk_id: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_delete_item: # Field №15
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
      ks__has_field_item_id: # Field №16
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000001) != 0)
      ks__has_field_title_text: # Field №17
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000010) != 0)
      ks__has_field_afford_text: # Field №18
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000100) != 0)
      ks__has_field_storage_text: # Field №19
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00001000) != 0)
      ks__has_field_mood_hint_text: # Field №20
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00010000) != 0)
      ks__has_field_mood_desc_text: # Field №21
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00100000) != 0)
  ks__enum__battle_pass_schedule_reward_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: battle_pass_schedule_reward_type
  battle_pass_schedule_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: title_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title_name
      - id: begin_date_str
        type: aux_types::string
        if: ks__has_field_begin_date_str
      - id: end_date_str
        type: aux_types::string
        if: ks__has_field_end_date_str
      - id: cycle_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_cycle_list
      - id: extra_paid_reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_extra_paid_reward_id
      - id: extra_paid_add_point
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_extra_paid_add_point
      - id: buy_level_cost_coin_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_buy_level_cost_coin_num
      - id: cycle_point_upper_limit
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cycle_point_upper_limit
      - id: level_reward_index_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level_reward_index_id
      - id: normal_reward_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_normal_reward_list
      - id: reward_type
        type: ks__enum__battle_pass_schedule_reward_type
        if: ks__has_field_reward_type
      - id: show_image
        type: aux_types::string
        if: ks__has_field_show_image
      - id: show_reward_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_show_reward_list
      - id: stroy_reward_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_stroy_reward_list
      - id: story_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_story_id
      - id: mail_day_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mail_day_count
      - id: mail_config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mail_config_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_title_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_begin_date_str: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_end_date_str: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_cycle_list: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_extra_paid_reward_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_extra_paid_add_point: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_buy_level_cost_coin_num: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_cycle_point_upper_limit: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_level_reward_index_id: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_normal_reward_list: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_reward_type: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_show_image: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_show_reward_list: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_stroy_reward_list: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_story_id: # Field №15
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
      ks__has_field_mail_day_count: # Field №16
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000001) != 0)
      ks__has_field_mail_config_id: # Field №17
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000010) != 0)
  battle_pass_level_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level
      - id: level_up_need_point
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level_up_need_point
    instances:
      ks__has_field_level: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_level_up_need_point: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  battle_pass_reward_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: index_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_index_id
      - id: level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level
      - id: free_reward_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_free_reward_id_list
      - id: paid_reward_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_paid_reward_id_list
      - id: show_up
        type: u1
        if: ks__has_field_show_up
    instances:
      ks__has_field_index_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_level: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_free_reward_id_list: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_paid_reward_id_list: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_show_up: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  ks__enum__battle_pass_mission_refresh_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: battle_pass_mission_refresh_type
  ks__enum__quest_guide_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: quest_guide_type
  ks__enum__quest_guide_auto:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: quest_guide_auto
  ks__enum__quest_guide_style:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: quest_guide_style
  ks__enum__quest_guide_layer:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: quest_guide_layer
  quest_guide:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: type
        type: ks__enum__quest_guide_type
        if: ks__has_field_type
      - id: auto_guide
        type: ks__enum__quest_guide_auto
        if: ks__has_field_auto_guide
      - id: param
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_param
      - id: guide_scene
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_guide_scene
      - id: guide_style
        type: ks__enum__quest_guide_style
        if: ks__has_field_guide_style
      - id: guide_layer
        type: ks__enum__quest_guide_layer
        if: ks__has_field_guide_layer
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_auto_guide: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_param: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_guide_scene: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_guide_style: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_guide_layer: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
  battle_pass_mission_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: refresh_type
        type: ks__enum__battle_pass_mission_refresh_type
        if: ks__has_field_refresh_type
      - id: is_force
        type: u1
        if: ks__has_field_is_force
      - id: add_point
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_add_point
      - id: schedule_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_schedule_id
      - id: activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_id
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: guide
        type: quest_guide
        if: ks__has_field_guide
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: trigger_config
        type: watcher_trigger_config
        if: ks__has_field_trigger_config
      - id: progress
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_progress
      - id: is_disuse
        type: u1
        if: ks__has_field_is_disuse
    instances:
      ks__has_field_refresh_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_is_force: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_add_point: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_schedule_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_activity_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_desc: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_guide: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_id: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_trigger_config: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_progress: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_is_disuse: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
  battle_pass_story_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: story_unlock_level
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_story_unlock_level
      - id: story_id
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_story_id
      - id: story_title
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_story_title
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_story_unlock_level: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_story_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_story_title: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  blossom_open_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: city_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_city_id
      - id: open_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_open_level
    instances:
      ks__has_field_city_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_open_level: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__enum__blossom_refresh_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: blossom_refresh_type
  ks__enum__blossom_refresh_cond_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: blossom_refresh_cond_type
  blossom_refresh_cond:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: type
        type: ks__enum__blossom_refresh_cond_type
        if: ks__has_field_type
      - id: param
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_param
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_param: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__blossom_refresh_cond__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: blossom_refresh_cond
        repeat: expr
        repeat-expr: length.value
  blossom_reward_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: drop_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_drop_id
      - id: preview_reward
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_preview_reward
    instances:
      ks__has_field_drop_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_preview_reward: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__blossom_reward_excel_config__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: blossom_reward_excel_config
        repeat: expr
        repeat-expr: length.value
  ks__enum__blossom_show_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: blossom_show_type
  ks__enum__blossom_reward_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: blossom_reward_type
  blossom_refresh_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: icon
        type: aux_types::string
        if: ks__has_field_icon
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: city_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_city_id
      - id: refresh_type
        type: ks__enum__blossom_refresh_type
        if: ks__has_field_refresh_type
      - id: refresh_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_refresh_count
      - id: refresh_time
        type: aux_types::string
        if: ks__has_field_refresh_time
      - id: open_state
        type: ks__enum__open_state_type
        if: ks__has_field_open_state
      - id: open_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_open_level
      - id: close_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_close_level
      - id: refresh_cond_vec
        type: ks__array_of__blossom_refresh_cond__length_s
        if: ks__has_field_refresh_cond_vec
      - id: revise_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_revise_level
      - id: item_limit_type
        type: ks__enum__item_limit_type
        if: ks__has_field_item_limit_type
      - id: blossom_chest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_blossom_chest_id
      - id: camp_update_need_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_camp_update_need_count
      - id: round_max_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_round_max_count
      - id: drop_vec
        type: ks__array_of__blossom_reward_excel_config__length_s
        if: ks__has_field_drop_vec
      - id: client_show_type
        type: ks__enum__blossom_show_type
        if: ks__has_field_client_show_type
      - id: hide_bg
        type: u1
        if: ks__has_field_hide_bg
      - id: reward_type
        type: ks__enum__blossom_reward_type
        if: ks__has_field_reward_type
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_icon: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_desc: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_city_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_refresh_type: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_refresh_count: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_refresh_time: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_open_state: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_open_level: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_close_level: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_refresh_cond_vec: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_revise_level: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_item_limit_type: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_blossom_chest_id: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_camp_update_need_count: # Field №15
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
      ks__has_field_round_max_count: # Field №16
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000001) != 0)
      ks__has_field_drop_vec: # Field №17
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000010) != 0)
      ks__has_field_client_show_type: # Field №18
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000100) != 0)
      ks__has_field_hide_bg: # Field №19
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00001000) != 0)
      ks__has_field_reward_type: # Field №20
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00010000) != 0)
  blossom_groups_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: city_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_city_id
      - id: section_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_section_id
      - id: refresh_type_vec
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_refresh_type_vec
      - id: new_group_vec
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_new_group_vec
      - id: decorate_group_vec
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_decorate_group_vec
      - id: next_camp_id_vec
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_next_camp_id_vec
      - id: is_safe
        type: u1
        if: ks__has_field_is_safe
      - id: is_initial_refresh
        type: u1
        if: ks__has_field_is_initial_refresh
      - id: finish_progress
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_finish_progress
      - id: limit_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_limit_level
      - id: fight_radius
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_fight_radius
      - id: remind_radius
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_remind_radius
      - id: blossom_tips
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_blossom_tips
      - id: delay_unload_sec
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_delay_unload_sec
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_city_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_section_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_refresh_type_vec: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_new_group_vec: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_decorate_group_vec: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_next_camp_id_vec: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_is_safe: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_is_initial_refresh: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_finish_progress: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_limit_level: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_fight_radius: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_remind_radius: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_blossom_tips: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_delay_unload_sec: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
  blossom_section_order_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: city_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_city_id
      - id: section_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_section_id
      - id: order
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_order
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_city_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_section_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_order: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  ks__enum__blossom_chest_show_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: blossom_chest_show_type
  blossom_chest_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: chest_gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_chest_gadget_id
      - id: world_resin
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_world_resin
      - id: resin
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_resin
      - id: refresh_type
        type: ks__enum__blossom_refresh_type
        if: ks__has_field_refresh_type
      - id: client_show_type
        type: ks__enum__blossom_chest_show_type
        if: ks__has_field_client_show_type
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_chest_gadget_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_world_resin: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_resin: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_refresh_type: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_client_show_type: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
  blossom_revise_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: grade
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_grade
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_grade: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  blossom_talk_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: refresh_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_refresh_id
      - id: group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_group_id
      - id: talk_id
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_talk_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_refresh_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_group_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_talk_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  ks__enum__board_event_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: board_event_type
  bored_event_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: event_type
        type: ks__enum__board_event_type
        if: ks__has_field_event_type
      - id: param
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_param
      - id: is_enable
        type: u1
        if: ks__has_field_is_enable
      - id: add_bored
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_add_bored
      - id: max_bored
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_max_bored
    instances:
      ks__has_field_event_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_param: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_is_enable: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_add_bored: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_max_bored: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  ks__enum__bored_action_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: bored_action_type
  bored_action_priority_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: action_type
        type: ks__enum__bored_action_type
        if: ks__has_field_action_type
      - id: weight
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_weight
    instances:
      ks__has_field_action_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_weight: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  bored_monster_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: weight
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_weight
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
    instances:
      ks__has_field_weight: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__bored_monster_config__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: bored_monster_config
        repeat: expr
        repeat-expr: length.value
  bored_create_monster_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: player_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_player_level
      - id: monster_config_vec
        type: ks__array_of__bored_monster_config__length_s
        if: ks__has_field_monster_config_vec
    instances:
      ks__has_field_player_level: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_monster_config_vec: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  bored_monster_pool_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: monster_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_monster_id
      - id: level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level
      - id: drop_tag
        type: aux_types::string
        if: ks__has_field_drop_tag
      - id: affix_vec
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_affix_vec
      - id: is_elite
        type: u1
        if: ks__has_field_is_elite
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_monster_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_level: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_drop_tag: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_affix_vec: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_is_elite: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
  ks__enum__buff_stack_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: buff_stack_type
  ks__enum__server_buff_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: server_buff_type
  buff_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_group_id
      - id: name
        type: aux_types::string
        if: ks__has_field_name
      - id: desc
        type: aux_types::string
        if: ks__has_field_desc
      - id: time
        type: f4
        if: ks__has_field_time
      - id: stack_type
        type: ks__enum__buff_stack_type
        if: ks__has_field_stack_type
      - id: is_persistent
        type: u1
        if: ks__has_field_is_persistent
      - id: is_del_when_leave_scene
        type: u1
        if: ks__has_field_is_del_when_leave_scene
      - id: server_buff_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_server_buff_id
      - id: server_buff_type
        type: ks__enum__server_buff_type
        if: ks__has_field_server_buff_type
      - id: ability_name
        type: aux_types::string
        if: ks__has_field_ability_name
      - id: modifier_name
        type: aux_types::string
        if: ks__has_field_modifier_name
    instances:
      ks__has_field_group_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_desc: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_time: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_stack_type: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_is_persistent: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_is_del_when_leave_scene: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_server_buff_id: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_server_buff_type: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_ability_name: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_modifier_name: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
  buff_icon_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: buff_id
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_buff_id
      - id: icon
        type: aux_types::string
        if: ks__has_field_icon
      - id: mutex_type
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_mutex_type
    instances:
      ks__has_field_buff_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_icon: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_mutex_type: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  chat_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: channel
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_channel
      - id: priority
        type: f4
        if: ks__has_field_priority
      - id: tab_shown_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_tab_shown_name
      - id: chat_channel_icon
        type: aux_types::string
        if: ks__has_field_chat_channel_icon
      - id: tag_other
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_tag_other
      - id: tag_self
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_tag_self
      - id: enter
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_enter
      - id: leave
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_leave
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_channel: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_priority: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_tab_shown_name: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_chat_channel_icon: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_tag_other: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_tag_self: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_enter: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_leave: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
  quest_codex_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: parent_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_parent_quest_id
      - id: chapter_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_chapter_id
      - id: sort_order
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sort_order
      - id: is_disuse
        type: u1
        if: ks__has_field_is_disuse
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_parent_quest_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_chapter_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_sort_order: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_is_disuse: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  weapon_codex_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: weapon_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_weapon_id
      - id: sort_order
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sort_order
      - id: is_disuse
        type: u1
        if: ks__has_field_is_disuse
      - id: show_only_unlocked
        type: u1
        if: ks__has_field_show_only_unlocked
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_weapon_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_sort_order: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_is_disuse: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_show_only_unlocked: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  reliquary_codex_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: suit_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_suit_id
      - id: level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level
      - id: cup_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cup_id
      - id: leather_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_leather_id
      - id: cap_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cap_id
      - id: flower_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_flower_id
      - id: sand_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sand_id
      - id: sort_order
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sort_order
      - id: is_disuse
        type: u1
        if: ks__has_field_is_disuse
      - id: show_only_unlocked
        type: u1
        if: ks__has_field_show_only_unlocked
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_suit_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_level: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_cup_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_leather_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_cap_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_flower_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_sand_id: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_sort_order: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_is_disuse: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_show_only_unlocked: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
  ks__enum__animal_codex_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: animal_codex_type
  ks__enum__animal_codex_sub_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: animal_codex_sub_type
  ks__enum__animal_codex_count_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: animal_codex_count_type
  animal_codex_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: type
        type: ks__enum__animal_codex_type
        if: ks__has_field_type
      - id: describe_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_describe_id
      - id: is_seen_active
        type: u1
        if: ks__has_field_is_seen_active
      - id: sort_order
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sort_order
      - id: is_disuse
        type: u1
        if: ks__has_field_is_disuse
      - id: show_only_unlocked
        type: u1
        if: ks__has_field_show_only_unlocked
      - id: sub_type
        type: ks__enum__animal_codex_sub_type
        if: ks__has_field_sub_type
      - id: count_type
        type: ks__enum__animal_codex_count_type
        if: ks__has_field_count_type
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: model_path
        type: aux_types::string
        if: ks__has_field_model_path
      - id: push_tips_codex_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_push_tips_codex_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_describe_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_is_seen_active: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_sort_order: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_is_disuse: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_show_only_unlocked: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_sub_type: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_count_type: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_desc: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_model_path: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_push_tips_codex_id: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
  ks__enum__material_codex_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: material_codex_type
  material_codex_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: type
        type: ks__enum__material_codex_type
        if: ks__has_field_type
      - id: material_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_material_id
      - id: sort_order
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sort_order
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: icon
        type: aux_types::string
        if: ks__has_field_icon
      - id: is_disuse
        type: u1
        if: ks__has_field_is_disuse
      - id: show_only_unlocked
        type: u1
        if: ks__has_field_show_only_unlocked
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_material_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_sort_order: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_name: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_desc: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_icon: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_is_disuse: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_show_only_unlocked: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
  books_codex_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: material_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_material_id
      - id: sort_order
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sort_order
      - id: is_disuse
        type: u1
        if: ks__has_field_is_disuse
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_material_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_sort_order: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_is_disuse: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  push_tips_codex_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: push_tip_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_push_tip_id
      - id: sort_order
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sort_order
      - id: is_disuse
        type: u1
        if: ks__has_field_is_disuse
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_push_tip_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_sort_order: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_is_disuse: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  view_codex_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gadget_id
      - id: scene_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scene_id
      - id: group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_group_id
      - id: config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_config_id
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: image
        type: aux_types::string
        if: ks__has_field_image
      - id: city_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_city_id
      - id: world_area_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_world_area_id
      - id: sort_order
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sort_order
      - id: is_disuse
        type: u1
        if: ks__has_field_is_disuse
      - id: show_only_unlocked
        type: u1
        if: ks__has_field_show_only_unlocked
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_gadget_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_scene_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_group_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_config_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_name: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_desc: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_image: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_city_id: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_world_area_id: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_sort_order: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_is_disuse: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_show_only_unlocked: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
  quest_summarization_text_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_desc: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__enum__taunt_level:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: taunt_level
  taunt_level_template_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: type
        type: ks__enum__taunt_level
        if: ks__has_field_type
      - id: taunt_level_val
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_taunt_level_val
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_taunt_level_val: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  lock_template_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: type
        type: aux_types::string
        if: ks__has_field_type
      - id: range
        type: f4
        if: ks__has_field_range
      - id: combat_pri
        type: f4
        if: ks__has_field_combat_pri
      - id: normal_pri
        type: f4
        if: ks__has_field_normal_pri
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_range: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_combat_pri: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_normal_pri: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  hit_level_template_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: type
        type: aux_types::string
        if: ks__has_field_type
      - id: hit_level
        type: aux_types::string
        if: ks__has_field_hit_level
      - id: hit_impulse_x
        type: f4
        if: ks__has_field_hit_impulse_x
      - id: hit_impulse_y
        type: f4
        if: ks__has_field_hit_impulse_y
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_hit_level: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_hit_impulse_x: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_hit_impulse_y: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  entity_prop_per_mp_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: prop_type
        type: ks__enum__fight_prop_type
        if: ks__has_field_prop_type
      - id: prop_value_vec
        type: ks__array_of__f4__length_u
        if: ks__has_field_prop_value_vec
    instances:
      ks__has_field_prop_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_prop_value_vec: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__entity_prop_per_mp_config__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: entity_prop_per_mp_config
        repeat: expr
        repeat-expr: length.value
  entity_multi_player_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: prop_per_vec
        type: ks__array_of__entity_prop_per_mp_config__length_s
        if: ks__has_field_prop_per_vec
      - id: endure_num_vec
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_endure_num_vec
      - id: element_shield_per_vec
        type: ks__array_of__f4__length_u
        if: ks__has_field_element_shield_per_vec
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_prop_per_vec: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_endure_num_vec: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_element_shield_per_vec: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  ks__enum__charge_fill_effect:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: charge_fill_effect
  charge_bar_style_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: icon_name
        type: aux_types::string
        if: ks__has_field_icon_name
      - id: fill_effect_type
        type: ks__enum__charge_fill_effect
        if: ks__has_field_fill_effect_type
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_icon_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_fill_effect_type: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  perception_template_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: view_range_factor
        type: f4
        if: ks__has_field_view_range_factor
      - id: feel_range_factor
        type: f4
        if: ks__has_field_feel_range_factor
      - id: hear_footstep_range_factor
        type: f4
        if: ks__has_field_hear_footstep_range_factor
      - id: hear_other_range_factor
        type: f4
        if: ks__has_field_hear_other_range_factor
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_view_range_factor: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_feel_range_factor: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_hear_footstep_range_factor: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_hear_other_range_factor: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  attack_attenuation_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: group
        type: aux_types::string
        if: ks__has_field_group
      - id: reset_cycle
        type: f4
        if: ks__has_field_reset_cycle
      - id: durability_sequence
        type: ks__array_of__f4__length_u
        if: ks__has_field_durability_sequence
      - id: enbreak_sequence
        type: ks__array_of__f4__length_u
        if: ks__has_field_enbreak_sequence
      - id: damage_sequence
        type: ks__array_of__f4__length_u
        if: ks__has_field_damage_sequence
    instances:
      ks__has_field_group: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_reset_cycle: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_durability_sequence: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_enbreak_sequence: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_damage_sequence: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  random_item_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: item_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_item_id
      - id: count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_count
      - id: weight
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_weight
    instances:
      ks__has_field_item_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_count: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_weight: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  ks__array_of__random_item_config__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: random_item_config
        repeat: expr
        repeat-expr: length.value
  ks__enum__recipe_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: recipe_type
  combine_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: combine_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_combine_id
      - id: player_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_player_level
      - id: is_default_show
        type: u1
        if: ks__has_field_is_default_show
      - id: combine_type
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_combine_type
      - id: sub_combine_type
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sub_combine_type
      - id: result_item_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_result_item_id
      - id: result_item_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_result_item_count
      - id: scoin_cost
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scoin_cost
      - id: random_items
        type: ks__array_of__random_item_config__length_s
        if: ks__has_field_random_items
      - id: material_items
        type: ks__array_of__id_count_config__length_s
        if: ks__has_field_material_items
      - id: effect_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_effect_desc
      - id: recipe_type
        type: ks__enum__recipe_type
        if: ks__has_field_recipe_type
    instances:
      ks__has_field_combine_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_player_level: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_is_default_show: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_combine_type: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_sub_combine_type: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_result_item_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_result_item_count: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_scoin_cost: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_random_items: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_material_items: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_effect_desc: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_recipe_type: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
  reliquary_decompose_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: need_reliquary_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_need_reliquary_count
      - id: need_reliquary_rank_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_need_reliquary_rank_level
      - id: reward_preview_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_preview_id
      - id: max_reliquary_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_reliquary_num
      - id: effect_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_effect_desc
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_need_reliquary_count: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_need_reliquary_rank_level: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_reward_preview_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_max_reliquary_num: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_effect_desc: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
  ks__enum__cook_bonus_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: cook_bonus_type
  cook_bonus_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: avatar_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_avatar_id
      - id: recipe_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_recipe_id
      - id: bonus_type
        type: ks__enum__cook_bonus_type
        if: ks__has_field_bonus_type
      - id: param_vec
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_param_vec
      - id: complex_param_vec
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_complex_param_vec
    instances:
      ks__has_field_avatar_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_recipe_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_bonus_type: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_param_vec: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_complex_param_vec: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  main_coop_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: main_coop_cfg
        type: aux_types::string
        if: ks__has_field_main_coop_cfg
      - id: main_quest_series
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_main_quest_series
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_main_coop_cfg: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_main_quest_series: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  coop_interaction_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: npc_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_npc_id
      - id: main_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_main_quest_id
      - id: priority
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_priority
      - id: is_auto
        type: u1
        if: ks__has_field_is_auto
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_npc_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_main_quest_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_priority: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_is_auto: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
  ks__enum__coop_task_cond_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: coop_task_cond_type
  coop_cond_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: cond_type
        type: ks__enum__coop_task_cond_type
        if: ks__has_field_cond_type
      - id: args
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_args
    instances:
      ks__has_field_cond_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_args: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__coop_cond_config__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: coop_cond_config
        repeat: expr
        repeat-expr: length.value
  coop_chapter_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: avatar_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_avatar_id
      - id: chapter_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_chapter_name
      - id: coop_page_title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_coop_page_title
      - id: chapter_sort_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_chapter_sort_id
      - id: avatar_sort_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_avatar_sort_id
      - id: chapter_icon
        type: aux_types::string
        if: ks__has_field_chapter_icon
      - id: unlock_cond
        type: ks__array_of__coop_cond_config__length_s
        if: ks__has_field_unlock_cond
      - id: unlock_cond_tips
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_unlock_cond_tips
      - id: open_material_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_open_material_id
      - id: open_material_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_open_material_num
      - id: begin_time_str
        type: aux_types::string
        if: ks__has_field_begin_time_str
      - id: confidence_value
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_confidence_value
      - id: point_graph_path
        type: aux_types::string
        if: ks__has_field_point_graph_path
      - id: graph_x_ratio
        type: f4
        if: ks__has_field_graph_x_ratio
      - id: graph_y_ratio
        type: f4
        if: ks__has_field_graph_y_ratio
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_avatar_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_chapter_name: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_coop_page_title: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_chapter_sort_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_avatar_sort_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_chapter_icon: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_unlock_cond: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_unlock_cond_tips: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_open_material_id: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_open_material_num: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_begin_time_str: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_confidence_value: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_point_graph_path: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_graph_x_ratio: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_graph_y_ratio: # Field №15
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
  coop_reward_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: reward_cond
        type: ks__array_of__coop_cond_config__length_s
        if: ks__has_field_reward_cond
      - id: chapter_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_chapter_id
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
      - id: sort_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sort_id
      - id: cond_tip
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cond_tip
      - id: cond_tip_des
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cond_tip_des
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_reward_cond: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_chapter_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_reward_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_sort_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_cond_tip: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_cond_tip_des: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
  ks__enum__coop_cg_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: coop_cg_type
  coop_cg_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: chapter_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_chapter_id
      - id: unlock_point_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_unlock_point_id
      - id: cg_type
        type: ks__enum__coop_cg_type
        if: ks__has_field_cg_type
      - id: unlock_cond
        type: ks__array_of__coop_cond_config__length_s
        if: ks__has_field_unlock_cond
      - id: show_image_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_show_image_hash
      - id: show_image_hash_pre
        type: s1
        if: ks__has_field_show_image_hash
      - id: show_image_small_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_show_image_small_hash
      - id: show_image_small_hash_pre
        type: s1
        if: ks__has_field_show_image_small_hash
      - id: cg_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cg_name
      - id: cg_des
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cg_des
      - id: sort_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sort_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_chapter_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_unlock_point_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_cg_type: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_unlock_cond: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_show_image_hash: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_show_image_small_hash: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_cg_name: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_cg_des: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_sort_id: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
  ks__enum__coop_point_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: coop_point_type
  coop_point_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: chapter_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_chapter_id
      - id: type
        type: ks__enum__coop_point_type
        if: ks__has_field_type
      - id: accept_quest
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_accept_quest
      - id: post_point_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_post_point_list
      - id: point_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_point_name
      - id: point_dec
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_point_dec
      - id: point_pos_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_point_pos_id
      - id: photo_male_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_photo_male_hash
      - id: photo_male_hash_pre
        type: s1
        if: ks__has_field_photo_male_hash
      - id: photo_female_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_photo_female_hash
      - id: photo_female_hash_pre
        type: s1
        if: ks__has_field_photo_female_hash
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_chapter_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_type: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_accept_quest: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_post_point_list: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_point_name: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_point_dec: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_point_pos_id: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_photo_male_hash: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_photo_female_hash: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
  coop_activity_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_id
      - id: avatar_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_avatar_id
      - id: prefab_path
        type: aux_types::string
        if: ks__has_field_prefab_path
      - id: activity_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_name
      - id: activity_des
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_des
    instances:
      ks__has_field_activity_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_avatar_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_prefab_path: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_activity_name: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_activity_des: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  cutscene_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: path
        type: aux_types::string
        if: ks__has_field_path
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_path: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  daily_task_drop_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: drop_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_drop_id
      - id: preview_reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_preview_reward_id
    instances:
      ks__has_field_drop_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_preview_reward_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__daily_task_drop_config__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: daily_task_drop_config
        repeat: expr
        repeat-expr: length.value
  daily_task_reward_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: drop_vec
        type: ks__array_of__daily_task_drop_config__length_s
        if: ks__has_field_drop_vec
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_drop_vec: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  daily_task_level_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: min_player_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_min_player_level
      - id: max_player_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_player_level
      - id: group_revise_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_group_revise_level
      - id: score_drop_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_score_drop_id
      - id: score_preview_reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_score_preview_reward_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_min_player_level: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_max_player_level: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_group_revise_level: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_score_drop_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_score_preview_reward_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
  city_task_open_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: city_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_city_id
      - id: quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_quest_id
    instances:
      ks__has_field_city_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_quest_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__enum__display_item_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: display_item_type
  display_item_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: type_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_type_desc
      - id: rank_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_rank_level
      - id: display_type
        type: ks__enum__display_item_type
        if: ks__has_field_display_type
      - id: param
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_param
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: icon
        type: aux_types::string
        if: ks__has_field_icon
      - id: item_type
        type: ks__enum__item_type
        if: ks__has_field_item_type
      - id: weight
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_weight
      - id: rank
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_rank
      - id: gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gadget_id
      - id: dropable
        type: u1
        if: ks__has_field_dropable
      - id: use_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_use_level
      - id: global_item_limit
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_global_item_limit
    instances:
      ks__has_field_type_desc: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_rank_level: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_display_type: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_param: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_name: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_desc: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_icon: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_item_type: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_weight: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_rank: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_gadget_id: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_dropable: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_use_level: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_global_item_limit: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
  draft_transfer_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_group_id
      - id: config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_config_id
    instances:
      ks__has_field_group_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_config_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__draft_transfer_config__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: draft_transfer_config
        repeat: expr
        repeat-expr: length.value
  ks__enum__draft_exec_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: draft_exec_type
  draft_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: transfer_config
        type: ks__array_of__draft_transfer_config__length_s
        if: ks__has_field_transfer_config
      - id: scene_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scene_id
      - id: exec
        type: ks__enum__draft_exec_type
        if: ks__has_field_exec
      - id: param
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_param
      - id: enable_mp
        type: u1
        if: ks__has_field_enable_mp
      - id: is_need_all_agree
        type: u1
        if: ks__has_field_is_need_all_agree
      - id: confirm_count_down
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_confirm_count_down
      - id: min_player_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_min_player_count
      - id: is_need_twice_confirm
        type: u1
        if: ks__has_field_is_need_twice_confirm
      - id: twice_confirm_count_down
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_twice_confirm_count_down
      - id: is_exec_when_count_down_over
        type: u1
        if: ks__has_field_is_exec_when_count_down_over
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_transfer_config: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_scene_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_exec: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_param: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_enable_mp: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_is_need_all_agree: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_confirm_count_down: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_min_player_count: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_is_need_twice_confirm: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_twice_confirm_count_down: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_is_exec_when_count_down_over: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
  draft_text_data_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: draft_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_draft_id
      - id: draft_btn_name
        type: aux_types::string
        if: ks__has_field_draft_btn_name
      - id: draft_btn_tips
        type: aux_types::string
        if: ks__has_field_draft_btn_tips
      - id: requirement_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_requirement_desc
      - id: draft_limit_reason_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_draft_limit_reason_desc
      - id: limit_warning_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_limit_warning_desc
      - id: invite_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_invite_desc
      - id: invite_guest_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_invite_guest_desc
      - id: invite_host_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_invite_host_desc
      - id: invite_warning_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_invite_warning_desc
      - id: draft_title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_draft_title
    instances:
      ks__has_field_draft_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_draft_btn_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_draft_btn_tips: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_requirement_desc: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_draft_limit_reason_desc: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_limit_warning_desc: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_invite_desc: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_invite_guest_desc: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_invite_host_desc: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_invite_warning_desc: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_draft_title: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
  chest_level_set_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: zone_min_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_zone_min_level
      - id: chest_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_chest_level
    instances:
      ks__has_field_zone_min_level: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_chest_level: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  dungeon_element_challenge_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: dungeon_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_dungeon_id
      - id: trial_avatar_id
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_trial_avatar_id
      - id: tutorial_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_tutorial_id
    instances:
      ks__has_field_dungeon_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_trial_avatar_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_tutorial_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  ks__enum__dungun_entry_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: dungun_entry_type
  ks__enum__dungeon_entry_satisfied_condition_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: dungeon_entry_satisfied_condition_type
  dungeon_entry_satisfied_cond:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: type
        type: ks__enum__dungeon_entry_satisfied_condition_type
        if: ks__has_field_type
      - id: param1
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_param1
      - id: param2
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_param2
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_param1: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_param2: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  ks__array_of__dungeon_entry_satisfied_cond__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: dungeon_entry_satisfied_cond
        repeat: expr
        repeat-expr: length.value
  dungeon_entry_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: dungeon_entry_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_dungeon_entry_id
      - id: type
        type: ks__enum__dungun_entry_type
        if: ks__has_field_type
      - id: is_show_in_adv_handbook
        type: u1
        if: ks__has_field_is_show_in_adv_handbook
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: cooldown_tips_dungeon_id
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_cooldown_tips_dungeon_id
      - id: is_default_open
        type: u1
        if: ks__has_field_is_default_open
      - id: is_daily_refresh
        type: u1
        if: ks__has_field_is_daily_refresh
      - id: cond_comb
        type: ks__enum__logic_type
        if: ks__has_field_cond_comb
      - id: satisfied_cond
        type: ks__array_of__dungeon_entry_satisfied_cond__length_s
        if: ks__has_field_satisfied_cond
      - id: pic_path
        type: aux_types::string
        if: ks__has_field_pic_path
      - id: system_open_ui_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_system_open_ui_id
      - id: reward_data_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_data_id
      - id: description_cycle_reward_list
        type: ks__array_of__ks__array_of__aux_types__vlq_base128_le_u__length_u__length_u
        if: ks__has_field_description_cycle_reward_list
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_dungeon_entry_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_type: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_is_show_in_adv_handbook: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_desc: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_cooldown_tips_dungeon_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_is_default_open: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_is_daily_refresh: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_cond_comb: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_satisfied_cond: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_pic_path: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_system_open_ui_id: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_reward_data_id: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_description_cycle_reward_list: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
  ks__enum__dungeon_cond_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: dungeon_cond_type
  dungeon_cond_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: cond_type
        type: ks__enum__dungeon_cond_type
        if: ks__has_field_cond_type
      - id: param
        type: ks__array_of__aux_types__vlq_base128_le_s__length_u
        if: ks__has_field_param
    instances:
      ks__has_field_cond_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_param: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__dungeon_cond_config__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: dungeon_cond_config
        repeat: expr
        repeat-expr: length.value
  dungeon_pass_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: logic_type
        type: ks__enum__logic_type
        if: ks__has_field_logic_type
      - id: conds
        type: ks__array_of__dungeon_cond_config__length_s
        if: ks__has_field_conds
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_logic_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_conds: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  ks__enum__challenge_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: challenge_type
  ks__enum__challenge_record_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: challenge_record_type
  ks__enum__interrupt_button_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: interrupt_button_type
  ks__enum__sub_challenge_fade_out_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: sub_challenge_fade_out_type
  ks__enum__sub_challenge_banner_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: sub_challenge_banner_type
  dungeon_challenge_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: target_text_template
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_target_text_template
      - id: sub_target_text_template
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sub_target_text_template
      - id: progress_text_template
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_progress_text_template
      - id: sub_progress_text_template
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sub_progress_text_template
      - id: challenge_type
        type: ks__enum__challenge_type
        if: ks__has_field_challenge_type
      - id: is_forward_timing
        type: u1
        if: ks__has_field_is_forward_timing
      - id: record_type
        type: ks__enum__challenge_record_type
        if: ks__has_field_record_type
      - id: no_success_hint
        type: u1
        if: ks__has_field_no_success_hint
      - id: no_fail_hint
        type: u1
        if: ks__has_field_no_fail_hint
      - id: interrupt_button_type
        type: ks__enum__interrupt_button_type
        if: ks__has_field_interrupt_button_type
      - id: is_success_when_not_settled
        type: u1
        if: ks__has_field_is_success_when_not_settled
      - id: is_block_top_timer
        type: u1
        if: ks__has_field_is_block_top_timer
      - id: sub_challenge_fade_out_rule
        type: ks__enum__sub_challenge_fade_out_type
        if: ks__has_field_sub_challenge_fade_out_rule
      - id: sub_challenge_fade_out_delay_time
        type: f4
        if: ks__has_field_sub_challenge_fade_out_delay_time
      - id: sub_challenge_banner_rule
        type: ks__enum__sub_challenge_banner_type
        if: ks__has_field_sub_challenge_banner_rule
      - id: activity_skill_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_skill_id
      - id: team_ability_group_list
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_team_ability_group_list
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_target_text_template: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_sub_target_text_template: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_progress_text_template: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_sub_progress_text_template: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_challenge_type: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_is_forward_timing: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_record_type: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_no_success_hint: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_no_fail_hint: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_interrupt_button_type: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_is_success_when_not_settled: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_is_block_top_timer: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_sub_challenge_fade_out_rule: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_sub_challenge_fade_out_delay_time: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_sub_challenge_banner_rule: # Field №15
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
      ks__has_field_activity_skill_id: # Field №16
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000001) != 0)
      ks__has_field_team_ability_group_list: # Field №17
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000010) != 0)
  daily_dungeon_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: monday
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_monday
      - id: tuesday
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_tuesday
      - id: wednesday
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_wednesday
      - id: thursday
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_thursday
      - id: friday
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_friday
      - id: saturday
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_saturday
      - id: sunday
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_sunday
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_monday: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_tuesday: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_wednesday: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_thursday: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_friday: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_saturday: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_sunday: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
  dungeon_level_entity_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: client_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_client_id
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: show
        type: u1
        if: ks__has_field_show
      - id: level_config_name
        type: aux_types::string
        if: ks__has_field_level_config_name
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: switch_title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_switch_title
    instances:
      ks__has_field_client_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_show: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_level_config_name: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_desc: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_switch_title: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
  dungeon_serial_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: max_take_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_take_num
      - id: take_cost
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_take_cost
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_max_take_num: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_take_cost: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  ks__enum__dungeon_roster_cycle_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: dungeon_roster_cycle_type
  dungeon_list:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: dungeon_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_dungeon_list
    instances:
      ks__has_field_dungeon_list: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
  ks__array_of__dungeon_list__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: dungeon_list
        repeat: expr
        repeat-expr: length.value
  dungeon_roster_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: open_time_str
        type: aux_types::string
        if: ks__has_field_open_time_str
      - id: cycle_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cycle_time
      - id: cycle_type
        type: ks__enum__dungeon_roster_cycle_type
        if: ks__has_field_cycle_type
      - id: roster_pool
        type: ks__array_of__dungeon_list__length_s
        if: ks__has_field_roster_pool
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_open_time_str: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_cycle_time: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_cycle_type: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_roster_pool: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  dynamic_interaction_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: self_content
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_self_content
      - id: self_content1
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_self_content1
      - id: self_intee_icon_name
        type: aux_types::string
        if: ks__has_field_self_intee_icon_name
      - id: other_content
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_other_content
      - id: other_intee_icon_name
        type: aux_types::string
        if: ks__has_field_other_intee_icon_name
      - id: other_can_intee
        type: u1
        if: ks__has_field_other_can_intee
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_self_content: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_self_content1: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_self_intee_icon_name: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_other_content: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_other_intee_icon_name: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_other_can_intee: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
  element_coeff_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level
      - id: crash_co
        type: f4
        if: ks__has_field_crash_co
      - id: element_level_co
        type: f4
        if: ks__has_field_element_level_co
      - id: player_element_level_co
        type: f4
        if: ks__has_field_player_element_level_co
      - id: player_shield_level_co
        type: f4
        if: ks__has_field_player_shield_level_co
    instances:
      ks__has_field_level: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_crash_co: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_element_level_co: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_player_element_level_co: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_player_shield_level_co: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  ks__enum__element_reaction_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: element_reaction_type
  reaction_energy_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: type
        type: ks__enum__element_reaction_type
        if: ks__has_field_type
      - id: min_durability
        type: f4
        if: ks__has_field_min_durability
      - id: max_durability
        type: f4
        if: ks__has_field_max_durability
      - id: cost_ratio
        type: f4
        if: ks__has_field_cost_ratio
      - id: config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_config_id
      - id: pool_size
        type: f4
        if: ks__has_field_pool_size
      - id: pool_revive_period
        type: f4
        if: ks__has_field_pool_revive_period
      - id: pool_revive_energy
        type: f4
        if: ks__has_field_pool_revive_energy
      - id: is_persistent
        type: u1
        if: ks__has_field_is_persistent
      - id: cost_period
        type: f4
        if: ks__has_field_cost_period
      - id: drop_prob
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_drop_prob
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_min_durability: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_max_durability: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_cost_ratio: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_config_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_pool_size: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_pool_revive_period: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_pool_revive_energy: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_is_persistent: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_cost_period: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_drop_prob: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
  embedded_text_map_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: text_map_id
        type: aux_types::string
        if: ks__has_field_text_map_id
      - id: text_map_content
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_text_map_content
    instances:
      ks__has_field_text_map_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_text_map_content: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  emoji_data_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: set_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_set_id
      - id: order
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_order
      - id: content
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_content
      - id: icon
        type: aux_types::string
        if: ks__has_field_icon
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_set_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_order: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_content: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_icon: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  emoji_set_data_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: order
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_order
      - id: icon
        type: aux_types::string
        if: ks__has_field_icon
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_order: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_icon: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  emotion_template_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: free_style_id
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_free_style_id
      - id: bubble_name
        type: aux_types::string
        if: ks__has_field_bubble_name
      - id: emotion_path
        type: aux_types::string
        if: ks__has_field_emotion_path
      - id: protect_time
        type: f4
        if: ks__has_field_protect_time
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_free_style_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_bubble_name: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_emotion_path: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_protect_time: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  ks__enum__endure_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: endure_type
  endure_template_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: type
        type: ks__enum__endure_type
        if: ks__has_field_type
      - id: gauge_length
        type: f4
        if: ks__has_field_gauge_length
      - id: wane_speed
        type: f4
        if: ks__has_field_wane_speed
      - id: recover_time
        type: f4
        if: ks__has_field_recover_time
      - id: endurance
        type: f4
        if: ks__has_field_endurance
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_gauge_length: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_wane_speed: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_recover_time: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_endurance: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  ks__enum__entity_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: entity_type
  env_animal_gather_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: animal_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_animal_id
      - id: entity_type
        type: ks__enum__entity_type
        if: ks__has_field_entity_type
      - id: gather_item_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gather_item_id
      - id: escape_radius
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_escape_radius
      - id: escape_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_escape_time
      - id: alive_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_alive_time
      - id: exclude_weathers
        type: aux_types::string
        if: ks__has_field_exclude_weathers
    instances:
      ks__has_field_animal_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_entity_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_gather_item_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_escape_radius: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_escape_time: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_alive_time: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_exclude_weathers: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
  ks__enum__environment_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: environment_type
  environment_weight_type:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: animal_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_animal_id
      - id: entity_type
        type: ks__enum__entity_type
        if: ks__has_field_entity_type
      - id: weight
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_weight
      - id: alive_hour_map
        type: ks__dict_of__aux_types__vlq_base128_le_u_aux_types__vlq_base128_le_u
        if: ks__has_field_alive_hour_map
    instances:
      ks__has_field_animal_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_entity_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_weight: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_alive_hour_map: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  ks__array_of__environment_weight_type__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: environment_weight_type
        repeat: expr
        repeat-expr: length.value
  env_animal_weight_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: env_type
        type: ks__enum__environment_type
        if: ks__has_field_env_type
      - id: weight_vec
        type: ks__array_of__environment_weight_type__length_s
        if: ks__has_field_weight_vec
    instances:
      ks__has_field_env_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_weight_vec: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__enum__exhibition_card_order_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: exhibition_card_order_type
  exhibition_card_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: style
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_style
      - id: priority
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_priority
      - id: order_type
        type: ks__enum__exhibition_card_order_type
        if: ks__has_field_order_type
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_title: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_desc: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_style: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_priority: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_order_type: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
  ks__enum__exhibition_score_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: exhibition_score_type
  exhibition_score_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: series_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_series_id
      - id: score_type
        type: ks__enum__exhibition_score_type
        if: ks__has_field_score_type
      - id: score
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_score
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: show_out
        type: u1
        if: ks__has_field_show_out
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_series_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_score_type: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_score: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_desc: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_show_out: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
  ks__enum__expedition_open_cond_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: expedition_open_cond_type
  expedition_open_condition:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: type
        type: ks__enum__expedition_open_cond_type
        if: ks__has_field_type
      - id: para
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_para
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_para: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__expedition_open_condition__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: expedition_open_condition
        repeat: expr
        repeat-expr: length.value
  expedition_reward:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: htime
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_htime
      - id: reward_drop_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_drop_id
      - id: reward_preview
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_preview
    instances:
      ks__has_field_htime: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_reward_drop_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_reward_preview: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  ks__array_of__expedition_reward__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: expedition_reward
        repeat: expr
        repeat-expr: length.value
  expedition_data_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: city_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_city_id
      - id: open_condition_vec
        type: ks__array_of__expedition_open_condition__length_s
        if: ks__has_field_open_condition_vec
      - id: time_reward_vec
        type: ks__array_of__expedition_reward__length_s
        if: ks__has_field_time_reward_vec
      - id: description
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_description
      - id: picture
        type: aux_types::string
        if: ks__has_field_picture
      - id: pos_x
        type: f4
        if: ks__has_field_pos_x
      - id: pos_y
        type: f4
        if: ks__has_field_pos_y
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_city_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_open_condition_vec: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_time_reward_vec: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_description: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_picture: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_pos_x: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_pos_y: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
  explore_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: material_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_material_id
      - id: exp
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_exp
    instances:
      ks__has_field_material_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_exp: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  explore_area_total_exp_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: area_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_area_id
      - id: total_exp
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_total_exp
      - id: reputation_ratio
        type: f4
        if: ks__has_field_reputation_ratio
    instances:
      ks__has_field_area_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_total_exp: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_reputation_ratio: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  dungeon_map_area_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: dungeon_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_dungeon_id
      - id: area_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_area_id
    instances:
      ks__has_field_dungeon_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_area_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  feature_tag_group_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_group_id
      - id: tag_i_ds
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_tag_i_ds
    instances:
      ks__has_field_group_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_tag_i_ds: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  feature_tag_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: tag_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_tag_id
    instances:
      ks__has_field_tag_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
  ks__enum__assoc_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: assoc_type
  fetter_info_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: is_hiden
        type: u1
        if: ks__has_field_is_hiden
      - id: info_birth_month
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_info_birth_month
      - id: info_birth_day
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_info_birth_day
      - id: avatar_native
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_avatar_native
      - id: avatar_vision_befor
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_avatar_vision_befor
      - id: avatar_constellation_befor
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_avatar_constellation_befor
      - id: avatar_title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_avatar_title
      - id: avatar_detail
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_avatar_detail
      - id: avatar_assoc_type
        type: ks__enum__assoc_type
        if: ks__has_field_avatar_assoc_type
      - id: cv_chinese
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cv_chinese
      - id: cv_japanese
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cv_japanese
      - id: cv_english
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cv_english
      - id: cv_korean
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cv_korean
      - id: avatar_vision_after
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_avatar_vision_after
      - id: avatar_constellation_after
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_avatar_constellation_after
      - id: fetter_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_fetter_id
      - id: avatar_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_avatar_id
      - id: open_conds
        type: ks__array_of__fetter_condition_config__length_s
        if: ks__has_field_open_conds
      - id: finish_conds
        type: ks__array_of__fetter_condition_config__length_s
        if: ks__has_field_finish_conds
    instances:
      ks__has_field_is_hiden: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_info_birth_month: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_info_birth_day: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_avatar_native: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_avatar_vision_befor: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_avatar_constellation_befor: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_avatar_title: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_avatar_detail: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_avatar_assoc_type: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_cv_chinese: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_cv_japanese: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_cv_english: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_cv_korean: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_avatar_vision_after: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_avatar_constellation_after: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_fetter_id: # Field №15
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
      ks__has_field_avatar_id: # Field №16
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000001) != 0)
      ks__has_field_open_conds: # Field №17
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000010) != 0)
      ks__has_field_finish_conds: # Field №18
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000100) != 0)
  fetter_story_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: is_hiden
        type: u1
        if: ks__has_field_is_hiden
      - id: story_title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_story_title
      - id: story_context
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_story_context
      - id: story_title2
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_story_title2
      - id: story_context2
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_story_context2
      - id: tips
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_tips
      - id: story_title_locked
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_story_title_locked
      - id: fetter_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_fetter_id
      - id: avatar_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_avatar_id
      - id: open_conds
        type: ks__array_of__fetter_condition_config__length_s
        if: ks__has_field_open_conds
      - id: finish_conds
        type: ks__array_of__fetter_condition_config__length_s
        if: ks__has_field_finish_conds
    instances:
      ks__has_field_is_hiden: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_story_title: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_story_context: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_story_title2: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_story_context2: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_tips: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_story_title_locked: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_fetter_id: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_avatar_id: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_open_conds: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_finish_conds: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
  fetter_character_card_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: avatar_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_avatar_id
      - id: fetter_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_fetter_level
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
    instances:
      ks__has_field_avatar_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_fetter_level: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_reward_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  ks__enum__fish_stock_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: fish_stock_type
  fish_stock_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: type
        type: ks__enum__fish_stock_type
        if: ks__has_field_type
      - id: fish_weight
        type: ks__dict_of__aux_types__vlq_base128_le_u_aux_types__vlq_base128_le_u
        if: ks__has_field_fish_weight
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_fish_weight: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  fish_stock_limit:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: stock_type
        type: ks__enum__fish_stock_type
        if: ks__has_field_stock_type
      - id: min_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_min_num
      - id: max_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_num
    instances:
      ks__has_field_stock_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_min_num: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_max_num: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  ks__array_of__fish_stock_limit__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: fish_stock_limit
        repeat: expr
        repeat-expr: length.value
  fish_pool_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: stock_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_stock_list
      - id: stock_guarantee
        type: ks__dict_of__aux_types__vlq_base128_le_u_aux_types__vlq_base128_le_u
        if: ks__has_field_stock_guarantee
      - id: stock_limit_list
        type: ks__array_of__fish_stock_limit__length_s
        if: ks__has_field_stock_limit_list
      - id: max_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_num
      - id: pool_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_pool_name
      - id: pool_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_pool_desc
      - id: ability_group
        type: aux_types::string
        if: ks__has_field_ability_group
      - id: team_ability_group
        type: aux_types::string
        if: ks__has_field_team_ability_group
      - id: drop_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_drop_id_list
      - id: daily_limit_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_daily_limit_num
      - id: exclude_fish
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_exclude_fish
      - id: city_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_city_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_stock_list: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_stock_guarantee: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_stock_limit_list: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_max_num: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_pool_name: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_pool_desc: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_ability_group: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_team_ability_group: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_drop_id_list: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_daily_limit_num: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_exclude_fish: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_city_id: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
  fish_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: monster_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_monster_id
      - id: item_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_item_id
      - id: hp
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_hp
      - id: skill_id
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_skill_id
      - id: bonus_width
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_bonus_width
      - id: bonus_duration
        type: ks__array_of__f4__length_u
        if: ks__has_field_bonus_duration
      - id: bonus_offset
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_bonus_offset
      - id: bonus_speed
        type: ks__array_of__f4__length_u
        if: ks__has_field_bonus_speed
      - id: feeler_times
        type: ks__array_of__f4__length_u
        if: ks__has_field_feeler_times
      - id: attract_range
        type: f4
        if: ks__has_field_attract_range
      - id: flee_range
        type: f4
        if: ks__has_field_flee_range
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
      - id: drop_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_drop_id_list
      - id: fish_cate_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_fish_cate_id
      - id: bite_timeout
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_bite_timeout
      - id: init_pose
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_init_pose
      - id: compound_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_compound_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_monster_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_item_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_hp: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_skill_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_bonus_width: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_bonus_duration: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_bonus_offset: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_bonus_speed: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_feeler_times: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_attract_range: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_flee_range: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_reward_id: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_drop_id_list: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_fish_cate_id: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_bite_timeout: # Field №15
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
      ks__has_field_init_pose: # Field №16
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000001) != 0)
      ks__has_field_compound_id: # Field №17
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000010) != 0)
  ks__enum__fish_skill_category:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: fish_skill_category
  ks__enum__fish_skill_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: fish_skill_type
  fish_skill_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: skill_category
        type: ks__enum__fish_skill_category
        if: ks__has_field_skill_category
      - id: skill_type
        type: ks__enum__fish_skill_type
        if: ks__has_field_skill_type
      - id: param
        type: ks__array_of__f4__length_u
        if: ks__has_field_param
      - id: strength
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_strength
      - id: force_factor
        type: f4
        if: ks__has_field_force_factor
      - id: bonus_width
        type: ks__array_of__f4__length_u
        if: ks__has_field_bonus_width
      - id: bonus_duration
        type: ks__array_of__f4__length_u
        if: ks__has_field_bonus_duration
      - id: bonus_offset
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_bonus_offset
      - id: bonus_speed
        type: ks__array_of__f4__length_u
        if: ks__has_field_bonus_speed
      - id: duration
        type: f4
        if: ks__has_field_duration
      - id: priority
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_priority
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_skill_category: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_skill_type: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_param: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_strength: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_force_factor: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_bonus_width: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_bonus_duration: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_bonus_offset: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_bonus_speed: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_duration: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_priority: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
  fish_bait_feature:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: feature_tag
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_feature_tag
      - id: weight
        type: f4
        if: ks__has_field_weight
      - id: bonus_range
        type: f4
        if: ks__has_field_bonus_range
    instances:
      ks__has_field_feature_tag: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_weight: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_bonus_range: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  ks__array_of__fish_bait_feature__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: fish_bait_feature
        repeat: expr
        repeat-expr: length.value
  fish_bait_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: feature_list
        type: ks__array_of__fish_bait_feature__length_s
        if: ks__has_field_feature_list
      - id: sort
        type: s1
        if: ks__has_field_sort
      - id: pool_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_pool_id_list
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_feature_list: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_sort: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_pool_id_list: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  fish_rod_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: base_attack
        type: f4
        if: ks__has_field_base_attack
      - id: attack_acc
        type: f4
        if: ks__has_field_attack_acc
      - id: max_attack
        type: f4
        if: ks__has_field_max_attack
      - id: city_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_city_id
      - id: attack_mag
        type: f4
        if: ks__has_field_attack_mag
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_base_attack: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_attack_acc: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_max_attack: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_city_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_attack_mag: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
  forge_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: player_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_player_level
      - id: is_default_show
        type: u1
        if: ks__has_field_is_default_show
      - id: effective_world_levels
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_effective_world_levels
      - id: forge_type
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_forge_type
      - id: show_item_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_show_item_id
      - id: result_item_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_result_item_id
      - id: result_item_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_result_item_count
      - id: main_random_drop_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_main_random_drop_id
      - id: main_forge_random_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_main_forge_random_id
      - id: forge_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_forge_time
      - id: queue_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_queue_num
      - id: scoin_cost
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scoin_cost
      - id: random_items
        type: ks__array_of__random_item_config__length_s
        if: ks__has_field_random_items
      - id: material_items
        type: ks__array_of__id_count_config__length_s
        if: ks__has_field_material_items
      - id: priority
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_priority
      - id: forge_point
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_forge_point
      - id: forge_point_notice
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_forge_point_notice
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_player_level: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_is_default_show: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_effective_world_levels: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_forge_type: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_show_item_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_result_item_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_result_item_count: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_main_random_drop_id: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_main_forge_random_id: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_forge_time: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_queue_num: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_scoin_cost: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_random_items: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_material_items: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_priority: # Field №15
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
      ks__has_field_forge_point: # Field №16
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000001) != 0)
      ks__has_field_forge_point_notice: # Field №17
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000010) != 0)
  forge_random_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: forge_random_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_forge_random_id
      - id: main_random_items
        type: ks__array_of__random_item_config__length_s
        if: ks__has_field_main_random_items
    instances:
      ks__has_field_forge_random_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_main_random_items: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  forge_update_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: player_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_player_level
      - id: forge_queue_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_forge_queue_num
    instances:
      ks__has_field_player_level: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_forge_queue_num: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__enum__vision_level_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: vision_level_type
  gadget_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: type
        type: ks__enum__entity_type
        if: ks__has_field_type
      - id: json_name
        type: aux_types::string
        if: ks__has_field_json_name
      - id: has_move
        type: u1
        if: ks__has_field_has_move
      - id: has_audio
        type: u1
        if: ks__has_field_has_audio
      - id: is_equip
        type: u1
        if: ks__has_field_is_equip
      - id: is_interactive
        type: u1
        if: ks__has_field_is_interactive
      - id: vision_level
        type: ks__enum__vision_level_type
        if: ks__has_field_vision_level
      - id: tags
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_tags
      - id: client_script_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_client_script_hash
      - id: client_script_hash_pre
        type: s1
        if: ks__has_field_client_script_hash
      - id: item_json_name
        type: aux_types::string
        if: ks__has_field_item_json_name
      - id: item_prefab_path_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_item_prefab_path_hash
      - id: item_prefab_path_hash_pre
        type: s1
        if: ks__has_field_item_prefab_path_hash
      - id: radar_hint_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_radar_hint_id
      - id: intee_icon_name
        type: aux_types::string
        if: ks__has_field_intee_icon_name
      - id: land_sound_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_land_sound_id
      - id: mp_prop_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mp_prop_id
      - id: interact_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_interact_name
      - id: chain_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_chain_id
      - id: has_dynamic_barrier
        type: u1
        if: ks__has_field_has_dynamic_barrier
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: prefab_path_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_prefab_path_hash
      - id: prefab_path_hash_pre
        type: s1
        if: ks__has_field_prefab_path_hash
      - id: prefab_path_remote_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_prefab_path_remote_hash
      - id: prefab_path_remote_hash_pre
        type: s1
        if: ks__has_field_prefab_path_remote_hash
      - id: controller_path_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_controller_path_hash
      - id: controller_path_hash_pre
        type: s1
        if: ks__has_field_controller_path_hash
      - id: controller_path_remote_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_controller_path_remote_hash
      - id: controller_path_remote_hash_pre
        type: s1
        if: ks__has_field_controller_path_remote_hash
      - id: camp_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_camp_id
      - id: lod_pattern_name
        type: aux_types::string
        if: ks__has_field_lod_pattern_name
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_json_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_has_move: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_has_audio: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_is_equip: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_is_interactive: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_vision_level: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_tags: # Field №7
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_client_script_hash: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_item_json_name: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_item_prefab_path_hash: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_radar_hint_id: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_intee_icon_name: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_land_sound_id: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
      ks__has_field_mp_prop_id: # Field №14
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000001) != 0)
      ks__has_field_interact_name: # Field №15
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000010) != 0)
      ks__has_field_chain_id: # Field №16
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000100) != 0)
      ks__has_field_has_dynamic_barrier: # Field №17
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00010000) != 0)
      ks__has_field_id: # Field №18
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00100000) != 0)
      ks__has_field_name: # Field №19
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b01000000) != 0)
      ks__has_field_prefab_path_hash: # Field №20
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b10000000) != 0)
      ks__has_field_prefab_path_remote_hash: # Field №21
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000001) != 0)
      ks__has_field_controller_path_hash: # Field №22
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000010) != 0)
      ks__has_field_controller_path_remote_hash: # Field №23
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000100) != 0)
      ks__has_field_camp_id: # Field №24
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00001000) != 0)
      ks__has_field_lod_pattern_name: # Field №25
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00010000) != 0)
  gadget_prop_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: hp
        type: f4
        if: ks__has_field_hp
      - id: hp_curve
        type: ks__enum__grow_curve_type
        if: ks__has_field_hp_curve
      - id: attack
        type: f4
        if: ks__has_field_attack
      - id: attack_curve
        type: ks__enum__grow_curve_type
        if: ks__has_field_attack_curve
      - id: defense
        type: f4
        if: ks__has_field_defense
      - id: defense_curve
        type: ks__enum__grow_curve_type
        if: ks__has_field_defense_curve
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_hp: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_hp_curve: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_attack: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_attack_curve: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_defense: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_defense_curve: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
  radar_hint_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: name
        type: aux_types::string
        if: ks__has_field_name
      - id: radius
        type: f4
        if: ks__has_field_radius
      - id: offset_radius
        type: f4
        if: ks__has_field_offset_radius
      - id: area_radius
        type: f4
        if: ks__has_field_area_radius
      - id: effect_name
        type: aux_types::string
        if: ks__has_field_effect_name
      - id: icon_name
        type: aux_types::string
        if: ks__has_field_icon_name
      - id: audio_name
        type: aux_types::string
        if: ks__has_field_audio_name
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_radius: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_offset_radius: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_area_radius: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_effect_name: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_icon_name: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_audio_name: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
  land_sound_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: name
        type: aux_types::string
        if: ks__has_field_name
      - id: audio_name
        type: aux_types::string
        if: ks__has_field_audio_name
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_audio_name: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  ks__enum__interact_action_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: interact_action_type
  gadget_interact_action_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: action_type
        type: ks__enum__interact_action_type
        if: ks__has_field_action_type
      - id: param
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_param
    instances:
      ks__has_field_action_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_param: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__gadget_interact_action_config__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: gadget_interact_action_config
        repeat: expr
        repeat-expr: length.value
  ks__enum__interact_cond_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: interact_cond_type
  gadget_interact_cond:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: cond_type
        type: ks__enum__interact_cond_type
        if: ks__has_field_cond_type
      - id: param
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_param
    instances:
      ks__has_field_cond_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_param: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__gadget_interact_cond__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: gadget_interact_cond
        repeat: expr
        repeat-expr: length.value
  gadget_interact_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: interact_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_interact_id
      - id: consume_item_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_consume_item_id
      - id: consume_item_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_consume_item_num
      - id: action_type
        type: ks__enum__interact_action_type
        if: ks__has_field_action_type
      - id: param1
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_param1
      - id: param2
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_param2
      - id: action_list
        type: ks__array_of__gadget_interact_action_config__length_s
        if: ks__has_field_action_list
      - id: is_guest_interact
        type: u1
        if: ks__has_field_is_guest_interact
      - id: cost_items
        type: ks__array_of__id_count_config__length_s
        if: ks__has_field_cost_items
      - id: ui_title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_ui_title
      - id: ui_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_ui_desc
      - id: cond_list
        type: ks__array_of__gadget_interact_cond__length_s
        if: ks__has_field_cond_list
      - id: cond_comb
        type: ks__enum__logic_type
        if: ks__has_field_cond_comb
    instances:
      ks__has_field_interact_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_consume_item_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_consume_item_num: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_action_type: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_param1: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_param2: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_action_list: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_is_guest_interact: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_cost_items: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_ui_title: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_ui_desc: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_cond_list: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_cond_comb: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
  ks__enum__guest_button_show_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: guest_button_show_type
  gadget_guest_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: show_type
        type: ks__enum__guest_button_show_type
        if: ks__has_field_show_type
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_show_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  gadget_title_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gadget_id
      - id: title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title
    instances:
      ks__has_field_gadget_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_title: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  gadget_chain_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: chain_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_chain_id
      - id: init_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_init_level
      - id: max_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_level
      - id: buff_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_buff_list
    instances:
      ks__has_field_chain_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_init_level: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_max_level: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_buff_list: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  ks__enum__point_location:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: point_location
  block_limit:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: block_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_block_id
      - id: count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_count
    instances:
      ks__has_field_block_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_count: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__block_limit__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: block_limit
        repeat: expr
        repeat-expr: length.value
  ks__enum__gather_save_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: gather_save_type
  gather_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: area_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_area_id
      - id: point_type
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_point_type
      - id: gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gadget_id
      - id: item_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_item_id
      - id: extra_item_id_vec
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_extra_item_id_vec
      - id: point_location
        type: ks__enum__point_location
        if: ks__has_field_point_location
      - id: cd
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cd
      - id: priority
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_priority
      - id: refresh_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_refresh_id
      - id: block_limits
        type: ks__array_of__block_limit__length_s
        if: ks__has_field_block_limits
      - id: init_disable_interact
        type: u1
        if: ks__has_field_init_disable_interact
      - id: is_forbid_guest
        type: u1
        if: ks__has_field_is_forbid_guest
      - id: save_type
        type: ks__enum__gather_save_type
        if: ks__has_field_save_type
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_area_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_point_type: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_gadget_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_item_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_extra_item_id_vec: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_point_location: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_cd: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_priority: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_refresh_id: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_block_limits: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_init_disable_interact: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_is_forbid_guest: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_save_type: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
  point_info:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: point_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_point_id
      - id: point_type
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_point_type
      - id: offset_x
        type: f4
        if: ks__has_field_offset_x
      - id: offset_y
        type: f4
        if: ks__has_field_offset_y
      - id: offset_z
        type: f4
        if: ks__has_field_offset_z
      - id: rot_x
        type: f4
        if: ks__has_field_rot_x
      - id: rot_y
        type: f4
        if: ks__has_field_rot_y
      - id: rot_z
        type: f4
        if: ks__has_field_rot_z
    instances:
      ks__has_field_point_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_point_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_offset_x: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_offset_y: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_offset_z: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_rot_x: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_rot_y: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_rot_z: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
  ks__array_of__point_info__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: point_info
        repeat: expr
        repeat-expr: length.value
  gather_bundle_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: bundle_name
        type: aux_types::string
        if: ks__has_field_bundle_name
      - id: base_gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_base_gadget_id
      - id: points
        type: ks__array_of__point_info__length_s
        if: ks__has_field_points
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_bundle_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_base_gadget_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_points: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  option_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: content
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_content
      - id: intee_icon_name
        type: aux_types::string
        if: ks__has_field_intee_icon_name
      - id: guset_intee_button_show
        type: u1
        if: ks__has_field_guset_intee_button_show
      - id: cancel_online_match
        type: u1
        if: ks__has_field_cancel_online_match
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_content: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_intee_icon_name: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_guset_intee_button_show: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_cancel_online_match: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  ks__enum__bag_tab:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: bag_tab
  ks__enum__giving_method:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: giving_method
  giving_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: talk_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_talk_id
      - id: mistake_talk_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mistake_talk_id
      - id: tab
        type: ks__enum__bag_tab
        if: ks__has_field_tab
      - id: is_repeatable
        type: u1
        if: ks__has_field_is_repeatable
      - id: giving_method
        type: ks__enum__giving_method
        if: ks__has_field_giving_method
      - id: exact_items
        type: ks__array_of__id_count_config__length_s
        if: ks__has_field_exact_items
      - id: exact_finish_talk_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_exact_finish_talk_id
      - id: giving_group_ids
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_giving_group_ids
      - id: giving_group_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_giving_group_count
      - id: highlight
        type: u1
        if: ks__has_field_highlight
      - id: icon
        type: aux_types::string
        if: ks__has_field_icon
      - id: is_remove_item
        type: u1
        if: ks__has_field_is_remove_item
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_talk_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_mistake_talk_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_tab: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_is_repeatable: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_giving_method: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_exact_items: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_exact_finish_talk_id: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_giving_group_ids: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_giving_group_count: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_highlight: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_icon: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_is_remove_item: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
  giving_group_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: item_ids
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_item_ids
      - id: finish_talk_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_finish_talk_id
      - id: mistake_talk_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mistake_talk_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_item_ids: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_finish_talk_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_mistake_talk_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  ks__enum__arith_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: arith_type
  grow_curve_info:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: type
        type: ks__enum__grow_curve_type
        if: ks__has_field_type
      - id: arith
        type: ks__enum__arith_type
        if: ks__has_field_arith
      - id: value
        type: f4
        if: ks__has_field_value
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_arith: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_value: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  ks__array_of__grow_curve_info__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: grow_curve_info
        repeat: expr
        repeat-expr: length.value
  avatar_curve_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level
      - id: curve_infos
        type: ks__array_of__grow_curve_info__length_s
        if: ks__has_field_curve_infos
    instances:
      ks__has_field_level: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_curve_infos: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  monster_curve_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level
      - id: curve_infos
        type: ks__array_of__grow_curve_info__length_s
        if: ks__has_field_curve_infos
    instances:
      ks__has_field_level: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_curve_infos: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  gadget_curve_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level
      - id: curve_infos
        type: ks__array_of__grow_curve_info__length_s
        if: ks__has_field_curve_infos
    instances:
      ks__has_field_level: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_curve_infos: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  weapon_curve_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level
      - id: curve_infos
        type: ks__array_of__grow_curve_info__length_s
        if: ks__has_field_curve_infos
    instances:
      ks__has_field_level: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_curve_infos: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__enum__guide_trigger_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: guide_trigger_type
  guide_trigger_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: guide_name
        type: aux_types::string
        if: ks__has_field_guide_name
      - id: type
        type: ks__enum__guide_trigger_type
        if: ks__has_field_type
      - id: param1
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_param1
      - id: open_state
        type: ks__enum__open_state_type
        if: ks__has_field_open_state
    instances:
      ks__has_field_guide_name: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_param1: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_open_state: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  ks__enum__guide_platform_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: guide_platform_type
  guide_rating_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: channel_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_channel_id
      - id: sub_channel_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sub_channel_id
      - id: is_china_server
        type: u1
        if: ks__has_field_is_china_server
      - id: platform
        type: ks__enum__guide_platform_type
        if: ks__has_field_platform
      - id: url
        type: aux_types::string
        if: ks__has_field_url
    instances:
      ks__has_field_channel_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_sub_channel_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_is_china_server: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_platform: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_url: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  ks__enum__h5activity_cond_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: h5activity_cond_type
  h5activity_cond_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: type
        type: ks__enum__h5activity_cond_type
        if: ks__has_field_type
      - id: param_str
        type: aux_types::string
        if: ks__has_field_param_str
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_param_str: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__h5activity_cond_config__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: h5activity_cond_config
        repeat: expr
        repeat-expr: length.value
  h5activity_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: h5activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_h5activity_id
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: detail
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_detail
      - id: reward_preview
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_preview
      - id: cond_comb
        type: ks__enum__logic_type
        if: ks__has_field_cond_comb
      - id: cond_list
        type: ks__array_of__h5activity_cond_config__length_s
        if: ks__has_field_cond_list
    instances:
      ks__has_field_h5activity_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_detail: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_reward_preview: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_cond_comb: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_cond_list: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
  h5activity_watcher_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: h5activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_h5activity_id
      - id: cond_comb
        type: ks__enum__logic_type
        if: ks__has_field_cond_comb
      - id: cond_list
        type: ks__array_of__h5activity_cond_config__length_s
        if: ks__has_field_cond_list
      - id: is_daily_refresh
        type: u1
        if: ks__has_field_is_daily_refresh
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: trigger_config
        type: watcher_trigger_config
        if: ks__has_field_trigger_config
      - id: progress
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_progress
      - id: is_disuse
        type: u1
        if: ks__has_field_is_disuse
    instances:
      ks__has_field_h5activity_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_cond_comb: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_cond_list: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_is_daily_refresh: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_trigger_config: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_progress: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_is_disuse: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
  ks__enum__furniture_deploy_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: furniture_deploy_type
  home_world_furniture_type_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: type_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_type_id
      - id: type_category_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_type_category_id
      - id: type_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_type_name
      - id: type_name2
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_type_name2
      - id: tab_icon
        type: aux_types::string
        if: ks__has_field_tab_icon
      - id: scene_type
        type: ks__enum__furniture_deploy_type
        if: ks__has_field_scene_type
      - id: camera_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_camera_id
      - id: bag_page_only
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_bag_page_only
      - id: is_show_in_bag
        type: u1
        if: ks__has_field_is_show_in_bag
      - id: limit
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_limit
    instances:
      ks__has_field_type_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_type_category_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_type_name: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_type_name2: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_tab_icon: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_scene_type: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_camera_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_bag_page_only: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_is_show_in_bag: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_limit: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
  home_world_special_furniture_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: furniture_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_furniture_id
      - id: scene_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scene_id
      - id: gadget_id
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_gadget_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_furniture_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_scene_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_gadget_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  homeworld_animal_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: furniture_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_furniture_id
      - id: monster_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_monster_id
      - id: is_rebirth
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_is_rebirth
      - id: rebirth_cd
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_rebirth_cd
    instances:
      ks__has_field_furniture_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_monster_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_is_rebirth: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_rebirth_cd: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  homeworld_module_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: is_free
        type: u1
        if: ks__has_field_is_free
      - id: unlock_tip_if_un_free
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_unlock_tip_if_un_free
      - id: world_scene_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_world_scene_id
      - id: default_room_scene_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_default_room_scene_id
      - id: optional_room_scene_id_vec
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_optional_room_scene_id_vec
      - id: module_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_module_name
      - id: module_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_module_desc
      - id: region
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_region
      - id: region_point_pos
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_region_point_pos
      - id: small_image_addr
        type: aux_types::string
        if: ks__has_field_small_image_addr
      - id: big_image_addr
        type: aux_types::string
        if: ks__has_field_big_image_addr
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_is_free: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_unlock_tip_if_un_free: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_world_scene_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_default_room_scene_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_optional_room_scene_id_vec: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_module_name: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_module_desc: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_region: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_region_point_pos: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_small_image_addr: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_big_image_addr: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
  homeworld_level_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level
      - id: exp
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_exp
      - id: comfort_point_limit
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_comfort_point_limit
      - id: home_coin_store_limit
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_home_coin_store_limit
      - id: home_fetter_exp_store_limit
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_home_fetter_exp_store_limit
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
      - id: furniture_make_slot_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_furniture_make_slot_count
      - id: outdoor_unlock_block_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_outdoor_unlock_block_count
      - id: free_unlock_module_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_free_unlock_module_count
      - id: deploy_npc_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_deploy_npc_count
      - id: djinn_gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_djinn_gadget_id
      - id: limit_shop_goods_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_limit_shop_goods_count
      - id: limit_shop_goods_extra_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_limit_shop_goods_extra_count
      - id: level_funcs
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_level_funcs
    instances:
      ks__has_field_level: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_exp: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_comfort_point_limit: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_home_coin_store_limit: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_home_fetter_exp_store_limit: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_reward_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_furniture_make_slot_count: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_outdoor_unlock_block_count: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_free_unlock_module_count: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_deploy_npc_count: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_djinn_gadget_id: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_limit_shop_goods_count: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_limit_shop_goods_extra_count: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_level_funcs: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
  furniture_make_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_config_id
      - id: furniture_item_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_furniture_item_id
      - id: count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_count
      - id: exp
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_exp
      - id: material_items
        type: ks__array_of__id_count_config__length_s
        if: ks__has_field_material_items
      - id: make_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_make_time
      - id: max_accelerate_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_accelerate_time
      - id: quick_fetch_material_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_quick_fetch_material_num
    instances:
      ks__has_field_config_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_furniture_item_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_count: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_exp: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_material_items: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_make_time: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_max_accelerate_time: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_quick_fetch_material_num: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
  home_world_shop_sub_tag_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: sub_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sub_id
      - id: show_new_mark
        type: u1
        if: ks__has_field_show_new_mark
      - id: sub_tag
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sub_tag
    instances:
      ks__has_field_sub_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_show_new_mark: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_sub_tag: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  ks__enum__home_world_limit_shop_cond_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: home_world_limit_shop_cond_type
  home_world_limit_shop_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: goods_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_goods_id
      - id: item_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_item_id
      - id: pool_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_pool_id
      - id: condition
        type: ks__enum__home_world_limit_shop_cond_type
        if: ks__has_field_condition
      - id: condition_param
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_condition_param
      - id: buy_limit
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_buy_limit
      - id: cost_items
        type: ks__array_of__id_count_config__length_s
        if: ks__has_field_cost_items
      - id: weight
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_weight
    instances:
      ks__has_field_goods_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_item_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_pool_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_condition: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_condition_param: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_buy_limit: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_cost_items: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_weight: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
  home_world_least_shop_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level
      - id: pool_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_pool_id
      - id: count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_count
    instances:
      ks__has_field_level: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_pool_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_count: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  home_world_comfort_level_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: level_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level_id
      - id: comfort
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_comfort
      - id: home_coin_produce_rate
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_home_coin_produce_rate
      - id: companionship_exp_produce_rate
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_companionship_exp_produce_rate
      - id: level_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level_name
      - id: level_icon_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level_icon_hash
      - id: level_icon_hash_pre
        type: s1
        if: ks__has_field_level_icon_hash
    instances:
      ks__has_field_level_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_comfort: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_home_coin_produce_rate: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_companionship_exp_produce_rate: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_level_name: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_level_icon_hash: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
  ks__enum__home_avatar_event_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: home_avatar_event_type
  ks__enum__home_avatar_event_cond_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: home_avatar_event_cond_type
  home_world_event_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: event_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_event_id
      - id: event_type
        type: ks__enum__home_avatar_event_type
        if: ks__has_field_event_type
      - id: avatar_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_avatar_id
      - id: talk_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_talk_id
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
      - id: furniture_suit_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_furniture_suit_id
      - id: lasttime
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_lasttime
      - id: order
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_order
      - id: condition_type1
        type: ks__enum__home_avatar_event_cond_type
        if: ks__has_field_condition_type1
      - id: condition_param1
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_condition_param1
      - id: condition_type2
        type: ks__enum__home_avatar_event_cond_type
        if: ks__has_field_condition_type2
      - id: condition_param2
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_condition_param2
    instances:
      ks__has_field_event_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_event_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_avatar_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_talk_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_reward_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_furniture_suit_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_lasttime: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_order: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_condition_type1: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_condition_param1: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_condition_type2: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_condition_param2: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
  ks__enum__home_world_field_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: home_world_field_type
  home_world_farm_field_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: field_item_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_field_item_id
      - id: field_type
        type: ks__enum__home_world_field_type
        if: ks__has_field_field_type
      - id: field_gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_field_gadget_id
      - id: field_slot_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_field_slot_num
      - id: field_slot_gadget_id
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_field_slot_gadget_id
    instances:
      ks__has_field_field_item_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_field_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_field_gadget_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_field_slot_num: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_field_slot_gadget_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  home_world_extra_furniture_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: furniture_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_furniture_id
      - id: extra_data
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_extra_data
    instances:
      ks__has_field_furniture_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_extra_data: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  home_world_npc_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: furniture_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_furniture_id
      - id: avatar_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_avatar_id
      - id: npc_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_npc_id
      - id: talk_i_ds
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_talk_i_ds
      - id: is_npc
        type: u1
        if: ks__has_field_is_npc
      - id: head_icon
        type: aux_types::string
        if: ks__has_field_head_icon
      - id: front_icon
        type: aux_types::string
        if: ks__has_field_front_icon
      - id: side_icon
        type: aux_types::string
        if: ks__has_field_side_icon
      - id: quality
        type: ks__enum__quality_type
        if: ks__has_field_quality
      - id: show_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_show_name
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
    instances:
      ks__has_field_furniture_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_avatar_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_npc_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_talk_i_ds: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_is_npc: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_head_icon: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_front_icon: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_side_icon: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_quality: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_show_name: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_desc: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
  home_world_custom_furniture_slot_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: slot_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_slot_name
      - id: no_parts_tips
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_no_parts_tips
      - id: get_parts_tips
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_get_parts_tips
      - id: root_gadget_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_root_gadget_id_list
      - id: slot_identifier_path_list
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_slot_identifier_path_list
      - id: dependent_slot_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_dependent_slot_id_list
      - id: effect_slot_select
        type: aux_types::string
        if: ks__has_field_effect_slot_select
      - id: effect_parts_setup
        type: aux_types::string
        if: ks__has_field_effect_parts_setup
      - id: slot_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_slot_id
      - id: optional_parts_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_optional_parts_id_list
      - id: is_necessary
        type: u1
        if: ks__has_field_is_necessary
      - id: default_parts_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_default_parts_id_list
      - id: init_parts_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_init_parts_id
    instances:
      ks__has_field_slot_name: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_no_parts_tips: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_get_parts_tips: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_root_gadget_id_list: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_slot_identifier_path_list: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_dependent_slot_id_list: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_effect_slot_select: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_effect_parts_setup: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_slot_id: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_optional_parts_id_list: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_is_necessary: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_default_parts_id_list: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_init_parts_id: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
  hunting_refresh_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: city_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_city_id
      - id: difficulty
        type: ks__enum__hunting_offer_difficulty_type
        if: ks__has_field_difficulty
      - id: region_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_region_id
      - id: finish_reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_finish_reward_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_city_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_difficulty: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_region_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_finish_reward_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  hunting_region_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: center_pos_list
        type: ks__array_of__f4__length_u
        if: ks__has_field_center_pos_list
      - id: center_radius
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_center_radius
      - id: safe_clue_group
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_safe_clue_group
      - id: clue_group
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_clue_group
      - id: safe_destination_group
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_safe_destination_group
      - id: destination_group
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_destination_group
      - id: region_info
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_region_info
      - id: certain_final_monster_id
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_certain_final_monster_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_center_pos_list: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_center_radius: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_safe_clue_group: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_clue_group: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_safe_destination_group: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_destination_group: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_region_info: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_certain_final_monster_id: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
  ks__enum__hunting_clue_point_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: hunting_clue_point_type
  hunting_group_info_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_group_id
      - id: region_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_region_id
      - id: point_type
        type: ks__enum__hunting_clue_point_type
        if: ks__has_field_point_type
      - id: ref_index
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_ref_index
      - id: pos_type
        type: ks__enum__hunting_monster_create_pos_type
        if: ks__has_field_pos_type
    instances:
      ks__has_field_group_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_region_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_point_type: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_ref_index: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_pos_type: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  ks__enum__hunting_monster_group_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: hunting_monster_group_type
  hunting_clue_monster_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_config_id
      - id: monster_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_monster_id
      - id: revise_level_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_revise_level_id
      - id: group_type
        type: ks__enum__hunting_monster_group_type
        if: ks__has_field_group_type
      - id: monster_group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_monster_group_id
      - id: level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level
      - id: is_clue_monster
        type: u1
        if: ks__has_field_is_clue_monster
    instances:
      ks__has_field_config_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_monster_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_revise_level_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_group_type: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_monster_group_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_level: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_is_clue_monster: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
  hunting_clue_gather_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_config_id
      - id: gather_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gather_id
      - id: gather_group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gather_group_id
      - id: is_clue_gather
        type: u1
        if: ks__has_field_is_clue_gather
    instances:
      ks__has_field_config_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_gather_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_gather_group_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_is_clue_gather: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  hunting_clue_text_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: clue_text_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_clue_text_id
      - id: reminder_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_reminder_id_list
    instances:
      ks__has_field_clue_text_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_reminder_id_list: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__enum__investigation_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: investigation_type
  investigation_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: city_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_city_id
      - id: next_investigation_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_next_investigation_id_list
      - id: unlock_open_state_type
        type: ks__enum__open_state_type
        if: ks__has_field_unlock_open_state_type
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
      - id: title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title
      - id: investigation_type
        type: ks__enum__investigation_type
        if: ks__has_field_investigation_type
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_city_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_next_investigation_id_list: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_unlock_open_state_type: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_reward_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_title: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_investigation_type: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
  investigation_target_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_quest_id
      - id: investigation_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_investigation_id
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
      - id: icon
        type: aux_types::string
        if: ks__has_field_icon
      - id: image
        type: aux_types::string
        if: ks__has_field_image
      - id: info_des
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_info_des
      - id: guide
        type: quest_guide
        if: ks__has_field_guide
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: trigger_config
        type: watcher_trigger_config
        if: ks__has_field_trigger_config
      - id: progress
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_progress
      - id: is_disuse
        type: u1
        if: ks__has_field_is_disuse
    instances:
      ks__has_field_quest_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_investigation_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_reward_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_icon: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_image: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_info_des: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_guide: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_id: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_trigger_config: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_progress: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_is_disuse: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
  ks__enum__investigation_monster_map_mark_create_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: investigation_monster_map_mark_create_type
  ks__enum__investigation_monster_map_mark_create_condition_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: investigation_monster_map_mark_create_condition_type
  investigation_monster_map_mark_create_condition:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: condition_type
        type: ks__enum__investigation_monster_map_mark_create_condition_type
        if: ks__has_field_condition_type
      - id: condition_param
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_condition_param
    instances:
      ks__has_field_condition_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_condition_param: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__enum__monster_category:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: monster_category
  investigation_monster_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: city_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_city_id
      - id: monster_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_monster_id_list
      - id: group_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_group_id_list
      - id: unlock_parent_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_unlock_parent_quest_id
      - id: active_unlock_quest_activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_active_unlock_quest_activity_id
      - id: reward_preview_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_preview_id
      - id: map_mark_create_type
        type: ks__enum__investigation_monster_map_mark_create_type
        if: ks__has_field_map_mark_create_type
      - id: map_mark_create_condition
        type: investigation_monster_map_mark_create_condition
        if: ks__has_field_map_mark_create_condition
      - id: monster_category
        type: ks__enum__monster_category
        if: ks__has_field_monster_category
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: icon
        type: aux_types::string
        if: ks__has_field_icon
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: lock_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_lock_desc
      - id: occupied_quest_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_occupied_quest_id_list
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_city_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_monster_id_list: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_group_id_list: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_unlock_parent_quest_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_active_unlock_quest_activity_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_reward_preview_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_map_mark_create_type: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_map_mark_create_condition: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_monster_category: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_name: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_icon: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_desc: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_lock_desc: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_occupied_quest_id_list: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
  investigation_dungeon_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: entrance_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_entrance_id
      - id: city_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_city_id
      - id: dungeon_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_dungeon_id_list
    instances:
      ks__has_field_entrance_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_city_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_dungeon_id_list: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  level_suppress_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: level
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_level
      - id: level_suppress_damage_co
        type: f4
        if: ks__has_field_level_suppress_damage_co
      - id: level_suppress_endure
        type: f4
        if: ks__has_field_level_suppress_endure
      - id: level_suppress_dis_min_horizontal
        type: f4
        if: ks__has_field_level_suppress_dis_min_horizontal
      - id: level_suppress_dis_max_horizontal
        type: f4
        if: ks__has_field_level_suppress_dis_max_horizontal
      - id: level_suppress_dis_min_vertical
        type: f4
        if: ks__has_field_level_suppress_dis_min_vertical
      - id: level_suppress_dis_max_vertical
        type: f4
        if: ks__has_field_level_suppress_dis_max_vertical
      - id: is_attacker_player
        type: u1
        if: ks__has_field_is_attacker_player
      - id: is_defenser_player
        type: u1
        if: ks__has_field_is_defenser_player
    instances:
      ks__has_field_level: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_level_suppress_damage_co: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_level_suppress_endure: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_level_suppress_dis_min_horizontal: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_level_suppress_dis_max_horizontal: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_level_suppress_dis_min_vertical: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_level_suppress_dis_max_vertical: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_is_attacker_player: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_is_defenser_player: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
  loading_tips_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: tips_title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_tips_title
      - id: tips_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_tips_desc
      - id: stage_id
        type: aux_types::string
        if: ks__has_field_stage_id
      - id: start_time
        type: aux_types::string
        if: ks__has_field_start_time
      - id: end_time
        type: aux_types::string
        if: ks__has_field_end_time
      - id: min_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_min_level
      - id: max_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_level
      - id: limit_open_state
        type: aux_types::string
        if: ks__has_field_limit_open_state
      - id: pre_main_quest_ids
        type: aux_types::string
        if: ks__has_field_pre_main_quest_ids
      - id: weight
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_weight
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_tips_title: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_tips_desc: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_stage_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_start_time: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_end_time: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_min_level: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_max_level: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_limit_open_state: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_pre_main_quest_ids: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_weight: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
  ks__enum__loading_tips_situation_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: loading_tips_situation_type
  ks__enum__loading_area_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: loading_area_type
  loading_situation_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: stage_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_stage_id
      - id: loading_situation_type
        type: ks__enum__loading_tips_situation_type
        if: ks__has_field_loading_situation_type
      - id: area1_id
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_area1_id
      - id: area_terrain_type
        type: ks__enum__loading_area_type
        if: ks__has_field_area_terrain_type
      - id: pic_path
        type: aux_types::string
        if: ks__has_field_pic_path
    instances:
      ks__has_field_stage_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_loading_situation_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_area1_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_area_terrain_type: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_pic_path: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  ks__enum__localization_asset_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: localization_asset_type
  localization_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: asset_type
        type: ks__enum__localization_asset_type
        if: ks__has_field_asset_type
      - id: default_path
        type: aux_types::string
        if: ks__has_field_default_path
      - id: sc_path
        type: aux_types::string
        if: ks__has_field_sc_path
      - id: tc_path
        type: aux_types::string
        if: ks__has_field_tc_path
      - id: en_path
        type: aux_types::string
        if: ks__has_field_en_path
      - id: kr_path
        type: aux_types::string
        if: ks__has_field_kr_path
      - id: jp_path
        type: aux_types::string
        if: ks__has_field_jp_path
      - id: es_path
        type: aux_types::string
        if: ks__has_field_es_path
      - id: fr_path
        type: aux_types::string
        if: ks__has_field_fr_path
      - id: id_path
        type: aux_types::string
        if: ks__has_field_id_path
      - id: pt_path
        type: aux_types::string
        if: ks__has_field_pt_path
      - id: ru_path
        type: aux_types::string
        if: ks__has_field_ru_path
      - id: th_path
        type: aux_types::string
        if: ks__has_field_th_path
      - id: vi_path
        type: aux_types::string
        if: ks__has_field_vi_path
      - id: de_path
        type: aux_types::string
        if: ks__has_field_de_path
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_asset_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_default_path: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_sc_path: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_tc_path: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_en_path: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_kr_path: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_jp_path: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_es_path: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_fr_path: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_id_path: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_pt_path: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_ru_path: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_th_path: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_vi_path: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_de_path: # Field №15
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
  mail_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: expire_days
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_expire_days
      - id: title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title
      - id: content
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_content
      - id: sender
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sender
      - id: is_star
        type: u1
        if: ks__has_field_is_star
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_expire_days: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_title: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_content: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_sender: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_is_star: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_reward_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
  birthday_mail_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: mail_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mail_id
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
      - id: effective_date
        type: aux_types::string
        if: ks__has_field_effective_date
      - id: effective_timestamp
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_effective_timestamp
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_mail_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_reward_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_effective_date: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_effective_timestamp: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  ks__enum__match_sub_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: match_sub_type
  match_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: match_sub_type
        type: ks__enum__match_sub_type
        if: ks__has_field_match_sub_type
      - id: min_player_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_min_player_num
      - id: max_player_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_player_num
      - id: confirm_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_confirm_time
      - id: is_continue_match
        type: u1
        if: ks__has_field_is_continue_match
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_match_sub_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_min_player_num: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_max_player_num: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_confirm_time: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_is_continue_match: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
  matching_text_data_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: match_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_match_id
      - id: match_icon_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_match_icon_hash
      - id: match_icon_hash_pre
        type: s1
        if: ks__has_field_match_icon_hash
      - id: match_btn_name
        type: aux_types::string
        if: ks__has_field_match_btn_name
      - id: match_btn_tips
        type: aux_types::string
        if: ks__has_field_match_btn_tips
      - id: requirement_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_requirement_desc
      - id: match_limit_reason_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_match_limit_reason_desc
      - id: limit_warning_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_limit_warning_desc
      - id: invite_guest_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_invite_guest_desc
      - id: invite_host_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_invite_host_desc
      - id: match_start_desc
        type: aux_types::string
        if: ks__has_field_match_start_desc
      - id: match_title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_match_title
      - id: match_success_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_match_success_desc
    instances:
      ks__has_field_match_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_match_icon_hash: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_match_btn_name: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_match_btn_tips: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_requirement_desc: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_match_limit_reason_desc: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_limit_warning_desc: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_invite_guest_desc: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_invite_host_desc: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_match_start_desc: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_match_title: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_match_success_desc: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
  match_punish_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: times
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_times
      - id: punish_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_punish_time
    instances:
      ks__has_field_times: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_punish_time: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__enum__document_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: document_type
  document_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title
      - id: content_localized_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_content_localized_id
      - id: preview_path
        type: aux_types::string
        if: ks__has_field_preview_path
      - id: document_type
        type: ks__enum__document_type
        if: ks__has_field_document_type
      - id: video_path
        type: aux_types::string
        if: ks__has_field_video_path
      - id: subtitle_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_subtitle_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_title: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_content_localized_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_preview_path: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_document_type: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_video_path: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_subtitle_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
  ks__enum__source_jump_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: source_jump_type
  source_jump_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: jump_type
        type: ks__enum__source_jump_type
        if: ks__has_field_jump_type
      - id: jump_param
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_jump_param
    instances:
      ks__has_field_jump_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_jump_param: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__source_jump_config__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: source_jump_config
        repeat: expr
        repeat-expr: length.value
  material_source_data_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: dungeon_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_dungeon_list
      - id: jump_list
        type: ks__array_of__source_jump_config__length_s
        if: ks__has_field_jump_list
      - id: text_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_text_list
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_dungeon_list: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_jump_list: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_text_list: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  book_suit_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: suit_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_suit_name
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_suit_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__enum__miracle_tag:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: miracle_tag
  ks__array_of__ks__enum__miracle_tag__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: ks__enum__miracle_tag
        repeat: expr
        repeat-expr: length.value
  miracle_ring_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: item_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_item_id
      - id: miracle_value
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_miracle_value
      - id: miracle_tag
        type: ks__array_of__ks__enum__miracle_tag__length_s
        if: ks__has_field_miracle_tag
    instances:
      ks__has_field_item_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_miracle_value: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_miracle_tag: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  miracle_ring_drop_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: miracle_tag
        type: ks__enum__miracle_tag
        if: ks__has_field_miracle_tag
      - id: drop_id
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_drop_id
    instances:
      ks__has_field_miracle_tag: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_drop_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__enum__monster_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: monster_type
  ks__enum__monster_security_level:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: monster_security_level
  monster_drop:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: drop_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_drop_id
      - id: hp_percent
        type: f4
        if: ks__has_field_hp_percent
    instances:
      ks__has_field_drop_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_hp_percent: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__monster_drop__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: monster_drop
        repeat: expr
        repeat-expr: length.value
  monster_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: monster_name
        type: aux_types::string
        if: ks__has_field_monster_name
      - id: type
        type: ks__enum__monster_type
        if: ks__has_field_type
      - id: security_level
        type: ks__enum__monster_security_level
        if: ks__has_field_security_level
      - id: script_data_path_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_script_data_path_hash
      - id: script_data_path_hash_pre
        type: s1
        if: ks__has_field_script_data_path_hash
      - id: server_script
        type: aux_types::string
        if: ks__has_field_server_script
      - id: combat_config_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_combat_config_hash
      - id: combat_config_hash_pre
        type: s1
        if: ks__has_field_combat_config_hash
      - id: affix
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_affix
      - id: ai
        type: aux_types::string
        if: ks__has_field_ai
      - id: is_ai_hash_check
        type: u1
        if: ks__has_field_is_ai_hash_check
      - id: equips
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_equips
      - id: can_swim
        type: u1
        if: ks__has_field_can_swim
      - id: hp_drops
        type: ks__array_of__monster_drop__length_s
        if: ks__has_field_hp_drops
      - id: kill_drop_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_kill_drop_id
      - id: is_scene_reward
        type: u1
        if: ks__has_field_is_scene_reward
      - id: vision_level
        type: ks__enum__vision_level_type
        if: ks__has_field_vision_level
      - id: is_invisible_reset
        type: u1
        if: ks__has_field_is_invisible_reset
      - id: exclude_weathers
        type: aux_types::string
        if: ks__has_field_exclude_weathers
      - id: feature_tag_group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_feature_tag_group_id
      - id: mp_prop_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mp_prop_id
      - id: skin
        type: aux_types::string
        if: ks__has_field_skin
      - id: describe_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_describe_id
      - id: safety_check
        type: u1
        if: ks__has_field_safety_check
      - id: combat_bgm_level
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_combat_bgm_level
      - id: entity_budget_level
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_entity_budget_level
      - id: hp_base
        type: f4
        if: ks__has_field_hp_base
      - id: attack_base
        type: f4
        if: ks__has_field_attack_base
      - id: defense_base
        type: f4
        if: ks__has_field_defense_base
      - id: critical
        type: f4
        if: ks__has_field_critical
      - id: anti_critical
        type: f4
        if: ks__has_field_anti_critical
      - id: critical_hurt
        type: f4
        if: ks__has_field_critical_hurt
      - id: fire_sub_hurt
        type: f4
        if: ks__has_field_fire_sub_hurt
      - id: grass_sub_hurt
        type: f4
        if: ks__has_field_grass_sub_hurt
      - id: water_sub_hurt
        type: f4
        if: ks__has_field_water_sub_hurt
      - id: elec_sub_hurt
        type: f4
        if: ks__has_field_elec_sub_hurt
      - id: wind_sub_hurt
        type: f4
        if: ks__has_field_wind_sub_hurt
      - id: ice_sub_hurt
        type: f4
        if: ks__has_field_ice_sub_hurt
      - id: rock_sub_hurt
        type: f4
        if: ks__has_field_rock_sub_hurt
      - id: fire_add_hurt
        type: f4
        if: ks__has_field_fire_add_hurt
      - id: grass_add_hurt
        type: f4
        if: ks__has_field_grass_add_hurt
      - id: water_add_hurt
        type: f4
        if: ks__has_field_water_add_hurt
      - id: elec_add_hurt
        type: f4
        if: ks__has_field_elec_add_hurt
      - id: wind_add_hurt
        type: f4
        if: ks__has_field_wind_add_hurt
      - id: ice_add_hurt
        type: f4
        if: ks__has_field_ice_add_hurt
      - id: rock_add_hurt
        type: f4
        if: ks__has_field_rock_add_hurt
      - id: prop_grow_curves
        type: ks__array_of__fight_prop_grow_config__length_s
        if: ks__has_field_prop_grow_curves
      - id: element_mastery
        type: f4
        if: ks__has_field_element_mastery
      - id: physical_sub_hurt
        type: f4
        if: ks__has_field_physical_sub_hurt
      - id: physical_add_hurt
        type: f4
        if: ks__has_field_physical_add_hurt
      - id: prefab_path_ragdoll_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_prefab_path_ragdoll_hash
      - id: prefab_path_ragdoll_hash_pre
        type: s1
        if: ks__has_field_prefab_path_ragdoll_hash
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: prefab_path_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_prefab_path_hash
      - id: prefab_path_hash_pre
        type: s1
        if: ks__has_field_prefab_path_hash
      - id: prefab_path_remote_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_prefab_path_remote_hash
      - id: prefab_path_remote_hash_pre
        type: s1
        if: ks__has_field_prefab_path_remote_hash
      - id: controller_path_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_controller_path_hash
      - id: controller_path_hash_pre
        type: s1
        if: ks__has_field_controller_path_hash
      - id: controller_path_remote_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_controller_path_remote_hash
      - id: controller_path_remote_hash_pre
        type: s1
        if: ks__has_field_controller_path_remote_hash
      - id: camp_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_camp_id
      - id: lod_pattern_name
        type: aux_types::string
        if: ks__has_field_lod_pattern_name
    instances:
      ks__has_field_monster_name: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_security_level: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_script_data_path_hash: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_server_script: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_combat_config_hash: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_affix: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_ai: # Field №7
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_is_ai_hash_check: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_equips: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_can_swim: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_hp_drops: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_kill_drop_id: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_is_scene_reward: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_vision_level: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
      ks__has_field_is_invisible_reset: # Field №15
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000001) != 0)
      ks__has_field_exclude_weathers: # Field №16
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000010) != 0)
      ks__has_field_feature_tag_group_id: # Field №17
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000100) != 0)
      ks__has_field_mp_prop_id: # Field №18
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00001000) != 0)
      ks__has_field_skin: # Field №19
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00010000) != 0)
      ks__has_field_describe_id: # Field №20
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00100000) != 0)
      ks__has_field_safety_check: # Field №21
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b01000000) != 0)
      ks__has_field_combat_bgm_level: # Field №22
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b10000000) != 0)
      ks__has_field_entity_budget_level: # Field №23
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000001) != 0)
      ks__has_field_hp_base: # Field №24
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000010) != 0)
      ks__has_field_attack_base: # Field №25
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000100) != 0)
      ks__has_field_defense_base: # Field №26
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00001000) != 0)
      ks__has_field_critical: # Field №27
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00010000) != 0)
      ks__has_field_anti_critical: # Field №28
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00100000) != 0)
      ks__has_field_critical_hurt: # Field №29
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b01000000) != 0)
      ks__has_field_fire_sub_hurt: # Field №30
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b10000000) != 0)
      ks__has_field_grass_sub_hurt: # Field №31
        value: (ks__bit_field.length.value >= (0b00000100 + 1)) and ((ks__bit_field.bitfield[0b00000100] & 0b00000001) != 0)
      ks__has_field_water_sub_hurt: # Field №32
        value: (ks__bit_field.length.value >= (0b00000100 + 1)) and ((ks__bit_field.bitfield[0b00000100] & 0b00000010) != 0)
      ks__has_field_elec_sub_hurt: # Field №33
        value: (ks__bit_field.length.value >= (0b00000100 + 1)) and ((ks__bit_field.bitfield[0b00000100] & 0b00000100) != 0)
      ks__has_field_wind_sub_hurt: # Field №34
        value: (ks__bit_field.length.value >= (0b00000100 + 1)) and ((ks__bit_field.bitfield[0b00000100] & 0b00001000) != 0)
      ks__has_field_ice_sub_hurt: # Field №35
        value: (ks__bit_field.length.value >= (0b00000100 + 1)) and ((ks__bit_field.bitfield[0b00000100] & 0b00010000) != 0)
      ks__has_field_rock_sub_hurt: # Field №36
        value: (ks__bit_field.length.value >= (0b00000100 + 1)) and ((ks__bit_field.bitfield[0b00000100] & 0b00100000) != 0)
      ks__has_field_fire_add_hurt: # Field №37
        value: (ks__bit_field.length.value >= (0b00000100 + 1)) and ((ks__bit_field.bitfield[0b00000100] & 0b01000000) != 0)
      ks__has_field_grass_add_hurt: # Field №38
        value: (ks__bit_field.length.value >= (0b00000100 + 1)) and ((ks__bit_field.bitfield[0b00000100] & 0b10000000) != 0)
      ks__has_field_water_add_hurt: # Field №39
        value: (ks__bit_field.length.value >= (0b00000101 + 1)) and ((ks__bit_field.bitfield[0b00000101] & 0b00000001) != 0)
      ks__has_field_elec_add_hurt: # Field №40
        value: (ks__bit_field.length.value >= (0b00000101 + 1)) and ((ks__bit_field.bitfield[0b00000101] & 0b00000010) != 0)
      ks__has_field_wind_add_hurt: # Field №41
        value: (ks__bit_field.length.value >= (0b00000101 + 1)) and ((ks__bit_field.bitfield[0b00000101] & 0b00000100) != 0)
      ks__has_field_ice_add_hurt: # Field №42
        value: (ks__bit_field.length.value >= (0b00000101 + 1)) and ((ks__bit_field.bitfield[0b00000101] & 0b00001000) != 0)
      ks__has_field_rock_add_hurt: # Field №43
        value: (ks__bit_field.length.value >= (0b00000101 + 1)) and ((ks__bit_field.bitfield[0b00000101] & 0b00010000) != 0)
      ks__has_field_prop_grow_curves: # Field №44
        value: (ks__bit_field.length.value >= (0b00000101 + 1)) and ((ks__bit_field.bitfield[0b00000101] & 0b00100000) != 0)
      ks__has_field_element_mastery: # Field №45
        value: (ks__bit_field.length.value >= (0b00000101 + 1)) and ((ks__bit_field.bitfield[0b00000101] & 0b01000000) != 0)
      ks__has_field_physical_sub_hurt: # Field №46
        value: (ks__bit_field.length.value >= (0b00000101 + 1)) and ((ks__bit_field.bitfield[0b00000101] & 0b10000000) != 0)
      ks__has_field_physical_add_hurt: # Field №47
        value: (ks__bit_field.length.value >= (0b00000110 + 1)) and ((ks__bit_field.bitfield[0b00000110] & 0b00000001) != 0)
      ks__has_field_prefab_path_ragdoll_hash: # Field №48
        value: (ks__bit_field.length.value >= (0b00000110 + 1)) and ((ks__bit_field.bitfield[0b00000110] & 0b00000010) != 0)
      ks__has_field_id: # Field №49
        value: (ks__bit_field.length.value >= (0b00000110 + 1)) and ((ks__bit_field.bitfield[0b00000110] & 0b00000100) != 0)
      ks__has_field_name: # Field №50
        value: (ks__bit_field.length.value >= (0b00000110 + 1)) and ((ks__bit_field.bitfield[0b00000110] & 0b00001000) != 0)
      ks__has_field_prefab_path_hash: # Field №51
        value: (ks__bit_field.length.value >= (0b00000110 + 1)) and ((ks__bit_field.bitfield[0b00000110] & 0b00010000) != 0)
      ks__has_field_prefab_path_remote_hash: # Field №52
        value: (ks__bit_field.length.value >= (0b00000110 + 1)) and ((ks__bit_field.bitfield[0b00000110] & 0b00100000) != 0)
      ks__has_field_controller_path_hash: # Field №53
        value: (ks__bit_field.length.value >= (0b00000110 + 1)) and ((ks__bit_field.bitfield[0b00000110] & 0b01000000) != 0)
      ks__has_field_controller_path_remote_hash: # Field №54
        value: (ks__bit_field.length.value >= (0b00000110 + 1)) and ((ks__bit_field.bitfield[0b00000110] & 0b10000000) != 0)
      ks__has_field_camp_id: # Field №55
        value: (ks__bit_field.length.value >= (0b00000111 + 1)) and ((ks__bit_field.bitfield[0b00000111] & 0b00000001) != 0)
      ks__has_field_lod_pattern_name: # Field №56
        value: (ks__bit_field.length.value >= (0b00000111 + 1)) and ((ks__bit_field.bitfield[0b00000111] & 0b00000010) != 0)
  monster_affix_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: affix
        type: aux_types::string
        if: ks__has_field_affix
      - id: comment
        type: aux_types::string
        if: ks__has_field_comment
      - id: ability_name
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_ability_name
      - id: is_common
        type: u1
        if: ks__has_field_is_common
      - id: pre_add
        type: u1
        if: ks__has_field_pre_add
      - id: is_legal
        type: aux_types::string
        if: ks__has_field_is_legal
      - id: icon_path
        type: aux_types::string
        if: ks__has_field_icon_path
      - id: radar_hint_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_radar_hint_id
      - id: general_skill_icon
        type: aux_types::string
        if: ks__has_field_general_skill_icon
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_affix: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_comment: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_ability_name: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_is_common: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_pre_add: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_is_legal: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_icon_path: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_radar_hint_id: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_general_skill_icon: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
  ks__enum__monster_rarity_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: monster_rarity_type
  monster_relationship_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: tag_str
        type: aux_types::string
        if: ks__has_field_tag_str
      - id: monster_rarity
        type: ks__enum__monster_rarity_type
        if: ks__has_field_monster_rarity
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_tag_str: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_monster_rarity: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  monster_describe_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: title_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title_id
      - id: special_name_lab_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_special_name_lab_id
      - id: icon
        type: aux_types::string
        if: ks__has_field_icon
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: lock_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_lock_desc
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_title_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_special_name_lab_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_icon: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_desc: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_lock_desc: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
  animal_describe_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: icon
        type: aux_types::string
        if: ks__has_field_icon
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_icon: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  monster_title_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: title_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title_id
      - id: title_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title_name
      - id: is_inverted
        type: u1
        if: ks__has_field_is_inverted
    instances:
      ks__has_field_title_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_title_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_is_inverted: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  monster_special_name_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: special_name_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_special_name_id
      - id: special_name_lab_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_special_name_lab_id
      - id: special_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_special_name
      - id: is_in_random_list
        type: u1
        if: ks__has_field_is_in_random_list
    instances:
      ks__has_field_special_name_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_special_name_lab_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_special_name: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_is_in_random_list: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  ks__enum__mp_play_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: mp_play_type
  mp_play_match_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: play_type
        type: ks__enum__mp_play_type
        if: ks__has_field_play_type
      - id: play_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_play_name
      - id: play_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_play_desc
      - id: is_auto_match
        type: u1
        if: ks__has_field_is_auto_match
      - id: min_players
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_min_players
      - id: max_players
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_players
      - id: is_allow_in_any_time
        type: u1
        if: ks__has_field_is_allow_in_any_time
      - id: is_match_necessary
        type: u1
        if: ks__has_field_is_match_necessary
      - id: buff_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_buff_list
      - id: push_tips_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_push_tips_id
      - id: bg_image
        type: aux_types::string
        if: ks__has_field_bg_image
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_play_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_play_name: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_play_desc: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_is_auto_match: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_min_players: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_max_players: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_is_allow_in_any_time: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_is_match_necessary: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_buff_list: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_push_tips_id: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_bg_image: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
  ks__enum__mp_play_show_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: mp_play_show_type
  mp_crucible_reward_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: drop_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_drop_id
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
      - id: reward_preview
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_preview
    instances:
      ks__has_field_drop_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_reward_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_reward_preview: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  ks__array_of__mp_crucible_reward_config__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: mp_crucible_reward_config
        repeat: expr
        repeat-expr: length.value
  mp_play_group_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: entry_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_entry_id
      - id: play_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_play_id
      - id: server_lua_call_group_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_server_lua_call_group_list
      - id: resin_cost
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_resin_cost
      - id: material_cost_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_material_cost_id
      - id: material_cost_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_material_cost_num
      - id: up_avatar_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_up_avatar_list
      - id: client_show_type
        type: ks__enum__mp_play_show_type
        if: ks__has_field_client_show_type
      - id: reward_vec
        type: ks__array_of__mp_crucible_reward_config__length_s
        if: ks__has_field_reward_vec
      - id: activate_group_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_activate_group_list
      - id: group_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_group_list
      - id: born_group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_born_group_id
      - id: born_config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_born_config_id
      - id: safe_group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_safe_group_id
      - id: safe_config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_safe_config_id
      - id: reborn_group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reborn_group_id
      - id: reborn_config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reborn_config_id
      - id: reward_group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_group_id
      - id: reward_config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_config_id
      - id: general_reward_config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_general_reward_config_id
      - id: prepare_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_prepare_time
      - id: center_pos_list
        type: ks__array_of__f4__length_u
        if: ks__has_field_center_pos_list
      - id: center_radius
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_center_radius
      - id: target_pos_list
        type: ks__array_of__f4__length_u
        if: ks__has_field_target_pos_list
      - id: revise_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_revise_id
      - id: rate_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_rate_list
      - id: limit_region
        type: aux_types::string
        if: ks__has_field_limit_region
      - id: ability_group_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_ability_group_list
      - id: is_disabled
        type: u1
        if: ks__has_field_is_disabled
    instances:
      ks__has_field_entry_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_play_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_server_lua_call_group_list: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_resin_cost: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_material_cost_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_material_cost_num: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_up_avatar_list: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_client_show_type: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_reward_vec: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_activate_group_list: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_group_list: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_born_group_id: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_born_config_id: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_safe_group_id: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_safe_config_id: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_reborn_group_id: # Field №15
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
      ks__has_field_reborn_config_id: # Field №16
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000001) != 0)
      ks__has_field_reward_group_id: # Field №17
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000010) != 0)
      ks__has_field_reward_config_id: # Field №18
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000100) != 0)
      ks__has_field_general_reward_config_id: # Field №19
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00001000) != 0)
      ks__has_field_prepare_time: # Field №20
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00010000) != 0)
      ks__has_field_center_pos_list: # Field №21
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00100000) != 0)
      ks__has_field_center_radius: # Field №22
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b01000000) != 0)
      ks__has_field_target_pos_list: # Field №23
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b10000000) != 0)
      ks__has_field_revise_id: # Field №24
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000001) != 0)
      ks__has_field_rate_list: # Field №25
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000010) != 0)
      ks__has_field_limit_region: # Field №26
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000100) != 0)
      ks__has_field_ability_group_list: # Field №27
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00001000) != 0)
      ks__has_field_is_disabled: # Field №28
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00010000) != 0)
  mp_play_watcher_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: mp_play_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mp_play_id
      - id: priority
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_priority
      - id: is_store
        type: u1
        if: ks__has_field_is_store
      - id: challenge_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_challenge_desc
      - id: challenge_title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_challenge_title
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: trigger_config
        type: watcher_trigger_config
        if: ks__has_field_trigger_config
      - id: progress
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_progress
      - id: is_disuse
        type: u1
        if: ks__has_field_is_disuse
    instances:
      ks__has_field_mp_play_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_priority: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_is_store: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_challenge_desc: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_challenge_title: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_trigger_config: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_progress: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_is_disuse: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
  ks__enum__mp_player_settle_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: mp_player_settle_type
  ks__enum__mp_player_settle_sync_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: mp_player_settle_sync_type
  mp_play_statistic_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: mp_play_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mp_play_id
      - id: settle_type
        type: ks__enum__mp_player_settle_type
        if: ks__has_field_settle_type
      - id: settle_param
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_settle_param
      - id: client_sync_type
        type: ks__enum__mp_player_settle_sync_type
        if: ks__has_field_client_sync_type
      - id: client_sync_param
        type: aux_types::string
        if: ks__has_field_client_sync_param
      - id: mpchallengetitle
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mpchallengetitle
      - id: mpchallenge
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mpchallenge
      - id: mpchallengestyle
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mpchallengestyle
      - id: image
        type: aux_types::string
        if: ks__has_field_image
      - id: priority
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_priority
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_mp_play_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_settle_type: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_settle_param: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_client_sync_type: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_client_sync_param: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_mpchallengetitle: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_mpchallenge: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_mpchallengestyle: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_image: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_priority: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
  mp_play_buff_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: icon
        type: aux_types::string
        if: ks__has_field_icon
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_desc: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_icon: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  mp_play_text_data_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: mp_play_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mp_play_id
      - id: quest
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_quest
      - id: reward
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward
      - id: invite
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_invite
      - id: invitedesc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_invitedesc
      - id: invitedeschost
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_invitedeschost
      - id: start
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_start
      - id: starttip
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_starttip
      - id: victory
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_victory
      - id: fail
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_fail
      - id: rivive
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_rivive
      - id: timespend
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_timespend
      - id: up_avatar_text
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_up_avatar_text
    instances:
      ks__has_field_mp_play_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_quest: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_reward: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_invite: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_invitedesc: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_invitedeschost: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_start: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_starttip: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_victory: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_fail: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_rivive: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_timespend: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_up_avatar_text: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
  mp_play_level_text_data_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_desc: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  mp_play_score_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: play_type
        type: ks__enum__mp_play_type
        if: ks__has_field_play_type
      - id: param
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_param
      - id: is_calc_score
        type: u1
        if: ks__has_field_is_calc_score
    instances:
      ks__has_field_play_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_param: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_is_calc_score: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  mp_play_ability_group_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: index
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_index
      - id: avatar_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_avatar_id
    instances:
      ks__has_field_index: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_avatar_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__enum__new_activity_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: new_activity_type
  new_activity_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_id
      - id: activity_type
        type: ks__enum__new_activity_type
        if: ks__has_field_activity_type
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: activity_scene_tag
        type: aux_types::string
        if: ks__has_field_activity_scene_tag
      - id: is_load_terrain
        type: u1
        if: ks__has_field_is_load_terrain
      - id: cond_group_id
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_cond_group_id
      - id: watcher_id
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_watcher_id
      - id: is_ban_client_ui
        type: u1
        if: ks__has_field_is_ban_client_ui
    instances:
      ks__has_field_activity_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_activity_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_name: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_activity_scene_tag: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_is_load_terrain: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_cond_group_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_watcher_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_is_ban_client_ui: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
  ks__enum__new_activity_cond_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: new_activity_cond_type
  new_activity_cond:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: type
        type: ks__enum__new_activity_cond_type
        if: ks__has_field_type
      - id: param
        type: ks__array_of__aux_types__vlq_base128_le_s__length_u
        if: ks__has_field_param
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_param: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__new_activity_cond__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: new_activity_cond
        repeat: expr
        repeat-expr: length.value
  new_activity_cond_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: cond_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cond_id
      - id: cond_comb
        type: ks__enum__logic_type
        if: ks__has_field_cond_comb
      - id: cond
        type: ks__array_of__new_activity_cond__length_s
        if: ks__has_field_cond
    instances:
      ks__has_field_cond_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_cond_comb: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_cond: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  new_activity_watcher_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
      - id: reward_preview
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_preview
      - id: activitychallengetips
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activitychallengetips
      - id: extra_activitychallengetips
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_extra_activitychallengetips
      - id: is_auto_grant
        type: u1
        if: ks__has_field_is_auto_grant
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: trigger_config
        type: watcher_trigger_config
        if: ks__has_field_trigger_config
      - id: progress
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_progress
      - id: is_disuse
        type: u1
        if: ks__has_field_is_disuse
    instances:
      ks__has_field_reward_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_reward_preview: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_activitychallengetips: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_extra_activitychallengetips: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_is_auto_grant: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_trigger_config: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_progress: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_is_disuse: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
  new_activity_entry_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: activity_type
        type: ks__enum__new_activity_type
        if: ks__has_field_activity_type
      - id: sort_priority
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_sort_priority
      - id: tab_icon
        type: aux_types::string
        if: ks__has_field_tab_icon
      - id: tab_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_tab_name
      - id: duration
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_duration
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_activity_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_sort_priority: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_tab_icon: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_tab_name: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_duration: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
  ks__enum__new_activity_sale_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: new_activity_sale_type
  new_activity_sale_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: sale_type
        type: ks__enum__new_activity_sale_type
        if: ks__has_field_sale_type
      - id: sale_param
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_sale_param
      - id: bufftips
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_bufftips
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_sale_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_sale_param: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_bufftips: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  new_activity_score_limit_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_id
      - id: limit_value
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_limit_value
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_activity_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_limit_value: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  new_activity_score_reward_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_id
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
      - id: score
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_score
      - id: activity_score_tips
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_score_tips
      - id: activity_score_extra_tips
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_score_extra_tips
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_activity_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_reward_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_score: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_activity_score_tips: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_activity_score_extra_tips: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
  new_activity_time_group_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: group_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_group_id_list
      - id: duration
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_duration
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_group_id_list: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_duration: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  new_activity_score_show_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: score
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_score
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_desc: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_score: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  new_activity_overlap_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: activity_type
        type: ks__enum__new_activity_type
        if: ks__has_field_activity_type
    instances:
      ks__has_field_activity_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
  new_activity_preview_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_id
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: intro_title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_intro_title
      - id: intro_content
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_intro_content
      - id: reward_preview_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_preview_id
      - id: pre_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_pre_quest_id
      - id: open_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_open_quest_id
      - id: push_tips_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_push_tips_id
    instances:
      ks__has_field_activity_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_desc: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_intro_title: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_intro_content: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_reward_preview_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_pre_quest_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_open_quest_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_push_tips_id: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
  npc_crowd_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_config_id
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: prefab_path_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_prefab_path_hash
      - id: prefab_path_hash_pre
        type: s1
        if: ks__has_field_prefab_path_hash
      - id: prefab_path_remote_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_prefab_path_remote_hash
      - id: prefab_path_remote_hash_pre
        type: s1
        if: ks__has_field_prefab_path_remote_hash
      - id: controller_path_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_controller_path_hash
      - id: controller_path_hash_pre
        type: s1
        if: ks__has_field_controller_path_hash
      - id: controller_path_remote_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_controller_path_remote_hash
      - id: controller_path_remote_hash_pre
        type: s1
        if: ks__has_field_controller_path_remote_hash
      - id: camp_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_camp_id
      - id: lod_pattern_name
        type: aux_types::string
        if: ks__has_field_lod_pattern_name
    instances:
      ks__has_field_config_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_name: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_prefab_path_hash: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_prefab_path_remote_hash: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_controller_path_hash: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_controller_path_remote_hash: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_camp_id: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_lod_pattern_name: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
  ks__enum__billboard_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: billboard_type
  ks__enum__npc_body_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: npc_body_type
  npc_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: json_name
        type: aux_types::string
        if: ks__has_field_json_name
      - id: json_path_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_json_path_hash
      - id: json_path_hash_pre
        type: s1
        if: ks__has_field_json_path_hash
      - id: alias
        type: aux_types::string
        if: ks__has_field_alias
      - id: script_data_path
        type: aux_types::string
        if: ks__has_field_script_data_path
      - id: lua_data_path
        type: aux_types::string
        if: ks__has_field_lua_data_path
      - id: lua_data_index
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_lua_data_index
      - id: has_combat
        type: u1
        if: ks__has_field_has_combat
      - id: has_move
        type: u1
        if: ks__has_field_has_move
      - id: has_audio
        type: u1
        if: ks__has_field_has_audio
      - id: is_daily
        type: u1
        if: ks__has_field_is_daily
      - id: dye_part
        type: aux_types::string
        if: ks__has_field_dye_part
      - id: billboard_type
        type: ks__enum__billboard_type
        if: ks__has_field_billboard_type
      - id: billboard_icon
        type: aux_types::string
        if: ks__has_field_billboard_icon
      - id: invisiable
        type: u1
        if: ks__has_field_invisiable
      - id: disable_show_name
        type: u1
        if: ks__has_field_disable_show_name
      - id: template_emotion_path
        type: aux_types::string
        if: ks__has_field_template_emotion_path
      - id: animator_config_path_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_animator_config_path_hash
      - id: animator_config_path_hash_pre
        type: s1
        if: ks__has_field_animator_config_path_hash
      - id: body_type
        type: ks__enum__npc_body_type
        if: ks__has_field_body_type
      - id: first_met_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_first_met_id
      - id: use_dyn_bone
        type: u1
        if: ks__has_field_use_dyn_bone
      - id: is_release
        type: u1
        if: ks__has_field_is_release
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: prefab_path_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_prefab_path_hash
      - id: prefab_path_hash_pre
        type: s1
        if: ks__has_field_prefab_path_hash
      - id: prefab_path_remote_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_prefab_path_remote_hash
      - id: prefab_path_remote_hash_pre
        type: s1
        if: ks__has_field_prefab_path_remote_hash
      - id: controller_path_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_controller_path_hash
      - id: controller_path_hash_pre
        type: s1
        if: ks__has_field_controller_path_hash
      - id: controller_path_remote_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_controller_path_remote_hash
      - id: controller_path_remote_hash_pre
        type: s1
        if: ks__has_field_controller_path_remote_hash
      - id: camp_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_camp_id
      - id: lod_pattern_name
        type: aux_types::string
        if: ks__has_field_lod_pattern_name
    instances:
      ks__has_field_json_name: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_json_path_hash: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_alias: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_script_data_path: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_lua_data_path: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_lua_data_index: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_has_combat: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_has_move: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_has_audio: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_is_daily: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_dye_part: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_billboard_type: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_billboard_icon: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_invisiable: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_disable_show_name: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_template_emotion_path: # Field №15
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
      ks__has_field_animator_config_path_hash: # Field №16
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000001) != 0)
      ks__has_field_body_type: # Field №17
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000010) != 0)
      ks__has_field_first_met_id: # Field №18
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000100) != 0)
      ks__has_field_use_dyn_bone: # Field №19
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00010000) != 0)
      ks__has_field_is_release: # Field №20
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00100000) != 0)
      ks__has_field_id: # Field №21
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b01000000) != 0)
      ks__has_field_name: # Field №22
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b10000000) != 0)
      ks__has_field_prefab_path_hash: # Field №23
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000001) != 0)
      ks__has_field_prefab_path_remote_hash: # Field №24
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000010) != 0)
      ks__has_field_controller_path_hash: # Field №25
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000100) != 0)
      ks__has_field_controller_path_remote_hash: # Field №26
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00001000) != 0)
      ks__has_field_camp_id: # Field №27
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00010000) != 0)
      ks__has_field_lod_pattern_name: # Field №28
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00100000) != 0)
  npc_first_met_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: sub_quest_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_sub_quest_id_list
      - id: avatar_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_avatar_id
      - id: avatar_description
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_avatar_description
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_sub_quest_id_list: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_avatar_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_avatar_description: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  ks__enum__offering_action_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: offering_action_type
  offering_action_content:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: action_type
        type: ks__enum__offering_action_type
        if: ks__has_field_action_type
      - id: param
        type: aux_types::string
        if: ks__has_field_param
    instances:
      ks__has_field_action_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_param: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__offering_action_content__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: offering_action_content
        repeat: expr
        repeat-expr: length.value
  offering_level_up_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: offering_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_offering_id
      - id: level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level
      - id: is_max_level
        type: u1
        if: ks__has_field_is_max_level
      - id: consume_item_config
        type: id_count_config
        if: ks__has_field_consume_item_config
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
      - id: action_vec
        type: ks__array_of__offering_action_content__length_s
        if: ks__has_field_action_vec
      - id: cut_scene_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cut_scene_id
    instances:
      ks__has_field_offering_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_level: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_is_max_level: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_consume_item_config: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_reward_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_action_vec: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_cut_scene_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
  offering_open_state_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: offering_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_offering_id
      - id: open_state
        type: ks__enum__open_state_type
        if: ks__has_field_open_state
      - id: item_limit
        type: ks__enum__item_limit_type
        if: ks__has_field_item_limit
      - id: is_continuous_level_up
        type: u1
        if: ks__has_field_is_continuous_level_up
    instances:
      ks__has_field_offering_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_open_state: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_item_limit: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_is_continuous_level_up: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  oraionokami_data_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_config_id
      - id: gadget_chain_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gadget_chain_id
      - id: gadget_chain_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gadget_chain_level
      - id: server_buff_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_server_buff_id
      - id: desc_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_desc_id_list
      - id: desc_title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc_title
      - id: desc_content
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc_content
      - id: desc_skill
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc_skill
      - id: group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_group_id
      - id: type_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_type_level
      - id: icon_path
        type: aux_types::string
        if: ks__has_field_icon_path
    instances:
      ks__has_field_config_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_gadget_chain_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_gadget_chain_level: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_server_buff_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_desc_id_list: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_desc_title: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_desc_content: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_desc_skill: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_group_id: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_type_level: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_icon_path: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
  oraionokami_desc_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: desc_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc_id
      - id: desc_content
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc_content
    instances:
      ks__has_field_desc_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_desc_content: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  offering_version_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: offering_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_offering_id
      - id: level_limit
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level_limit
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_offering_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_level_limit: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  ks__enum__op_activity_bonus_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: op_activity_bonus_type
  op_activity_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: op_activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_op_activity_id
      - id: bonus_type
        type: ks__enum__op_activity_bonus_type
        if: ks__has_field_bonus_type
      - id: bonus_value
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_bonus_value
      - id: bonus_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_bonus_list
      - id: icon
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_icon
      - id: tab_text
        type: aux_types::string
        if: ks__has_field_tab_text
      - id: text_map_id_list
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_text_map_id_list
    instances:
      ks__has_field_op_activity_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_bonus_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_bonus_value: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_bonus_list: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_icon: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_tab_text: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_text_map_id_list: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
  ks__enum__open_state_cond_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: open_state_cond_type
  open_state_cond:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: cond_type
        type: ks__enum__open_state_cond_type
        if: ks__has_field_cond_type
      - id: param
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_param
      - id: param2
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_param2
    instances:
      ks__has_field_cond_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_param: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_param2: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  ks__array_of__open_state_cond__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: open_state_cond
        repeat: expr
        repeat-expr: length.value
  open_state_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: default_state
        type: u1
        if: ks__has_field_default_state
      - id: allow_client_open
        type: u1
        if: ks__has_field_allow_client_open
      - id: cond
        type: ks__array_of__open_state_cond__length_s
        if: ks__has_field_cond
      - id: system_open_ui_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_system_open_ui_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_default_state: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_allow_client_open: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_cond: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_system_open_ui_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  system_open_ui_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: icon_path
        type: aux_types::string
        if: ks__has_field_icon_path
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: tutorial_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_tutorial_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_icon_path: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_desc: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_tutorial_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  personal_line_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title
      - id: chapter_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_chapter_id
      - id: start_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_start_quest_id
      - id: avatar_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_avatar_id
      - id: pre_quest_id
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_pre_quest_id
      - id: start_time
        type: aux_types::string
        if: ks__has_field_start_time
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: sort_order
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sort_order
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_title: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_chapter_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_start_quest_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_avatar_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_pre_quest_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_start_time: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_desc: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_sort_order: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
  ks__enum__personal_line_activity_feature:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: personal_line_activity_feature
  personal_line_activity_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: chapter_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_chapter_id
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: perfab_path
        type: aux_types::string
        if: ks__has_field_perfab_path
      - id: feature
        type: ks__enum__personal_line_activity_feature
        if: ks__has_field_feature
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_chapter_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_desc: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_perfab_path: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_feature: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  photograph_pose_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: character_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_character_id
      - id: pose_id
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_pose_id
    instances:
      ks__has_field_character_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_pose_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  photograph_posename_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: pose_file
        type: aux_types::string
        if: ks__has_field_pose_file
      - id: animatorstate_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_animatorstate_id
      - id: pose_icon
        type: aux_types::string
        if: ks__has_field_pose_icon
      - id: pose_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_pose_name
      - id: unlock_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_unlock_desc
      - id: fetter_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_fetter_id
      - id: avatar_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_avatar_id
      - id: open_conds
        type: ks__array_of__fetter_condition_config__length_s
        if: ks__has_field_open_conds
      - id: finish_conds
        type: ks__array_of__fetter_condition_config__length_s
        if: ks__has_field_finish_conds
    instances:
      ks__has_field_pose_file: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_animatorstate_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_pose_icon: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_pose_name: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_unlock_desc: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_fetter_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_avatar_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_open_conds: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_finish_conds: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
  photograph_expression_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: emotion_name
        type: aux_types::string
        if: ks__has_field_emotion_name
      - id: phoneme_name
        type: aux_types::string
        if: ks__has_field_phoneme_name
      - id: icon
        type: aux_types::string
        if: ks__has_field_icon
      - id: emotion_description
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_emotion_description
      - id: unlock_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_unlock_desc
      - id: fetter_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_fetter_id
      - id: avatar_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_avatar_id
      - id: open_conds
        type: ks__array_of__fetter_condition_config__length_s
        if: ks__has_field_open_conds
      - id: finish_conds
        type: ks__array_of__fetter_condition_config__length_s
        if: ks__has_field_finish_conds
    instances:
      ks__has_field_emotion_name: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_phoneme_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_icon: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_emotion_description: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_unlock_desc: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_fetter_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_avatar_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_open_conds: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_finish_conds: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
  ks__enum__photograph_task_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: photograph_task_type
  photograph_task:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: task_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_task_id
      - id: task_type
        type: ks__enum__photograph_task_type
        if: ks__has_field_task_type
      - id: scene_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scene_id
      - id: center_x
        type: f4
        if: ks__has_field_center_x
      - id: center_y
        type: f4
        if: ks__has_field_center_y
      - id: center_z
        type: f4
        if: ks__has_field_center_z
      - id: radius
        type: f4
        if: ks__has_field_radius
      - id: target_gadget_id
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_target_gadget_id
      - id: start_time
        type: f4
        if: ks__has_field_start_time
      - id: end_time
        type: f4
        if: ks__has_field_end_time
      - id: questid
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_questid
      - id: finish_tips
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_finish_tips
      - id: start_tips
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_start_tips
    instances:
      ks__has_field_task_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_task_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_scene_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_center_x: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_center_y: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_center_z: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_radius: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_target_gadget_id: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_start_time: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_end_time: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_questid: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_finish_tips: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_start_tips: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
  player_level_lock_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: world_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_world_level
      - id: unlock_main_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_unlock_main_quest_id
      - id: unlock_player_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_unlock_player_level
      - id: player_level_upper_limit
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_player_level_upper_limit
      - id: unlock_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_unlock_desc
    instances:
      ks__has_field_world_level: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_unlock_main_quest_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_unlock_player_level: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_player_level_upper_limit: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_unlock_desc: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  ks__enum__ps_activities_category_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: ps_activities_category_type
  ps_activities_activity_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: activity_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_name
      - id: activity_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_desc
      - id: category
        type: ks__enum__ps_activities_category_type
        if: ks__has_field_category
      - id: available_by_default
        type: u1
        if: ks__has_field_available_by_default
      - id: is_required_for_completion
        type: u1
        if: ks__has_field_is_required_for_completion
      - id: hidden
        type: u1
        if: ks__has_field_hidden
      - id: is_online_multiplay
        type: u1
        if: ks__has_field_is_online_multiplay
      - id: large_icon
        type: aux_types::string
        if: ks__has_field_large_icon
      - id: small_icon
        type: aux_types::string
        if: ks__has_field_small_icon
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: object_id
        type: aux_types::string
        if: ks__has_field_object_id
      - id: export_version
        type: aux_types::string
        if: ks__has_field_export_version
    instances:
      ks__has_field_activity_name: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_activity_desc: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_category: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_available_by_default: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_is_required_for_completion: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_hidden: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_is_online_multiplay: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_large_icon: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_small_icon: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_id: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_object_id: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_export_version: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
  ps_activities_task_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_id
      - id: task_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_task_name
      - id: is_required_for_completion
        type: u1
        if: ks__has_field_is_required_for_completion
      - id: hidden
        type: u1
        if: ks__has_field_hidden
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: object_id
        type: aux_types::string
        if: ks__has_field_object_id
      - id: export_version
        type: aux_types::string
        if: ks__has_field_export_version
    instances:
      ks__has_field_activity_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_task_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_is_required_for_completion: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_hidden: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_object_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_export_version: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
  ps_activities_sub_task_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: task_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_task_id
      - id: hidden
        type: u1
        if: ks__has_field_hidden
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: object_id
        type: aux_types::string
        if: ks__has_field_object_id
      - id: export_version
        type: aux_types::string
        if: ks__has_field_export_version
    instances:
      ks__has_field_task_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_hidden: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_object_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_export_version: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  ks__enum__qte_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: qte_type
  ks__enum__qte_action_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: qte_action_type
  qte_exec:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: type
        type: ks__enum__qte_action_type
        if: ks__has_field_type
      - id: param
        type: ks__array_of__aux_types__vlq_base128_le_s__length_u
        if: ks__has_field_param
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_param: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__qte_exec__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: qte_exec
        repeat: expr
        repeat-expr: length.value
  qte_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: start_step_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_start_step_id
      - id: qte_type
        type: ks__enum__qte_type
        if: ks__has_field_qte_type
      - id: start_exec
        type: ks__array_of__qte_exec__length_s
        if: ks__has_field_start_exec
      - id: success_exec
        type: ks__array_of__qte_exec__length_s
        if: ks__has_field_success_exec
      - id: fail_exec
        type: ks__array_of__qte_exec__length_s
        if: ks__has_field_fail_exec
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_start_step_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_qte_type: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_start_exec: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_success_exec: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_fail_exec: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
  qte_step_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: config_path
        type: aux_types::string
        if: ks__has_field_config_path
      - id: next_step
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_next_step
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_config_path: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_next_step: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  chapter_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: begin_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_begin_quest_id
      - id: end_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_end_quest_id
      - id: need_player_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_need_player_level
      - id: activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_id
      - id: need_begin_time_str
        type: aux_types::string
        if: ks__has_field_need_begin_time_str
      - id: chapter_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_chapter_num
      - id: chapter_title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_chapter_title
      - id: chapter_icon
        type: aux_types::string
        if: ks__has_field_chapter_icon
      - id: chapter_image_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_chapter_image_hash
      - id: chapter_image_hash_pre
        type: s1
        if: ks__has_field_chapter_image_hash
      - id: chapter_image_title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_chapter_image_title
      - id: in_activity_need_player_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_in_activity_need_player_level
      - id: chapter_serial_number_icon
        type: aux_types::string
        if: ks__has_field_chapter_serial_number_icon
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_begin_quest_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_end_quest_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_need_player_level: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_activity_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_need_begin_time_str: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_chapter_num: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_chapter_title: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_chapter_icon: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_chapter_image_hash: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_chapter_image_title: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_in_activity_need_player_level: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_chapter_serial_number_icon: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
  ks__enum__ban_group_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: ban_group_type
  quest_cond:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: type
        type: ks__enum__quest_cond_type
        if: ks__has_field_type
      - id: param
        type: ks__array_of__aux_types__vlq_base128_le_s__length_u
        if: ks__has_field_param
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_param: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__quest_cond__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: quest_cond
        repeat: expr
        repeat-expr: length.value
  ks__enum__quest_content_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: quest_content_type
  quest_content:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: type
        type: ks__enum__quest_content_type
        if: ks__has_field_type
      - id: param
        type: ks__array_of__aux_types__vlq_base128_le_s__length_u
        if: ks__has_field_param
      - id: param_str
        type: aux_types::string
        if: ks__has_field_param_str
      - id: count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_count
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_param: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_param_str: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_count: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  ks__array_of__quest_content__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: quest_content
        repeat: expr
        repeat-expr: length.value
  ks__enum__show_quest_guide_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: show_quest_guide_type
  ks__enum__quest_exec_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: quest_exec_type
  quest_exec:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: type
        type: ks__enum__quest_exec_type
        if: ks__has_field_type
      - id: param
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_param
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_param: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__quest_exec__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: quest_exec
        repeat: expr
        repeat-expr: length.value
  quest_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: sub_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sub_id
      - id: main_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_main_id
      - id: order
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_order
      - id: sub_id_set
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sub_id_set
      - id: is_mp_block
        type: u1
        if: ks__has_field_is_mp_block
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: step_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_step_desc
      - id: guide_tips
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_guide_tips
      - id: show_type
        type: ks__enum__quest_show_type
        if: ks__has_field_show_type
      - id: ban_type
        type: ks__enum__ban_group_type
        if: ks__has_field_ban_type
      - id: accept_cond_comb
        type: ks__enum__logic_type
        if: ks__has_field_accept_cond_comb
      - id: accept_cond
        type: ks__array_of__quest_cond__length_s
        if: ks__has_field_accept_cond
      - id: finish_cond_comb
        type: ks__enum__logic_type
        if: ks__has_field_finish_cond_comb
      - id: finish_cond
        type: ks__array_of__quest_content__length_s
        if: ks__has_field_finish_cond
      - id: fail_cond_comb
        type: ks__enum__logic_type
        if: ks__has_field_fail_cond_comb
      - id: fail_cond
        type: ks__array_of__quest_content__length_s
        if: ks__has_field_fail_cond
      - id: guide
        type: quest_guide
        if: ks__has_field_guide
      - id: show_guide
        type: ks__enum__show_quest_guide_type
        if: ks__has_field_show_guide
      - id: finish_parent
        type: u1
        if: ks__has_field_finish_parent
      - id: fail_parent
        type: u1
        if: ks__has_field_fail_parent
      - id: fail_parent_show
        type: ks__enum__quest_show_type
        if: ks__has_field_fail_parent_show
      - id: is_rewind
        type: u1
        if: ks__has_field_is_rewind
      - id: finish_exec
        type: ks__array_of__quest_exec__length_s
        if: ks__has_field_finish_exec
      - id: fail_exec
        type: ks__array_of__quest_exec__length_s
        if: ks__has_field_fail_exec
      - id: begin_exec
        type: ks__array_of__quest_exec__length_s
        if: ks__has_field_begin_exec
      - id: exclusive_npc_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_exclusive_npc_list
      - id: shared_npc_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_shared_npc_list
      - id: exclusive_npc_priority
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_exclusive_npc_priority
      - id: trial_avatar_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_trial_avatar_list
      - id: exclusive_place_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_exclusive_place_list
    instances:
      ks__has_field_sub_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_main_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_order: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_sub_id_set: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_is_mp_block: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_desc: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_step_desc: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_guide_tips: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_show_type: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_ban_type: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_accept_cond_comb: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_accept_cond: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_finish_cond_comb: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_finish_cond: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_fail_cond_comb: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_fail_cond: # Field №15
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
      ks__has_field_guide: # Field №16
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000001) != 0)
      ks__has_field_show_guide: # Field №17
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000010) != 0)
      ks__has_field_finish_parent: # Field №18
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000100) != 0)
      ks__has_field_fail_parent: # Field №19
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00001000) != 0)
      ks__has_field_fail_parent_show: # Field №20
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00010000) != 0)
      ks__has_field_is_rewind: # Field №21
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00100000) != 0)
      ks__has_field_finish_exec: # Field №22
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b01000000) != 0)
      ks__has_field_fail_exec: # Field №23
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b10000000) != 0)
      ks__has_field_begin_exec: # Field №24
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000001) != 0)
      ks__has_field_exclusive_npc_list: # Field №25
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000010) != 0)
      ks__has_field_shared_npc_list: # Field №26
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000100) != 0)
      ks__has_field_exclusive_npc_priority: # Field №27
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00001000) != 0)
      ks__has_field_trial_avatar_list: # Field №28
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00010000) != 0)
      ks__has_field_exclusive_place_list: # Field №29
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00100000) != 0)
  rq_talk_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: begin_way
        type: ks__enum__talk_begin_way
        if: ks__has_field_begin_way
      - id: active_mode
        type: ks__enum__play_mode
        if: ks__has_field_active_mode
      - id: begin_cond_comb
        type: ks__enum__logic_type
        if: ks__has_field_begin_cond_comb
      - id: begin_cond
        type: ks__array_of__talk_cond__length_s
        if: ks__has_field_begin_cond
      - id: priority
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_priority
      - id: next_talks
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_next_talks
      - id: init_dialog
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_init_dialog
      - id: npc_id
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_npc_id
      - id: perform_cfg
        type: aux_types::string
        if: ks__has_field_perform_cfg
      - id: hero_talk
        type: ks__enum__talk_hero_type
        if: ks__has_field_hero_talk
      - id: quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_quest_id
      - id: dont_block_daily
        type: u1
        if: ks__has_field_dont_block_daily
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_begin_way: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_active_mode: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_begin_cond_comb: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_begin_cond: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_priority: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_next_talks: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_init_dialog: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_npc_id: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_perform_cfg: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_hero_talk: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_quest_id: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_dont_block_daily: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
  talk_select_time_out_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: time_limit
        type: f4
        if: ks__has_field_time_limit
      - id: next_talk_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_next_talk_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_time_limit: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_next_talk_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  dialog_select_time_out_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: time_limit
        type: f4
        if: ks__has_field_time_limit
      - id: next_dialog_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_next_dialog_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_time_limit: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_next_dialog_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  ks__enum__random_quest_filter_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: random_quest_filter_type
  random_quest_filter_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: filter_type
        type: ks__enum__random_quest_filter_type
        if: ks__has_field_filter_type
      - id: filter_factor
        type: aux_types::string
        if: ks__has_field_filter_factor
      - id: filter_param_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_filter_param_list
    instances:
      ks__has_field_filter_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_filter_factor: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_filter_param_list: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  ks__array_of__random_quest_filter_config__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: random_quest_filter_config
        repeat: expr
        repeat-expr: length.value
  random_quest_entrance_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: weight
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_weight
      - id: template_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_template_id
      - id: filter_logic_type
        type: ks__enum__logic_type
        if: ks__has_field_filter_logic_type
      - id: filter_list
        type: ks__array_of__random_quest_filter_config__length_s
        if: ks__has_field_filter_list
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_weight: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_template_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_filter_logic_type: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_filter_list: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  random_quest_elem:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: name
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_name
      - id: pool_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_pool_id
    instances:
      ks__has_field_name: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_pool_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__random_quest_elem__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: random_quest_elem
        repeat: expr
        repeat-expr: length.value
  random_quest_template_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: main_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_main_id
      - id: elem_list
        type: ks__array_of__random_quest_elem__length_s
        if: ks__has_field_elem_list
    instances:
      ks__has_field_main_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_elem_list: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  quest_elem_sample:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: type
        type: aux_types::string
        if: ks__has_field_type
      - id: content
        type: aux_types::string
        if: ks__has_field_content
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_content: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__quest_elem_sample__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: quest_elem_sample
        repeat: expr
        repeat-expr: length.value
  random_quest_elem_pool_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: pool_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_pool_id
      - id: weight
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_weight
      - id: sample_list
        type: ks__array_of__quest_elem_sample__length_s
        if: ks__has_field_sample_list
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_pool_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_weight: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_sample_list: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  random_main_quest_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: type
        type: ks__enum__quest_type
        if: ks__has_field_type
      - id: title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: lua_path
        type: aux_types::string
        if: ks__has_field_lua_path
      - id: recommend_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_recommend_level
      - id: repeatable
        type: u1
        if: ks__has_field_repeatable
      - id: active_mode
        type: ks__enum__play_mode
        if: ks__has_field_active_mode
      - id: suggest_track_main_quest_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_suggest_track_main_quest_list
      - id: suggest_track_out_of_order
        type: u1
        if: ks__has_field_suggest_track_out_of_order
      - id: show_type
        type: ks__enum__quest_show_type
        if: ks__has_field_show_type
      - id: chapter_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_chapter_id
      - id: reward_id_list
        type: aux_types::string
        if: ks__has_field_reward_id_list
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_title: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_desc: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_lua_path: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_recommend_level: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_repeatable: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_active_mode: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_suggest_track_main_quest_list: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_suggest_track_out_of_order: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_show_type: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_chapter_id: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_reward_id_list: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
  random_quest_cond:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: type
        type: ks__enum__quest_cond_type
        if: ks__has_field_type
      - id: param
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_param
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_param: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__random_quest_cond__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: random_quest_cond
        repeat: expr
        repeat-expr: length.value
  random_quest_content:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: type
        type: ks__enum__quest_content_type
        if: ks__has_field_type
      - id: param
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_param
      - id: param_str
        type: aux_types::string
        if: ks__has_field_param_str
      - id: count
        type: aux_types::string
        if: ks__has_field_count
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_param: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_param_str: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_count: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  ks__array_of__random_quest_content__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: random_quest_content
        repeat: expr
        repeat-expr: length.value
  random_quest_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: sub_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sub_id
      - id: main_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_main_id
      - id: order
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_order
      - id: sub_id_set
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sub_id_set
      - id: title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: show_type
        type: ks__enum__quest_show_type
        if: ks__has_field_show_type
      - id: accept_cond_comb
        type: ks__enum__logic_type
        if: ks__has_field_accept_cond_comb
      - id: accept_cond
        type: ks__array_of__random_quest_cond__length_s
        if: ks__has_field_accept_cond
      - id: finish_cond_comb
        type: ks__enum__logic_type
        if: ks__has_field_finish_cond_comb
      - id: finish_cond
        type: ks__array_of__random_quest_content__length_s
        if: ks__has_field_finish_cond
      - id: fail_cond_comb
        type: ks__enum__logic_type
        if: ks__has_field_fail_cond_comb
      - id: fail_cond
        type: ks__array_of__random_quest_content__length_s
        if: ks__has_field_fail_cond
      - id: guide
        type: quest_guide
        if: ks__has_field_guide
      - id: show_guide
        type: ks__enum__show_quest_guide_type
        if: ks__has_field_show_guide
      - id: finish_parent
        type: u1
        if: ks__has_field_finish_parent
      - id: fail_parent
        type: u1
        if: ks__has_field_fail_parent
      - id: fail_parent_show
        type: ks__enum__quest_show_type
        if: ks__has_field_fail_parent_show
      - id: is_rewind
        type: u1
        if: ks__has_field_is_rewind
      - id: award_items
        type: ks__array_of__id_count_config__length_s
        if: ks__has_field_award_items
      - id: begin_exec
        type: ks__array_of__quest_exec__length_s
        if: ks__has_field_begin_exec
      - id: finish_exec
        type: ks__array_of__quest_exec__length_s
        if: ks__has_field_finish_exec
      - id: fail_exec
        type: ks__array_of__quest_exec__length_s
        if: ks__has_field_fail_exec
      - id: exclusive_npc_priority
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_exclusive_npc_priority
      - id: ban_type
        type: ks__enum__ban_group_type
        if: ks__has_field_ban_type
    instances:
      ks__has_field_sub_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_main_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_order: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_sub_id_set: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_title: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_desc: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_show_type: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_accept_cond_comb: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_accept_cond: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_finish_cond_comb: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_finish_cond: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_fail_cond_comb: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_fail_cond: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_guide: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_show_guide: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_finish_parent: # Field №15
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
      ks__has_field_fail_parent: # Field №16
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000001) != 0)
      ks__has_field_fail_parent_show: # Field №17
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000010) != 0)
      ks__has_field_is_rewind: # Field №18
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000100) != 0)
      ks__has_field_award_items: # Field №19
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00001000) != 0)
      ks__has_field_begin_exec: # Field №20
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00010000) != 0)
      ks__has_field_finish_exec: # Field №21
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00100000) != 0)
      ks__has_field_fail_exec: # Field №22
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b01000000) != 0)
      ks__has_field_exclusive_npc_priority: # Field №23
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b10000000) != 0)
      ks__has_field_ban_type: # Field №24
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000001) != 0)
  quest_global_var_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: default_value
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_default_value
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_default_value: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  quest_place_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: place_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_place_id
    instances:
      ks__has_field_place_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
  ks__enum__quest_special_show_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: quest_special_show_type
  quest_special_show_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: cond_type
        type: ks__enum__quest_special_show_type
        if: ks__has_field_cond_type
      - id: param1
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_param1
      - id: param2
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_param2
      - id: show_tips
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_show_tips
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_cond_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_param1: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_param2: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_show_tips: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  quest_dialog_decorator_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: decorator_content
        type: aux_types::string
        if: ks__has_field_decorator_content
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_decorator_content: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__enum__rand_task_content_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: rand_task_content_type
  rand_task_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title
      - id: content_type
        type: ks__enum__rand_task_content_type
        if: ks__has_field_content_type
      - id: reward
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward
      - id: need_ui
        type: u1
        if: ks__has_field_need_ui
      - id: target
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_target
      - id: enter_distance
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_enter_distance
      - id: exit_distance
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_exit_distance
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_title: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_content_type: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_reward: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_need_ui: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_target: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_enter_distance: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_exit_distance: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
  rand_task_drop_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: drop_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_drop_id
    instances:
      ks__has_field_drop_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
  ks__array_of__rand_task_drop_config__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: rand_task_drop_config
        repeat: expr
        repeat-expr: length.value
  rand_task_reward_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: drop_vec
        type: ks__array_of__rand_task_drop_config__length_s
        if: ks__has_field_drop_vec
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_drop_vec: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  rand_task_level_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: min_zone_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_min_zone_level
      - id: max_zone_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_zone_level
      - id: revise_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_revise_level
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_min_zone_level: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_max_zone_level: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_revise_level: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  ks__enum__refresh_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: refresh_type
  refresh_policy_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: type
        type: ks__enum__refresh_type
        if: ks__has_field_type
      - id: time
        type: aux_types::string
        if: ks__has_field_time
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_time: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  ks__enum__refresh_index_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: refresh_index_type
  refresh_index_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: priority
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_priority
      - id: type
        type: ks__enum__refresh_index_type
        if: ks__has_field_type
      - id: rarity
        type: ks__enum__monster_rarity_type
        if: ks__has_field_rarity
      - id: name
        type: aux_types::string
        if: ks__has_field_name
      - id: refresh_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_refresh_id
    instances:
      ks__has_field_priority: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_rarity: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_name: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_refresh_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
  ks__enum__equip_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: equip_type
  reliquary_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: equip_type
        type: ks__enum__equip_type
        if: ks__has_field_equip_type
      - id: show_pic
        type: aux_types::string
        if: ks__has_field_show_pic
      - id: rank_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_rank_level
      - id: main_prop_depot_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_main_prop_depot_id
      - id: append_prop_depot_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_append_prop_depot_id
      - id: append_prop_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_append_prop_num
      - id: set_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_set_id
      - id: add_prop_levels
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_add_prop_levels
      - id: base_conv_exp
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_base_conv_exp
      - id: max_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_level
      - id: story_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_story_id
      - id: destroy_rule
        type: ks__enum__material_destroy_type
        if: ks__has_field_destroy_rule
      - id: destroy_return_material
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_destroy_return_material
      - id: destroy_return_material_count
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_destroy_return_material_count
      - id: initial_lock_state
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_initial_lock_state
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: icon
        type: aux_types::string
        if: ks__has_field_icon
      - id: item_type
        type: ks__enum__item_type
        if: ks__has_field_item_type
      - id: weight
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_weight
      - id: rank
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_rank
      - id: gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gadget_id
      - id: dropable
        type: u1
        if: ks__has_field_dropable
      - id: use_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_use_level
      - id: global_item_limit
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_global_item_limit
    instances:
      ks__has_field_equip_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_show_pic: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_rank_level: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_main_prop_depot_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_append_prop_depot_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_append_prop_num: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_set_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_add_prop_levels: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_base_conv_exp: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_max_level: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_story_id: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_destroy_rule: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_destroy_return_material: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_destroy_return_material_count: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_initial_lock_state: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_id: # Field №15
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
      ks__has_field_name: # Field №16
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000001) != 0)
      ks__has_field_desc: # Field №17
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000010) != 0)
      ks__has_field_icon: # Field №18
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000100) != 0)
      ks__has_field_item_type: # Field №19
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00001000) != 0)
      ks__has_field_weight: # Field №20
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00010000) != 0)
      ks__has_field_rank: # Field №21
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00100000) != 0)
      ks__has_field_gadget_id: # Field №22
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b01000000) != 0)
      ks__has_field_dropable: # Field №23
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b10000000) != 0)
      ks__has_field_use_level: # Field №24
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000001) != 0)
      ks__has_field_global_item_limit: # Field №25
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000010) != 0)
  ks__enum__reliquary_main_affix_name:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: reliquary_main_affix_name
  reliquary_main_prop_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: prop_depot_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_prop_depot_id
      - id: prop_type
        type: ks__enum__fight_prop_type
        if: ks__has_field_prop_type
      - id: affix_name
        type: ks__enum__reliquary_main_affix_name
        if: ks__has_field_affix_name
      - id: weight
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_weight
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_prop_depot_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_prop_type: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_affix_name: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_weight: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  reliquary_affix_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: depot_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_depot_id
      - id: group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_group_id
      - id: prop_type
        type: ks__enum__fight_prop_type
        if: ks__has_field_prop_type
      - id: prop_value
        type: f4
        if: ks__has_field_prop_value
      - id: weight
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_weight
      - id: upgrade_weight
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_upgrade_weight
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_depot_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_group_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_prop_type: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_prop_value: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_weight: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_upgrade_weight: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
  reliquary_level_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: rank
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_rank
      - id: level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level
      - id: exp
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_exp
      - id: add_props
        type: ks__array_of__prop_val_config__length_s
        if: ks__has_field_add_props
    instances:
      ks__has_field_rank: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_level: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_exp: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_add_props: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  reliquary_set_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: set_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_set_id
      - id: set_icon
        type: aux_types::string
        if: ks__has_field_set_icon
      - id: set_need_num
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_set_need_num
      - id: equip_affix_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_equip_affix_id
      - id: disable_filter
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_disable_filter
      - id: contains_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_contains_list
    instances:
      ks__has_field_set_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_set_icon: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_set_need_num: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_equip_affix_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_disable_filter: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_contains_list: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
  reliquary_powerup_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: powerup_multiple
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_powerup_multiple
      - id: powerup_weight
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_powerup_weight
    instances:
      ks__has_field_powerup_multiple: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_powerup_weight: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__enum__reminder_show_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: reminder_show_type
  reminder_index_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: reminder_id
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_reminder_id
      - id: show_type
        type: ks__enum__reminder_show_type
        if: ks__has_field_show_type
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_reminder_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_show_type: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  ks__enum__template_reminder_style_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: template_reminder_style_type
  template_reminder_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: style
        type: ks__enum__template_reminder_style_type
        if: ks__has_field_style
      - id: icon
        type: aux_types::string
        if: ks__has_field_icon
      - id: title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title
      - id: content
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_content
      - id: activity_type
        type: ks__enum__new_activity_type
        if: ks__has_field_activity_type
      - id: show_time
        type: f4
        if: ks__has_field_show_time
      - id: param
        type: aux_types::string
        if: ks__has_field_param
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_style: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_icon: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_title: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_content: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_activity_type: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_show_time: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_param: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
  uid_op_notify_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: content
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_content
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_content: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__enum__server_message_show_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: server_message_show_type
  server_message_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: content
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_content
      - id: show_type
        type: ks__enum__server_message_show_type
        if: ks__has_field_show_type
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_content: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_show_type: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  reputation_quest_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: parent_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_parent_quest_id
      - id: city_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_city_id
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
      - id: icon_name
        type: aux_types::string
        if: ks__has_field_icon_name
      - id: title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title
      - id: order
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_order
    instances:
      ks__has_field_parent_quest_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_city_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_reward_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_icon_name: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_title: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_order: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
  reputation_request_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: request_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_request_id
      - id: quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_quest_id
      - id: group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_group_id
      - id: weight
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_weight
      - id: npc_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_npc_id
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: icon_name
        type: aux_types::string
        if: ks__has_field_icon_name
    instances:
      ks__has_field_request_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_quest_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_group_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_weight: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_npc_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_reward_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_name: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_desc: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_icon_name: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
  reputation_explore_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: explore_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_explore_id
      - id: city_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_city_id
      - id: explore_progress
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_explore_progress
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
      - id: condition_text
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_condition_text
    instances:
      ks__has_field_explore_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_city_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_explore_progress: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_reward_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_condition_text: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  reputation_city_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: city_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_city_id
      - id: explore_area_vec
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_explore_area_vec
      - id: virtual_item_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_virtual_item_id
      - id: open_state
        type: ks__enum__open_state_type
        if: ks__has_field_open_state
      - id: bg_icon_path
        type: aux_types::string
        if: ks__has_field_bg_icon_path
      - id: bg_effect_path
        type: aux_types::string
        if: ks__has_field_bg_effect_path
      - id: explain_title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_explain_title
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: reward_item_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_item_id
      - id: reward_item_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_item_desc
      - id: reward_item_icon
        type: aux_types::string
        if: ks__has_field_reward_item_icon
      - id: reward_bg_icon
        type: aux_types::string
        if: ks__has_field_reward_bg_icon
      - id: city_icon
        type: aux_types::string
        if: ks__has_field_city_icon
    instances:
      ks__has_field_city_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_explore_area_vec: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_virtual_item_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_open_state: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_bg_icon_path: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_bg_effect_path: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_explain_title: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_desc: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_reward_item_id: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_reward_item_desc: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_reward_item_icon: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_reward_bg_icon: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_city_icon: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
  reputation_function_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: function_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_function_id
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: shop_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_shop_desc
    instances:
      ks__has_field_function_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_desc: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_shop_desc: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  reunion_schedule_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: activate_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activate_level
      - id: first_gift_reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_first_gift_reward_id
      - id: daily_sign_in_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_daily_sign_in_id
      - id: reunion_mission_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reunion_mission_id
      - id: reunion_privilege_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reunion_privilege_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_activate_level: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_first_gift_reward_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_daily_sign_in_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_reunion_mission_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_reunion_privilege_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
  reunion_sign_in_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: day_index
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_day_index
      - id: reward_id
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_reward_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_day_index: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_reward_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  reunion_mission_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: watcher_group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_watcher_group_id
      - id: target_score
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_target_score
      - id: finish_reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_finish_reward_id
      - id: target_score_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_target_score_list
      - id: finish_reward_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_finish_reward_id_list
      - id: show_reward_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_show_reward_id_list
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_watcher_group_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_target_score: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_finish_reward_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_target_score_list: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_finish_reward_id_list: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_show_reward_id_list: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
  reunion_watcher_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: watcher_group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_watcher_group_id
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: activate_level_range
        type: aux_types::string
        if: ks__has_field_activate_level_range
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
      - id: score
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_score
      - id: reward_unlock_day
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_unlock_day
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: trigger_config
        type: watcher_trigger_config
        if: ks__has_field_trigger_config
      - id: progress
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_progress
      - id: is_disuse
        type: u1
        if: ks__has_field_is_disuse
    instances:
      ks__has_field_watcher_group_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_desc: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_activate_level_range: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_reward_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_score: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_reward_unlock_day: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_trigger_config: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_progress: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_is_disuse: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
  ks__enum__reunion_privilege_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: reunion_privilege_type
  reunion_privilege_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: type
        type: ks__enum__reunion_privilege_type
        if: ks__has_field_type
      - id: sub_type
        type: aux_types::string
        if: ks__has_field_sub_type
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_sub_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__reunion_privilege_config__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: reunion_privilege_config
        repeat: expr
        repeat-expr: length.value
  reunion_privilege_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: daily_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_daily_num
      - id: total_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_total_num
      - id: privilege_type
        type: ks__array_of__reunion_privilege_config__length_s
        if: ks__has_field_privilege_type
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_daily_num: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_total_num: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_privilege_type: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  reunion_commercial_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: domestic_link
        type: aux_types::string
        if: ks__has_field_domestic_link
      - id: oversea_link
        type: aux_types::string
        if: ks__has_field_oversea_link
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_domestic_link: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_oversea_link: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  ks__enum__reward_source_system_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: reward_source_system_type
  general_reward_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: use_condense_resin
        type: u1
        if: ks__has_field_use_condense_resin
      - id: reward_source_system
        type: ks__enum__reward_source_system_type
        if: ks__has_field_reward_source_system
      - id: reward_source_system_para
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_source_system_para
      - id: title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title
      - id: stamina_enough
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_stamina_enough
      - id: stamina_less
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_stamina_less
      - id: condense_resin_stamina_enough
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_condense_resin_stamina_enough
      - id: condense_resin_stamina_less
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_condense_resin_stamina_less
      - id: using_activity_coin
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_using_activity_coin
      - id: using_activity_coin_button
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_using_activity_coin_button
      - id: confirm
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_confirm
      - id: resin_monthly
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_resin_monthly
      - id: insufficient
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_insufficient
      - id: insufficient_useitem
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_insufficient_useitem
      - id: condense_resin
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_condense_resin
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_use_condense_resin: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_reward_source_system: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_reward_source_system_para: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_title: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_stamina_enough: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_stamina_less: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_condense_resin_stamina_enough: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_condense_resin_stamina_less: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_using_activity_coin: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_using_activity_coin_button: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_confirm: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_resin_monthly: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_insufficient: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_insufficient_useitem: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_condense_resin: # Field №15
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
  routine_type_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: routine_type
        type: ks__enum__general_routine_type
        if: ks__has_field_routine_type
      - id: refresh_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_refresh_num
      - id: reward_limit_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_limit_num
      - id: refresh_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_refresh_id
      - id: delay_unload_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_delay_unload_time
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: icon
        type: aux_types::string
        if: ks__has_field_icon
    instances:
      ks__has_field_routine_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_refresh_num: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_reward_limit_num: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_refresh_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_delay_unload_time: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_name: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_desc: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_icon: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
  ks__enum__scene_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: scene_type
  scene_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: type
        type: ks__enum__scene_type
        if: ks__has_field_type
      - id: ignore_nav_mesh
        type: u1
        if: ks__has_field_ignore_nav_mesh
      - id: script_data
        type: aux_types::string
        if: ks__has_field_script_data
      - id: override_default_profile
        type: aux_types::string
        if: ks__has_field_override_default_profile
      - id: level_entity_config
        type: aux_types::string
        if: ks__has_field_level_entity_config
      - id: entity_appear_sorted
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_entity_appear_sorted
      - id: specified_avatar_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_specified_avatar_list
      - id: max_specified_avatar_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_specified_avatar_num
      - id: comment
        type: aux_types::string
        if: ks__has_field_comment
      - id: safe_point
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_safe_point
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_ignore_nav_mesh: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_script_data: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_override_default_profile: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_level_entity_config: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_entity_appear_sorted: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_specified_avatar_list: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_max_specified_avatar_num: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_comment: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_safe_point: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
  trigger_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: scene_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scene_id
      - id: group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_group_id
      - id: trigger_name
        type: aux_types::string
        if: ks__has_field_trigger_name
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_scene_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_group_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_trigger_name: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  room_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: prefab_path
        type: aux_types::string
        if: ks__has_field_prefab_path
      - id: nav_mesh_path
        type: aux_types::string
        if: ks__has_field_nav_mesh_path
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_prefab_path: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_nav_mesh_path: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  ks__enum__world_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: world_type
  world_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: type
        type: ks__enum__world_type
        if: ks__has_field_type
      - id: main_scene_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_main_scene_id
      - id: sub_scene_id_vec
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_sub_scene_id_vec
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_main_scene_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_sub_scene_id_vec: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  world_level_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level
      - id: monster_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_monster_level
    instances:
      ks__has_field_level: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_monster_level: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__enum__scene_tag_cond_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: scene_tag_cond_type
  scene_tag_cond:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: cond_type
        type: ks__enum__scene_tag_cond_type
        if: ks__has_field_cond_type
      - id: param1
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_param1
      - id: param2
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_param2
    instances:
      ks__has_field_cond_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_param1: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_param2: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  ks__array_of__scene_tag_cond__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: scene_tag_cond
        repeat: expr
        repeat-expr: length.value
  scene_tag_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: scene_tag_name
        type: aux_types::string
        if: ks__has_field_scene_tag_name
      - id: scene_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scene_id
      - id: is_default_valid
        type: u1
        if: ks__has_field_is_default_valid
      - id: cond
        type: ks__array_of__scene_tag_cond__length_s
        if: ks__has_field_cond
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_scene_tag_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_scene_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_is_default_valid: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_cond: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  sensitive_word_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: word
        type: aux_types::string
        if: ks__has_field_word
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_word: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__enum__shop_refresh_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: shop_refresh_type
  shop_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: shop_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_shop_id
      - id: shop_type
        type: ks__enum__shop_type
        if: ks__has_field_shop_type
      - id: refresh_type
        type: ks__enum__shop_refresh_type
        if: ks__has_field_refresh_type
      - id: refresh_param
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_refresh_param
      - id: open_state_type
        type: ks__enum__open_state_type
        if: ks__has_field_open_state_type
      - id: city_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_city_id
      - id: city_discount_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_city_discount_level
      - id: scoin_discount_rate
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scoin_discount_rate
      - id: vip_func_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_vip_func_id
    instances:
      ks__has_field_shop_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_shop_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_refresh_type: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_refresh_param: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_open_state_type: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_city_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_city_discount_level: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_scoin_discount_rate: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_vip_func_id: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
  ks__enum__shop_precondition:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: shop_precondition
  shop_goods_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: goods_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_goods_id
      - id: sub_tag_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sub_tag_name
      - id: sub_tab_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sub_tab_id
      - id: shop_type
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_shop_type
      - id: item_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_item_id
      - id: rotate_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_rotate_id
      - id: show_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_show_id
      - id: item_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_item_count
      - id: cost_scoin
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cost_scoin
      - id: cost_hcoin
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cost_hcoin
      - id: cost_mcoin
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cost_mcoin
      - id: discount_rate
        type: f4
        if: ks__has_field_discount_rate
      - id: original_price
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_original_price
      - id: cost_items
        type: ks__array_of__id_count_config__length_s
        if: ks__has_field_cost_items
      - id: buy_limit
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_buy_limit
      - id: refresh_type
        type: ks__enum__shop_refresh_type
        if: ks__has_field_refresh_type
      - id: refresh_param
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_refresh_param
      - id: display_days_before_sell
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_display_days_before_sell
      - id: begin_time
        type: aux_types::string
        if: ks__has_field_begin_time
      - id: end_time
        type: aux_types::string
        if: ks__has_field_end_time
      - id: is_buy_once
        type: u1
        if: ks__has_field_is_buy_once
      - id: precondition
        type: ks__enum__shop_precondition
        if: ks__has_field_precondition
      - id: precondition_param
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_precondition_param
      - id: precondition_param_list
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_precondition_param_list
      - id: precondition_hidden
        type: u1
        if: ks__has_field_precondition_hidden
      - id: min_show_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_min_show_level
      - id: min_player_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_min_player_level
      - id: max_player_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_player_level
      - id: sort_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sort_level
      - id: secondary_sheet_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_secondary_sheet_id
      - id: choose_one_group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_choose_one_group_id
      - id: platform_type_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_platform_type_list
    instances:
      ks__has_field_goods_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_sub_tag_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_sub_tab_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_shop_type: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_item_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_rotate_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_show_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_item_count: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_cost_scoin: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_cost_hcoin: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_cost_mcoin: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_discount_rate: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_original_price: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_cost_items: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_buy_limit: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_refresh_type: # Field №15
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
      ks__has_field_refresh_param: # Field №16
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000001) != 0)
      ks__has_field_display_days_before_sell: # Field №17
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000010) != 0)
      ks__has_field_begin_time: # Field №18
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000100) != 0)
      ks__has_field_end_time: # Field №19
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00001000) != 0)
      ks__has_field_is_buy_once: # Field №20
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00010000) != 0)
      ks__has_field_precondition: # Field №21
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00100000) != 0)
      ks__has_field_precondition_param: # Field №22
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b01000000) != 0)
      ks__has_field_precondition_param_list: # Field №23
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b10000000) != 0)
      ks__has_field_precondition_hidden: # Field №24
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000001) != 0)
      ks__has_field_min_show_level: # Field №25
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000010) != 0)
      ks__has_field_min_player_level: # Field №26
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000100) != 0)
      ks__has_field_max_player_level: # Field №27
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00001000) != 0)
      ks__has_field_sort_level: # Field №28
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00010000) != 0)
      ks__has_field_secondary_sheet_id: # Field №29
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00100000) != 0)
      ks__has_field_choose_one_group_id: # Field №30
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b01000000) != 0)
      ks__has_field_platform_type_list: # Field №31
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b10000000) != 0)
  shop_rotate_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: rotate_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_rotate_id
      - id: item_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_item_id
      - id: rotate_order
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_rotate_order
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_rotate_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_item_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_rotate_order: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  shop_material_order_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: order
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_order
      - id: shop_type
        type: ks__enum__shop_type
        if: ks__has_field_shop_type
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_order: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_shop_type: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  shop_special_keys_data_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: goods_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_goods_id
      - id: single_limit
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_single_limit
    instances:
      ks__has_field_goods_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_single_limit: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__enum__shopmall_entrance_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: shopmall_entrance_type
  shopmall_entrance_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: sub_tab_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_sub_tab_list
      - id: shop_type
        type: ks__enum__shop_type
        if: ks__has_field_shop_type
      - id: icon
        type: aux_types::string
        if: ks__has_field_icon
      - id: show_type
        type: ks__enum__shopmall_entrance_type
        if: ks__has_field_show_type
      - id: order
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_order
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_sub_tab_list: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_shop_type: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_icon: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_show_type: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_order: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
  shopmall_sub_tab_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: sub_tag_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sub_tag_name
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_sub_tag_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__enum__shop_recommend_tab_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: shop_recommend_tab_type
  ks__enum__shopmall_recommend_cond_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: shopmall_recommend_cond_type
  shopmall_recommend_cond:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: type
        type: ks__enum__shopmall_recommend_cond_type
        if: ks__has_field_type
      - id: param1str
        type: aux_types::string
        if: ks__has_field_param1str
      - id: param2str
        type: aux_types::string
        if: ks__has_field_param2str
      - id: param1
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_param1
      - id: param2
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_param2
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_param1str: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_param2str: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_param1: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_param2: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  ks__array_of__shopmall_recommend_cond__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: shopmall_recommend_cond
        repeat: expr
        repeat-expr: length.value
  ks__enum__shop_recommend_tag_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: shop_recommend_tag_type
  shopmall_recommend_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: sub_tab_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sub_tab_id
      - id: tab_type
        type: ks__enum__shop_recommend_tab_type
        if: ks__has_field_tab_type
      - id: shop_type
        type: ks__enum__shop_type
        if: ks__has_field_shop_type
      - id: goods_id_vec
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_goods_id_vec
      - id: config_id_vec
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_config_id_vec
      - id: cond_comb
        type: ks__enum__logic_type
        if: ks__has_field_cond_comb
      - id: cond_vec
        type: ks__array_of__shopmall_recommend_cond__length_s
        if: ks__has_field_cond_vec
      - id: order
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_order
      - id: tag_type
        type: ks__enum__shop_recommend_tag_type
        if: ks__has_field_tag_type
      - id: one_card_icon_name
        type: aux_types::string
        if: ks__has_field_one_card_icon_name
      - id: col_show_icon_name
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_col_show_icon_name
      - id: jump_entrance_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_jump_entrance_id
      - id: show_sale_remain_time
        type: u1
        if: ks__has_field_show_sale_remain_time
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_sub_tab_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_tab_type: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_shop_type: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_goods_id_vec: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_config_id_vec: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_cond_comb: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_cond_vec: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_order: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_tag_type: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_one_card_icon_name: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_col_show_icon_name: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_jump_entrance_id: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_show_sale_remain_time: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
  product_mcoin_detail_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: item_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_item_name
      - id: prim_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_prim_name
      - id: icon
        type: aux_types::string
        if: ks__has_field_icon
      - id: mcoin_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mcoin_num
      - id: mcoin_non_first
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mcoin_non_first
      - id: mcoin_first
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mcoin_first
      - id: seqence
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_seqence
      - id: config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_config_id
      - id: price_tier
        type: aux_types::string
        if: ks__has_field_price_tier
      - id: shop_type
        type: ks__enum__shop_type
        if: ks__has_field_shop_type
    instances:
      ks__has_field_item_name: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_prim_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_icon: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_mcoin_num: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_mcoin_non_first: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_mcoin_first: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_seqence: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_config_id: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_price_tier: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_shop_type: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
  ks__enum__card_product_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: card_product_type
  product_card_detail_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: card_product_type
        type: ks__enum__card_product_type
        if: ks__has_field_card_product_type
      - id: item_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_item_name
      - id: icon
        type: aux_types::string
        if: ks__has_field_icon
      - id: total_limit_days
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_total_limit_days
      - id: days
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_days
      - id: hcoin_per_day
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_hcoin_per_day
      - id: mcoin_base
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mcoin_base
      - id: base_item_map
        type: ks__dict_of__aux_types__vlq_base128_le_u_aux_types__vlq_base128_le_u
        if: ks__has_field_base_item_map
      - id: per_day_item_map
        type: ks__dict_of__aux_types__vlq_base128_le_u_aux_types__vlq_base128_le_u
        if: ks__has_field_per_day_item_map
      - id: replace_mcoin_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_replace_mcoin_num
      - id: first_reward_text
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_first_reward_text
      - id: daily_reward_text
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_daily_reward_text
      - id: total_reward_text
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_total_reward_text
      - id: total_days_text
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_total_days_text
      - id: remain_days_text
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_remain_days_text
      - id: remain_days_text2
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_remain_days_text2
      - id: explain_title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_explain_title
      - id: explain_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_explain_desc
      - id: sort_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sort_level
      - id: config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_config_id
      - id: price_tier
        type: aux_types::string
        if: ks__has_field_price_tier
      - id: shop_type
        type: ks__enum__shop_type
        if: ks__has_field_shop_type
    instances:
      ks__has_field_card_product_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_item_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_icon: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_total_limit_days: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_days: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_hcoin_per_day: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_mcoin_base: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_base_item_map: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_per_day_item_map: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_replace_mcoin_num: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_first_reward_text: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_daily_reward_text: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_total_reward_text: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_total_days_text: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_remain_days_text: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_remain_days_text2: # Field №15
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
      ks__has_field_explain_title: # Field №16
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000001) != 0)
      ks__has_field_explain_desc: # Field №17
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000010) != 0)
      ks__has_field_sort_level: # Field №18
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000100) != 0)
      ks__has_field_config_id: # Field №19
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00001000) != 0)
      ks__has_field_price_tier: # Field №20
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00010000) != 0)
      ks__has_field_shop_type: # Field №21
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00100000) != 0)
  ks__enum__product_play_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: product_play_type
  product_play_detail_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: play_type
        type: ks__enum__product_play_type
        if: ks__has_field_play_type
      - id: item_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_item_name
      - id: config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_config_id
      - id: price_tier
        type: aux_types::string
        if: ks__has_field_price_tier
      - id: shop_type
        type: ks__enum__shop_type
        if: ks__has_field_shop_type
    instances:
      ks__has_field_play_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_item_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_config_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_price_tier: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_shop_type: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  package_content_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: material_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_material_id
      - id: material_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_material_num
    instances:
      ks__has_field_material_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_material_num: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__package_content_config__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: package_content_config
        repeat: expr
        repeat-expr: length.value
  product_ps4package_detail_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: content_vec
        type: ks__array_of__package_content_config__length_s
        if: ks__has_field_content_vec
      - id: mail_config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mail_config_id
      - id: config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_config_id
      - id: price_tier
        type: aux_types::string
        if: ks__has_field_price_tier
      - id: shop_type
        type: ks__enum__shop_type
        if: ks__has_field_shop_type
    instances:
      ks__has_field_content_vec: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_mail_config_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_config_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_price_tier: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_shop_type: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  product_google_gift_card_detail_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: content_vec
        type: ks__array_of__package_content_config__length_s
        if: ks__has_field_content_vec
      - id: mail_config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mail_config_id
      - id: config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_config_id
      - id: price_tier
        type: aux_types::string
        if: ks__has_field_price_tier
      - id: shop_type
        type: ks__enum__shop_type
        if: ks__has_field_shop_type
    instances:
      ks__has_field_content_vec: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_mail_config_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_config_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_price_tier: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_shop_type: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  product_concert_package_detail_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: original_price_tier
        type: aux_types::string
        if: ks__has_field_original_price_tier
      - id: discount_rate
        type: f4
        if: ks__has_field_discount_rate
      - id: show_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_show_id
      - id: replace_mcoin_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_replace_mcoin_num
      - id: icon
        type: aux_types::string
        if: ks__has_field_icon
      - id: rank_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_rank_level
      - id: item_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_item_name
      - id: item_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_item_desc
      - id: sort_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sort_level
      - id: begin_time
        type: aux_types::string
        if: ks__has_field_begin_time
      - id: end_time
        type: aux_types::string
        if: ks__has_field_end_time
      - id: config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_config_id
      - id: price_tier
        type: aux_types::string
        if: ks__has_field_price_tier
      - id: shop_type
        type: ks__enum__shop_type
        if: ks__has_field_shop_type
    instances:
      ks__has_field_original_price_tier: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_discount_rate: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_show_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_replace_mcoin_num: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_icon: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_rank_level: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_item_name: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_item_desc: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_sort_level: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_begin_time: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_end_time: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_config_id: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_price_tier: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_shop_type: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
  product_apple_gift_card_detail_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: content_vec
        type: ks__array_of__package_content_config__length_s
        if: ks__has_field_content_vec
      - id: mail_config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mail_config_id
      - id: config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_config_id
      - id: price_tier
        type: aux_types::string
        if: ks__has_field_price_tier
      - id: shop_type
        type: ks__enum__shop_type
        if: ks__has_field_shop_type
    instances:
      ks__has_field_content_vec: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_mail_config_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_config_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_price_tier: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_shop_type: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  price_tier_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: tier_name
        type: aux_types::string
        if: ks__has_field_tier_name
      - id: vip_point
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_vip_point
    instances:
      ks__has_field_tier_name: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_vip_point: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  product_id_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: product_id
        type: aux_types::string
        if: ks__has_field_product_id
      - id: config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_config_id
      - id: is_internal
        type: u1
        if: ks__has_field_is_internal
      - id: entitlement_id
        type: aux_types::string
        if: ks__has_field_entitlement_id
      - id: catalog_item_id
        type: aux_types::string
        if: ks__has_field_catalog_item_id
      - id: platform_type_str_list
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_platform_type_str_list
    instances:
      ks__has_field_product_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_config_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_is_internal: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_entitlement_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_catalog_item_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_platform_type_str_list: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
  shopmall_goods_sale_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: goods_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_goods_id
      - id: discount_scoin
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_discount_scoin
      - id: discount_hcoin
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_discount_hcoin
      - id: discount_mcoin
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_discount_mcoin
      - id: discount_rate
        type: f4
        if: ks__has_field_discount_rate
      - id: discount_begin_time
        type: aux_types::string
        if: ks__has_field_discount_begin_time
      - id: discount_end_time
        type: aux_types::string
        if: ks__has_field_discount_end_time
      - id: discount_begin_timestamp
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_discount_begin_timestamp
      - id: discount_end_timestamp
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_discount_end_timestamp
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_goods_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_discount_scoin: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_discount_hcoin: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_discount_mcoin: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_discount_rate: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_discount_begin_time: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_discount_end_time: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_discount_begin_timestamp: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_discount_end_timestamp: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
  ks__enum__sign_in_cond_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: sign_in_cond_type
  sign_in_cond_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: type
        type: ks__enum__sign_in_cond_type
        if: ks__has_field_type
      - id: param_list
        type: ks__array_of__aux_types__vlq_base128_le_s__length_u
        if: ks__has_field_param_list
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_param_list: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__sign_in_cond_config__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: sign_in_cond_config
        repeat: expr
        repeat-expr: length.value
  sign_in_cond_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_config_id
      - id: cond_comb
        type: ks__enum__logic_type
        if: ks__has_field_cond_comb
      - id: cond_list
        type: ks__array_of__sign_in_cond_config__length_s
        if: ks__has_field_cond_list
      - id: total_day_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_total_day_count
    instances:
      ks__has_field_config_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_cond_comb: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_cond_list: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_total_day_count: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  sign_in_reward_item_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: item_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_item_id
      - id: count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_count
      - id: quality
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_quality
    instances:
      ks__has_field_item_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_count: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_quality: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  ks__array_of__sign_in_reward_item_config__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: sign_in_reward_item_config
        repeat: expr
        repeat-expr: length.value
  sign_in_day_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_config_id
      - id: day_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_day_count
      - id: period_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_period_id
      - id: reward_item_list
        type: ks__array_of__sign_in_reward_item_config__length_s
        if: ks__has_field_reward_item_list
    instances:
      ks__has_field_config_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_day_count: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_period_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_reward_item_list: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  sign_in_period_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_config_id
      - id: period_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_period_id
      - id: perfab_path
        type: aux_types::string
        if: ks__has_field_perfab_path
    instances:
      ks__has_field_config_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_period_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_perfab_path: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  bonus_activity_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: bonus_activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_bonus_activity_id
      - id: cond_comb
        type: ks__enum__logic_type
        if: ks__has_field_cond_comb
      - id: cond_list
        type: ks__array_of__sign_in_cond_config__length_s
        if: ks__has_field_cond_list
      - id: watcher_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_watcher_id
      - id: reward_item_list
        type: ks__array_of__id_count_config__length_s
        if: ks__has_field_reward_item_list
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: trigger_config
        type: watcher_trigger_config
        if: ks__has_field_trigger_config
      - id: progress
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_progress
      - id: is_disuse
        type: u1
        if: ks__has_field_is_disuse
    instances:
      ks__has_field_bonus_activity_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_cond_comb: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_cond_list: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_watcher_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_reward_item_list: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_id: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_trigger_config: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_progress: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_is_disuse: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
  ks__enum__bonus_activity_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: bonus_activity_type
  bonus_activity_client_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: bonus_activity_type
        type: ks__enum__bonus_activity_type
        if: ks__has_field_bonus_activity_type
      - id: avatar_config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_avatar_config_id
      - id: voice_index_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_voice_index_list
      - id: quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_quest_id
      - id: open_player_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_open_player_level
      - id: perfab_path
        type: aux_types::string
        if: ks__has_field_perfab_path
      - id: unlock_tips
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_unlock_tips
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_bonus_activity_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_avatar_config_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_voice_index_list: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_quest_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_open_player_level: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_perfab_path: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_unlock_tips: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
  element_state_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: element_type
        type: ks__enum__element_type
        if: ks__has_field_element_type
      - id: element_icon
        type: aux_types::string
        if: ks__has_field_element_icon
      - id: rank
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_rank
    instances:
      ks__has_field_element_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_element_icon: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_rank: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  ks__enum__state_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: state_type
  state_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: state_name
        type: aux_types::string
        if: ks__has_field_state_name
      - id: state_type
        type: ks__enum__state_type
        if: ks__has_field_state_type
      - id: rank
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_rank
    instances:
      ks__has_field_state_name: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_state_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_rank: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  ks__enum__strengthen_dungeon_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: strengthen_dungeon_type
  strengthen_base_point_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: dungeon_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_dungeon_id
      - id: dungeon_type
        type: ks__enum__strengthen_dungeon_type
        if: ks__has_field_dungeon_type
    instances:
      ks__has_field_dungeon_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_dungeon_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__enum__team_resonance_cond_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: team_resonance_cond_type
  team_resonance_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: team_resonance_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_team_resonance_id
      - id: team_resonance_group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_team_resonance_group_id
      - id: level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level
      - id: fire_avatar_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_fire_avatar_count
      - id: water_avatar_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_water_avatar_count
      - id: grass_avatar_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_grass_avatar_count
      - id: electric_avatar_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_electric_avatar_count
      - id: ice_avatar_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_ice_avatar_count
      - id: wind_avatar_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_wind_avatar_count
      - id: rock_avatar_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_rock_avatar_count
      - id: cond
        type: ks__enum__team_resonance_cond_type
        if: ks__has_field_cond
      - id: min_total_promote_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_min_total_promote_level
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: open_config
        type: aux_types::string
        if: ks__has_field_open_config
      - id: add_props
        type: ks__array_of__prop_val_config__length_s
        if: ks__has_field_add_props
      - id: param_list
        type: ks__array_of__f4__length_u
        if: ks__has_field_param_list
    instances:
      ks__has_field_team_resonance_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_team_resonance_group_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_level: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_fire_avatar_count: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_water_avatar_count: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_grass_avatar_count: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_electric_avatar_count: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_ice_avatar_count: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_wind_avatar_count: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_rock_avatar_count: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_cond: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_min_total_promote_level: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_name: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_desc: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_open_config: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_add_props: # Field №15
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
      ks__has_field_param_list: # Field №16
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000001) != 0)
  ks__enum__text_param_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: text_param_type
  ks__array_of__ks__enum__text_param_type__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: ks__enum__text_param_type
        repeat: expr
        repeat-expr: length.value
  manual_text_map_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: text_map_id
        type: aux_types::string
        if: ks__has_field_text_map_id
      - id: text_map_content
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_text_map_content
      - id: param_types
        type: ks__array_of__ks__enum__text_param_type__length_s
        if: ks__has_field_param_types
    instances:
      ks__has_field_text_map_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_text_map_content: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_param_types: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  tower_schedule:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: floor_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_floor_list
      - id: open_time
        type: aux_types::string
        if: ks__has_field_open_time
    instances:
      ks__has_field_floor_list: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_open_time: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__tower_schedule__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: tower_schedule
        repeat: expr
        repeat-expr: length.value
  tower_star_reward:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: min_star_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_min_star_count
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
    instances:
      ks__has_field_min_star_count: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_reward_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__tower_star_reward__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: tower_star_reward
        repeat: expr
        repeat-expr: length.value
  tower_schedule_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: schedule_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_schedule_id
      - id: entrance_floor_id
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_entrance_floor_id
      - id: schedules
        type: ks__array_of__tower_schedule__length_s
        if: ks__has_field_schedules
      - id: close_time
        type: aux_types::string
        if: ks__has_field_close_time
      - id: schedule_rewards
        type: ks__array_of__tower_star_reward__length_s
        if: ks__has_field_schedule_rewards
      - id: commemorative_reward
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_commemorative_reward
      - id: monthly_level_config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_monthly_level_config_id
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: buffname
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_buffname
      - id: icon
        type: aux_types::string
        if: ks__has_field_icon
    instances:
      ks__has_field_schedule_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_entrance_floor_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_schedules: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_close_time: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_schedule_rewards: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_commemorative_reward: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_monthly_level_config_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_desc: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_buffname: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_icon: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
  tower_floor_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: floor_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_floor_id
      - id: floor_index
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_floor_index
      - id: level_group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level_group_id
      - id: override_monster_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_override_monster_level
      - id: team_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_team_num
      - id: reward_id_five_stars
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id_five_stars
      - id: reward_id_ten_stars
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id_ten_stars
      - id: reward_id_fifteen_stars
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id_fifteen_stars
      - id: reward_id_three_stars
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id_three_stars
      - id: reward_id_six_stars
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id_six_stars
      - id: reward_id_nine_stars
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id_nine_stars
      - id: unlock_star_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_unlock_star_count
      - id: floor_level_config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_floor_level_config_id
      - id: bg_image
        type: aux_types::string
        if: ks__has_field_bg_image
    instances:
      ks__has_field_floor_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_floor_index: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_level_group_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_override_monster_level: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_team_num: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_reward_id_five_stars: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_reward_id_ten_stars: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_reward_id_fifteen_stars: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_reward_id_three_stars: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_reward_id_six_stars: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_reward_id_nine_stars: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_unlock_star_count: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_floor_level_config_id: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_bg_image: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
  ks__enum__tower_cond_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: tower_cond_type
  tower_condition:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: tower_cond_type
        type: ks__enum__tower_cond_type
        if: ks__has_field_tower_cond_type
      - id: argument_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_argument_list
    instances:
      ks__has_field_tower_cond_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_argument_list: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__tower_condition__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: tower_condition
        repeat: expr
        repeat-expr: length.value
  tower_level_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: level_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level_id
      - id: level_group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level_group_id
      - id: level_index
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level_index
      - id: dungeon_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_dungeon_id
      - id: conds
        type: ks__array_of__tower_condition__length_s
        if: ks__has_field_conds
      - id: tower_buff_config_str_list
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_tower_buff_config_str_list
      - id: daily_reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_daily_reward_id
      - id: first_pass_reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_first_pass_reward_id
      - id: monster_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_monster_level
      - id: first_monster_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_first_monster_list
      - id: second_monster_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_second_monster_list
    instances:
      ks__has_field_level_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_level_group_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_level_index: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_dungeon_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_conds: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_tower_buff_config_str_list: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_daily_reward_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_first_pass_reward_id: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_monster_level: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_first_monster_list: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_second_monster_list: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
  ks__enum__tower_buff_lasting_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: tower_buff_lasting_type
  tower_buff_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: tower_buff_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_tower_buff_id
      - id: lasting_type
        type: ks__enum__tower_buff_lasting_type
        if: ks__has_field_lasting_type
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: buff_icon
        type: aux_types::string
        if: ks__has_field_buff_icon
      - id: buff_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_buff_id
    instances:
      ks__has_field_tower_buff_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_lasting_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_desc: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_buff_icon: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_buff_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  tower_skip_floor_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: prev_level_index
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_prev_level_index
      - id: cur_level_index
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cur_level_index
    instances:
      ks__has_field_prev_level_index: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_cur_level_index: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  sgv_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: key
        type: aux_types::string
        if: ks__has_field_key
      - id: value
        type: f4
        if: ks__has_field_value
    instances:
      ks__has_field_key: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_value: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__sgv_config__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: sgv_config
        repeat: expr
        repeat-expr: length.value
  mechanic_building_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gadget_id
      - id: special_effect_level1
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_special_effect_level1
      - id: special_effect_level2
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_special_effect_level2
      - id: special_effect_id1
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_special_effect_id1
      - id: special_effect_id2
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_special_effect_id2
      - id: special_effect_desc1
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_special_effect_desc1
      - id: special_effect_desc2
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_special_effect_desc2
      - id: max_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_level
      - id: open_conds
        type: ks__array_of__sgv_config__length_s
        if: ks__has_field_open_conds
      - id: build_limit
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_build_limit
      - id: is_enable_rotate
        type: u1
        if: ks__has_field_is_enable_rotate
      - id: default_dungeon_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_default_dungeon_list
      - id: element_type
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_element_type
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_gadget_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_special_effect_level1: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_special_effect_level2: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_special_effect_id1: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_special_effect_id2: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_special_effect_desc1: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_special_effect_desc2: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_max_level: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_open_conds: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_build_limit: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_is_enable_rotate: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_default_dungeon_list: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_element_type: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
  mechanicus_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: mechanicus_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mechanicus_id
      - id: sequence_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_sequence_list
      - id: ticket_item_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_ticket_item_id
      - id: ticket_cost_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_ticket_cost_count
      - id: match_player_limit
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_match_player_limit
      - id: open_gear_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_open_gear_list
      - id: open_map_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_open_map_list
      - id: teach_difficult_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_teach_difficult_level
      - id: punish_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_punish_time
    instances:
      ks__has_field_mechanicus_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_sequence_list: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_ticket_item_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_ticket_cost_count: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_match_player_limit: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_open_gear_list: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_open_map_list: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_teach_difficult_level: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_punish_time: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
  mechanicus_sequence_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: sequence_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sequence_id
      - id: mechanicus_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mechanicus_id
      - id: open_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_open_level
      - id: open_gear_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_open_gear_list
      - id: gear_level_limite
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gear_level_limite
      - id: gear_money_limite
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gear_money_limite
      - id: open_map_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_open_map_list
      - id: activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_id
      - id: cond_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cond_id
      - id: reward_preview_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_preview_id
    instances:
      ks__has_field_sequence_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_mechanicus_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_open_level: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_open_gear_list: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_gear_level_limite: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_gear_money_limite: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_open_map_list: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_activity_id: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_cond_id: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_reward_preview_id: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
  mechanicus_map_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: mechanicus_map_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mechanicus_map_id
      - id: map_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_map_name
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: unlock_tips
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_unlock_tips
      - id: map_icon_path
        type: aux_types::string
        if: ks__has_field_map_icon_path
      - id: build_gear_limit
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_build_gear_limit
      - id: dungeon_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_dungeon_id
    instances:
      ks__has_field_mechanicus_map_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_map_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_desc: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_unlock_tips: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_map_icon_path: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_build_gear_limit: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_dungeon_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
  mechanicus_gear_level_up_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: gear_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gear_id
      - id: gear_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gear_level
      - id: gear_level_up_money
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gear_level_up_money
      - id: gear_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gear_name
      - id: gear_short_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gear_short_name
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: gear_icon_path
        type: aux_types::string
        if: ks__has_field_gear_icon_path
      - id: attack
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_attack
      - id: attack_speed
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_attack_speed
      - id: attack_range
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_attack_range
      - id: build_cost
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_build_cost
      - id: demolition_refund
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_demolition_refund
      - id: global_value_param
        type: ks__array_of__sgv_config__length_s
        if: ks__has_field_global_value_param
      - id: effect_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_effect_list
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_gear_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_gear_level: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_gear_level_up_money: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_gear_name: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_gear_short_name: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_desc: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_gear_icon_path: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_attack: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_attack_speed: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_attack_range: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_build_cost: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_demolition_refund: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_global_value_param: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_effect_list: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
  mechanicus_watcher_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: reward_tokens
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_tokens
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: trigger_config
        type: watcher_trigger_config
        if: ks__has_field_trigger_config
      - id: progress
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_progress
      - id: is_disuse
        type: u1
        if: ks__has_field_is_disuse
    instances:
      ks__has_field_reward_tokens: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_desc: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_trigger_config: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_progress: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_is_disuse: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
  mechanicus_difficulty_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: dungeon_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_dungeon_list
      - id: coin_rate
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_coin_rate
      - id: build_gear_limit
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_build_gear_limit
    instances:
      ks__has_field_level: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_desc: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_dungeon_list: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_coin_rate: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_build_gear_limit: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  ks__enum__mechanicus_card_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: mechanicus_card_type
  mechanicus_card_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: cost_points
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cost_points
      - id: card_type
        type: ks__enum__mechanicus_card_type
        if: ks__has_field_card_type
      - id: effect_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_effect_id
      - id: last_round
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_last_round
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: desc_param_list
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_desc_param_list
      - id: gear_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gear_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_cost_points: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_card_type: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_effect_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_last_round: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_desc: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_desc_param_list: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_gear_id: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
  ks__enum__mechanicus_card_target_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: mechanicus_card_target_type
  ks__enum__mechanicus_card_effect_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: mechanicus_card_effect_type
  mechanicus_card_effect_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: target_type
        type: ks__enum__mechanicus_card_target_type
        if: ks__has_field_target_type
      - id: target_param_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_target_param_list
      - id: effect_type
        type: ks__enum__mechanicus_card_effect_type
        if: ks__has_field_effect_type
      - id: effect_str_param
        type: aux_types::string
        if: ks__has_field_effect_str_param
      - id: effect_param1
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_effect_param1
      - id: effect_param2
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_effect_param2
      - id: effect_param3
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_effect_param3
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_target_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_target_param_list: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_effect_type: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_effect_str_param: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_effect_param1: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_effect_param2: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_effect_param3: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
  mechanicus_card_curse_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: effect_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_effect_id
      - id: last_round
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_last_round
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: desc_param_list
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_desc_param_list
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_effect_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_last_round: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_desc: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_desc_param_list: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  mechanicus_map_point_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: coord_x
        type: f4
        if: ks__has_field_coord_x
      - id: coord_y
        type: f4
        if: ks__has_field_coord_y
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_coord_x: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_coord_y: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  ks__enum__tree_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: tree_type
  tree_drop_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: tree_type
        type: ks__enum__tree_type
        if: ks__has_field_tree_type
      - id: drop_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_drop_id
    instances:
      ks__has_field_tree_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_drop_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  tree_type_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: tree_pattern
        type: aux_types::string
        if: ks__has_field_tree_pattern
      - id: tree_type
        type: ks__enum__tree_type
        if: ks__has_field_tree_type
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_tree_pattern: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_tree_type: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  trial_avatar_activity_data_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: trial_avatar_index_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_trial_avatar_index_id
      - id: trial_avatar_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_trial_avatar_id
      - id: dungeon_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_dungeon_id
      - id: battle_avatars_list
        type: aux_types::string
        if: ks__has_field_battle_avatars_list
      - id: first_pass_reward
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_first_pass_reward
      - id: title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title
      - id: brief_info
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_brief_info
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: trigger_config
        type: watcher_trigger_config
        if: ks__has_field_trigger_config
      - id: progress
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_progress
      - id: is_disuse
        type: u1
        if: ks__has_field_is_disuse
    instances:
      ks__has_field_trial_avatar_index_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_trial_avatar_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_dungeon_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_battle_avatars_list: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_first_pass_reward: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_title: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_brief_info: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_id: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_trigger_config: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_progress: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_is_disuse: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
  trial_avatar_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: trial_avatar_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_trial_avatar_id
      - id: trial_avatar_param_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_trial_avatar_param_list
      - id: trial_weapon_param_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_trial_weapon_param_list
      - id: trial_skill_depot_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_trial_skill_depot_id
      - id: is_dynamic_level
        type: u1
        if: ks__has_field_is_dynamic_level
    instances:
      ks__has_field_trial_avatar_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_trial_avatar_param_list: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_trial_weapon_param_list: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_trial_skill_depot_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_is_dynamic_level: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  trial_reliquary_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: reliquary_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reliquary_id
      - id: level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level
      - id: promote_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_promote_level
      - id: main_prop_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_main_prop_id
      - id: append_prop_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_append_prop_list
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_reliquary_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_level: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_promote_level: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_main_prop_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_append_prop_list: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
  trial_avatar_template_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: trial_avatar_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_trial_avatar_level
      - id: trial_reliquary_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_trial_reliquary_list
      - id: trial_talent_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_trial_talent_list
      - id: trial_inherent_proud_skill_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_trial_inherent_proud_skill_list
      - id: trial_avatar_skill_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_trial_avatar_skill_level
    instances:
      ks__has_field_trial_avatar_level: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_trial_reliquary_list: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_trial_talent_list: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_trial_inherent_proud_skill_list: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_trial_avatar_skill_level: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  tutorial_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: detail_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_detail_id_list
      - id: pause_game
        type: u1
        if: ks__has_field_pause_game
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_detail_id_list: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_pause_game: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  ks__enum__tutorial_detail_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: tutorial_detail_type
  tutorial_detail_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: type
        type: ks__enum__tutorial_detail_type
        if: ks__has_field_type
      - id: image_name_list
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_image_name_list
      - id: descript
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_descript
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_image_name_list: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_descript: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  vehicle_skill_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: skill_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_skill_name
      - id: skill_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_skill_desc
      - id: ability_name
        type: aux_types::string
        if: ks__has_field_ability_name
      - id: skill_icon
        type: aux_types::string
        if: ks__has_field_skill_icon
      - id: skill_cd
        type: f4
        if: ks__has_field_skill_cd
      - id: max_charge_count
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_max_charge_count
      - id: trigger_id
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_trigger_id
      - id: lock_shape
        type: aux_types::string
        if: ks__has_field_lock_shape
      - id: lock_weight_params
        type: ks__array_of__f4__length_u
        if: ks__has_field_lock_weight_params
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_skill_name: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_skill_desc: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_ability_name: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_skill_icon: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_skill_cd: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_max_charge_count: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_trigger_id: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_lock_shape: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_lock_weight_params: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
  vehicle_skill_depot_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: skill_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_skill_id_list
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_skill_id_list: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__enum__watcher_predicate_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: watcher_predicate_type
  watcher_predicate_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: predicate_type
        type: ks__enum__watcher_predicate_type
        if: ks__has_field_predicate_type
      - id: param_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_param_list
    instances:
      ks__has_field_predicate_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_param_list: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__array_of__watcher_predicate_config__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: watcher_predicate_config
        repeat: expr
        repeat-expr: length.value
  global_watcher_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: predicate_configs
        type: ks__array_of__watcher_predicate_config__length_s
        if: ks__has_field_predicate_configs
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: trigger_config
        type: watcher_trigger_config
        if: ks__has_field_trigger_config
      - id: progress
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_progress
      - id: is_disuse
        type: u1
        if: ks__has_field_is_disuse
    instances:
      ks__has_field_predicate_configs: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_trigger_config: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_progress: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_is_disuse: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  ks__enum__push_tips_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: push_tips_type
  ks__enum__push_tips_codex_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: push_tips_codex_type
  push_tips_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: push_tips_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_push_tips_id
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
      - id: title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title
      - id: subtitle
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_subtitle
      - id: push_tips_type
        type: ks__enum__push_tips_type
        if: ks__has_field_push_tips_type
      - id: show_icon
        type: aux_types::string
        if: ks__has_field_show_icon
      - id: tab_icon
        type: aux_types::string
        if: ks__has_field_tab_icon
      - id: tutorial_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_tutorial_id
      - id: codex_type
        type: ks__enum__push_tips_codex_type
        if: ks__has_field_codex_type
      - id: group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_group_id
      - id: show_immediately
        type: u1
        if: ks__has_field_show_immediately
    instances:
      ks__has_field_push_tips_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_reward_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_title: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_subtitle: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_push_tips_type: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_show_icon: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_tab_icon: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_tutorial_id: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_codex_type: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_group_id: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_show_immediately: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
  ks__enum__weapon_material_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: weapon_material_type
  weapon_property:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: prop_type
        type: ks__enum__fight_prop_type
        if: ks__has_field_prop_type
      - id: init_value
        type: f4
        if: ks__has_field_init_value
      - id: type
        type: ks__enum__grow_curve_type
        if: ks__has_field_type
    instances:
      ks__has_field_prop_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_init_value: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_type: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  ks__array_of__weapon_property__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: weapon_property
        repeat: expr
        repeat-expr: length.value
  weapon_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: weapon_type
        type: ks__enum__weapon_type
        if: ks__has_field_weapon_type
      - id: rank_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_rank_level
      - id: material_type
        type: ks__enum__weapon_material_type
        if: ks__has_field_material_type
      - id: elem_type
        type: ks__enum__element_type
        if: ks__has_field_elem_type
      - id: is_gold
        type: u1
        if: ks__has_field_is_gold
      - id: weapon_base_exp
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_weapon_base_exp
      - id: skill_affix
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_skill_affix
      - id: awaken_material
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_awaken_material
      - id: weapon_prop
        type: ks__array_of__weapon_property__length_s
        if: ks__has_field_weapon_prop
      - id: awaken_texture
        type: aux_types::string
        if: ks__has_field_awaken_texture
      - id: awaken_light_map_texture
        type: aux_types::string
        if: ks__has_field_awaken_light_map_texture
      - id: awaken_icon
        type: aux_types::string
        if: ks__has_field_awaken_icon
      - id: un_rotate
        type: u1
        if: ks__has_field_un_rotate
      - id: weapon_promote_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_weapon_promote_id
      - id: story_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_story_id
      - id: awaken_costs
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_awaken_costs
      - id: gacha_card_name_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gacha_card_name_hash
      - id: gacha_card_name_hash_pre
        type: s1
        if: ks__has_field_gacha_card_name_hash
      - id: enhance_rule
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_enhance_rule
      - id: destroy_rule
        type: ks__enum__material_destroy_type
        if: ks__has_field_destroy_rule
      - id: destroy_return_material
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_destroy_return_material
      - id: destroy_return_material_count
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_destroy_return_material_count
      - id: initial_lock_state
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_initial_lock_state
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: icon
        type: aux_types::string
        if: ks__has_field_icon
      - id: item_type
        type: ks__enum__item_type
        if: ks__has_field_item_type
      - id: weight
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_weight
      - id: rank
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_rank
      - id: gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gadget_id
      - id: dropable
        type: u1
        if: ks__has_field_dropable
      - id: use_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_use_level
      - id: global_item_limit
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_global_item_limit
    instances:
      ks__has_field_weapon_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_rank_level: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_material_type: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_elem_type: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_is_gold: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_weapon_base_exp: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_skill_affix: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_awaken_material: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_weapon_prop: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_awaken_texture: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_awaken_light_map_texture: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_awaken_icon: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_un_rotate: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_weapon_promote_id: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_story_id: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
      ks__has_field_awaken_costs: # Field №15
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b10000000) != 0)
      ks__has_field_gacha_card_name_hash: # Field №16
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000001) != 0)
      ks__has_field_enhance_rule: # Field №17
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000010) != 0)
      ks__has_field_destroy_rule: # Field №18
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00000100) != 0)
      ks__has_field_destroy_return_material: # Field №19
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00001000) != 0)
      ks__has_field_destroy_return_material_count: # Field №20
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00010000) != 0)
      ks__has_field_initial_lock_state: # Field №21
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b00100000) != 0)
      ks__has_field_id: # Field №22
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b01000000) != 0)
      ks__has_field_name: # Field №23
        value: (ks__bit_field.length.value >= (0b00000010 + 1)) and ((ks__bit_field.bitfield[0b00000010] & 0b10000000) != 0)
      ks__has_field_desc: # Field №24
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000001) != 0)
      ks__has_field_icon: # Field №25
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000010) != 0)
      ks__has_field_item_type: # Field №26
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00000100) != 0)
      ks__has_field_weight: # Field №27
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00001000) != 0)
      ks__has_field_rank: # Field №28
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00010000) != 0)
      ks__has_field_gadget_id: # Field №29
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b00100000) != 0)
      ks__has_field_dropable: # Field №30
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b01000000) != 0)
      ks__has_field_use_level: # Field №31
        value: (ks__bit_field.length.value >= (0b00000011 + 1)) and ((ks__bit_field.bitfield[0b00000011] & 0b10000000) != 0)
      ks__has_field_global_item_limit: # Field №32
        value: (ks__bit_field.length.value >= (0b00000100 + 1)) and ((ks__bit_field.bitfield[0b00000100] & 0b00000001) != 0)
  weapon_level_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level
      - id: required_exps
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_required_exps
    instances:
      ks__has_field_level: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_required_exps: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  weapon_promote_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: weapon_promote_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_weapon_promote_id
      - id: promote_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_promote_level
      - id: cost_items
        type: ks__array_of__id_count_config__length_s
        if: ks__has_field_cost_items
      - id: coin_cost
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_coin_cost
      - id: add_props
        type: ks__array_of__prop_val_config__length_s
        if: ks__has_field_add_props
      - id: unlock_max_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_unlock_max_level
      - id: required_player_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_required_player_level
    instances:
      ks__has_field_weapon_promote_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_promote_level: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_cost_items: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_coin_cost: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_add_props: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_unlock_max_level: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_required_player_level: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
  ks__enum__climate_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: climate_type
  weather_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: area_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_area_id
      - id: weather_area_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_weather_area_id
      - id: max_height_str
        type: aux_types::string
        if: ks__has_field_max_height_str
      - id: gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gadget_id
      - id: is_default_valid
        type: u1
        if: ks__has_field_is_default_valid
      - id: template_name
        type: aux_types::string
        if: ks__has_field_template_name
      - id: priority
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_priority
      - id: profile_name
        type: aux_types::string
        if: ks__has_field_profile_name
      - id: default_climate
        type: ks__enum__climate_type
        if: ks__has_field_default_climate
      - id: is_use_default
        type: u1
        if: ks__has_field_is_use_default
      - id: scene_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scene_id
    instances:
      ks__has_field_area_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_weather_area_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_max_height_str: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_gadget_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_is_default_valid: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_template_name: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_priority: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_profile_name: # Field №7
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_default_climate: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_is_use_default: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_scene_id: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
  weather_template_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: template_name
        type: aux_types::string
        if: ks__has_field_template_name
      - id: weather_type
        type: ks__enum__climate_type
        if: ks__has_field_weather_type
      - id: sunny_prob
        type: f4
        if: ks__has_field_sunny_prob
      - id: cloudy_prob
        type: f4
        if: ks__has_field_cloudy_prob
      - id: rain_prob
        type: f4
        if: ks__has_field_rain_prob
      - id: thunderstorm_prob
        type: f4
        if: ks__has_field_thunderstorm_prob
      - id: snow_prob
        type: f4
        if: ks__has_field_snow_prob
      - id: mist_prob
        type: f4
        if: ks__has_field_mist_prob
    instances:
      ks__has_field_template_name: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_weather_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_sunny_prob: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_cloudy_prob: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_rain_prob: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_thunderstorm_prob: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_snow_prob: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_mist_prob: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
  room_weather_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: room_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_room_id
      - id: area_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_area_id
      - id: profile_name
        type: aux_types::string
        if: ks__has_field_profile_name
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_room_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_area_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_profile_name: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  ks__enum__widget_camera_action_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: widget_camera_action_type
  widget_camera_scan_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: camera_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_camera_id
      - id: config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_config_id
      - id: scannable_state
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_scannable_state
      - id: is_hint
        type: u1
        if: ks__has_field_is_hint
      - id: action
        type: ks__enum__widget_camera_action_type
        if: ks__has_field_action
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_camera_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_config_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_scannable_state: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_is_hint: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_action: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
  widget_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: material_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_material_id
      - id: show_redpoint
        type: u1
        if: ks__has_field_show_redpoint
      - id: customize_desc
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_customize_desc
      - id: push_tips_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_push_tips_id
    instances:
      ks__has_field_material_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_show_redpoint: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_customize_desc: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_push_tips_id: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  ks__enum__vehicle_limit_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: vehicle_limit_type
  widget_general_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: material_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_material_id
      - id: can_use_in_other_world
        type: u1
        if: ks__has_field_can_use_in_other_world
      - id: can_use_in_room
        type: u1
        if: ks__has_field_can_use_in_room
      - id: forbidden_scene_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_forbidden_scene_id_list
      - id: can_use_when_current_avatar_dead
        type: u1
        if: ks__has_field_can_use_when_current_avatar_dead
      - id: can_use_in_limit_region
        type: u1
        if: ks__has_field_can_use_in_limit_region
      - id: can_use_when_fight
        type: u1
        if: ks__has_field_can_use_when_fight
      - id: can_use_in_un_normal_move_state
        type: u1
        if: ks__has_field_can_use_in_un_normal_move_state
      - id: can_use_in_avatar_focus
        type: u1
        if: ks__has_field_can_use_in_avatar_focus
      - id: can_use_in_dungeon
        type: u1
        if: ks__has_field_can_use_in_dungeon
      - id: can_use_in_tower
        type: u1
        if: ks__has_field_can_use_in_tower
      - id: can_use_in_homeworld
        type: u1
        if: ks__has_field_can_use_in_homeworld
      - id: vehicle_limit
        type: ks__enum__vehicle_limit_type
        if: ks__has_field_vehicle_limit
      - id: forbidden_dungeon_type_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_forbidden_dungeon_type_list
      - id: forbidden_dungeon_play_type_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_forbidden_dungeon_play_type_list
    instances:
      ks__has_field_material_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_can_use_in_other_world: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_can_use_in_room: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_forbidden_scene_id_list: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_can_use_when_current_avatar_dead: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_can_use_in_limit_region: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_can_use_when_fight: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_can_use_in_un_normal_move_state: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_can_use_in_avatar_focus: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_can_use_in_dungeon: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_can_use_in_tower: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_can_use_in_homeworld: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_vehicle_limit: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
      ks__has_field_forbidden_dungeon_type_list: # Field №13
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00100000) != 0)
      ks__has_field_forbidden_dungeon_play_type_list: # Field №14
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b01000000) != 0)
  widget_active_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: material_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_material_id
      - id: is_guest_can_activate
        type: u1
        if: ks__has_field_is_guest_can_activate
      - id: active_gallery
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_active_gallery
      - id: active_region
        type: aux_types::string
        if: ks__has_field_active_region
    instances:
      ks__has_field_material_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_is_guest_can_activate: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_active_gallery: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_active_region: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
  ks__enum__world_area_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: world_area_type
  ks__enum__area_terrain_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: area_terrain_type
  world_area_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: scene_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scene_id
      - id: area_type
        type: ks__enum__world_area_type
        if: ks__has_field_area_type
      - id: area_id_1
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_area_id_1
      - id: area_id_2
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_area_id_2
      - id: area_default_lock
        type: u1
        if: ks__has_field_area_default_lock
      - id: area_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_area_name
      - id: tower_point_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_tower_point_id
      - id: element_type
        type: ks__enum__element_type
        if: ks__has_field_element_type
      - id: terrain_type
        type: ks__enum__area_terrain_type
        if: ks__has_field_terrain_type
      - id: show_tips
        type: u1
        if: ks__has_field_show_tips
      - id: minimap_scale
        type: f4
        if: ks__has_field_minimap_scale
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_scene_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_area_type: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_area_id_1: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_area_id_2: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_area_default_lock: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_area_name: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_tower_point_id: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_element_type: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_terrain_type: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_show_tips: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_minimap_scale: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
  ks__enum__map_area_state:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: map_area_state
  map_area_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: scene_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scene_id
      - id: name
        type: aux_types::string
        if: ks__has_field_name
      - id: area_id_1
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_area_id_1
      - id: scene_point_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scene_point_id
      - id: map_area_state
        type: ks__enum__map_area_state
        if: ks__has_field_map_area_state
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_scene_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_name: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_area_id_1: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_scene_point_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_map_area_state: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
  ks__enum__explore_event_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: explore_event_type
  world_area_explore_event_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: event_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_event_id
      - id: scene_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scene_id
      - id: area_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_area_id
      - id: event_type
        type: ks__enum__explore_event_type
        if: ks__has_field_event_type
      - id: param
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_param
      - id: explore_weight
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_explore_weight
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
    instances:
      ks__has_field_event_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_scene_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_area_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_event_type: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_param: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_explore_weight: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_reward_id: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
  world_area_levelup_consume_item:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: item_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_item_id
      - id: item_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_item_num
    instances:
      ks__has_field_item_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_item_num: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
  ks__enum__world_area_levelup_action_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: world_area_levelup_action_type
  world_area_levelup_action:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: type
        type: ks__enum__world_area_levelup_action_type
        if: ks__has_field_type
      - id: param1_vec
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_param1_vec
      - id: param2_vec
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_param2_vec
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_param1_vec: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_param2_vec: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
  ks__array_of__world_area_levelup_action__length_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_s
      - id: data
        type: world_area_levelup_action
        repeat: expr
        repeat-expr: length.value
  world_area_levelup_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: scene_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scene_id
      - id: area_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_area_id
      - id: level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level
      - id: consume_item
        type: world_area_levelup_consume_item
        if: ks__has_field_consume_item
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
      - id: action_vec
        type: ks__array_of__world_area_levelup_action__length_s
        if: ks__has_field_action_vec
    instances:
      ks__has_field_scene_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_area_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_level: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_consume_item: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_reward_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_action_vec: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
  city_levelup_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: scene_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scene_id
      - id: city_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_city_id
      - id: level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level
      - id: consume_item
        type: world_area_levelup_consume_item
        if: ks__has_field_consume_item
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
      - id: action_vec
        type: ks__array_of__world_area_levelup_action__length_s
        if: ks__has_field_action_vec
    instances:
      ks__has_field_scene_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_city_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_level: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_consume_item: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_reward_id: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_action_vec: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
  trans_point_reward_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: scene_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scene_id
      - id: point_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_point_id
      - id: reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reward_id
      - id: group_id_vec
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_group_id_vec
      - id: unlock_area_id_vec
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_unlock_area_id_vec
    instances:
      ks__has_field_scene_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_point_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_reward_id: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_group_id_vec: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_unlock_area_id_vec: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
  city_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: city_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_city_id
      - id: scene_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scene_id
      - id: area_id_vec
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_area_id_vec
      - id: city_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_city_name
      - id: map_pos_x
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_map_pos_x
      - id: map_pos_y
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_map_pos_y
      - id: zoom_for_exploration
        type: f4
        if: ks__has_field_zoom_for_exploration
      - id: adventure_point_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_adventure_point_id
      - id: expedition_map
        type: aux_types::string
        if: ks__has_field_expedition_map
      - id: expedition_water_mark
        type: aux_types::string
        if: ks__has_field_expedition_water_mark
      - id: open_state
        type: ks__enum__open_state_type
        if: ks__has_field_open_state
      - id: city_goddness_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_city_goddness_name
      - id: city_goddness_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_city_goddness_desc
    instances:
      ks__has_field_city_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_scene_id: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_area_id_vec: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_city_name: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_map_pos_x: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_map_pos_y: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_zoom_for_exploration: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_adventure_point_id: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_expedition_map: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
      ks__has_field_expedition_water_mark: # Field №9
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000010) != 0)
      ks__has_field_open_state: # Field №10
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000100) != 0)
      ks__has_field_city_goddness_name: # Field №11
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00001000) != 0)
      ks__has_field_city_goddness_desc: # Field №12
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00010000) != 0)
  ks__enum__map_tag_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: map_tag_type
  map_tag_data_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: type
        type: ks__enum__map_tag_type
        if: ks__has_field_type
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: icon
        type: aux_types::string
        if: ks__has_field_icon
      - id: unlock_by_default
        type: u1
        if: ks__has_field_unlock_by_default
      - id: hide_before_unlock
        type: u1
        if: ks__has_field_hide_before_unlock
      - id: scene_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_scene_id_list
      - id: default_locate_x
        type: f4
        if: ks__has_field_default_locate_x
      - id: default_locate_z
        type: f4
        if: ks__has_field_default_locate_z
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000001) != 0)
      ks__has_field_type: # Field №1
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000010) != 0)
      ks__has_field_name: # Field №2
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00000100) != 0)
      ks__has_field_icon: # Field №3
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00001000) != 0)
      ks__has_field_unlock_by_default: # Field №4
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00010000) != 0)
      ks__has_field_hide_before_unlock: # Field №5
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b00100000) != 0)
      ks__has_field_scene_id_list: # Field №6
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b01000000) != 0)
      ks__has_field_default_locate_x: # Field №7
        value: (ks__bit_field.length.value >= (0b00000000 + 1)) and ((ks__bit_field.bitfield[0b00000000] & 0b10000000) != 0)
      ks__has_field_default_locate_z: # Field №8
        value: (ks__bit_field.length.value >= (0b00000001 + 1)) and ((ks__bit_field.bitfield[0b00000001] & 0b00000001) != 0)
  text_map_config:
    seq:
      - id: ks__bit_field
        type: aux_types::length_prefixed_bitfield
    instances: {}
  tile_shape_info:
    seq: []
    instances: {}
  sphere_tile_shape_info:
    seq:
      - id: ks__base
        type: tile_shape_info
      - id: ks__bit_field
        type: u1
      - id: radius
        type: f4
        if: ks__has_field_radius
    instances:
      ks__has_field_radius: # Field №0
        value: (ks__bit_field & 0b1) != 0
  binary_clip_info:
    seq: []
    instances: {}
  binary_clip_info_seralizer:
    seq: []
    instances: {}
  binary_clip_info_comparer:
    seq: []
    instances: {}
  byte_array:
    seq: []
    instances: {}
  byte_array_encode:
    seq: []
    instances: {}
  exist_flag:
    seq: []
    instances: {}
  field_tool:
    seq: []
    instances: {}
  type_tool:
    seq: []
    instances: {}
  binary_tool:
    seq: []
    instances: {}
  config_binary_cache:
    seq: []
    instances: {}
  config_meta_config:
    seq: []
    instances: {}
  hot_fix_patch_meta:
    seq: []
    instances: {}
  hash_utils:
    seq: []
    instances: {}
  json_tool:
    seq: []
    instances: {}
  ks__enum__camera_shake_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: camera_shake_type
  vector:
    seq:
      - id: ks__bit_field
        type: u1
      - id: x
        type: f4
        if: ks__has_field_x
      - id: y
        type: f4
        if: ks__has_field_y
      - id: z
        type: f4
        if: ks__has_field_z
    instances:
      ks__has_field_x: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_y: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_z: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_camera_shake_ext:
    seq:
      - id: ks__bit_field
        type: u1
      - id: infinity
        type: u1
        if: ks__has_field_infinity
      - id: base_on_camera
        type: u1
        if: ks__has_field_base_on_camera
      - id: after_shake
        type: u1
        if: ks__has_field_after_shake
      - id: base_cycle
        type: f4
        if: ks__has_field_base_cycle
      - id: cycle_damping
        type: f4
        if: ks__has_field_cycle_damping
      - id: range_attenuation
        type: f4
        if: ks__has_field_range_attenuation
    instances:
      ks__has_field_infinity: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_base_on_camera: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_after_shake: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_base_cycle: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_cycle_damping: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_range_attenuation: # Field №5
        value: (ks__bit_field & 0b100000) != 0
  config_camera_shake:
    seq:
      - id: ks__bit_field
        type: u1
      - id: shake_type
        type: ks__enum__camera_shake_type
        if: ks__has_field_shake_type
      - id: shake_range
        type: f4
        if: ks__has_field_shake_range
      - id: shake_time
        type: f4
        if: ks__has_field_shake_time
      - id: shake_distance
        type: f4
        if: ks__has_field_shake_distance
      - id: shake_dir
        type: vector
        if: ks__has_field_shake_dir
      - id: extension
        type: config_camera_shake_ext
        if: ks__has_field_extension
    instances:
      ks__has_field_shake_type: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_shake_range: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_shake_time: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_shake_distance: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_shake_dir: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_extension: # Field №5
        value: (ks__bit_field & 0b100000) != 0
  ks__enum__pin_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: pin_type
  sector_bin_data:
    seq: []
    instances: {}
  ability_override_excel_config_loader:
    seq: []
    instances: {}
  blessing_scan_excel_config_loader:
    seq: []
    instances: {}
  blessing_scan_type_excel_config_loader:
    seq: []
    instances: {}
  buoyant_combat_excel_config_loader:
    seq: []
    instances: {}
  channeller_slab_preview_excel_config_loader:
    seq: []
    instances: {}
  channeller_slab_chapter_excel_config_loader:
    seq: []
    instances: {}
  channeller_slab_level_excel_config_loader:
    seq: []
    instances: {}
  channeller_slab_buff_excel_config_loader:
    seq: []
    instances: {}
  channeller_slab_loop_dungeon_reward_excel_config_loader:
    seq: []
    instances: {}
  channeller_slab_loop_dungeon_preview_excel_config_loader:
    seq: []
    instances: {}
  channeller_slab_buff_cost_excel_config_loader:
    seq: []
    instances: {}
  channeller_slab_buff_energy_excel_config_loader:
    seq: []
    instances: {}
  channeller_slab_dungeon_excel_config_loader:
    seq: []
    instances: {}
  channeller_slab_loop_dungeon_difficulty_excel_config_loader:
    seq: []
    instances: {}
  activity_chess_card_excel_config_loader:
    seq: []
    instances: {}
  dragon_spine_preview_excel_config_loader:
    seq: []
    instances: {}
  dragon_spine_stage_excel_config_loader:
    seq: []
    instances: {}
  dragon_spine_enhance_excel_config_loader:
    seq: []
    instances: {}
  echo_shell_reward_excel_config_loader:
    seq: []
    instances: {}
  echo_shell_story_excel_config_loader:
    seq: []
    instances: {}
  fleur_fair_preview_excel_config_loader:
    seq: []
    instances: {}
  fleur_fair_mini_game_excel_config_loader:
    seq: []
    instances: {}
  music_game_basic_config_loader:
    seq: []
    instances: {}
  music_game_position_config_loader:
    seq: []
    instances: {}
  music_info_config_loader:
    seq: []
    instances: {}
  music_instrument_config_loader:
    seq: []
    instances: {}
  activity_hide_and_seek_basic_config_loader:
    seq: []
    instances: {}
  luna_rite_quest_excel_config_loader:
    seq: []
    instances: {}
  luna_rite_preview_excel_config_loader:
    seq: []
    instances: {}
  luna_rite_searching_excel_config_loader:
    seq: []
    instances: {}
  luna_rite_battle_buff_excel_config_loader:
    seq: []
    instances: {}
  luna_rite_battle_excel_config_loader:
    seq: []
    instances: {}
  find_hilichurl_excel_config_loader:
    seq: []
    instances: {}
  find_hilichurl_assignment_excel_config_loader:
    seq: []
    instances: {}
  find_hilichurl_hili_wei_excel_config_loader:
    seq: []
    instances: {}
  roguelike_card_excel_config_loader:
    seq: []
    instances: {}
  roguelike_curse_excel_config_loader:
    seq: []
    instances: {}
  aster_mission_excel_config_loader:
    seq: []
    instances: {}
  aster_stage_excel_config_loader:
    seq: []
    instances: {}
  aster_avatar_up_excel_config_loader:
    seq: []
    instances: {}
  aster_team_buff_excel_config_loader:
    seq: []
    instances: {}
  avatar_promote_excel_config_loader:
    seq: []
    instances: {}
  avatar_skill_depot_excel_config_loader:
    seq: []
    instances: {}
  proud_skill_excel_config_loader:
    seq: []
    instances: {}
  battle_pass_level_excel_config_loader:
    seq: []
    instances: {}
  battle_pass_reward_excel_config_loader:
    seq: []
    instances: {}
  buff_icon_excel_config_loader:
    seq: []
    instances: {}
  camp_excel_config_loader:
    seq: []
    instances: {}
  item_config:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: icon
        type: aux_types::string
        if: ks__has_field_icon
      - id: item_type
        type: ks__enum__item_type
        if: ks__has_field_item_type
      - id: weight
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_weight
      - id: rank
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_rank
      - id: gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gadget_id
      - id: dropable
        type: u1
        if: ks__has_field_dropable
      - id: use_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_use_level
      - id: global_item_limit
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_global_item_limit
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.value & 0b00000000001) != 0
      ks__has_field_name: # Field №1
        value: (ks__bit_field.value & 0b00000000010) != 0
      ks__has_field_desc: # Field №2
        value: (ks__bit_field.value & 0b00000000100) != 0
      ks__has_field_icon: # Field №3
        value: (ks__bit_field.value & 0b00000001000) != 0
      ks__has_field_item_type: # Field №4
        value: (ks__bit_field.value & 0b00000010000) != 0
      ks__has_field_weight: # Field №5
        value: (ks__bit_field.value & 0b00000100000) != 0
      ks__has_field_rank: # Field №6
        value: (ks__bit_field.value & 0b00001000000) != 0
      ks__has_field_gadget_id: # Field №7
        value: (ks__bit_field.value & 0b00010000000) != 0
      ks__has_field_dropable: # Field №8
        value: (ks__bit_field.value & 0b00100000000) != 0
      ks__has_field_use_level: # Field №9
        value: (ks__bit_field.value & 0b01000000000) != 0
      ks__has_field_global_item_limit: # Field №10
        value: (ks__bit_field.value & 0b10000000000) != 0
  ks__array_of__prop_val_config__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: prop_val_config
        repeat: expr
        repeat-expr: length.value
  base_talent_config:
    seq:
      - id: ks__bit_field
        type: u1
      - id: open_config
        type: aux_types::string
        if: ks__has_field_open_config
      - id: add_props
        type: ks__array_of__prop_val_config__length_u
        if: ks__has_field_add_props
      - id: param_list
        type: ks__array_of__f4__length_u
        if: ks__has_field_param_list
    instances:
      ks__has_field_open_config: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_add_props: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_param_list: # Field №2
        value: (ks__bit_field & 0b100) != 0
  common_excel_config_loader:
    seq: []
    instances: {}
  item_type_equality_comparer:
    seq: []
    instances: {}
  const_value_excel_config_loader:
    seq: []
    instances: {}
  cook_bonus_excel_config_loader:
    seq: []
    instances: {}
  cook_recipe_excel_config_loader:
    seq: []
    instances: {}
  compound_excel_config_loader:
    seq: []
    instances: {}
  coop_cg_excel_config_loader:
    seq: []
    instances: {}
  coop_reward_excel_config_loader:
    seq: []
    instances: {}
  coop_chapter_excel_config_loader:
    seq: []
    instances: {}
  coop_point_excel_config_loader:
    seq: []
    instances: {}
  die_type_tips_excel_config_loader:
    seq: []
    instances: {}
  dungeon_entry_excel_config_loader:
    seq: []
    instances: {}
  dungeon_level_entity_config_loader:
    seq: []
    instances: {}
  equip_affix_excel_config_loader:
    seq: []
    instances: {}
  exhibition_score_excel_config_loader:
    seq: []
    instances: {}
  fetter_info_excel_config_loader:
    seq: []
    instances: {}
  global_excel_config:
    seq: []
    instances: {}
  guide_rating_excel_config_loader:
    seq: []
    instances: {}
  home_world_furniture_type_excel_config_loader:
    seq: []
    instances: {}
  furniture_make_excel_config_loader:
    seq: []
    instances: {}
  investigation_dungeon_config_loader:
    seq: []
    instances: {}
  limit_region_excel_config_loader:
    seq: []
    instances: {}
  localization_excel_config_loader:
    seq: []
    instances: {}
  material_excel_config_loader:
    seq: []
    instances: {}
  monster_excel_config_loader:
    seq: []
    instances: {}
  monster_describe_excel_config_loader:
    seq: []
    instances: {}
  new_activity_sale_excel_config_loader:
    seq: []
    instances: {}
  reward_transform_config_proxy:
    seq: []
    instances: {}
  reward_transform_config:
    seq: []
    instances: {}
  overflow_transform_excel_config_loader:
    seq: []
    instances: {}
  player_level_excel_config_loader:
    seq: []
    instances: {}
  quest_excel_config_utils:
    seq: []
    instances: {}
  main_quest_excel_config_proxy:
    seq: []
    instances: {}
  quest_excel_config_proxy:
    seq: []
    instances: {}
  quest_excel_config_loader:
    seq: []
    instances: {}
  talk_excel_config_loader:
    seq: []
    instances: {}
  quest_cond_utils:
    seq: []
    instances: {}
  reliquary_set_excel_config_loader:
    seq: []
    instances: {}
  reputation_level_excel_config_loader:
    seq: []
    instances: {}
  reputation_quest_excel_config_loader:
    seq: []
    instances: {}
  reputation_entrance_excel_config_loader:
    seq: []
    instances: {}
  reputation_explore_excel_config_loader:
    seq: []
    instances: {}
  reputation_city_excel_config_loader:
    seq: []
    instances: {}
  reward_excel_config_loader:
    seq: []
    instances: {}
  shopmall_entrance_excel_config_loader:
    seq: []
    instances: {}
  product_id_config_loader:
    seq: []
    instances: {}
  element_state_excel_config_loader:
    seq: []
    instances: {}
  state_excel_config_loader:
    seq: []
    instances: {}
  mechanicus_gear_level_up_excel_config_loader:
    seq: []
    instances: {}
  sea_lamp_section_excel_config_loader:
    seq: []
    instances: {}
  mechanicus_watcher_excel_config_loader:
    seq: []
    instances: {}
  mechanicus_difficulty_excel_config_loader:
    seq: []
    instances: {}
  activity_chess_map_excel_config_loader:
    seq: []
    instances: {}
  activity_chess_gear_excel_config_loader:
    seq: []
    instances: {}
  activity_chess_level_excel_config_loader:
    seq: []
    instances: {}
  tower_floor_excel_config_loader:
    seq: []
    instances: {}
  tower_level_excel_config_loader:
    seq: []
    instances: {}
  trial_avatar_activity_data_excel_config_loader:
    seq: []
    instances: {}
  weapon_promote_excel_config_loader:
    seq: []
    instances: {}
  world_area_config_loader:
    seq: []
    instances: {}
  city_levelup_config_loader:
    seq: []
    instances: {}
  city_config_loader:
    seq: []
    instances: {}
  map_tag_data_config_loader:
    seq: []
    instances: {}
  ks__enum__cutscene_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: cutscene_type
  config_cutscene_pre_task:
    seq:
      - id: ks__bit_field
        type: u1
      - id: duration
        type: f4
        if: ks__has_field_duration
      - id: target_day_time
        type: f4
        if: ks__has_field_target_day_time
      - id: target_weather
        type: aux_types::string
        if: ks__has_field_target_weather
    instances:
      ks__has_field_duration: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_target_day_time: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_target_weather: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__enum__cutscene_init_pos_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: cutscene_init_pos_type
  config_base_cutscene:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: type
        type: ks__enum__cutscene_type
        if: ks__has_field_type
      - id: pre_task_cfg
        type: config_cutscene_pre_task
        if: ks__has_field_pre_task_cfg
      - id: can_skip
        type: u1
        if: ks__has_field_can_skip
      - id: force_can_skip
        type: u1
        if: ks__has_field_force_can_skip
      - id: skip_general_dialog
        type: u1
        if: ks__has_field_skip_general_dialog
      - id: can
        type: u1
        if: ks__has_field_can
      - id: clear_black_screen
        type: u1
        if: ks__has_field_clear_black_screen
      - id: fade_out_when_finish
        type: f4
        if: ks__has_field_fade_out_when_finish
      - id: direct_transmit
        type: u1
        if: ks__has_field_direct_transmit
      - id: delay_transmit
        type: f4
        if: ks__has_field_delay_transmit
      - id: lua_data_path
        type: aux_types::string
        if: ks__has_field_lua_data_path
      - id: res_path
        type: aux_types::string
        if: ks__has_field_res_path
      - id: cast_list_path
        type: aux_types::string
        if: ks__has_field_cast_list_path
      - id: entity_ban
        type: aux_types::string
        if: ks__has_field_entity_ban
      - id: start_pos_type
        type: ks__enum__cutscene_init_pos_type
        if: ks__has_field_start_pos_type
      - id: start_offset
        type: vector
        if: ks__has_field_start_offset
      - id: need_xz_euler
        type: u1
        if: ks__has_field_need_xz_euler
      - id: need_y_euler
        type: u1
        if: ks__has_field_need_y_euler
      - id: keep_camera
        type: u1
        if: ks__has_field_keep_camera
      - id: use_target_pos
        type: u1
        if: ks__has_field_use_target_pos
      - id: target_pos
        type: vector
        if: ks__has_field_target_pos
      - id: modify_last_pose_offset
        type: u1
        if: ks__has_field_modify_last_pose_offset
      - id: attack_mode_recover
        type: u1
        if: ks__has_field_attack_mode_recover
      - id: crowd_lod0list
        type: ks__array_of__aux_types__vlq_base128_le_s__length_u
        if: ks__has_field_crowd_lod0list
      - id: enable_camera_displacement
        type: u1
        if: ks__has_field_enable_camera_displacement
      - id: entity_runtime_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_entity_runtime_id
      - id: clear_avatar_local_gadget
        type: u1
        if: ks__has_field_clear_avatar_local_gadget
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field.value & 0b000000000000000000000000001) != 0
      ks__has_field_pre_task_cfg: # Field №1
        value: (ks__bit_field.value & 0b000000000000000000000000010) != 0
      ks__has_field_can_skip: # Field №2
        value: (ks__bit_field.value & 0b000000000000000000000000100) != 0
      ks__has_field_force_can_skip: # Field №3
        value: (ks__bit_field.value & 0b000000000000000000000001000) != 0
      ks__has_field_skip_general_dialog: # Field №4
        value: (ks__bit_field.value & 0b000000000000000000000010000) != 0
      ks__has_field_can: # Field №5
        value: (ks__bit_field.value & 0b000000000000000000000100000) != 0
      ks__has_field_clear_black_screen: # Field №6
        value: (ks__bit_field.value & 0b000000000000000000001000000) != 0
      ks__has_field_fade_out_when_finish: # Field №7
        value: (ks__bit_field.value & 0b000000000000000000010000000) != 0
      ks__has_field_direct_transmit: # Field №8
        value: (ks__bit_field.value & 0b000000000000000000100000000) != 0
      ks__has_field_delay_transmit: # Field №9
        value: (ks__bit_field.value & 0b000000000000000001000000000) != 0
      ks__has_field_lua_data_path: # Field №10
        value: (ks__bit_field.value & 0b000000000000000010000000000) != 0
      ks__has_field_res_path: # Field №11
        value: (ks__bit_field.value & 0b000000000000000100000000000) != 0
      ks__has_field_cast_list_path: # Field №12
        value: (ks__bit_field.value & 0b000000000000001000000000000) != 0
      ks__has_field_entity_ban: # Field №13
        value: (ks__bit_field.value & 0b000000000000010000000000000) != 0
      ks__has_field_start_pos_type: # Field №14
        value: (ks__bit_field.value & 0b000000000000100000000000000) != 0
      ks__has_field_start_offset: # Field №15
        value: (ks__bit_field.value & 0b000000000001000000000000000) != 0
      ks__has_field_need_xz_euler: # Field №16
        value: (ks__bit_field.value & 0b000000000010000000000000000) != 0
      ks__has_field_need_y_euler: # Field №17
        value: (ks__bit_field.value & 0b000000000100000000000000000) != 0
      ks__has_field_keep_camera: # Field №18
        value: (ks__bit_field.value & 0b000000001000000000000000000) != 0
      ks__has_field_use_target_pos: # Field №19
        value: (ks__bit_field.value & 0b000000010000000000000000000) != 0
      ks__has_field_target_pos: # Field №20
        value: (ks__bit_field.value & 0b000000100000000000000000000) != 0
      ks__has_field_modify_last_pose_offset: # Field №21
        value: (ks__bit_field.value & 0b000001000000000000000000000) != 0
      ks__has_field_attack_mode_recover: # Field №22
        value: (ks__bit_field.value & 0b000010000000000000000000000) != 0
      ks__has_field_crowd_lod0list: # Field №23
        value: (ks__bit_field.value & 0b000100000000000000000000000) != 0
      ks__has_field_enable_camera_displacement: # Field №24
        value: (ks__bit_field.value & 0b001000000000000000000000000) != 0
      ks__has_field_entity_runtime_id: # Field №25
        value: (ks__bit_field.value & 0b010000000000000000000000000) != 0
      ks__has_field_clear_avatar_local_gadget: # Field №26
        value: (ks__bit_field.value & 0b100000000000000000000000000) != 0
  config_timeline:
    seq:
      - id: ks__base
        type: config_base_cutscene
      - id: ks__bit_field
        type: u1
      - id: sync_load
        type: u1
        if: ks__has_field_sync_load
      - id: fade_in_duration
        type: f4
        if: ks__has_field_fade_in_duration
      - id: fade_out_duration
        type: f4
        if: ks__has_field_fade_out_duration
      - id: force_gc
        type: u1
        if: ks__has_field_force_gc
    instances:
      ks__has_field_sync_load: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_fade_in_duration: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_fade_out_duration: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_force_gc: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      type:
        value: ks__base.type
      pre_task_cfg:
        value: ks__base.pre_task_cfg
      can_skip:
        value: ks__base.can_skip
      force_can_skip:
        value: ks__base.force_can_skip
      skip_general_dialog:
        value: ks__base.skip_general_dialog
      can:
        value: ks__base.can
      clear_black_screen:
        value: ks__base.clear_black_screen
      fade_out_when_finish:
        value: ks__base.fade_out_when_finish
      direct_transmit:
        value: ks__base.direct_transmit
      delay_transmit:
        value: ks__base.delay_transmit
      lua_data_path:
        value: ks__base.lua_data_path
      res_path:
        value: ks__base.res_path
      cast_list_path:
        value: ks__base.cast_list_path
      entity_ban:
        value: ks__base.entity_ban
      start_pos_type:
        value: ks__base.start_pos_type
      start_offset:
        value: ks__base.start_offset
      need_xz_euler:
        value: ks__base.need_xz_euler
      need_y_euler:
        value: ks__base.need_y_euler
      keep_camera:
        value: ks__base.keep_camera
      use_target_pos:
        value: ks__base.use_target_pos
      target_pos:
        value: ks__base.target_pos
      modify_last_pose_offset:
        value: ks__base.modify_last_pose_offset
      attack_mode_recover:
        value: ks__base.attack_mode_recover
      crowd_lod0list:
        value: ks__base.crowd_lod0list
      enable_camera_displacement:
        value: ks__base.enable_camera_displacement
      entity_runtime_id:
        value: ks__base.entity_runtime_id
      clear_avatar_local_gadget:
        value: ks__base.clear_avatar_local_gadget
  debug_blletin_info:
    seq:
      - id: ks__bit_field
        type: u1
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: board_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_board_id
      - id: content
        type: aux_types::string
        if: ks__has_field_content
      - id: author
        type: aux_types::string
        if: ks__has_field_author
      - id: create_time
        type: aux_types::string
        if: ks__has_field_create_time
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_board_id: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_content: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_author: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_create_time: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  debug_board_info:
    seq:
      - id: ks__base
        type: debug_blletin_info
      - id: ks__bit_field
        type: u1
      - id: type
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_type
      - id: title
        type: aux_types::string
        if: ks__has_field_title
      - id: location
        type: aux_types::string
        if: ks__has_field_location
      - id: scene_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scene_id
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_title: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_location: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_scene_id: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      id:
        value: ks__base.id
      board_id:
        value: ks__base.board_id
      content:
        value: ks__base.content
      author:
        value: ks__base.author
      create_time:
        value: ks__base.create_time
  ks__enum__interaction_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: interaction_type
  config_base_inter_action:
    seq:
      - id: ks__bit_field
        type: u1
      - id: type
        type: ks__enum__interaction_type
        if: ks__has_field_type
      - id: delay_time
        type: f4
        if: ks__has_field_delay_time
      - id: duration
        type: f4
        if: ks__has_field_duration
      - id: alias_list
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_alias_list
      - id: check_next_immediately
        type: u1
        if: ks__has_field_check_next_immediately
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_delay_time: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_duration: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_alias_list: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_check_next_immediately: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  config_body_lang_inter_action:
    seq:
      - id: ks__base
        type: config_base_inter_action
      - id: ks__bit_field
        type: u1
      - id: is_continue
        type: u1
        if: ks__has_field_is_continue
      - id: body_lang_param
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_body_lang_param
      - id: loop_state
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_loop_state
      - id: force_interrupt
        type: u1
        if: ks__has_field_force_interrupt
      - id: random_param_list
        type: ks__array_of__aux_types__vlq_base128_le_s__length_u
        if: ks__has_field_random_param_list
      - id: force_do_free_style
        type: u1
        if: ks__has_field_force_do_free_style
      - id: can_do_repeat_free_style
        type: u1
        if: ks__has_field_can_do_repeat_free_style
    instances:
      ks__has_field_is_continue: # Field №0
        value: (ks__bit_field & 0b0000001) != 0
      ks__has_field_body_lang_param: # Field №1
        value: (ks__bit_field & 0b0000010) != 0
      ks__has_field_loop_state: # Field №2
        value: (ks__bit_field & 0b0000100) != 0
      ks__has_field_force_interrupt: # Field №3
        value: (ks__bit_field & 0b0001000) != 0
      ks__has_field_random_param_list: # Field №4
        value: (ks__bit_field & 0b0010000) != 0
      ks__has_field_force_do_free_style: # Field №5
        value: (ks__bit_field & 0b0100000) != 0
      ks__has_field_can_do_repeat_free_style: # Field №6
        value: (ks__bit_field & 0b1000000) != 0
      # Base class fields
      type:
        value: ks__base.type
      delay_time:
        value: ks__base.delay_time
      duration:
        value: ks__base.duration
      alias_list:
        value: ks__base.alias_list
      check_next_immediately:
        value: ks__base.check_next_immediately
  config_emotion_inter_action:
    seq:
      - id: ks__base
        type: config_base_inter_action
      - id: ks__bit_field
        type: u1
      - id: emotion_name
        type: aux_types::string
        if: ks__has_field_emotion_name
      - id: emotion_transition_time
        type: f4
        if: ks__has_field_emotion_transition_time
      - id: look_at_offset
        type: vector
        if: ks__has_field_look_at_offset
      - id: blink_enabled
        type: u1
        if: ks__has_field_blink_enabled
      - id: blink_min_gap
        type: f4
        if: ks__has_field_blink_min_gap
      - id: blink_max_gap
        type: f4
        if: ks__has_field_blink_max_gap
      - id: blink_duration
        type: f4
        if: ks__has_field_blink_duration
    instances:
      ks__has_field_emotion_name: # Field №0
        value: (ks__bit_field & 0b0000001) != 0
      ks__has_field_emotion_transition_time: # Field №1
        value: (ks__bit_field & 0b0000010) != 0
      ks__has_field_look_at_offset: # Field №2
        value: (ks__bit_field & 0b0000100) != 0
      ks__has_field_blink_enabled: # Field №3
        value: (ks__bit_field & 0b0001000) != 0
      ks__has_field_blink_min_gap: # Field №4
        value: (ks__bit_field & 0b0010000) != 0
      ks__has_field_blink_max_gap: # Field №5
        value: (ks__bit_field & 0b0100000) != 0
      ks__has_field_blink_duration: # Field №6
        value: (ks__bit_field & 0b1000000) != 0
      # Base class fields
      type:
        value: ks__base.type
      delay_time:
        value: ks__base.delay_time
      duration:
        value: ks__base.duration
      alias_list:
        value: ks__base.alias_list
      check_next_immediately:
        value: ks__base.check_next_immediately
  ks__enum__dialog_steer_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: dialog_steer_type
  config_steer_inter_action:
    seq:
      - id: ks__base
        type: config_base_inter_action
      - id: ks__bit_field
        type: u1
      - id: steer_type
        type: ks__enum__dialog_steer_type
        if: ks__has_field_steer_type
      - id: use_angle
        type: u1
        if: ks__has_field_use_angle
      - id: steer_dir
        type: vector
        if: ks__has_field_steer_dir
      - id: steer_angle
        type: f4
        if: ks__has_field_steer_angle
      - id: use_steer_anim
        type: u1
        if: ks__has_field_use_steer_anim
      - id: interrupt_freestyle
        type: u1
        if: ks__has_field_interrupt_freestyle
      - id: force_steer
        type: u1
        if: ks__has_field_force_steer
      - id: target_npc_alias
        type: aux_types::string
        if: ks__has_field_target_npc_alias
    instances:
      ks__has_field_steer_type: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_use_angle: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_steer_dir: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_steer_angle: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_use_steer_anim: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_interrupt_freestyle: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_force_steer: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_target_npc_alias: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
      # Base class fields
      type:
        value: ks__base.type
      delay_time:
        value: ks__base.delay_time
      duration:
        value: ks__base.duration
      alias_list:
        value: ks__base.alias_list
      check_next_immediately:
        value: ks__base.check_next_immediately
  config_ui_trigger_inter_action:
    seq:
      - id: ks__base
        type: config_base_inter_action
      - id: ks__bit_field
        type: u1
      - id: context_name
        type: aux_types::string
        if: ks__has_field_context_name
      - id: param
        type: aux_types::string
        if: ks__has_field_param
    instances:
      ks__has_field_context_name: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_param: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      type:
        value: ks__base.type
      delay_time:
        value: ks__base.delay_time
      duration:
        value: ks__base.duration
      alias_list:
        value: ks__base.alias_list
      check_next_immediately:
        value: ks__base.check_next_immediately
  quest_cond_ex:
    seq:
      - id: ks__bit_field
        type: u1
      - id: type
        type: ks__enum__quest_cond_type
        if: ks__has_field_type
      - id: param
        type: ks__array_of__aux_types__vlq_base128_le_s__length_u
        if: ks__has_field_param
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_param: # Field №1
        value: (ks__bit_field & 0b10) != 0
  quest_guide_ex:
    seq:
      - id: ks__bit_field
        type: u1
      - id: type
        type: ks__enum__quest_guide_type
        if: ks__has_field_type
      - id: auto_guide
        type: ks__enum__quest_guide_auto
        if: ks__has_field_auto_guide
      - id: param
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_param
      - id: guide_scene
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_guide_scene
      - id: guide_style
        type: ks__enum__quest_guide_style
        if: ks__has_field_guide_style
      - id: guide_layer
        type: ks__enum__quest_guide_layer
        if: ks__has_field_guide_layer
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_auto_guide: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_param: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_guide_scene: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_guide_style: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_guide_layer: # Field №5
        value: (ks__bit_field & 0b100000) != 0
  quest_exec_ex:
    seq:
      - id: ks__bit_field
        type: u1
      - id: type
        type: ks__enum__quest_exec_type
        if: ks__has_field_type
      - id: param
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_param
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_param: # Field №1
        value: (ks__bit_field & 0b10) != 0
  talk_cond_ex:
    seq:
      - id: ks__bit_field
        type: u1
      - id: type
        type: ks__enum__quest_cond_type
        if: ks__has_field_type
      - id: param
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_param
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_param: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__array_of__talk_cond_ex__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: talk_cond_ex
        repeat: expr
        repeat-expr: length.value
  talk_exec_ex:
    seq:
      - id: ks__bit_field
        type: u1
      - id: type
        type: ks__enum__talk_exec_type
        if: ks__has_field_type
      - id: param
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_param
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_param: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__array_of__talk_exec_ex__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: talk_exec_ex
        repeat: expr
        repeat-expr: length.value
  config_talk_scheme:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: begin_way
        type: ks__enum__talk_begin_way
        if: ks__has_field_begin_way
      - id: active_mode
        type: ks__enum__play_mode
        if: ks__has_field_active_mode
      - id: begin_cond_comb
        type: ks__enum__logic_type
        if: ks__has_field_begin_cond_comb
      - id: begin_cond
        type: ks__array_of__talk_cond_ex__length_u
        if: ks__has_field_begin_cond
      - id: priority
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_priority
      - id: next_talks
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_next_talks
      - id: next_random_talks
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_next_random_talks
      - id: show_random_talk_count
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_show_random_talk_count
      - id: init_dialog
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_init_dialog
      - id: decorator_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_decorator_id
      - id: npc_id
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_npc_id
      - id: perform_cfg
        type: aux_types::string
        if: ks__has_field_perform_cfg
      - id: hero_talk
        type: ks__enum__talk_hero_type
        if: ks__has_field_hero_talk
      - id: load_type
        type: ks__enum__talk_load_type
        if: ks__has_field_load_type
      - id: quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_quest_id
      - id: extra_load_mark_id
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_extra_load_mark_id
      - id: asset_index
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_asset_index
      - id: dont_block_daily
        type: u1
        if: ks__has_field_dont_block_daily
      - id: participant_id
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_participant_id
      - id: pre_perform_cfg
        type: aux_types::string
        if: ks__has_field_pre_perform_cfg
      - id: stay_free_style
        type: u1
        if: ks__has_field_stay_free_style
      - id: enable_camera_displacement
        type: u1
        if: ks__has_field_enable_camera_displacement
      - id: lock_game_time
        type: u1
        if: ks__has_field_lock_game_time
      - id: talk_mark_type
        type: ks__enum__talk_mark_type
        if: ks__has_field_talk_mark_type
      - id: quest_idle_talk
        type: u1
        if: ks__has_field_quest_idle_talk
      - id: low_priority
        type: u1
        if: ks__has_field_low_priority
      - id: finish_exec
        type: ks__array_of__talk_exec_ex__length_u
        if: ks__has_field_finish_exec
      - id: pre_perform_free_style_list
        type: ks__array_of__aux_types__vlq_base128_le_s__length_u
        if: ks__has_field_pre_perform_free_style_list
      - id: free_style_list
        type: ks__array_of__aux_types__vlq_base128_le_s__length_u
        if: ks__has_field_free_style_list
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.value & 0b000000000000000000000000000001) != 0
      ks__has_field_begin_way: # Field №1
        value: (ks__bit_field.value & 0b000000000000000000000000000010) != 0
      ks__has_field_active_mode: # Field №2
        value: (ks__bit_field.value & 0b000000000000000000000000000100) != 0
      ks__has_field_begin_cond_comb: # Field №3
        value: (ks__bit_field.value & 0b000000000000000000000000001000) != 0
      ks__has_field_begin_cond: # Field №4
        value: (ks__bit_field.value & 0b000000000000000000000000010000) != 0
      ks__has_field_priority: # Field №5
        value: (ks__bit_field.value & 0b000000000000000000000000100000) != 0
      ks__has_field_next_talks: # Field №6
        value: (ks__bit_field.value & 0b000000000000000000000001000000) != 0
      ks__has_field_next_random_talks: # Field №7
        value: (ks__bit_field.value & 0b000000000000000000000010000000) != 0
      ks__has_field_show_random_talk_count: # Field №8
        value: (ks__bit_field.value & 0b000000000000000000000100000000) != 0
      ks__has_field_init_dialog: # Field №9
        value: (ks__bit_field.value & 0b000000000000000000001000000000) != 0
      ks__has_field_decorator_id: # Field №10
        value: (ks__bit_field.value & 0b000000000000000000010000000000) != 0
      ks__has_field_npc_id: # Field №11
        value: (ks__bit_field.value & 0b000000000000000000100000000000) != 0
      ks__has_field_perform_cfg: # Field №12
        value: (ks__bit_field.value & 0b000000000000000001000000000000) != 0
      ks__has_field_hero_talk: # Field №13
        value: (ks__bit_field.value & 0b000000000000000010000000000000) != 0
      ks__has_field_load_type: # Field №14
        value: (ks__bit_field.value & 0b000000000000000100000000000000) != 0
      ks__has_field_quest_id: # Field №15
        value: (ks__bit_field.value & 0b000000000000001000000000000000) != 0
      ks__has_field_extra_load_mark_id: # Field №16
        value: (ks__bit_field.value & 0b000000000000010000000000000000) != 0
      ks__has_field_asset_index: # Field №17
        value: (ks__bit_field.value & 0b000000000000100000000000000000) != 0
      ks__has_field_dont_block_daily: # Field №18
        value: (ks__bit_field.value & 0b000000000001000000000000000000) != 0
      ks__has_field_participant_id: # Field №19
        value: (ks__bit_field.value & 0b000000000010000000000000000000) != 0
      ks__has_field_pre_perform_cfg: # Field №20
        value: (ks__bit_field.value & 0b000000000100000000000000000000) != 0
      ks__has_field_stay_free_style: # Field №21
        value: (ks__bit_field.value & 0b000000001000000000000000000000) != 0
      ks__has_field_enable_camera_displacement: # Field №22
        value: (ks__bit_field.value & 0b000000010000000000000000000000) != 0
      ks__has_field_lock_game_time: # Field №23
        value: (ks__bit_field.value & 0b000000100000000000000000000000) != 0
      ks__has_field_talk_mark_type: # Field №24
        value: (ks__bit_field.value & 0b000001000000000000000000000000) != 0
      ks__has_field_quest_idle_talk: # Field №25
        value: (ks__bit_field.value & 0b000010000000000000000000000000) != 0
      ks__has_field_low_priority: # Field №26
        value: (ks__bit_field.value & 0b000100000000000000000000000000) != 0
      ks__has_field_finish_exec: # Field №27
        value: (ks__bit_field.value & 0b001000000000000000000000000000) != 0
      ks__has_field_pre_perform_free_style_list: # Field №28
        value: (ks__bit_field.value & 0b010000000000000000000000000000) != 0
      ks__has_field_free_style_list: # Field №29
        value: (ks__bit_field.value & 0b100000000000000000000000000000) != 0
  ks__enum__property_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: property_type
  ks__enum__stack_method:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: stack_method
  config_ability_property_entry:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: type
        type: ks__enum__property_type
        if: ks__has_field_type
      - id: default_value
        type: f4
        if: ks__has_field_default_value
      - id: ceiling
        type: f4
        if: ks__has_field_ceiling
      - id: floor
        type: f4
        if: ks__has_field_floor
      - id: stacking
        type: ks__enum__stack_method
        if: ks__has_field_stacking
      - id: succeed
        type: u1
        if: ks__has_field_succeed
      - id: use_tag
        type: u1
        if: ks__has_field_use_tag
      - id: limited_tag_ceiling
        type: f4
        if: ks__has_field_limited_tag_ceiling
      - id: limited_tag_floor
        type: f4
        if: ks__has_field_limited_tag_floor
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field.value & 0b000000001) != 0
      ks__has_field_default_value: # Field №1
        value: (ks__bit_field.value & 0b000000010) != 0
      ks__has_field_ceiling: # Field №2
        value: (ks__bit_field.value & 0b000000100) != 0
      ks__has_field_floor: # Field №3
        value: (ks__bit_field.value & 0b000001000) != 0
      ks__has_field_stacking: # Field №4
        value: (ks__bit_field.value & 0b000010000) != 0
      ks__has_field_succeed: # Field №5
        value: (ks__bit_field.value & 0b000100000) != 0
      ks__has_field_use_tag: # Field №6
        value: (ks__bit_field.value & 0b001000000) != 0
      ks__has_field_limited_tag_ceiling: # Field №7
        value: (ks__bit_field.value & 0b010000000) != 0
      ks__has_field_limited_tag_floor: # Field №8
        value: (ks__bit_field.value & 0b100000000) != 0
  ks__array_of__ks__enum__entity_type__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__enum__entity_type
        repeat: expr
        repeat-expr: length.value
  ks__enum__select_targets_sort_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: select_targets_sort_type
  select_targets:
    seq:
      - id: ks__bit_field
        type: u1
      - id: top_limit
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_top_limit
      - id: entity_type_priority
        type: ks__array_of__ks__enum__entity_type__length_u
        if: ks__has_field_entity_type_priority
      - id: sort_type
        type: ks__enum__select_targets_sort_type
        if: ks__has_field_sort_type
    instances:
      ks__has_field_top_limit: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_entity_type_priority: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_sort_type: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__enum__ability_targetting:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: ability_targetting
  ks__enum__target_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: target_type
  select_targets_by_shape:
    seq:
      - id: ks__base
        type: select_targets
      - id: ks__bit_field
        type: u1
      - id: shape_name
        type: aux_types::string
        if: ks__has_field_shape_name
      - id: center_based_on
        type: ks__enum__ability_targetting
        if: ks__has_field_center_based_on
      - id: camp_target_type
        type: ks__enum__target_type
        if: ks__has_field_camp_target_type
      - id: camp_based_on
        type: ks__enum__ability_targetting
        if: ks__has_field_camp_based_on
      - id: size_ratio
        type: aux_types::dynamic_float
        if: ks__has_field_size_ratio
    instances:
      ks__has_field_shape_name: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_center_based_on: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_camp_target_type: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_camp_based_on: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_size_ratio: # Field №4
        value: (ks__bit_field & 0b10000) != 0
      # Base class fields
      top_limit:
        value: ks__base.top_limit
      entity_type_priority:
        value: ks__base.entity_type_priority
      sort_type:
        value: ks__base.sort_type
  config_ability_mixin:
    seq:
      - id: ks__bit_field
        type: u1
      - id: is_unique
        type: u1
        if: ks__has_field_is_unique
    instances:
      ks__has_field_is_unique: # Field №0
        value: (ks__bit_field & 0b1) != 0
  ks__array_of__ks__disp__config_ability_mixin__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__disp__config_ability_mixin
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__aux_types__string_aux_types__dynamic_argument:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: aux_types::dynamic_argument
  ks__dict_of__aux_types__string_aux_types__dynamic_argument:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_aux_types__dynamic_argument
        repeat: expr
        repeat-expr: length.value
  ks__enum__modifier_time_scale:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: modifier_time_scale
  ks__enum__modifier_stacking:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: modifier_stacking
  ks__enum__unique_modifier_cond:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: unique_modifier_cond
  config_modifier_stacking_option:
    seq:
      - id: ks__bit_field
        type: u1
      - id: ability_special_name
        type: aux_types::string
        if: ks__has_field_ability_special_name
      - id: unique_modifier_condition
        type: ks__enum__unique_modifier_cond
        if: ks__has_field_unique_modifier_condition
      - id: max_modifier_num_for_multiple_type
        type: aux_types::dynamic_float
        if: ks__has_field_max_modifier_num_for_multiple_type
      - id: enable_mixed_unique
        type: u1
        if: ks__has_field_enable_mixed_unique
    instances:
      ks__has_field_ability_special_name: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_unique_modifier_condition: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_max_modifier_num_for_multiple_type: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_enable_mixed_unique: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  ks__kvp_of_dict__aux_types__string_aux_types__dynamic_float:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: aux_types::dynamic_float
  ks__dict_of__aux_types__string_aux_types__dynamic_float:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_aux_types__dynamic_float
        repeat: expr
        repeat-expr: length.value
  config_ability_state_option:
    seq: []
    instances: {}
  ks__enum__action_token_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: action_token_type
  config_ability_action_token:
    seq:
      - id: ks__bit_field
        type: u1
      - id: cancel_with_entity_tick_lod
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_cancel_with_entity_tick_lod
      - id: channel_id
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_channel_id
      - id: weight
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_weight
      - id: token_cost_type
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_token_cost_type
      - id: token_type
        type: ks__enum__action_token_type
        if: ks__has_field_token_type
    instances:
      ks__has_field_cancel_with_entity_tick_lod: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_channel_id: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_weight: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_token_cost_type: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_token_type: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  config_ability_predicate:
    seq:
      - id: ks__bit_field
        type: u1
      - id: target
        type: ks__enum__ability_targetting
        if: ks__has_field_target
    instances:
      ks__has_field_target: # Field №0
        value: (ks__bit_field & 0b1) != 0
  ks__array_of__ks__disp__config_ability_predicate__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__disp__config_ability_predicate
        repeat: expr
        repeat-expr: length.value
  config_ability_action:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: token
        type: config_ability_action_token
        if: ks__has_field_token
      - id: target
        type: ks__enum__ability_targetting
        if: ks__has_field_target
      - id: other_targets
        type: ks__disp__select_targets
        if: ks__has_field_other_targets
      - id: do_off_stage
        type: u1
        if: ks__has_field_do_off_stage
      - id: do_after_die
        type: u1
        if: ks__has_field_do_after_die
      - id: can_be_handled_on_recover
        type: u1
        if: ks__has_field_can_be_handled_on_recover
      - id: mute_remote_action
        type: u1
        if: ks__has_field_mute_remote_action
      - id: predicates
        type: ks__array_of__ks__disp__config_ability_predicate__length_u
        if: ks__has_field_predicates
      - id: predicates_foreach
        type: ks__array_of__ks__disp__config_ability_predicate__length_u
        if: ks__has_field_predicates_foreach
    instances:
      ks__has_field_token: # Field №0
        value: (ks__bit_field.value & 0b000000001) != 0
      ks__has_field_target: # Field №1
        value: (ks__bit_field.value & 0b000000010) != 0
      ks__has_field_other_targets: # Field №2
        value: (ks__bit_field.value & 0b000000100) != 0
      ks__has_field_do_off_stage: # Field №3
        value: (ks__bit_field.value & 0b000001000) != 0
      ks__has_field_do_after_die: # Field №4
        value: (ks__bit_field.value & 0b000010000) != 0
      ks__has_field_can_be_handled_on_recover: # Field №5
        value: (ks__bit_field.value & 0b000100000) != 0
      ks__has_field_mute_remote_action: # Field №6
        value: (ks__bit_field.value & 0b001000000) != 0
      ks__has_field_predicates: # Field №7
        value: (ks__bit_field.value & 0b010000000) != 0
      ks__has_field_predicates_foreach: # Field №8
        value: (ks__bit_field.value & 0b100000000) != 0
  ks__array_of__ks__disp__config_ability_action__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__disp__config_ability_action
        repeat: expr
        repeat-expr: length.value
  config_ability_modifier:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: time_scale
        type: ks__enum__modifier_time_scale
        if: ks__has_field_time_scale
      - id: stacking
        type: ks__enum__modifier_stacking
        if: ks__has_field_stacking
      - id: stacking_option
        type: config_modifier_stacking_option
        if: ks__has_field_stacking_option
      - id: is_buff
        type: u1
        if: ks__has_field_is_buff
      - id: is_debuff
        type: u1
        if: ks__has_field_is_debuff
      - id: modifier_name
        type: aux_types::string
        if: ks__has_field_modifier_name
      - id: is_unique
        type: u1
        if: ks__has_field_is_unique
      - id: duration
        type: aux_types::dynamic_float
        if: ks__has_field_duration
      - id: element_type
        type: ks__enum__element_type
        if: ks__has_field_element_type
      - id: element_durability
        type: aux_types::dynamic_float
        if: ks__has_field_element_durability
      - id: max_element_durability
        type: f4
        if: ks__has_field_max_element_durability
      - id: purge_increment
        type: f4
        if: ks__has_field_purge_increment
      - id: is_element_durability_mutable
        type: u1
        if: ks__has_field_is_element_durability_mutable
      - id: force_trigger_burning
        type: u1
        if: ks__has_field_force_trigger_burning
      - id: override_weapon_element
        type: u1
        if: ks__has_field_override_weapon_element
      - id: think_interval
        type: aux_types::dynamic_float
        if: ks__has_field_think_interval
      - id: modifier_mixins
        type: ks__array_of__ks__disp__config_ability_mixin__length_u
        if: ks__has_field_modifier_mixins
      - id: trim_think_interval
        type: u1
        if: ks__has_field_trim_think_interval
      - id: properties
        type: ks__dict_of__aux_types__string_aux_types__dynamic_float
        if: ks__has_field_properties
      - id: state
        type: ks__enum__ability_state
        if: ks__has_field_state
      - id: state_option
        type: config_ability_state_option
        if: ks__has_field_state_option
      - id: mute_state_display_effect
        type: u1
        if: ks__has_field_mute_state_display_effect
      - id: apply_attacker_witch_time_ratio
        type: u1
        if: ks__has_field_apply_attacker_witch_time_ratio
      - id: on_added
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_added
      - id: on_removed
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_removed
      - id: on_being_hit
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_being_hit
      - id: on_attack_landed
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_attack_landed
      - id: on_hitting_other
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_hitting_other
      - id: on_think_interval
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_think_interval
      - id: on_think_interval_is_fixed_update
        type: u1
        if: ks__has_field_on_think_interval_is_fixed_update
      - id: on_kill
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_kill
      - id: on_crash
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_crash
      - id: on_avatar_in
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_avatar_in
      - id: on_avatar_out
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_avatar_out
      - id: on_vehicle_in
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_vehicle_in
      - id: on_vehicle_out
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_vehicle_out
      - id: on_zone_enter
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_zone_enter
      - id: on_zone_exit
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_zone_exit
      - id: on_reconnect
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_reconnect
      - id: on_change_authority
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_change_authority
      - id: forbidden_entities
        type: ks__array_of__ks__enum__entity_type__length_u
        if: ks__has_field_forbidden_entities
      - id: fire_event_when_apply
        type: u1
        if: ks__has_field_fire_event_when_apply
      - id: is_durability_global
        type: u1
        if: ks__has_field_is_durability_global
      - id: tick_think_interval_after_die
        type: u1
        if: ks__has_field_tick_think_interval_after_die
      - id: think_interval_ignore_time_scale
        type: u1
        if: ks__has_field_think_interval_ignore_time_scale
      - id: reduce_durablity_ignore_time_scale
        type: u1
        if: ks__has_field_reduce_durablity_ignore_time_scale
      - id: is_limited_properties
        type: u1
        if: ks__has_field_is_limited_properties
      - id: force_sync_to_remote
        type: u1
        if: ks__has_field_force_sync_to_remote
      - id: buff_id
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_buff_id
      - id: retain_when_durability_is_zero
        type: u1
        if: ks__has_field_retain_when_durability_is_zero
    instances:
      ks__has_field_time_scale: # Field №0
        value: (ks__bit_field.value & 0b00000000000000000000000000000000000000000000000001) != 0
      ks__has_field_stacking: # Field №1
        value: (ks__bit_field.value & 0b00000000000000000000000000000000000000000000000010) != 0
      ks__has_field_stacking_option: # Field №2
        value: (ks__bit_field.value & 0b00000000000000000000000000000000000000000000000100) != 0
      ks__has_field_is_buff: # Field №3
        value: (ks__bit_field.value & 0b00000000000000000000000000000000000000000000001000) != 0
      ks__has_field_is_debuff: # Field №4
        value: (ks__bit_field.value & 0b00000000000000000000000000000000000000000000010000) != 0
      ks__has_field_modifier_name: # Field №5
        value: (ks__bit_field.value & 0b00000000000000000000000000000000000000000000100000) != 0
      ks__has_field_is_unique: # Field №6
        value: (ks__bit_field.value & 0b00000000000000000000000000000000000000000001000000) != 0
      ks__has_field_duration: # Field №7
        value: (ks__bit_field.value & 0b00000000000000000000000000000000000000000010000000) != 0
      ks__has_field_element_type: # Field №8
        value: (ks__bit_field.value & 0b00000000000000000000000000000000000000000100000000) != 0
      ks__has_field_element_durability: # Field №9
        value: (ks__bit_field.value & 0b00000000000000000000000000000000000000001000000000) != 0
      ks__has_field_max_element_durability: # Field №10
        value: (ks__bit_field.value & 0b00000000000000000000000000000000000000010000000000) != 0
      ks__has_field_purge_increment: # Field №11
        value: (ks__bit_field.value & 0b00000000000000000000000000000000000000100000000000) != 0
      ks__has_field_is_element_durability_mutable: # Field №12
        value: (ks__bit_field.value & 0b00000000000000000000000000000000000001000000000000) != 0
      ks__has_field_force_trigger_burning: # Field №13
        value: (ks__bit_field.value & 0b00000000000000000000000000000000000010000000000000) != 0
      ks__has_field_override_weapon_element: # Field №14
        value: (ks__bit_field.value & 0b00000000000000000000000000000000000100000000000000) != 0
      ks__has_field_think_interval: # Field №15
        value: (ks__bit_field.value & 0b00000000000000000000000000000000001000000000000000) != 0
      ks__has_field_modifier_mixins: # Field №16
        value: (ks__bit_field.value & 0b00000000000000000000000000000000010000000000000000) != 0
      ks__has_field_trim_think_interval: # Field №17
        value: (ks__bit_field.value & 0b00000000000000000000000000000000100000000000000000) != 0
      ks__has_field_properties: # Field №18
        value: (ks__bit_field.value & 0b00000000000000000000000000000001000000000000000000) != 0
      ks__has_field_state: # Field №19
        value: (ks__bit_field.value & 0b00000000000000000000000000000010000000000000000000) != 0
      ks__has_field_state_option: # Field №20
        value: (ks__bit_field.value & 0b00000000000000000000000000000100000000000000000000) != 0
      ks__has_field_mute_state_display_effect: # Field №21
        value: (ks__bit_field.value & 0b00000000000000000000000000001000000000000000000000) != 0
      ks__has_field_apply_attacker_witch_time_ratio: # Field №22
        value: (ks__bit_field.value & 0b00000000000000000000000000010000000000000000000000) != 0
      ks__has_field_on_added: # Field №23
        value: (ks__bit_field.value & 0b00000000000000000000000000100000000000000000000000) != 0
      ks__has_field_on_removed: # Field №24
        value: (ks__bit_field.value & 0b00000000000000000000000001000000000000000000000000) != 0
      ks__has_field_on_being_hit: # Field №25
        value: (ks__bit_field.value & 0b00000000000000000000000010000000000000000000000000) != 0
      ks__has_field_on_attack_landed: # Field №26
        value: (ks__bit_field.value & 0b00000000000000000000000100000000000000000000000000) != 0
      ks__has_field_on_hitting_other: # Field №27
        value: (ks__bit_field.value & 0b00000000000000000000001000000000000000000000000000) != 0
      ks__has_field_on_think_interval: # Field №28
        value: (ks__bit_field.value & 0b00000000000000000000010000000000000000000000000000) != 0
      ks__has_field_on_think_interval_is_fixed_update: # Field №29
        value: (ks__bit_field.value & 0b00000000000000000000100000000000000000000000000000) != 0
      ks__has_field_on_kill: # Field №30
        value: (ks__bit_field.value & 0b00000000000000000001000000000000000000000000000000) != 0
      ks__has_field_on_crash: # Field №31
        value: (ks__bit_field.value & 0b00000000000000000010000000000000000000000000000000) != 0
      ks__has_field_on_avatar_in: # Field №32
        value: (ks__bit_field.value & 0b00000000000000000100000000000000000000000000000000) != 0
      ks__has_field_on_avatar_out: # Field №33
        value: (ks__bit_field.value & 0b00000000000000001000000000000000000000000000000000) != 0
      ks__has_field_on_vehicle_in: # Field №34
        value: (ks__bit_field.value & 0b00000000000000010000000000000000000000000000000000) != 0
      ks__has_field_on_vehicle_out: # Field №35
        value: (ks__bit_field.value & 0b00000000000000100000000000000000000000000000000000) != 0
      ks__has_field_on_zone_enter: # Field №36
        value: (ks__bit_field.value & 0b00000000000001000000000000000000000000000000000000) != 0
      ks__has_field_on_zone_exit: # Field №37
        value: (ks__bit_field.value & 0b00000000000010000000000000000000000000000000000000) != 0
      ks__has_field_on_reconnect: # Field №38
        value: (ks__bit_field.value & 0b00000000000100000000000000000000000000000000000000) != 0
      ks__has_field_on_change_authority: # Field №39
        value: (ks__bit_field.value & 0b00000000001000000000000000000000000000000000000000) != 0
      ks__has_field_forbidden_entities: # Field №40
        value: (ks__bit_field.value & 0b00000000010000000000000000000000000000000000000000) != 0
      ks__has_field_fire_event_when_apply: # Field №41
        value: (ks__bit_field.value & 0b00000000100000000000000000000000000000000000000000) != 0
      ks__has_field_is_durability_global: # Field №42
        value: (ks__bit_field.value & 0b00000001000000000000000000000000000000000000000000) != 0
      ks__has_field_tick_think_interval_after_die: # Field №43
        value: (ks__bit_field.value & 0b00000010000000000000000000000000000000000000000000) != 0
      ks__has_field_think_interval_ignore_time_scale: # Field №44
        value: (ks__bit_field.value & 0b00000100000000000000000000000000000000000000000000) != 0
      ks__has_field_reduce_durablity_ignore_time_scale: # Field №45
        value: (ks__bit_field.value & 0b00001000000000000000000000000000000000000000000000) != 0
      ks__has_field_is_limited_properties: # Field №46
        value: (ks__bit_field.value & 0b00010000000000000000000000000000000000000000000000) != 0
      ks__has_field_force_sync_to_remote: # Field №47
        value: (ks__bit_field.value & 0b00100000000000000000000000000000000000000000000000) != 0
      ks__has_field_buff_id: # Field №48
        value: (ks__bit_field.value & 0b01000000000000000000000000000000000000000000000000) != 0
      ks__has_field_retain_when_durability_is_zero: # Field №49
        value: (ks__bit_field.value & 0b10000000000000000000000000000000000000000000000000) != 0
  ks__kvp_of_dict__aux_types__string_config_ability_modifier:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: config_ability_modifier
  ks__dict_of__aux_types__string_config_ability_modifier:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_config_ability_modifier
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__aux_types__string_config_ability_property_entry:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: config_ability_property_entry
  ks__dict_of__aux_types__string_config_ability_property_entry:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_config_ability_property_entry
        repeat: expr
        repeat-expr: length.value
  config_ability:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: ability_name
        type: aux_types::string
        if: ks__has_field_ability_name
      - id: ability_mixins
        type: ks__array_of__ks__disp__config_ability_mixin__length_u
        if: ks__has_field_ability_mixins
      - id: ability_specials
        type: ks__dict_of__aux_types__string_aux_types__dynamic_argument
        if: ks__has_field_ability_specials
      - id: modifiers
        type: ks__dict_of__aux_types__string_config_ability_modifier
        if: ks__has_field_modifiers
      - id: default_modifier
        type: config_ability_modifier
        if: ks__has_field_default_modifier
      - id: on_added
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_added
      - id: on_removed
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_removed
      - id: on_ability_start
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_ability_start
      - id: on_kill
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_kill
      - id: on_field_enter
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_field_enter
      - id: on_field_exit
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_field_exit
      - id: on_attach
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_attach
      - id: on_detach
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_detach
      - id: on_avatar_in
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_avatar_in
      - id: on_avatar_out
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_avatar_out
      - id: on_vehicle_in
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_vehicle_in
      - id: on_vehicle_out
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_vehicle_out
      - id: on_trigger_avatar_ray
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_trigger_avatar_ray
      - id: on_zone_enter
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_zone_enter
      - id: on_zone_exit
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_zone_exit
      - id: is_dynamic_ability
        type: u1
        if: ks__has_field_is_dynamic_ability
      - id: ability_defined_properties
        type: ks__dict_of__aux_types__string_config_ability_property_entry
        if: ks__has_field_ability_defined_properties
    instances:
      ks__has_field_ability_name: # Field №0
        value: (ks__bit_field.value & 0b0000000000000000000001) != 0
      ks__has_field_ability_mixins: # Field №1
        value: (ks__bit_field.value & 0b0000000000000000000010) != 0
      ks__has_field_ability_specials: # Field №2
        value: (ks__bit_field.value & 0b0000000000000000000100) != 0
      ks__has_field_modifiers: # Field №3
        value: (ks__bit_field.value & 0b0000000000000000001000) != 0
      ks__has_field_default_modifier: # Field №4
        value: (ks__bit_field.value & 0b0000000000000000010000) != 0
      ks__has_field_on_added: # Field №5
        value: (ks__bit_field.value & 0b0000000000000000100000) != 0
      ks__has_field_on_removed: # Field №6
        value: (ks__bit_field.value & 0b0000000000000001000000) != 0
      ks__has_field_on_ability_start: # Field №7
        value: (ks__bit_field.value & 0b0000000000000010000000) != 0
      ks__has_field_on_kill: # Field №8
        value: (ks__bit_field.value & 0b0000000000000100000000) != 0
      ks__has_field_on_field_enter: # Field №9
        value: (ks__bit_field.value & 0b0000000000001000000000) != 0
      ks__has_field_on_field_exit: # Field №10
        value: (ks__bit_field.value & 0b0000000000010000000000) != 0
      ks__has_field_on_attach: # Field №11
        value: (ks__bit_field.value & 0b0000000000100000000000) != 0
      ks__has_field_on_detach: # Field №12
        value: (ks__bit_field.value & 0b0000000001000000000000) != 0
      ks__has_field_on_avatar_in: # Field №13
        value: (ks__bit_field.value & 0b0000000010000000000000) != 0
      ks__has_field_on_avatar_out: # Field №14
        value: (ks__bit_field.value & 0b0000000100000000000000) != 0
      ks__has_field_on_vehicle_in: # Field №15
        value: (ks__bit_field.value & 0b0000001000000000000000) != 0
      ks__has_field_on_vehicle_out: # Field №16
        value: (ks__bit_field.value & 0b0000010000000000000000) != 0
      ks__has_field_on_trigger_avatar_ray: # Field №17
        value: (ks__bit_field.value & 0b0000100000000000000000) != 0
      ks__has_field_on_zone_enter: # Field №18
        value: (ks__bit_field.value & 0b0001000000000000000000) != 0
      ks__has_field_on_zone_exit: # Field №19
        value: (ks__bit_field.value & 0b0010000000000000000000) != 0
      ks__has_field_is_dynamic_ability: # Field №20
        value: (ks__bit_field.value & 0b0100000000000000000000) != 0
      ks__has_field_ability_defined_properties: # Field №21
        value: (ks__bit_field.value & 0b1000000000000000000000) != 0
  apply_modifier:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: modifier_name
        type: aux_types::string
        if: ks__has_field_modifier_name
    instances:
      ks__has_field_modifier_name: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  native_vector_native_ref:
    seq: []
    instances: {}
  config_base_gadget_trigger_action:
    seq: []
    instances: {}
  config_gadget_do_attack_event:
    seq:
      - id: ks__base
        type: config_base_gadget_trigger_action
      - id: ks__bit_field
        type: u1
      - id: attack_event
        type: aux_types::string
        if: ks__has_field_attack_event
    instances:
      ks__has_field_attack_event: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_gadget_trigger_ability:
    seq:
      - id: ks__base
        type: config_base_gadget_trigger_action
      - id: ks__bit_field
        type: u1
      - id: ability_name
        type: aux_types::string
        if: ks__has_field_ability_name
    instances:
      ks__has_field_ability_name: # Field №0
        value: (ks__bit_field & 0b1) != 0
  dynamic_float_vector:
    seq:
      - id: ks__bit_field
        type: u1
      - id: x
        type: aux_types::dynamic_float
        if: ks__has_field_x
      - id: y
        type: aux_types::dynamic_float
        if: ks__has_field_y
      - id: z
        type: aux_types::dynamic_float
        if: ks__has_field_z
    instances:
      ks__has_field_x: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_y: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_z: # Field №2
        value: (ks__bit_field & 0b100) != 0
  born_random:
    seq: []
    instances: {}
  ks__enum__direction_angle_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: direction_angle_type
  config_born_direction_type:
    seq:
      - id: ks__bit_field
        type: u1
      - id: angle_offset
        type: vector
        if: ks__has_field_angle_offset
      - id: angle_offset_correct
        type: vector
        if: ks__has_field_angle_offset_correct
      - id: use_correct_dir
        type: u1
        if: ks__has_field_use_correct_dir
      - id: random_angle_hor
        type: f4
        if: ks__has_field_random_angle_hor
      - id: random_angle_ver
        type: f4
        if: ks__has_field_random_angle_ver
      - id: max_angle_type
        type: ks__enum__direction_angle_type
        if: ks__has_field_max_angle_type
      - id: max_angle
        type: f4
        if: ks__has_field_max_angle
    instances:
      ks__has_field_angle_offset: # Field №0
        value: (ks__bit_field & 0b0000001) != 0
      ks__has_field_angle_offset_correct: # Field №1
        value: (ks__bit_field & 0b0000010) != 0
      ks__has_field_use_correct_dir: # Field №2
        value: (ks__bit_field & 0b0000100) != 0
      ks__has_field_random_angle_hor: # Field №3
        value: (ks__bit_field & 0b0001000) != 0
      ks__has_field_random_angle_ver: # Field №4
        value: (ks__bit_field & 0b0010000) != 0
      ks__has_field_max_angle_type: # Field №5
        value: (ks__bit_field & 0b0100000) != 0
      ks__has_field_max_angle: # Field №6
        value: (ks__bit_field & 0b1000000) != 0
  config_born_type:
    seq:
      - id: ks__bit_field
        type: u1
      - id: offset
        type: dynamic_float_vector
        if: ks__has_field_offset
      - id: born_random
        type: ks__disp__born_random
        if: ks__has_field_born_random
      - id: on_ground
        type: u1
        if: ks__has_field_on_ground
      - id: on_ground_ignore_water
        type: u1
        if: ks__has_field_on_ground_ignore_water
      - id: on_ground_raycast_up_dist
        type: f4
        if: ks__has_field_on_ground_raycast_up_dist
      - id: direction
        type: ks__disp__config_born_direction_type
        if: ks__has_field_direction
      - id: along_ground
        type: u1
        if: ks__has_field_along_ground
      - id: use_rotation
        type: u1
        if: ks__has_field_use_rotation
    instances:
      ks__has_field_offset: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_born_random: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_on_ground: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_on_ground_ignore_water: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_on_ground_raycast_up_dist: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_direction: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_along_ground: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_use_rotation: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
  ks__enum__strike_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: strike_type
  ks__enum__attack_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: attack_type
  config_attack_property:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: damage_percentage
        type: aux_types::dynamic_float
        if: ks__has_field_damage_percentage
      - id: damage_percentage_ratio
        type: aux_types::dynamic_float
        if: ks__has_field_damage_percentage_ratio
      - id: element_type
        type: ks__enum__element_type
        if: ks__has_field_element_type
      - id: element_rank
        type: f4
        if: ks__has_field_element_rank
      - id: element_durability
        type: aux_types::dynamic_float
        if: ks__has_field_element_durability
      - id: override_by_weapon
        type: u1
        if: ks__has_field_override_by_weapon
      - id: ignore_attacker_property
        type: u1
        if: ks__has_field_ignore_attacker_property
      - id: strike_type
        type: ks__enum__strike_type
        if: ks__has_field_strike_type
      - id: en_break
        type: f4
        if: ks__has_field_en_break
      - id: en_head_break
        type: f4
        if: ks__has_field_en_head_break
      - id: attack_type
        type: ks__enum__attack_type
        if: ks__has_field_attack_type
      - id: damage_extra
        type: aux_types::dynamic_float
        if: ks__has_field_damage_extra
      - id: bonus_critical
        type: aux_types::dynamic_float
        if: ks__has_field_bonus_critical
      - id: bonus_critical_hurt
        type: aux_types::dynamic_float
        if: ks__has_field_bonus_critical_hurt
      - id: ignore_level_diff
        type: u1
        if: ks__has_field_ignore_level_diff
      - id: true_damage
        type: u1
        if: ks__has_field_true_damage
      - id: ignore_modify_damage
        type: u1
        if: ks__has_field_ignore_modify_damage
    instances:
      ks__has_field_damage_percentage: # Field №0
        value: (ks__bit_field.value & 0b00000000000000001) != 0
      ks__has_field_damage_percentage_ratio: # Field №1
        value: (ks__bit_field.value & 0b00000000000000010) != 0
      ks__has_field_element_type: # Field №2
        value: (ks__bit_field.value & 0b00000000000000100) != 0
      ks__has_field_element_rank: # Field №3
        value: (ks__bit_field.value & 0b00000000000001000) != 0
      ks__has_field_element_durability: # Field №4
        value: (ks__bit_field.value & 0b00000000000010000) != 0
      ks__has_field_override_by_weapon: # Field №5
        value: (ks__bit_field.value & 0b00000000000100000) != 0
      ks__has_field_ignore_attacker_property: # Field №6
        value: (ks__bit_field.value & 0b00000000001000000) != 0
      ks__has_field_strike_type: # Field №7
        value: (ks__bit_field.value & 0b00000000010000000) != 0
      ks__has_field_en_break: # Field №8
        value: (ks__bit_field.value & 0b00000000100000000) != 0
      ks__has_field_en_head_break: # Field №9
        value: (ks__bit_field.value & 0b00000001000000000) != 0
      ks__has_field_attack_type: # Field №10
        value: (ks__bit_field.value & 0b00000010000000000) != 0
      ks__has_field_damage_extra: # Field №11
        value: (ks__bit_field.value & 0b00000100000000000) != 0
      ks__has_field_bonus_critical: # Field №12
        value: (ks__bit_field.value & 0b00001000000000000) != 0
      ks__has_field_bonus_critical_hurt: # Field №13
        value: (ks__bit_field.value & 0b00010000000000000) != 0
      ks__has_field_ignore_level_diff: # Field №14
        value: (ks__bit_field.value & 0b00100000000000000) != 0
      ks__has_field_true_damage: # Field №15
        value: (ks__bit_field.value & 0b01000000000000000) != 0
      ks__has_field_ignore_modify_damage: # Field №16
        value: (ks__bit_field.value & 0b10000000000000000) != 0
  ks__enum__hit_level:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: hit_level
  config_hit_impulse:
    seq:
      - id: ks__bit_field
        type: u1
      - id: hit_level
        type: ks__enum__hit_level
        if: ks__has_field_hit_level
      - id: hit_impulse_x
        type: aux_types::dynamic_float
        if: ks__has_field_hit_impulse_x
      - id: hit_impulse_y
        type: aux_types::dynamic_float
        if: ks__has_field_hit_impulse_y
    instances:
      ks__has_field_hit_level: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_hit_impulse_x: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_hit_impulse_y: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__enum__retreat_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: retreat_type
  config_hit_pattern:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: on_hit_effect_name
        type: aux_types::string
        if: ks__has_field_on_hit_effect_name
      - id: hit_level
        type: ks__enum__hit_level
        if: ks__has_field_hit_level
      - id: hit_impulse_x
        type: aux_types::dynamic_float
        if: ks__has_field_hit_impulse_x
      - id: hit_impulse_y
        type: aux_types::dynamic_float
        if: ks__has_field_hit_impulse_y
      - id: hit_impulse_type
        type: aux_types::string
        if: ks__has_field_hit_impulse_type
      - id: override_hit_impulse
        type: config_hit_impulse
        if: ks__has_field_override_hit_impulse
      - id: retreat_type
        type: ks__enum__retreat_type
        if: ks__has_field_retreat_type
      - id: hit_halt_time
        type: f4
        if: ks__has_field_hit_halt_time
      - id: hit_halt_time_scale
        type: f4
        if: ks__has_field_hit_halt_time_scale
      - id: can_be_defence_halt
        type: u1
        if: ks__has_field_can_be_defence_halt
      - id: mute_hit_text
        type: u1
        if: ks__has_field_mute_hit_text
      - id: recurring
        type: u1
        if: ks__has_field_recurring
      - id: force_retreat
        type: u1
        if: ks__has_field_force_retreat
    instances:
      ks__has_field_on_hit_effect_name: # Field №0
        value: (ks__bit_field.value & 0b0000000000001) != 0
      ks__has_field_hit_level: # Field №1
        value: (ks__bit_field.value & 0b0000000000010) != 0
      ks__has_field_hit_impulse_x: # Field №2
        value: (ks__bit_field.value & 0b0000000000100) != 0
      ks__has_field_hit_impulse_y: # Field №3
        value: (ks__bit_field.value & 0b0000000001000) != 0
      ks__has_field_hit_impulse_type: # Field №4
        value: (ks__bit_field.value & 0b0000000010000) != 0
      ks__has_field_override_hit_impulse: # Field №5
        value: (ks__bit_field.value & 0b0000000100000) != 0
      ks__has_field_retreat_type: # Field №6
        value: (ks__bit_field.value & 0b0000001000000) != 0
      ks__has_field_hit_halt_time: # Field №7
        value: (ks__bit_field.value & 0b0000010000000) != 0
      ks__has_field_hit_halt_time_scale: # Field №8
        value: (ks__bit_field.value & 0b0000100000000) != 0
      ks__has_field_can_be_defence_halt: # Field №9
        value: (ks__bit_field.value & 0b0001000000000) != 0
      ks__has_field_mute_hit_text: # Field №10
        value: (ks__bit_field.value & 0b0010000000000) != 0
      ks__has_field_recurring: # Field №11
        value: (ks__bit_field.value & 0b0100000000000) != 0
      ks__has_field_force_retreat: # Field №12
        value: (ks__bit_field.value & 0b1000000000000) != 0
  config_bullet_wane:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: wane_delay
        type: f4
        if: ks__has_field_wane_delay
      - id: damage_wane_interval
        type: f4
        if: ks__has_field_damage_wane_interval
      - id: damage_wane_ratio
        type: f4
        if: ks__has_field_damage_wane_ratio
      - id: damage_wane_min_ratio
        type: f4
        if: ks__has_field_damage_wane_min_ratio
      - id: element_durability_wane_interval
        type: f4
        if: ks__has_field_element_durability_wane_interval
      - id: element_durability_wane_ratio
        type: f4
        if: ks__has_field_element_durability_wane_ratio
      - id: element_durability_wane_min_ratio
        type: f4
        if: ks__has_field_element_durability_wane_min_ratio
      - id: hit_level_wane_interval
        type: f4
        if: ks__has_field_hit_level_wane_interval
      - id: hit_level_wane_min
        type: ks__enum__hit_level
        if: ks__has_field_hit_level_wane_min
    instances:
      ks__has_field_wane_delay: # Field №0
        value: (ks__bit_field.value & 0b000000001) != 0
      ks__has_field_damage_wane_interval: # Field №1
        value: (ks__bit_field.value & 0b000000010) != 0
      ks__has_field_damage_wane_ratio: # Field №2
        value: (ks__bit_field.value & 0b000000100) != 0
      ks__has_field_damage_wane_min_ratio: # Field №3
        value: (ks__bit_field.value & 0b000001000) != 0
      ks__has_field_element_durability_wane_interval: # Field №4
        value: (ks__bit_field.value & 0b000010000) != 0
      ks__has_field_element_durability_wane_ratio: # Field №5
        value: (ks__bit_field.value & 0b000100000) != 0
      ks__has_field_element_durability_wane_min_ratio: # Field №6
        value: (ks__bit_field.value & 0b001000000) != 0
      ks__has_field_hit_level_wane_interval: # Field №7
        value: (ks__bit_field.value & 0b010000000) != 0
      ks__has_field_hit_level_wane_min: # Field №8
        value: (ks__bit_field.value & 0b100000000) != 0
  ks__enum__can_be_modified_by:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: can_be_modified_by
  config_attack_info:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: attack_tag
        type: aux_types::string
        if: ks__has_field_attack_tag
      - id: attenuation_tag
        type: aux_types::string
        if: ks__has_field_attenuation_tag
      - id: attenuation_group
        type: aux_types::string
        if: ks__has_field_attenuation_group
      - id: attack_property
        type: config_attack_property
        if: ks__has_field_attack_property
      - id: hit_pattern
        type: config_hit_pattern
        if: ks__has_field_hit_pattern
      - id: can_hit_head
        type: u1
        if: ks__has_field_can_hit_head
      - id: hit_head_pattern
        type: config_hit_pattern
        if: ks__has_field_hit_head_pattern
      - id: force_camera_shake
        type: u1
        if: ks__has_field_force_camera_shake
      - id: camera_shake
        type: config_camera_shake
        if: ks__has_field_camera_shake
      - id: bullet_wane
        type: config_bullet_wane
        if: ks__has_field_bullet_wane
      - id: can_be_modified_by
        type: ks__enum__can_be_modified_by
        if: ks__has_field_can_be_modified_by
    instances:
      ks__has_field_attack_tag: # Field №0
        value: (ks__bit_field.value & 0b00000000001) != 0
      ks__has_field_attenuation_tag: # Field №1
        value: (ks__bit_field.value & 0b00000000010) != 0
      ks__has_field_attenuation_group: # Field №2
        value: (ks__bit_field.value & 0b00000000100) != 0
      ks__has_field_attack_property: # Field №3
        value: (ks__bit_field.value & 0b00000001000) != 0
      ks__has_field_hit_pattern: # Field №4
        value: (ks__bit_field.value & 0b00000010000) != 0
      ks__has_field_can_hit_head: # Field №5
        value: (ks__bit_field.value & 0b00000100000) != 0
      ks__has_field_hit_head_pattern: # Field №6
        value: (ks__bit_field.value & 0b00001000000) != 0
      ks__has_field_force_camera_shake: # Field №7
        value: (ks__bit_field.value & 0b00010000000) != 0
      ks__has_field_camera_shake: # Field №8
        value: (ks__bit_field.value & 0b00100000000) != 0
      ks__has_field_bullet_wane: # Field №9
        value: (ks__bit_field.value & 0b01000000000) != 0
      ks__has_field_can_be_modified_by: # Field №10
        value: (ks__bit_field.value & 0b10000000000) != 0
  config_gadget_damage_by_attack_value:
    seq:
      - id: ks__base
        type: config_base_gadget_trigger_action
      - id: ks__bit_field
        type: u1
      - id: born
        type: ks__disp__config_born_type
        if: ks__has_field_born
      - id: attack_info
        type: config_attack_info
        if: ks__has_field_attack_info
    instances:
      ks__has_field_born: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_attack_info: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__enum__gadget_state:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: gadget_state
  config_gadget_predicate:
    seq: []
    instances: {}
  config_gadget_state_action:
    seq:
      - id: ks__bit_field
        type: u1
      - id: gadget_state
        type: ks__enum__gadget_state
        if: ks__has_field_gadget_state
      - id: predicate
        type: ks__disp__config_gadget_predicate
        if: ks__has_field_predicate
    instances:
      ks__has_field_gadget_state: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_predicate: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_gadget_state_fire_effect:
    seq:
      - id: ks__base
        type: config_gadget_state_action
      - id: ks__bit_field
        type: u1
      - id: root_name
        type: aux_types::string
        if: ks__has_field_root_name
      - id: effect_pattern
        type: aux_types::string
        if: ks__has_field_effect_pattern
    instances:
      ks__has_field_root_name: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_effect_pattern: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      gadget_state:
        value: ks__base.gadget_state
      predicate:
        value: ks__base.predicate
  config_gadget_state_set_anim_trigger:
    seq:
      - id: ks__base
        type: config_gadget_state_action
      - id: ks__bit_field
        type: u1
      - id: trigger_id
        type: aux_types::string
        if: ks__has_field_trigger_id
    instances:
      ks__has_field_trigger_id: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      gadget_state:
        value: ks__base.gadget_state
      predicate:
        value: ks__base.predicate
  config_gadget_state_set_anim_int:
    seq:
      - id: ks__base
        type: config_gadget_state_action
      - id: ks__bit_field
        type: u1
      - id: int_id
        type: aux_types::string
        if: ks__has_field_int_id
      - id: value
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_value
      - id: sync_state
        type: u1
        if: ks__has_field_sync_state
    instances:
      ks__has_field_int_id: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_value: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_sync_state: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      gadget_state:
        value: ks__base.gadget_state
      predicate:
        value: ks__base.predicate
  config_gadget_state_fire_ai_sound:
    seq:
      - id: ks__base
        type: config_gadget_state_action
      - id: ks__bit_field
        type: u1
      - id: volume
        type: f4
        if: ks__has_field_volume
    instances:
      ks__has_field_volume: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      gadget_state:
        value: ks__base.gadget_state
      predicate:
        value: ks__base.predicate
  config_gadget_state_enable_gadget_intee:
    seq:
      - id: ks__base
        type: config_gadget_state_action
      - id: ks__bit_field
        type: u1
      - id: enable
        type: u1
        if: ks__has_field_enable
    instances:
      ks__has_field_enable: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      gadget_state:
        value: ks__base.gadget_state
      predicate:
        value: ks__base.predicate
  config_gadget_state_enable_action:
    seq:
      - id: ks__base
        type: config_gadget_state_action
      - id: ks__bit_field
        type: u1
      - id: enable
        type: u1
        if: ks__has_field_enable
    instances:
      ks__has_field_enable: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      gadget_state:
        value: ks__base.gadget_state
      predicate:
        value: ks__base.predicate
  ks__enum__animator_param_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: animator_param_type
  config_gadget_state_send_effect_trigger:
    seq:
      - id: ks__base
        type: config_gadget_state_action
      - id: ks__bit_field
        type: u1
      - id: parameter
        type: aux_types::string
        if: ks__has_field_parameter
      - id: type
        type: ks__enum__animator_param_type
        if: ks__has_field_type
      - id: value
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_value
      - id: effect_pattern
        type: aux_types::string
        if: ks__has_field_effect_pattern
    instances:
      ks__has_field_parameter: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_type: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_value: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_effect_pattern: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      gadget_state:
        value: ks__base.gadget_state
      predicate:
        value: ks__base.predicate
  config_predicate_by_time:
    seq:
      - id: ks__base
        type: config_gadget_predicate
      - id: ks__bit_field
        type: u1
      - id: is_night
        type: u1
        if: ks__has_field_is_night
    instances:
      ks__has_field_is_night: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_predicate_by_platform:
    seq:
      - id: ks__base
        type: config_gadget_predicate
      - id: ks__bit_field
        type: u1
      - id: is_start
        type: u1
        if: ks__has_field_is_start
    instances:
      ks__has_field_is_start: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_predicate_by_interact:
    seq:
      - id: ks__base
        type: config_gadget_predicate
      - id: ks__bit_field
        type: u1
      - id: is_enable_interact
        type: u1
        if: ks__has_field_is_enable_interact
    instances:
      ks__has_field_is_enable_interact: # Field №0
        value: (ks__bit_field & 0b1) != 0
  ks__enum__volatile_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: volatile_type
  config_graphics_volatile_setting:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: frame_rate_grade
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_frame_rate_grade
      - id: render_resolution_grade
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_render_resolution_grade
      - id: shadow_quality_grade
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_shadow_quality_grade
      - id: postprocess_effect_grade
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_postprocess_effect_grade
      - id: particle_effect_grade
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_particle_effect_grade
      - id: comprehensive_quality_grade
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_comprehensive_quality_grade
      - id: v_sync
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_v_sync
      - id: anti_aliasing
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_anti_aliasing
      - id: volumetric_fog
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_volumetric_fog
      - id: reflection
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_reflection
      - id: motion_blur
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_motion_blur
      - id: bloom
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_bloom
      - id: crowd_density
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_crowd_density
      - id: obsolete_online_effect
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_obsolete_online_effect
      - id: screen_subsurface_scattering
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_screen_subsurface_scattering
      - id: online_effect
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_online_effect
    instances:
      ks__has_field_frame_rate_grade: # Field №0
        value: (ks__bit_field.value & 0b0000000000000001) != 0
      ks__has_field_render_resolution_grade: # Field №1
        value: (ks__bit_field.value & 0b0000000000000010) != 0
      ks__has_field_shadow_quality_grade: # Field №2
        value: (ks__bit_field.value & 0b0000000000000100) != 0
      ks__has_field_postprocess_effect_grade: # Field №3
        value: (ks__bit_field.value & 0b0000000000001000) != 0
      ks__has_field_particle_effect_grade: # Field №4
        value: (ks__bit_field.value & 0b0000000000010000) != 0
      ks__has_field_comprehensive_quality_grade: # Field №5
        value: (ks__bit_field.value & 0b0000000000100000) != 0
      ks__has_field_v_sync: # Field №6
        value: (ks__bit_field.value & 0b0000000001000000) != 0
      ks__has_field_anti_aliasing: # Field №7
        value: (ks__bit_field.value & 0b0000000010000000) != 0
      ks__has_field_volumetric_fog: # Field №8
        value: (ks__bit_field.value & 0b0000000100000000) != 0
      ks__has_field_reflection: # Field №9
        value: (ks__bit_field.value & 0b0000001000000000) != 0
      ks__has_field_motion_blur: # Field №10
        value: (ks__bit_field.value & 0b0000010000000000) != 0
      ks__has_field_bloom: # Field №11
        value: (ks__bit_field.value & 0b0000100000000000) != 0
      ks__has_field_crowd_density: # Field №12
        value: (ks__bit_field.value & 0b0001000000000000) != 0
      ks__has_field_obsolete_online_effect: # Field №13
        value: (ks__bit_field.value & 0b0010000000000000) != 0
      ks__has_field_screen_subsurface_scattering: # Field №14
        value: (ks__bit_field.value & 0b0100000000000000) != 0
      ks__has_field_online_effect: # Field №15
        value: (ks__bit_field.value & 0b1000000000000000) != 0
  ks__kvp_of_dict__ks__enum__volatile_type_config_graphics_volatile_setting:
    seq:
      - id: key
        type: ks__enum__volatile_type
      - id: value
        type: config_graphics_volatile_setting
  ks__dict_of__ks__enum__volatile_type_config_graphics_volatile_setting:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__ks__enum__volatile_type_config_graphics_volatile_setting
        repeat: expr
        repeat-expr: length.value
  ks__enum__light_level:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: light_level
  config_graphics_requirement:
    seq:
      - id: ks__bit_field
        type: u1
      - id: info
        type: aux_types::string
        if: ks__has_field_info
      - id: values
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_values
    instances:
      ks__has_field_info: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_values: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__array_of__config_graphics_requirement__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_graphics_requirement
        repeat: expr
        repeat-expr: length.value
  config_render_resolution:
    seq:
      - id: ks__bit_field
        type: u1
      - id: width
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_width
      - id: height
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_height
      - id: second_width
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_second_width
      - id: second_height
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_second_height
      - id: perf_cost_ratio
        type: f4
        if: ks__has_field_perf_cost_ratio
    instances:
      ks__has_field_width: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_height: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_second_width: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_second_height: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_perf_cost_ratio: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  ks__array_of__config_render_resolution__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_render_resolution
        repeat: expr
        repeat-expr: length.value
  ks__enum__grass_quality_level:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: grass_quality_level
  config_graphics_recommend_setting:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: performance_quality
        type: aux_types::string
        if: ks__has_field_performance_quality
      - id: virtual_joystick_radius
        type: f4
        if: ks__has_field_virtual_joystick_radius
      - id: level_streaming_config
        type: aux_types::string
        if: ks__has_field_level_streaming_config
      - id: ui_cache_config
        type: aux_types::string
        if: ks__has_field_ui_cache_config
      - id: light_on_level
        type: ks__enum__light_level
        if: ks__has_field_light_on_level
      - id: requirements
        type: ks__array_of__config_graphics_requirement__length_u
        if: ks__has_field_requirements
      - id: texture_streaming_budget
        type: f4
        if: ks__has_field_texture_streaming_budget
      - id: enable_cutscene_texture_streaming
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_enable_cutscene_texture_streaming
      - id: texture_streaming_enabled
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_texture_streaming_enabled
      - id: enable_ui_camera_full_resolution
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_enable_ui_camera_full_resolution
      - id: preload_ui_scene
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_preload_ui_scene
      - id: disable_do_f
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_disable_do_f
      - id: enable_subpass
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_enable_subpass
      - id: use_per_object_light_in_forward
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_use_per_object_light_in_forward
      - id: render_resolutions
        type: ks__array_of__config_render_resolution__length_u
        if: ks__has_field_render_resolutions
      - id: quality_level
        type: aux_types::string
        if: ks__has_field_quality_level
      - id: default_volatile_grade
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_default_volatile_grade
      - id: avatar_outline_thresh
        type: f4
        if: ks__has_field_avatar_outline_thresh
      - id: avatar_shadow_thresh
        type: f4
        if: ks__has_field_avatar_shadow_thresh
      - id: avatar_motion_vector_thresh
        type: f4
        if: ks__has_field_avatar_motion_vector_thresh
      - id: view_distance_ratio
        type: f4
        if: ks__has_field_view_distance_ratio
      - id: grass_quality
        type: ks__enum__grass_quality_level
        if: ks__has_field_grass_quality
      - id: crowd_spawn_distance
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_crowd_spawn_distance
      - id: crowd_despawn_distance
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_crowd_despawn_distance
      - id: entity_lod_config
        type: aux_types::string
        if: ks__has_field_entity_lod_config
      - id: dplacgejoon
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_dplacgejoon
    instances:
      ks__has_field_performance_quality: # Field №0
        value: (ks__bit_field.value & 0b00000000000000000000000001) != 0
      ks__has_field_virtual_joystick_radius: # Field №1
        value: (ks__bit_field.value & 0b00000000000000000000000010) != 0
      ks__has_field_level_streaming_config: # Field №2
        value: (ks__bit_field.value & 0b00000000000000000000000100) != 0
      ks__has_field_ui_cache_config: # Field №3
        value: (ks__bit_field.value & 0b00000000000000000000001000) != 0
      ks__has_field_light_on_level: # Field №4
        value: (ks__bit_field.value & 0b00000000000000000000010000) != 0
      ks__has_field_requirements: # Field №5
        value: (ks__bit_field.value & 0b00000000000000000000100000) != 0
      ks__has_field_texture_streaming_budget: # Field №6
        value: (ks__bit_field.value & 0b00000000000000000001000000) != 0
      ks__has_field_enable_cutscene_texture_streaming: # Field №7
        value: (ks__bit_field.value & 0b00000000000000000010000000) != 0
      ks__has_field_texture_streaming_enabled: # Field №8
        value: (ks__bit_field.value & 0b00000000000000000100000000) != 0
      ks__has_field_enable_ui_camera_full_resolution: # Field №9
        value: (ks__bit_field.value & 0b00000000000000001000000000) != 0
      ks__has_field_preload_ui_scene: # Field №10
        value: (ks__bit_field.value & 0b00000000000000010000000000) != 0
      ks__has_field_disable_do_f: # Field №11
        value: (ks__bit_field.value & 0b00000000000000100000000000) != 0
      ks__has_field_enable_subpass: # Field №12
        value: (ks__bit_field.value & 0b00000000000001000000000000) != 0
      ks__has_field_use_per_object_light_in_forward: # Field №13
        value: (ks__bit_field.value & 0b00000000000010000000000000) != 0
      ks__has_field_render_resolutions: # Field №14
        value: (ks__bit_field.value & 0b00000000000100000000000000) != 0
      ks__has_field_quality_level: # Field №15
        value: (ks__bit_field.value & 0b00000000001000000000000000) != 0
      ks__has_field_default_volatile_grade: # Field №16
        value: (ks__bit_field.value & 0b00000000010000000000000000) != 0
      ks__has_field_avatar_outline_thresh: # Field №17
        value: (ks__bit_field.value & 0b00000000100000000000000000) != 0
      ks__has_field_avatar_shadow_thresh: # Field №18
        value: (ks__bit_field.value & 0b00000001000000000000000000) != 0
      ks__has_field_avatar_motion_vector_thresh: # Field №19
        value: (ks__bit_field.value & 0b00000010000000000000000000) != 0
      ks__has_field_view_distance_ratio: # Field №20
        value: (ks__bit_field.value & 0b00000100000000000000000000) != 0
      ks__has_field_grass_quality: # Field №21
        value: (ks__bit_field.value & 0b00001000000000000000000000) != 0
      ks__has_field_crowd_spawn_distance: # Field №22
        value: (ks__bit_field.value & 0b00010000000000000000000000) != 0
      ks__has_field_crowd_despawn_distance: # Field №23
        value: (ks__bit_field.value & 0b00100000000000000000000000) != 0
      ks__has_field_entity_lod_config: # Field №24
        value: (ks__bit_field.value & 0b01000000000000000000000000) != 0
      ks__has_field_dplacgejoon: # Field №25
        value: (ks__bit_field.value & 0b10000000000000000000000000) != 0
  ks__kvp_of_dict__aux_types__string_config_graphics_recommend_setting:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: config_graphics_recommend_setting
  ks__dict_of__aux_types__string_config_graphics_recommend_setting:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_config_graphics_recommend_setting
        repeat: expr
        repeat-expr: length.value
  ks__enum__antialiasing_method:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: antialiasing_method
  ks__enum__taa_quality:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: taa_quality
  ks__enum__smaa_quality:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: smaa_quality
  ks__array_of__ks__enum__volatile_type__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__enum__volatile_type
        repeat: expr
        repeat-expr: length.value
  ks__enum__option_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: option_type
  ks__enum__checkboard_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: checkboard_type
  ks__enum__ssao_mode:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: ssao_mode
  ks__enum__motion_blur_quality:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: motion_blur_quality
  config_postprocess_effect_setting:
    seq:
      - id: ks__bit_field
        type: u1
      - id: use_half_shadows
        type: u1
        if: ks__has_field_use_half_shadows
      - id: use_shadow_cache
        type: u1
        if: ks__has_field_use_shadow_cache
      - id: checkboard_type
        type: ks__enum__checkboard_type
        if: ks__has_field_checkboard_type
      - id: ao_mode
        type: ks__enum__ssao_mode
        if: ks__has_field_ao_mode
      - id: enable_motion_blur
        type: u1
        if: ks__has_field_enable_motion_blur
      - id: motion_blur_quality
        type: ks__enum__motion_blur_quality
        if: ks__has_field_motion_blur_quality
    instances:
      ks__has_field_use_half_shadows: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_use_shadow_cache: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_checkboard_type: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_ao_mode: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_enable_motion_blur: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_motion_blur_quality: # Field №5
        value: (ks__bit_field & 0b100000) != 0
  ks__kvp_of_dict__ks__enum__option_type_config_postprocess_effect_setting:
    seq:
      - id: key
        type: ks__enum__option_type
      - id: value
        type: config_postprocess_effect_setting
  ks__dict_of__ks__enum__option_type_config_postprocess_effect_setting:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__ks__enum__option_type_config_postprocess_effect_setting
        repeat: expr
        repeat-expr: length.value
  ks__enum__particle_emit_level_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: particle_emit_level_type
  config_particle_effect_setting:
    seq:
      - id: ks__bit_field
        type: u1
      - id: half_resolution_particle
        type: u1
        if: ks__has_field_half_resolution_particle
      - id: particle_emit_level
        type: ks__enum__particle_emit_level_type
        if: ks__has_field_particle_emit_level
      - id: particle_decrease_thresh
        type: f4
        if: ks__has_field_particle_decrease_thresh
    instances:
      ks__has_field_half_resolution_particle: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_particle_emit_level: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_particle_decrease_thresh: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__kvp_of_dict__ks__enum__option_type_config_particle_effect_setting:
    seq:
      - id: key
        type: ks__enum__option_type
      - id: value
        type: config_particle_effect_setting
  ks__dict_of__ks__enum__option_type_config_particle_effect_setting:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__ks__enum__option_type_config_particle_effect_setting
        repeat: expr
        repeat-expr: length.value
  ks__enum__fade_tint_quality_level:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: fade_tint_quality_level
  config_comprehensive_quality_setting:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: local_lighting_shadow
        type: u1
        if: ks__has_field_local_lighting_shadow
      - id: terrain_blend_distance
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_terrain_blend_distance
      - id: shader_lod_distance
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_shader_lod_distance
      - id: shader_quality_keyword
        type: aux_types::string
        if: ks__has_field_shader_quality_keyword
      - id: level_streaming_config
        type: aux_types::string
        if: ks__has_field_level_streaming_config
      - id: enviro_config
        type: aux_types::string
        if: ks__has_field_enviro_config
      - id: ui_cache_config
        type: aux_types::string
        if: ks__has_field_ui_cache_config
      - id: light_view_distance_ratio
        type: f4
        if: ks__has_field_light_view_distance_ratio
      - id: grass_quality
        type: ks__enum__grass_quality_level
        if: ks__has_field_grass_quality
      - id: light_on_level
        type: ks__enum__light_level
        if: ks__has_field_light_on_level
      - id: entity_lod_config
        type: aux_types::string
        if: ks__has_field_entity_lod_config
      - id: enable_remote_avatar_lod
        type: u1
        if: ks__has_field_enable_remote_avatar_lod
      - id: enable_dynamic_light
        type: u1
        if: ks__has_field_enable_dynamic_light
      - id: fade_tint_distance
        type: f4
        if: ks__has_field_fade_tint_distance
      - id: fade_tint_size
        type: f4
        if: ks__has_field_fade_tint_size
      - id: texture_streaming_budget
        type: f4
        if: ks__has_field_texture_streaming_budget
      - id: fade_tint_quality
        type: ks__enum__fade_tint_quality_level
        if: ks__has_field_fade_tint_quality
      - id: terrain_distance
        type: f4
        if: ks__has_field_terrain_distance
      - id: terrain_normal
        type: f4
        if: ks__has_field_terrain_normal
      - id: shell_count
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_shell_count
      - id: shell_max_objects_count
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_shell_max_objects_count
    instances:
      ks__has_field_local_lighting_shadow: # Field №0
        value: (ks__bit_field.value & 0b000000000000000000001) != 0
      ks__has_field_terrain_blend_distance: # Field №1
        value: (ks__bit_field.value & 0b000000000000000000010) != 0
      ks__has_field_shader_lod_distance: # Field №2
        value: (ks__bit_field.value & 0b000000000000000000100) != 0
      ks__has_field_shader_quality_keyword: # Field №3
        value: (ks__bit_field.value & 0b000000000000000001000) != 0
      ks__has_field_level_streaming_config: # Field №4
        value: (ks__bit_field.value & 0b000000000000000010000) != 0
      ks__has_field_enviro_config: # Field №5
        value: (ks__bit_field.value & 0b000000000000000100000) != 0
      ks__has_field_ui_cache_config: # Field №6
        value: (ks__bit_field.value & 0b000000000000001000000) != 0
      ks__has_field_light_view_distance_ratio: # Field №7
        value: (ks__bit_field.value & 0b000000000000010000000) != 0
      ks__has_field_grass_quality: # Field №8
        value: (ks__bit_field.value & 0b000000000000100000000) != 0
      ks__has_field_light_on_level: # Field №9
        value: (ks__bit_field.value & 0b000000000001000000000) != 0
      ks__has_field_entity_lod_config: # Field №10
        value: (ks__bit_field.value & 0b000000000010000000000) != 0
      ks__has_field_enable_remote_avatar_lod: # Field №11
        value: (ks__bit_field.value & 0b000000000100000000000) != 0
      ks__has_field_enable_dynamic_light: # Field №12
        value: (ks__bit_field.value & 0b000000001000000000000) != 0
      ks__has_field_fade_tint_distance: # Field №13
        value: (ks__bit_field.value & 0b000000010000000000000) != 0
      ks__has_field_fade_tint_size: # Field №14
        value: (ks__bit_field.value & 0b000000100000000000000) != 0
      ks__has_field_texture_streaming_budget: # Field №15
        value: (ks__bit_field.value & 0b000001000000000000000) != 0
      ks__has_field_fade_tint_quality: # Field №16
        value: (ks__bit_field.value & 0b000010000000000000000) != 0
      ks__has_field_terrain_distance: # Field №17
        value: (ks__bit_field.value & 0b000100000000000000000) != 0
      ks__has_field_terrain_normal: # Field №18
        value: (ks__bit_field.value & 0b001000000000000000000) != 0
      ks__has_field_shell_count: # Field №19
        value: (ks__bit_field.value & 0b010000000000000000000) != 0
      ks__has_field_shell_max_objects_count: # Field №20
        value: (ks__bit_field.value & 0b100000000000000000000) != 0
  ks__kvp_of_dict__ks__enum__option_type_config_comprehensive_quality_setting:
    seq:
      - id: key
        type: ks__enum__option_type
      - id: value
        type: config_comprehensive_quality_setting
  ks__dict_of__ks__enum__option_type_config_comprehensive_quality_setting:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__ks__enum__option_type_config_comprehensive_quality_setting
        repeat: expr
        repeat-expr: length.value
  ks__enum__graphics_setting_entry_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: graphics_setting_entry_type
  ks__enum__setting_entry_display_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: setting_entry_display_type
  ks__enum__config_graphic_setting_entry_sort_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: config_graphic_setting_entry_sort_type
  config_graphics_setting_entry:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: entry_type
        type: ks__enum__graphics_setting_entry_type
        if: ks__has_field_entry_type
      - id: available_options
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_available_options
      - id: perf_cost_ratios
        type: ks__array_of__f4__length_u
        if: ks__has_field_perf_cost_ratios
      - id: display_type
        type: ks__enum__setting_entry_display_type
        if: ks__has_field_display_type
      - id: slider_min
        type: f4
        if: ks__has_field_slider_min
      - id: slider_max
        type: f4
        if: ks__has_field_slider_max
      - id: slider_interval
        type: f4
        if: ks__has_field_slider_interval
      - id: should_cloud_game_show
        type: u1
        if: ks__has_field_should_cloud_game_show
      - id: sort_option
        type: ks__enum__config_graphic_setting_entry_sort_type
        if: ks__has_field_sort_option
    instances:
      ks__has_field_entry_type: # Field №0
        value: (ks__bit_field.value & 0b000000001) != 0
      ks__has_field_available_options: # Field №1
        value: (ks__bit_field.value & 0b000000010) != 0
      ks__has_field_perf_cost_ratios: # Field №2
        value: (ks__bit_field.value & 0b000000100) != 0
      ks__has_field_display_type: # Field №3
        value: (ks__bit_field.value & 0b000001000) != 0
      ks__has_field_slider_min: # Field №4
        value: (ks__bit_field.value & 0b000010000) != 0
      ks__has_field_slider_max: # Field №5
        value: (ks__bit_field.value & 0b000100000) != 0
      ks__has_field_slider_interval: # Field №6
        value: (ks__bit_field.value & 0b001000000) != 0
      ks__has_field_should_cloud_game_show: # Field №7
        value: (ks__bit_field.value & 0b010000000) != 0
      ks__has_field_sort_option: # Field №8
        value: (ks__bit_field.value & 0b100000000) != 0
  ks__array_of__config_graphics_setting_entry__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_graphics_setting_entry
        repeat: expr
        repeat-expr: length.value
  config_performance_setting:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: scene_prop_cache_count
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_scene_prop_cache_count
      - id: bundle_unload_lru_retire_time
        type: f4
        if: ks__has_field_bundle_unload_lru_retire_time
      - id: bundle_unload_lru_retire_size
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_bundle_unload_lru_retire_size
      - id: bundle_unload_lru_capcity
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_bundle_unload_lru_capcity
      - id: game_object_pool_count
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_game_object_pool_count
      - id: use_final_ik
        type: u1
        if: ks__has_field_use_final_ik
      - id: enable_audio_surface_multiprobing
        type: u1
        if: ks__has_field_enable_audio_surface_multiprobing
      - id: enable_audio_focus_attenuation
        type: u1
        if: ks__has_field_enable_audio_focus_attenuation
      - id: enable_audio_occlusion_racasts
        type: u1
        if: ks__has_field_enable_audio_occlusion_racasts
      - id: enable_audio_listener_outreach_detetion
        type: u1
        if: ks__has_field_enable_audio_listener_outreach_detetion
      - id: cached_entity_time
        type: f4
        if: ks__has_field_cached_entity_time
      - id: cached_entity_dist
        type: f4
        if: ks__has_field_cached_entity_dist
      - id: use_head_control
        type: u1
        if: ks__has_field_use_head_control
      - id: use_avatar_grass_displacement
        type: u1
        if: ks__has_field_use_avatar_grass_displacement
      - id: use_other_enttiy_grass_displacement
        type: u1
        if: ks__has_field_use_other_enttiy_grass_displacement
      - id: use_wind_zone_grass_displacement
        type: u1
        if: ks__has_field_use_wind_zone_grass_displacement
      - id: use_ragdoll
        type: u1
        if: ks__has_field_use_ragdoll
      - id: use_fbik
        type: u1
        if: ks__has_field_use_fbik
      - id: wind_flag_max_quality_level
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_wind_flag_max_quality_level
      - id: use_dynamic_bone
        type: u1
        if: ks__has_field_use_dynamic_bone
      - id: climb_ik_quality_level
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_climb_ik_quality_level
      - id: use_climb_ik
        type: u1
        if: ks__has_field_use_climb_ik
      - id: use_move_ik
        type: u1
        if: ks__has_field_use_move_ik
      - id: use_effect_lod
        type: u1
        if: ks__has_field_use_effect_lod
      - id: ragdoll_limit_count
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_ragdoll_limit_count
      - id: ragdoll_pool_size
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_ragdoll_pool_size
      - id: ragdoll_pool_same_id_size
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_ragdoll_pool_same_id_size
    instances:
      ks__has_field_scene_prop_cache_count: # Field №0
        value: (ks__bit_field.value & 0b000000000000000000000000001) != 0
      ks__has_field_bundle_unload_lru_retire_time: # Field №1
        value: (ks__bit_field.value & 0b000000000000000000000000010) != 0
      ks__has_field_bundle_unload_lru_retire_size: # Field №2
        value: (ks__bit_field.value & 0b000000000000000000000000100) != 0
      ks__has_field_bundle_unload_lru_capcity: # Field №3
        value: (ks__bit_field.value & 0b000000000000000000000001000) != 0
      ks__has_field_game_object_pool_count: # Field №4
        value: (ks__bit_field.value & 0b000000000000000000000010000) != 0
      ks__has_field_use_final_ik: # Field №5
        value: (ks__bit_field.value & 0b000000000000000000000100000) != 0
      ks__has_field_enable_audio_surface_multiprobing: # Field №6
        value: (ks__bit_field.value & 0b000000000000000000001000000) != 0
      ks__has_field_enable_audio_focus_attenuation: # Field №7
        value: (ks__bit_field.value & 0b000000000000000000010000000) != 0
      ks__has_field_enable_audio_occlusion_racasts: # Field №8
        value: (ks__bit_field.value & 0b000000000000000000100000000) != 0
      ks__has_field_enable_audio_listener_outreach_detetion: # Field №9
        value: (ks__bit_field.value & 0b000000000000000001000000000) != 0
      ks__has_field_cached_entity_time: # Field №10
        value: (ks__bit_field.value & 0b000000000000000010000000000) != 0
      ks__has_field_cached_entity_dist: # Field №11
        value: (ks__bit_field.value & 0b000000000000000100000000000) != 0
      ks__has_field_use_head_control: # Field №12
        value: (ks__bit_field.value & 0b000000000000001000000000000) != 0
      ks__has_field_use_avatar_grass_displacement: # Field №13
        value: (ks__bit_field.value & 0b000000000000010000000000000) != 0
      ks__has_field_use_other_enttiy_grass_displacement: # Field №14
        value: (ks__bit_field.value & 0b000000000000100000000000000) != 0
      ks__has_field_use_wind_zone_grass_displacement: # Field №15
        value: (ks__bit_field.value & 0b000000000001000000000000000) != 0
      ks__has_field_use_ragdoll: # Field №16
        value: (ks__bit_field.value & 0b000000000010000000000000000) != 0
      ks__has_field_use_fbik: # Field №17
        value: (ks__bit_field.value & 0b000000000100000000000000000) != 0
      ks__has_field_wind_flag_max_quality_level: # Field №18
        value: (ks__bit_field.value & 0b000000001000000000000000000) != 0
      ks__has_field_use_dynamic_bone: # Field №19
        value: (ks__bit_field.value & 0b000000010000000000000000000) != 0
      ks__has_field_climb_ik_quality_level: # Field №20
        value: (ks__bit_field.value & 0b000000100000000000000000000) != 0
      ks__has_field_use_climb_ik: # Field №21
        value: (ks__bit_field.value & 0b000001000000000000000000000) != 0
      ks__has_field_use_move_ik: # Field №22
        value: (ks__bit_field.value & 0b000010000000000000000000000) != 0
      ks__has_field_use_effect_lod: # Field №23
        value: (ks__bit_field.value & 0b000100000000000000000000000) != 0
      ks__has_field_ragdoll_limit_count: # Field №24
        value: (ks__bit_field.value & 0b001000000000000000000000000) != 0
      ks__has_field_ragdoll_pool_size: # Field №25
        value: (ks__bit_field.value & 0b010000000000000000000000000) != 0
      ks__has_field_ragdoll_pool_same_id_size: # Field №26
        value: (ks__bit_field.value & 0b100000000000000000000000000) != 0
  ks__kvp_of_dict__aux_types__string_config_performance_setting:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: config_performance_setting
  ks__dict_of__aux_types__string_config_performance_setting:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_config_performance_setting
        repeat: expr
        repeat-expr: length.value
  config_global_token:
    seq:
      - id: ks__bit_field
        type: u1
      - id: action_token_group
        type: aux_types::string
        if: ks__has_field_action_token_group
    instances:
      ks__has_field_action_token_group: # Field №0
        value: (ks__bit_field & 0b1) != 0
  ks__enum__shadow_quality:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: shadow_quality
  ks__enum__config_shadow_resolution:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: config_shadow_resolution
  config_shadow_quality_setting:
    seq:
      - id: ks__bit_field
        type: u1
      - id: shadow_distance
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_shadow_distance
      - id: shadow_resolution
        type: ks__enum__config_shadow_resolution
        if: ks__has_field_shadow_resolution
      - id: shadow_cascade_split_count
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_shadow_cascade_split_count
      - id: per_obj_shadow_quality
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_per_obj_shadow_quality
      - id: shadow_blend
        type: u1
        if: ks__has_field_shadow_blend
      - id: per_object_pcf
        type: u1
        if: ks__has_field_per_object_pcf
      - id: enable_dynamic_shadow
        type: u1
        if: ks__has_field_enable_dynamic_shadow
    instances:
      ks__has_field_shadow_distance: # Field №0
        value: (ks__bit_field & 0b0000001) != 0
      ks__has_field_shadow_resolution: # Field №1
        value: (ks__bit_field & 0b0000010) != 0
      ks__has_field_shadow_cascade_split_count: # Field №2
        value: (ks__bit_field & 0b0000100) != 0
      ks__has_field_per_obj_shadow_quality: # Field №3
        value: (ks__bit_field & 0b0001000) != 0
      ks__has_field_shadow_blend: # Field №4
        value: (ks__bit_field & 0b0010000) != 0
      ks__has_field_per_object_pcf: # Field №5
        value: (ks__bit_field & 0b0100000) != 0
      ks__has_field_enable_dynamic_shadow: # Field №6
        value: (ks__bit_field & 0b1000000) != 0
  ks__kvp_of_dict__ks__enum__shadow_quality_config_shadow_quality_setting:
    seq:
      - id: key
        type: ks__enum__shadow_quality
      - id: value
        type: config_shadow_quality_setting
  ks__dict_of__ks__enum__shadow_quality_config_shadow_quality_setting:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__ks__enum__shadow_quality_config_shadow_quality_setting
        repeat: expr
        repeat-expr: length.value
  ks__enum__perf_cost_ratio_grade:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: perf_cost_ratio_grade
  ks__kvp_of_dict__ks__enum__perf_cost_ratio_grade_f4:
    seq:
      - id: key
        type: ks__enum__perf_cost_ratio_grade
      - id: value
        type: f4
  ks__dict_of__ks__enum__perf_cost_ratio_grade_f4:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__ks__enum__perf_cost_ratio_grade_f4
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__aux_types__string_aux_types__vlq_base128_le_s:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: aux_types::vlq_base128_le_s
  ks__dict_of__aux_types__string_aux_types__vlq_base128_le_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_aux_types__vlq_base128_le_s
        repeat: expr
        repeat-expr: length.value
  config_tint_fade_setting:
    seq:
      - id: ks__bit_field
        type: u1
      - id: tint_distance
        type: f4
        if: ks__has_field_tint_distance
      - id: tint_size
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_tint_size
    instances:
      ks__has_field_tint_distance: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_tint_size: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__kvp_of_dict__ks__enum__fade_tint_quality_level_config_tint_fade_setting:
    seq:
      - id: key
        type: ks__enum__fade_tint_quality_level
      - id: value
        type: config_tint_fade_setting
  ks__dict_of__ks__enum__fade_tint_quality_level_config_tint_fade_setting:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__ks__enum__fade_tint_quality_level_config_tint_fade_setting
        repeat: expr
        repeat-expr: length.value
  config_platform_grahpics_setting:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: volatile_settings
        type: ks__dict_of__ks__enum__volatile_type_config_graphics_volatile_setting
        if: ks__has_field_volatile_settings
      - id: device_settings
        type: ks__dict_of__aux_types__string_config_graphics_recommend_setting
        if: ks__has_field_device_settings
      - id: target_frame_rate
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_target_frame_rate
      - id: antialiasing_method
        type: ks__enum__antialiasing_method
        if: ks__has_field_antialiasing_method
      - id: taa_quality
        type: ks__enum__taa_quality
        if: ks__has_field_taa_quality
      - id: smaa_quality
        type: ks__enum__smaa_quality
        if: ks__has_field_smaa_quality
      - id: candidate_volatile
        type: ks__array_of__ks__enum__volatile_type__length_u
        if: ks__has_field_candidate_volatile
      - id: postprocess_effect_options
        type: ks__dict_of__ks__enum__option_type_config_postprocess_effect_setting
        if: ks__has_field_postprocess_effect_options
      - id: particle_effect_options
        type: ks__dict_of__ks__enum__option_type_config_particle_effect_setting
        if: ks__has_field_particle_effect_options
      - id: comprehensive_quality_options
        type: ks__dict_of__ks__enum__option_type_config_comprehensive_quality_setting
        if: ks__has_field_comprehensive_quality_options
      - id: setting_entry
        type: ks__array_of__config_graphics_setting_entry__length_u
        if: ks__has_field_setting_entry
      - id: performance_settings
        type: ks__dict_of__aux_types__string_config_performance_setting
        if: ks__has_field_performance_settings
      - id: global_token_settings
        type: config_global_token
        if: ks__has_field_global_token_settings
      - id: shadow_quality_settings
        type: ks__dict_of__ks__enum__shadow_quality_config_shadow_quality_setting
        if: ks__has_field_shadow_quality_settings
      - id: cost_ratio_grade
        type: ks__dict_of__ks__enum__perf_cost_ratio_grade_f4
        if: ks__has_field_cost_ratio_grade
      - id: level_streaming_cost_map
        type: ks__dict_of__aux_types__string_aux_types__vlq_base128_le_s
        if: ks__has_field_level_streaming_cost_map
      - id: fade_distance_quality_settings
        type: ks__dict_of__ks__enum__fade_tint_quality_level_config_tint_fade_setting
        if: ks__has_field_fade_distance_quality_settings
    instances:
      ks__has_field_volatile_settings: # Field №0
        value: (ks__bit_field.value & 0b00000000000000001) != 0
      ks__has_field_device_settings: # Field №1
        value: (ks__bit_field.value & 0b00000000000000010) != 0
      ks__has_field_target_frame_rate: # Field №2
        value: (ks__bit_field.value & 0b00000000000000100) != 0
      ks__has_field_antialiasing_method: # Field №3
        value: (ks__bit_field.value & 0b00000000000001000) != 0
      ks__has_field_taa_quality: # Field №4
        value: (ks__bit_field.value & 0b00000000000010000) != 0
      ks__has_field_smaa_quality: # Field №5
        value: (ks__bit_field.value & 0b00000000000100000) != 0
      ks__has_field_candidate_volatile: # Field №6
        value: (ks__bit_field.value & 0b00000000001000000) != 0
      ks__has_field_postprocess_effect_options: # Field №7
        value: (ks__bit_field.value & 0b00000000010000000) != 0
      ks__has_field_particle_effect_options: # Field №8
        value: (ks__bit_field.value & 0b00000000100000000) != 0
      ks__has_field_comprehensive_quality_options: # Field №9
        value: (ks__bit_field.value & 0b00000001000000000) != 0
      ks__has_field_setting_entry: # Field №10
        value: (ks__bit_field.value & 0b00000010000000000) != 0
      ks__has_field_performance_settings: # Field №11
        value: (ks__bit_field.value & 0b00000100000000000) != 0
      ks__has_field_global_token_settings: # Field №12
        value: (ks__bit_field.value & 0b00001000000000000) != 0
      ks__has_field_shadow_quality_settings: # Field №13
        value: (ks__bit_field.value & 0b00010000000000000) != 0
      ks__has_field_cost_ratio_grade: # Field №14
        value: (ks__bit_field.value & 0b00100000000000000) != 0
      ks__has_field_level_streaming_cost_map: # Field №15
        value: (ks__bit_field.value & 0b01000000000000000) != 0
      ks__has_field_fade_distance_quality_settings: # Field №16
        value: (ks__bit_field.value & 0b10000000000000000) != 0
  ks__enum__text_language_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: text_language_type
  ks__array_of__ks__enum__text_language_type__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__enum__text_language_type
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__aux_types__string_ks__array_of__ks__enum__text_language_type__length_u:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: ks__array_of__ks__enum__text_language_type__length_u
  ks__dict_of__aux_types__string_ks__array_of__ks__enum__text_language_type__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_ks__array_of__ks__enum__text_language_type__length_u
        repeat: expr
        repeat-expr: length.value
  ks__enum__voice_language_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: voice_language_type
  ks__array_of__ks__enum__voice_language_type__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__enum__voice_language_type
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__aux_types__string_ks__array_of__ks__enum__voice_language_type__length_u:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: ks__array_of__ks__enum__voice_language_type__length_u
  ks__dict_of__aux_types__string_ks__array_of__ks__enum__voice_language_type__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_ks__array_of__ks__enum__voice_language_type__length_u
        repeat: expr
        repeat-expr: length.value
  config_language_setting:
    seq:
      - id: ks__bit_field
        type: u1
      - id: text_show_types
        type: ks__dict_of__aux_types__string_ks__array_of__ks__enum__text_language_type__length_u
        if: ks__has_field_text_show_types
      - id: text_disable_types
        type: ks__dict_of__aux_types__string_ks__array_of__ks__enum__text_language_type__length_u
        if: ks__has_field_text_disable_types
      - id: voice_show_types
        type: ks__dict_of__aux_types__string_ks__array_of__ks__enum__voice_language_type__length_u
        if: ks__has_field_voice_show_types
      - id: voice_disable_types
        type: ks__dict_of__aux_types__string_ks__array_of__ks__enum__voice_language_type__length_u
        if: ks__has_field_voice_disable_types
    instances:
      ks__has_field_text_show_types: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_text_disable_types: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_voice_show_types: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_voice_disable_types: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  ks__array_of__vector__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: vector
        repeat: expr
        repeat-expr: length.value
  config_polygon_area:
    seq:
      - id: ks__bit_field
        type: u1
      - id: min_area
        type: vector
        if: ks__has_field_min_area
      - id: max_area
        type: vector
        if: ks__has_field_max_area
      - id: road_points
        type: ks__array_of__vector__length_u
        if: ks__has_field_road_points
    instances:
      ks__has_field_min_area: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_max_area: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_road_points: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_level_area:
    seq:
      - id: ks__bit_field
        type: u1
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level
      - id: priority
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_priority
      - id: polygon_data
        type: config_polygon_area
        if: ks__has_field_polygon_data
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_level: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_priority: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_polygon_data: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  ks__array_of__config_level_area__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_level_area
        repeat: expr
        repeat-expr: length.value
  config_level_block:
    seq:
      - id: ks__bit_field
        type: u1
      - id: min
        type: vector
        if: ks__has_field_min
      - id: max
        type: vector
        if: ks__has_field_max
      - id: level_areas
        type: ks__array_of__config_level_area__length_u
        if: ks__has_field_level_areas
    instances:
      ks__has_field_min: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_max: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_level_areas: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__array_of__config_level_block__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_level_block
        repeat: expr
        repeat-expr: length.value
  config_level_layout:
    seq:
      - id: ks__bit_field
        type: u1
      - id: blocks
        type: ks__array_of__config_level_block__length_u
        if: ks__has_field_blocks
    instances:
      ks__has_field_blocks: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_world_area:
    seq:
      - id: ks__bit_field
        type: u1
      - id: id1
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id1
      - id: id2
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id2
      - id: polygon_data
        type: config_polygon_area
        if: ks__has_field_polygon_data
    instances:
      ks__has_field_id1: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_id2: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_polygon_data: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__array_of__config_world_area__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_world_area
        repeat: expr
        repeat-expr: length.value
  config_level1world_area:
    seq:
      - id: ks__bit_field
        type: u1
      - id: level1area
        type: config_world_area
        if: ks__has_field_level1area
      - id: level2areas
        type: ks__array_of__config_world_area__length_u
        if: ks__has_field_level2areas
    instances:
      ks__has_field_level1area: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_level2areas: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__array_of__config_level1world_area__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_level1world_area
        repeat: expr
        repeat-expr: length.value
  config_world_area_layout:
    seq:
      - id: ks__bit_field
        type: u1
      - id: level1areas
        type: ks__array_of__config_level1world_area__length_u
        if: ks__has_field_level1areas
    instances:
      ks__has_field_level1areas: # Field №0
        value: (ks__bit_field & 0b1) != 0
  ks__enum__real_scene_point_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: real_scene_point_type
  ks__enum__scene_point_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: scene_point_type
  config_scene_point:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: type
        type: ks__enum__scene_point_type
        if: ks__has_field_type
      - id: gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gadget_id
      - id: area_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_area_id
      - id: pos
        type: vector
        if: ks__has_field_pos
      - id: rot
        type: vector
        if: ks__has_field_rot
      - id: tran_pos
        type: vector
        if: ks__has_field_tran_pos
      - id: tran_rot
        type: vector
        if: ks__has_field_tran_rot
      - id: unlocked
        type: u1
        if: ks__has_field_unlocked
      - id: alias
        type: aux_types::string
        if: ks__has_field_alias
      - id: group_limit
        type: u1
        if: ks__has_field_group_limit
      - id: is_model_hidden
        type: u1
        if: ks__has_field_is_model_hidden
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field.value & 0b00000000001) != 0
      ks__has_field_gadget_id: # Field №1
        value: (ks__bit_field.value & 0b00000000010) != 0
      ks__has_field_area_id: # Field №2
        value: (ks__bit_field.value & 0b00000000100) != 0
      ks__has_field_pos: # Field №3
        value: (ks__bit_field.value & 0b00000001000) != 0
      ks__has_field_rot: # Field №4
        value: (ks__bit_field.value & 0b00000010000) != 0
      ks__has_field_tran_pos: # Field №5
        value: (ks__bit_field.value & 0b00000100000) != 0
      ks__has_field_tran_rot: # Field №6
        value: (ks__bit_field.value & 0b00001000000) != 0
      ks__has_field_unlocked: # Field №7
        value: (ks__bit_field.value & 0b00010000000) != 0
      ks__has_field_alias: # Field №8
        value: (ks__bit_field.value & 0b00100000000) != 0
      ks__has_field_group_limit: # Field №9
        value: (ks__bit_field.value & 0b01000000000) != 0
      ks__has_field_is_model_hidden: # Field №10
        value: (ks__bit_field.value & 0b10000000000) != 0
  ks__enum__point_map_visibility:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: point_map_visibility
  scene_trans_point:
    seq:
      - id: ks__base
        type: config_scene_point
      - id: ks__bit_field
        type: u1
      - id: max_spring_volume
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_spring_volume
      - id: cutscene_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_cutscene_list
      - id: npc_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_npc_id
      - id: is_forbid_avatar_revive
        type: u1
        if: ks__has_field_is_forbid_avatar_revive
      - id: is_forbid_avatar_auto_use_spring
        type: u1
        if: ks__has_field_is_forbid_avatar_auto_use_spring
      - id: map_visibility
        type: ks__enum__point_map_visibility
        if: ks__has_field_map_visibility
      - id: show_on_locked_area
        type: u1
        if: ks__has_field_show_on_locked_area
    instances:
      ks__has_field_max_spring_volume: # Field №0
        value: (ks__bit_field & 0b0000001) != 0
      ks__has_field_cutscene_list: # Field №1
        value: (ks__bit_field & 0b0000010) != 0
      ks__has_field_npc_id: # Field №2
        value: (ks__bit_field & 0b0000100) != 0
      ks__has_field_is_forbid_avatar_revive: # Field №3
        value: (ks__bit_field & 0b0001000) != 0
      ks__has_field_is_forbid_avatar_auto_use_spring: # Field №4
        value: (ks__bit_field & 0b0010000) != 0
      ks__has_field_map_visibility: # Field №5
        value: (ks__bit_field & 0b0100000) != 0
      ks__has_field_show_on_locked_area: # Field №6
        value: (ks__bit_field & 0b1000000) != 0
      # Base class fields
      type:
        value: ks__base.type
      gadget_id:
        value: ks__base.gadget_id
      area_id:
        value: ks__base.area_id
      pos:
        value: ks__base.pos
      rot:
        value: ks__base.rot
      tran_pos:
        value: ks__base.tran_pos
      tran_rot:
        value: ks__base.tran_rot
      unlocked:
        value: ks__base.unlocked
      alias:
        value: ks__base.alias
      group_limit:
        value: ks__base.group_limit
      is_model_hidden:
        value: ks__base.is_model_hidden
  dungeon_quest_condition:
    seq:
      - id: ks__bit_field
        type: u1
      - id: dungeon_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_dungeon_id
      - id: main_quest_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_main_quest_id_list
    instances:
      ks__has_field_dungeon_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_main_quest_id_list: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__enum__dungeon_entry_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: dungeon_entry_type
  dungeon_entry:
    seq:
      - id: ks__base
        type: scene_trans_point
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: dungeon_ids
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_dungeon_ids
      - id: dungeon_quest_condition_list
        type: dungeon_quest_condition
        if: ks__has_field_dungeon_quest_condition_list
      - id: size
        type: vector
        if: ks__has_field_size
      - id: worktop_group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_worktop_group_id
      - id: title_text_id
        type: aux_types::string
        if: ks__has_field_title_text_id
      - id: show_level
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_show_level
      - id: dungeon_random_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_dungeon_random_list
      - id: dungeon_entry_type
        type: ks__enum__dungeon_entry_type
        if: ks__has_field_dungeon_entry_type
      - id: forbid_simple_unlock
        type: u1
        if: ks__has_field_forbid_simple_unlock
      - id: fire_field_event
        type: u1
        if: ks__has_field_fire_field_event
      - id: dungeon_roster_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_dungeon_roster_list
      - id: remove_entity_if_locked
        type: u1
        if: ks__has_field_remove_entity_if_locked
    instances:
      ks__has_field_dungeon_ids: # Field №0
        value: (ks__bit_field.value & 0b000000000001) != 0
      ks__has_field_dungeon_quest_condition_list: # Field №1
        value: (ks__bit_field.value & 0b000000000010) != 0
      ks__has_field_size: # Field №2
        value: (ks__bit_field.value & 0b000000000100) != 0
      ks__has_field_worktop_group_id: # Field №3
        value: (ks__bit_field.value & 0b000000001000) != 0
      ks__has_field_title_text_id: # Field №4
        value: (ks__bit_field.value & 0b000000010000) != 0
      ks__has_field_show_level: # Field №5
        value: (ks__bit_field.value & 0b000000100000) != 0
      ks__has_field_dungeon_random_list: # Field №6
        value: (ks__bit_field.value & 0b000001000000) != 0
      ks__has_field_dungeon_entry_type: # Field №7
        value: (ks__bit_field.value & 0b000010000000) != 0
      ks__has_field_forbid_simple_unlock: # Field №8
        value: (ks__bit_field.value & 0b000100000000) != 0
      ks__has_field_fire_field_event: # Field №9
        value: (ks__bit_field.value & 0b001000000000) != 0
      ks__has_field_dungeon_roster_list: # Field №10
        value: (ks__bit_field.value & 0b010000000000) != 0
      ks__has_field_remove_entity_if_locked: # Field №11
        value: (ks__bit_field.value & 0b100000000000) != 0
      # Base class fields
      max_spring_volume:
        value: ks__base.max_spring_volume
      cutscene_list:
        value: ks__base.cutscene_list
      npc_id:
        value: ks__base.npc_id
      is_forbid_avatar_revive:
        value: ks__base.is_forbid_avatar_revive
      is_forbid_avatar_auto_use_spring:
        value: ks__base.is_forbid_avatar_auto_use_spring
      map_visibility:
        value: ks__base.map_visibility
      show_on_locked_area:
        value: ks__base.show_on_locked_area
      type:
        value: ks__base.type
      gadget_id:
        value: ks__base.gadget_id
      area_id:
        value: ks__base.area_id
      pos:
        value: ks__base.pos
      rot:
        value: ks__base.rot
      tran_pos:
        value: ks__base.tran_pos
      tran_rot:
        value: ks__base.tran_rot
      unlocked:
        value: ks__base.unlocked
      alias:
        value: ks__base.alias
      group_limit:
        value: ks__base.group_limit
      is_model_hidden:
        value: ks__base.is_model_hidden
  dungeon_exit:
    seq:
      - id: ks__base
        type: config_scene_point
      - id: ks__bit_field
        type: u1
      - id: entry_point_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_entry_point_id
    instances:
      ks__has_field_entry_point_id: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      type:
        value: ks__base.type
      gadget_id:
        value: ks__base.gadget_id
      area_id:
        value: ks__base.area_id
      pos:
        value: ks__base.pos
      rot:
        value: ks__base.rot
      tran_pos:
        value: ks__base.tran_pos
      tran_rot:
        value: ks__base.tran_rot
      unlocked:
        value: ks__base.unlocked
      alias:
        value: ks__base.alias
      group_limit:
        value: ks__base.group_limit
      is_model_hidden:
        value: ks__base.is_model_hidden
  dungeon_way_point:
    seq:
      - id: ks__base
        type: config_scene_point
      - id: ks__bit_field
        type: u1
      - id: size
        type: vector
        if: ks__has_field_size
      - id: is_boss
        type: u1
        if: ks__has_field_is_boss
      - id: is_active
        type: u1
        if: ks__has_field_is_active
      - id: group_ids
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_group_ids
    instances:
      ks__has_field_size: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_is_boss: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_is_active: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_group_ids: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      type:
        value: ks__base.type
      gadget_id:
        value: ks__base.gadget_id
      area_id:
        value: ks__base.area_id
      pos:
        value: ks__base.pos
      rot:
        value: ks__base.rot
      tran_pos:
        value: ks__base.tran_pos
      tran_rot:
        value: ks__base.tran_rot
      unlocked:
        value: ks__base.unlocked
      alias:
        value: ks__base.alias
      group_limit:
        value: ks__base.group_limit
      is_model_hidden:
        value: ks__base.is_model_hidden
  dungeon_quit_point:
    seq:
      - id: ks__base
        type: config_scene_point
      - id: ks__bit_field
        type: u1
      - id: size
        type: vector
        if: ks__has_field_size
    instances:
      ks__has_field_size: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      type:
        value: ks__base.type
      gadget_id:
        value: ks__base.gadget_id
      area_id:
        value: ks__base.area_id
      pos:
        value: ks__base.pos
      rot:
        value: ks__base.rot
      tran_pos:
        value: ks__base.tran_pos
      tran_rot:
        value: ks__base.tran_rot
      unlocked:
        value: ks__base.unlocked
      alias:
        value: ks__base.alias
      group_limit:
        value: ks__base.group_limit
      is_model_hidden:
        value: ks__base.is_model_hidden
  dungeon_reward_point:
    seq:
      - id: ks__base
        type: config_scene_point
      - id: ks__bit_field
        type: u1
      - id: is_active
        type: u1
        if: ks__has_field_is_active
      - id: drop_point_list
        type: ks__array_of__vector__length_u
        if: ks__has_field_drop_point_list
    instances:
      ks__has_field_is_active: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_drop_point_list: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      type:
        value: ks__base.type
      gadget_id:
        value: ks__base.gadget_id
      area_id:
        value: ks__base.area_id
      pos:
        value: ks__base.pos
      rot:
        value: ks__base.rot
      tran_pos:
        value: ks__base.tran_pos
      tran_rot:
        value: ks__base.tran_rot
      unlocked:
        value: ks__base.unlocked
      alias:
        value: ks__base.alias
      group_limit:
        value: ks__base.group_limit
      is_model_hidden:
        value: ks__base.is_model_hidden
  personal_scene_jump_point:
    seq:
      - id: ks__base
        type: config_scene_point
      - id: ks__bit_field
        type: u1
      - id: tran_scene_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_tran_scene_id
      - id: title_text_id
        type: aux_types::string
        if: ks__has_field_title_text_id
      - id: trigger_size
        type: vector
        if: ks__has_field_trigger_size
      - id: open_time
        type: f4
        if: ks__has_field_open_time
      - id: close_time
        type: f4
        if: ks__has_field_close_time
      - id: is_homeworld_door
        type: u1
        if: ks__has_field_is_homeworld_door
    instances:
      ks__has_field_tran_scene_id: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_title_text_id: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_trigger_size: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_open_time: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_close_time: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_is_homeworld_door: # Field №5
        value: (ks__bit_field & 0b100000) != 0
      # Base class fields
      type:
        value: ks__base.type
      gadget_id:
        value: ks__base.gadget_id
      area_id:
        value: ks__base.area_id
      pos:
        value: ks__base.pos
      rot:
        value: ks__base.rot
      tran_pos:
        value: ks__base.tran_pos
      tran_rot:
        value: ks__base.tran_rot
      unlocked:
        value: ks__base.unlocked
      alias:
        value: ks__base.alias
      group_limit:
        value: ks__base.group_limit
      is_model_hidden:
        value: ks__base.is_model_hidden
  ks__enum__scene_building_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: scene_building_type
  scene_building_point:
    seq:
      - id: ks__base
        type: config_scene_point
      - id: ks__bit_field
        type: u1
      - id: building_type
        type: ks__enum__scene_building_type
        if: ks__has_field_building_type
      - id: fog_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_fog_id
    instances:
      ks__has_field_building_type: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_fog_id: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      type:
        value: ks__base.type
      gadget_id:
        value: ks__base.gadget_id
      area_id:
        value: ks__base.area_id
      pos:
        value: ks__base.pos
      rot:
        value: ks__base.rot
      tran_pos:
        value: ks__base.tran_pos
      tran_rot:
        value: ks__base.tran_rot
      unlocked:
        value: ks__base.unlocked
      alias:
        value: ks__base.alias
      group_limit:
        value: ks__base.group_limit
      is_model_hidden:
        value: ks__base.is_model_hidden
  dungeon_slip_revive_point:
    seq:
      - id: ks__base
        type: config_scene_point
      - id: ks__bit_field
        type: u1
      - id: size
        type: vector
        if: ks__has_field_size
      - id: is_active
        type: u1
        if: ks__has_field_is_active
      - id: group_ids
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_group_ids
    instances:
      ks__has_field_size: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_is_active: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_group_ids: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      type:
        value: ks__base.type
      gadget_id:
        value: ks__base.gadget_id
      area_id:
        value: ks__base.area_id
      pos:
        value: ks__base.pos
      rot:
        value: ks__base.rot
      tran_pos:
        value: ks__base.tran_pos
      tran_rot:
        value: ks__base.tran_rot
      unlocked:
        value: ks__base.unlocked
      alias:
        value: ks__base.alias
      group_limit:
        value: ks__base.group_limit
      is_model_hidden:
        value: ks__base.is_model_hidden
  ks__enum__vehicle_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: vehicle_type
  scene_vehicle_summon_point:
    seq:
      - id: ks__base
        type: config_scene_point
      - id: ks__bit_field
        type: u1
      - id: vehicle_type
        type: ks__enum__vehicle_type
        if: ks__has_field_vehicle_type
      - id: vehicle_gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_vehicle_gadget_id
      - id: born_point_list
        type: ks__array_of__vector__length_u
        if: ks__has_field_born_point_list
      - id: born_rotate_list
        type: ks__array_of__vector__length_u
        if: ks__has_field_born_rotate_list
      - id: vehicle_radius
        type: f4
        if: ks__has_field_vehicle_radius
      - id: title_text_id
        type: aux_types::string
        if: ks__has_field_title_text_id
    instances:
      ks__has_field_vehicle_type: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_vehicle_gadget_id: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_born_point_list: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_born_rotate_list: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_vehicle_radius: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_title_text_id: # Field №5
        value: (ks__bit_field & 0b100000) != 0
      # Base class fields
      type:
        value: ks__base.type
      gadget_id:
        value: ks__base.gadget_id
      area_id:
        value: ks__base.area_id
      pos:
        value: ks__base.pos
      rot:
        value: ks__base.rot
      tran_pos:
        value: ks__base.tran_pos
      tran_rot:
        value: ks__base.tran_rot
      unlocked:
        value: ks__base.unlocked
      alias:
        value: ks__base.alias
      group_limit:
        value: ks__base.group_limit
      is_model_hidden:
        value: ks__base.is_model_hidden
  ks__enum__tile_special_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: tile_special_type
  config_tile_element:
    seq:
      - id: ks__bit_field
        type: u1
      - id: element_type
        type: ks__enum__element_type
        if: ks__has_field_element_type
      - id: element_durability
        type: f4
        if: ks__has_field_element_durability
      - id: is_element_durability_mutable
        type: u1
        if: ks__has_field_is_element_durability_mutable
    instances:
      ks__has_field_element_type: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_element_durability: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_is_element_durability_mutable: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__array_of__config_tile_element__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_tile_element
        repeat: expr
        repeat-expr: length.value
  ks__enum__massive_element_trigger_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: massive_element_trigger_type
  config_massive_element_trigger_action:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: trigger_type
        type: ks__enum__massive_element_trigger_type
        if: ks__has_field_trigger_type
      - id: stack_type
        type: ks__enum__modifier_stacking
        if: ks__has_field_stack_type
      - id: reduce_durability
        type: f4
        if: ks__has_field_reduce_durability
      - id: duration
        type: f4
        if: ks__has_field_duration
      - id: attack_id
        type: aux_types::string
        if: ks__has_field_attack_id
      - id: action_id
        type: aux_types::string
        if: ks__has_field_action_id
      - id: on_flush
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_flush
      - id: on_pre_update
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_pre_update
      - id: on_detach
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_detach
    instances:
      ks__has_field_trigger_type: # Field №0
        value: (ks__bit_field.value & 0b000000001) != 0
      ks__has_field_stack_type: # Field №1
        value: (ks__bit_field.value & 0b000000010) != 0
      ks__has_field_reduce_durability: # Field №2
        value: (ks__bit_field.value & 0b000000100) != 0
      ks__has_field_duration: # Field №3
        value: (ks__bit_field.value & 0b000001000) != 0
      ks__has_field_attack_id: # Field №4
        value: (ks__bit_field.value & 0b000010000) != 0
      ks__has_field_action_id: # Field №5
        value: (ks__bit_field.value & 0b000100000) != 0
      ks__has_field_on_flush: # Field №6
        value: (ks__bit_field.value & 0b001000000) != 0
      ks__has_field_on_pre_update: # Field №7
        value: (ks__bit_field.value & 0b010000000) != 0
      ks__has_field_on_detach: # Field №8
        value: (ks__bit_field.value & 0b100000000) != 0
  config_tile:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: tile_name
        type: aux_types::string
        if: ks__has_field_tile_name
      - id: camp_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_camp_id
      - id: special_type
        type: ks__enum__tile_special_type
        if: ks__has_field_special_type
      - id: fixed_y
        type: f4
        if: ks__has_field_fixed_y
      - id: pool_size
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_pool_size
      - id: initial_elements
        type: ks__array_of__config_tile_element__length_u
        if: ks__has_field_initial_elements
      - id: basic_action
        type: config_massive_element_trigger_action
        if: ks__has_field_basic_action
      - id: field_map_material
        type: aux_types::string
        if: ks__has_field_field_map_material
      - id: effect_material
        type: aux_types::string
        if: ks__has_field_effect_material
    instances:
      ks__has_field_tile_name: # Field №0
        value: (ks__bit_field.value & 0b000000001) != 0
      ks__has_field_camp_id: # Field №1
        value: (ks__bit_field.value & 0b000000010) != 0
      ks__has_field_special_type: # Field №2
        value: (ks__bit_field.value & 0b000000100) != 0
      ks__has_field_fixed_y: # Field №3
        value: (ks__bit_field.value & 0b000001000) != 0
      ks__has_field_pool_size: # Field №4
        value: (ks__bit_field.value & 0b000010000) != 0
      ks__has_field_initial_elements: # Field №5
        value: (ks__bit_field.value & 0b000100000) != 0
      ks__has_field_basic_action: # Field №6
        value: (ks__bit_field.value & 0b001000000) != 0
      ks__has_field_field_map_material: # Field №7
        value: (ks__bit_field.value & 0b010000000) != 0
      ks__has_field_effect_material: # Field №8
        value: (ks__bit_field.value & 0b100000000) != 0
  ks__enum__input_event_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: input_event_type
  ks__enum__context_event_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: context_event_type
  ks__enum__input_action_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: input_action_type
  ks__enum__action_event_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: action_event_type
  config_base_input_event:
    seq:
      - id: ks__bit_field
        type: u1
      - id: action_type
        type: ks__enum__input_action_type
        if: ks__has_field_action_type
      - id: action_event
        type: ks__enum__action_event_type
        if: ks__has_field_action_event
    instances:
      ks__has_field_action_type: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_action_event: # Field №1
        value: (ks__bit_field & 0b10) != 0
  input_action_event:
    seq:
      - id: ks__bit_field
        type: u1
      - id: priority
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_priority
      - id: event_type
        type: ks__enum__input_event_type
        if: ks__has_field_event_type
      - id: next_to_handle
        type: ks__enum__context_event_type
        if: ks__has_field_next_to_handle
      - id: event_config
        type: config_base_input_event
        if: ks__has_field_event_config
      - id: proxy_event_type
        type: ks__enum__input_event_type
        if: ks__has_field_proxy_event_type
      - id: context_event
        type: ks__enum__context_event_type
        if: ks__has_field_context_event
    instances:
      ks__has_field_priority: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_event_type: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_next_to_handle: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_event_config: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_proxy_event_type: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_context_event: # Field №5
        value: (ks__bit_field & 0b100000) != 0
  ks__array_of__input_action_event__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: input_action_event
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__aux_types__string_ks__array_of__input_action_event__length_u:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: ks__array_of__input_action_event__length_u
  ks__dict_of__aux_types__string_ks__array_of__input_action_event__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_ks__array_of__input_action_event__length_u
        repeat: expr
        repeat-expr: length.value
  device_action:
    seq:
      - id: ks__bit_field
        type: u1
      - id: keyboard_touch
        type: aux_types::string
        if: ks__has_field_keyboard_touch
      - id: keyboard_mouse
        type: aux_types::string
        if: ks__has_field_keyboard_mouse
      - id: joypad
        type: aux_types::string
        if: ks__has_field_joypad
    instances:
      ks__has_field_keyboard_touch: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_keyboard_mouse: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_joypad: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__kvp_of_dict__aux_types__vlq_base128_le_s_device_action:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_s
      - id: value
        type: device_action
  ks__dict_of__aux_types__vlq_base128_le_s_device_action:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_s_device_action
        repeat: expr
        repeat-expr: length.value
  config_base_context:
    seq:
      - id: ks__bit_field
        type: u1
      - id: action_groups
        type: ks__dict_of__aux_types__string_ks__array_of__input_action_event__length_u
        if: ks__has_field_action_groups
      - id: state_actions
        type: ks__dict_of__aux_types__vlq_base128_le_s_device_action
        if: ks__has_field_state_actions
      - id: enable_input_penetrate
        type: u1
        if: ks__has_field_enable_input_penetrate
      - id: enable_joypad_virtual_cursor
        type: u1
        if: ks__has_field_enable_joypad_virtual_cursor
    instances:
      ks__has_field_action_groups: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_state_actions: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_enable_input_penetrate: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_enable_joypad_virtual_cursor: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  ks__kvp_of_dict__ks__enum__input_event_type_config_base_input_event:
    seq:
      - id: key
        type: ks__enum__input_event_type
      - id: value
        type: config_base_input_event
  ks__dict_of__ks__enum__input_event_type_config_base_input_event:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__ks__enum__input_event_type_config_base_input_event
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__aux_types__string_config_base_context:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: config_base_context
  ks__dict_of__aux_types__string_config_base_context:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_config_base_context
        repeat: expr
        repeat-expr: length.value
  config_ui:
    seq:
      - id: ks__bit_field
        type: u1
      - id: input_events
        type: ks__dict_of__ks__enum__input_event_type_config_base_input_event
        if: ks__has_field_input_events
      - id: action_groups
        type: ks__dict_of__aux_types__string_ks__array_of__input_action_event__length_u
        if: ks__has_field_action_groups
      - id: context
        type: ks__dict_of__aux_types__string_config_base_context
        if: ks__has_field_context
    instances:
      ks__has_field_input_events: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_action_groups: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_context: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ability_prop_excel_config_loader:
    seq: []
    instances: {}
  show_type_comparer:
    seq: []
    instances: {}
  excel_tool:
    seq: []
    instances: {}
  progress_show_type_comparer:
    seq: []
    instances: {}
  achievement_excel_config_loader:
    seq: []
    instances: {}
  achievement_goal_excel_config_loader:
    seq: []
    instances: {}
  ps4group_excel_config_loader:
    seq: []
    instances: {}
  ps5group_excel_config_loader:
    seq: []
    instances: {}
  activity_ability_group_excel_config_loader:
    seq: []
    instances: {}
  activity_up_avatar_excel_config_loader:
    seq: []
    instances: {}
  activity_arena_challenge_preview_excel_config_loader:
    seq: []
    instances: {}
  activity_arena_challenge_level_info_excel_config_loader:
    seq: []
    instances: {}
  activity_arena_challenge_excel_config_loader:
    seq: []
    instances: {}
  ks__enum__aster_phase:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: aster_phase
  aster_phase_comparer:
    seq: []
    instances: {}
  aster_little_excel_config_loader:
    seq: []
    instances: {}
  aster_mid_excel_config_loader:
    seq: []
    instances: {}
  aster_mid_groups_excel_config_loader:
    seq: []
    instances: {}
  aster_mid_difficulty_excel_config_loader:
    seq: []
    instances: {}
  aster_activity_perview_excel_config_loader:
    seq: []
    instances: {}
  activity_banner_type_comparer:
    seq: []
    instances: {}
  activity_banner_excel_config_loader:
    seq: []
    instances: {}
  blessing_scan_type_comparer:
    seq: []
    instances: {}
  blessing_scan_pic_excel_config_loader:
    seq: []
    instances: {}
  blitz_rush_excel_config_loader:
    seq: []
    instances: {}
  blitz_rush_stage_excel_config_loader:
    seq: []
    instances: {}
  blitz_rush_parkour_excel_config_loader:
    seq: []
    instances: {}
  bounce_conjuring_preview_excel_config_loader:
    seq: []
    instances: {}
  bounce_conjuring_chapter_excel_config_loader:
    seq: []
    instances: {}
  bounce_conjuring_item_excel_config_loader:
    seq: []
    instances: {}
  buoyant_combat_level_excel_config_loader:
    seq: []
    instances: {}
  channeller_slab_buff_quality_comparer:
    seq: []
    instances: {}
  channeller_slab_difficulty_comparer:
    seq: []
    instances: {}
  channeller_slab_condition_comparer:
    seq: []
    instances: {}
  channeller_slab_loop_dungeon_condition_excel_config_loader:
    seq: []
    instances: {}
  channeller_slab_loop_dungeon_excel_config_loader:
    seq: []
    instances: {}
  card_fortune_type_comparer:
    seq: []
    instances: {}
  chess_card_quality_type_comparer:
    seq: []
    instances: {}
  chess_card_type_comparer:
    seq: []
    instances: {}
  chess_card_target_type_comparer:
    seq: []
    instances: {}
  chess_card_numerical_modification_type_comparer:
    seq: []
    instances: {}
  chess_card_numerical_modification_mode_comparer:
    seq: []
    instances: {}
  chess_card_effect_type_comparer:
    seq: []
    instances: {}
  chess_card_tag_comparer:
    seq: []
    instances: {}
  activity_chess_preview_excel_config_loader:
    seq: []
    instances: {}
  activity_chess_schedule_excel_config_loader:
    seq: []
    instances: {}
  activity_chess_map_point_excel_config_loader:
    seq: []
    instances: {}
  activity_chess_affix_excel_config_loader:
    seq: []
    instances: {}
  activity_delivery_excel_config_loader:
    seq: []
    instances: {}
  activity_delivery_daily_excel_config_loader:
    seq: []
    instances: {}
  activity_delivery_watcher_data_config_loader:
    seq: []
    instances: {}
  dig_over_all_excel_config_loader:
    seq: []
    instances: {}
  dig_stage_data_excel_config_loader:
    seq: []
    instances: {}
  dig_group_link_excel_config_loader:
    seq: []
    instances: {}
  ks__enum__dragon_spine_phase:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: dragon_spine_phase
  dragon_spine_phase_comparer:
    seq: []
    instances: {}
  dragon_spine_mission_finish_exec_type_comparer:
    seq: []
    instances: {}
  dragon_spine_mission_excel_config_loader:
    seq: []
    instances: {}
  echo_shell_excel_config_loader:
    seq: []
    instances: {}
  echo_shell_float_signal_excel_config_loader:
    seq: []
    instances: {}
  effigy_difficulty_comparer:
    seq: []
    instances: {}
  effigy_condition_comparer:
    seq: []
    instances: {}
  effigy_challenge_excel_config_loader:
    seq: []
    instances: {}
  effigy_difficulty_excel_config_loader:
    seq: []
    instances: {}
  effigy_reward_excel_config_loader:
    seq: []
    instances: {}
  effigy_limiting_condition_excel_config_loader:
    seq: []
    instances: {}
  expedition_activity_preview_excel_config_loader:
    seq: []
    instances: {}
  expedition_path_excel_config_loader:
    seq: []
    instances: {}
  expedition_difficulty_excel_config_loader:
    seq: []
    instances: {}
  expedition_bonus_excel_config_loader:
    seq: []
    instances: {}
  expedition_activity_marker_excel_config_loader:
    seq: []
    instances: {}
  expedition_challenge_excel_config_loader:
    seq: []
    instances: {}
  fleur_fair_mini_game_type_comparer:
    seq: []
    instances: {}
  fleur_fair_dungeon_stat_type_comparer:
    seq: []
    instances: {}
  fleur_fair_dungeon_stat_method_comparer:
    seq: []
    instances: {}
  fleur_fair_chapter_excel_config_loader:
    seq: []
    instances: {}
  fleur_fair_tips_excel_config_loader:
    seq: []
    instances: {}
  fleur_fair_dungeon_excel_config_loader:
    seq: []
    instances: {}
  fleur_fair_dungeon_stat_excel_config_loader:
    seq: []
    instances: {}
  fleur_fair_buff_energy_stat_excel_config_loader:
    seq: []
    instances: {}
  flight_activity_excel_config_loader:
    seq: []
    instances: {}
  flight_activity_medal_excel_config_loader:
    seq: []
    instances: {}
  flight_activity_day_excel_config_loader:
    seq: []
    instances: {}
  activity_group_link_type_comparer:
    seq: []
    instances: {}
  activity_group_link_reward_type_comparer:
    seq: []
    instances: {}
  activity_group_links_excel_config_loader:
    seq: []
    instances: {}
  group_links_bundle_excel_config_loader:
    seq: []
    instances: {}
  group_links_bundle_reward_excel_config_loader:
    seq: []
    instances: {}
  hide_and_seek_skill_category_comparer:
    seq: []
    instances: {}
  hide_and_seek_skill_sub_category_comparer:
    seq: []
    instances: {}
  hide_and_seek_skill_excel_config_loader:
    seq: []
    instances: {}
  hide_and_seek_match_excel_config_loader:
    seq: []
    instances: {}
  luna_rite_region_type_comparer:
    seq: []
    instances: {}
  luna_rite_quest_type_comparer:
    seq: []
    instances: {}
  find_hilichurl_assignment_type_comparer:
    seq: []
    instances: {}
  mist_trial_client_sync_type_comparer:
    seq: []
    instances: {}
  mist_trial_statistic_type_comparer:
    seq: []
    instances: {}
  activity_mist_trial_level_data_excel_config_loader:
    seq: []
    instances: {}
  activity_mist_trial_avatar_data_excel_config_loader:
    seq: []
    instances: {}
  activity_mist_trial_watcher_list_data_excel_config_loader:
    seq: []
    instances: {}
  activity_mist_trial_statistics_list_excel_config_loader:
    seq: []
    instances: {}
  moonfin_trial_activity_level_type_comparer:
    seq: []
    instances: {}
  moonfin_trial_excel_config_loader:
    seq: []
    instances: {}
  moonfin_trial_level_excel_config_loader:
    seq: []
    instances: {}
  music_game_preview_config_loader:
    seq: []
    instances: {}
  activity_plant_flower_main_excel_config_loader:
    seq: []
    instances: {}
  activity_plant_flower_daily_excel_config_loader:
    seq: []
    instances: {}
  region_search_type_comparer:
    seq: []
    instances: {}
  region_search_cond_type_comparer:
    seq: []
    instances: {}
  region_search_recycle_type_comparer:
    seq: []
    instances: {}
  region_search_excel_config_loader:
    seq: []
    instances: {}
  region_search_cond_excel_config_loader:
    seq: []
    instances: {}
  region_search_region_excel_config_loader:
    seq: []
    instances: {}
  roguelike_effect_type_comparer:
    seq: []
    instances: {}
  roguelike_shikigami_unlock_type_comparer:
    seq: []
    instances: {}
  roguelike_card_type_comparer:
    seq: []
    instances: {}
  roguelike_card_label_comparer:
    seq: []
    instances: {}
  rogue_cell_type_comparer:
    seq: []
    instances: {}
  rogue_create_gadget_type_comparer:
    seq: []
    instances: {}
  rogue_gadget_state_type_comparer:
    seq: []
    instances: {}
  rogue_gadget_dir_type_comparer:
    seq: []
    instances: {}
  rogue_monster_pool_difficulty_type_comparer:
    seq: []
    instances: {}
  rogue_stage_excel_config_loader:
    seq: []
    instances: {}
  roguelike_rune_excel_config_loader:
    seq: []
    instances: {}
  roguelike_shikigami_excel_config_loader:
    seq: []
    instances: {}
  roguelike_shikigami_group_excel_config_loader:
    seq: []
    instances: {}
  roguelike_curse_pool_excel_config_loader:
    seq: []
    instances: {}
  rogue_dungeon_cell_excel_config_loader:
    seq: []
    instances: {}
  rogue_cell_weight_excel_config_loader:
    seq: []
    instances: {}
  rogue_sequence_excel_config_loader:
    seq: []
    instances: {}
  rogue_gadget_excel_config_loader:
    seq: []
    instances: {}
  rogue_gadget_rot_config_loader:
    seq: []
    instances: {}
  rogue_monster_pool_excel_config_loader:
    seq: []
    instances: {}
  rogue_token_excel_config_loader:
    seq: []
    instances: {}
  rogue_gadget_widget_config:
    seq:
      - id: ks__bit_field
        type: u1
      - id: gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gadget_id
      - id: weight
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_weight
    instances:
      ks__has_field_gadget_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_weight: # Field №1
        value: (ks__bit_field & 0b10) != 0
  salesman_special_reward_type_comparer:
    seq: []
    instances: {}
  salesman_special_reward_obtain_method_comparer:
    seq: []
    instances: {}
  reward_resource_type_comparer:
    seq: []
    instances: {}
  activity_salesman_excel_config_loader:
    seq: []
    instances: {}
  activity_salesman_daily_excel_config_loader:
    seq: []
    instances: {}
  activity_salesman_reward_match_config_loader:
    seq: []
    instances: {}
  lamp_contribution_excel_config_loader:
    seq: []
    instances: {}
  lamp_phase_excel_config_loader:
    seq: []
    instances: {}
  lamp_progress_control_config_loader:
    seq: []
    instances: {}
  lamp_region_data_config_loader:
    seq: []
    instances: {}
  sea_lamp_section_main_quest_excel_config_loader:
    seq: []
    instances: {}
  sea_lamp_section_mini_quest_excel_config_loader:
    seq: []
    instances: {}
  activity_shop_sheet_cond_type_comparer:
    seq: []
    instances: {}
  activity_shop_overall_excel_config_loader:
    seq: []
    instances: {}
  activity_shop_sheet_excel_config_loader:
    seq: []
    instances: {}
  activity_summer_time_excel_config_loader:
    seq: []
    instances: {}
  activity_summer_time_stage_excel_config_loader:
    seq: []
    instances: {}
  activity_summer_time_float_signal_excel_config_loader:
    seq: []
    instances: {}
  activity_summer_time_race_preview_excel_config_loader:
    seq: []
    instances: {}
  activity_summer_time_race_excel_config_loader:
    seq: []
    instances: {}
  sumo_difficulty_type_comparer:
    seq: []
    instances: {}
  activity_sumo_overall_config_loader:
    seq: []
    instances: {}
  activity_sumo_stage_excel_config_loader:
    seq: []
    instances: {}
  activity_sumo_switch_skill_excel_config_loader:
    seq: []
    instances: {}
  activity_sumo_difficulty_excel_config_loader:
    seq: []
    instances: {}
  treasure_map_excel_config_loader:
    seq: []
    instances: {}
  treasure_map_bonus_region_excel_config_loader:
    seq: []
    instances: {}
  treasure_map_region_excel_config_loader:
    seq: []
    instances: {}
  bonus_treasure_solution_excel_config_loader:
    seq: []
    instances: {}
  icon_adsorb_effect_excel_config_loader:
    seq: []
    instances: {}
  avatar_codex_excel_config_loader:
    seq: []
    instances: {}
  avatar_use_type_comparer:
    seq: []
    instances: {}
  avatar_identity_type_comparer:
    seq: []
    instances: {}
  avatar_excel_config_loader:
    seq: []
    instances: {}
  avatar_level_excel_config_loader:
    seq: []
    instances: {}
  avatar_fetters_level_excel_config_loader:
    seq: []
    instances: {}
  avatar_hero_entity_excel_config_loader:
    seq: []
    instances: {}
  ks__enum__avatar_fashion_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: avatar_fashion_type
  avatar_fashion_type_comparer:
    seq: []
    instances: {}
  avatar_flycloak_excel_config_loader:
    seq: []
    instances: {}
  avatar_costume_excel_config_loader:
    seq: []
    instances: {}
  monitor_type_comparer:
    seq: []
    instances: {}
  activity_skill_target_comparer:
    seq: []
    instances: {}
  avatar_skill_excel_config_loader:
    seq: []
    instances: {}
  ability_state_resistance_by_id_excel_config_loader:
    seq: []
    instances: {}
  activity_skill_excel_config_loader:
    seq: []
    instances: {}
  ks__enum__talent_point_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: talent_point_type
  talent_point_type_comparer:
    seq: []
    instances: {}
  talent_filter_cond_comparer:
    seq: []
    instances: {}
  ks__enum__proud_skill_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: proud_skill_type
  proud_skill_type_comparer:
    seq: []
    instances: {}
  ks__enum__effect_target_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: effect_target_type
  effect_target_type_comparer:
    seq: []
    instances: {}
  proud_life_effect_type_comparer:
    seq: []
    instances: {}
  avatar_talent_excel_config_loader:
    seq: []
    instances: {}
  bargain_excel_config_loader:
    seq: []
    instances: {}
  battle_pass_schedule_reward_type_comparer:
    seq: []
    instances: {}
  battle_pass_mission_refresh_type_comparer:
    seq: []
    instances: {}
  battle_pass_schedule_excel_config_loader:
    seq: []
    instances: {}
  battle_pass_mission_excel_config_loader:
    seq: []
    instances: {}
  battle_pass_story_excel_config_loader:
    seq: []
    instances: {}
  blossom_refresh_type_comparer:
    seq: []
    instances: {}
  blossom_show_type_comparer:
    seq: []
    instances: {}
  blossom_reward_type_comparer:
    seq: []
    instances: {}
  blossom_chest_show_type_comparer:
    seq: []
    instances: {}
  blossom_refresh_cond_type_comparer:
    seq: []
    instances: {}
  blossom_open_excel_config_loader:
    seq: []
    instances: {}
  blossom_refresh_excel_config_loader:
    seq: []
    instances: {}
  blossom_groups_excel_config_loader:
    seq: []
    instances: {}
  blossom_section_order_excel_config_loader:
    seq: []
    instances: {}
  blossom_chest_excel_config_loader:
    seq: []
    instances: {}
  blossom_revise_excel_config_loader:
    seq: []
    instances: {}
  blossom_talk_excel_config_loader:
    seq: []
    instances: {}
  board_event_type_comparer:
    seq: []
    instances: {}
  bored_action_type_comparer:
    seq: []
    instances: {}
  bored_event_excel_config_loader:
    seq: []
    instances: {}
  bored_action_priority_excel_config_loader:
    seq: []
    instances: {}
  bored_create_monster_excel_config_loader:
    seq: []
    instances: {}
  bored_monster_pool_config_loader:
    seq: []
    instances: {}
  buff_stack_type_comparer:
    seq: []
    instances: {}
  buff_excel_config_loader:
    seq: []
    instances: {}
  chat_excel_config_loader:
    seq: []
    instances: {}
  animal_codex_type_comparer:
    seq: []
    instances: {}
  animal_codex_sub_type_comparer:
    seq: []
    instances: {}
  animal_codex_count_type_comparer:
    seq: []
    instances: {}
  material_codex_type_comparer:
    seq: []
    instances: {}
  quest_codex_excel_config_loader:
    seq: []
    instances: {}
  weapon_codex_excel_config_loader:
    seq: []
    instances: {}
  reliquary_codex_excel_config_loader:
    seq: []
    instances: {}
  animal_codex_excel_config_loader:
    seq: []
    instances: {}
  material_codex_excel_config_loader:
    seq: []
    instances: {}
  books_codex_excel_config_loader:
    seq: []
    instances: {}
  push_tips_codex_excel_config_loader:
    seq: []
    instances: {}
  view_codex_excel_config_loader:
    seq: []
    instances: {}
  quest_summarization_text_excel_config_loader:
    seq: []
    instances: {}
  charge_fill_effect_comparer:
    seq: []
    instances: {}
  taunt_level_template_excel_config_loader:
    seq: []
    instances: {}
  lock_template_excel_config_loader:
    seq: []
    instances: {}
  hit_level_template_excel_config_loader:
    seq: []
    instances: {}
  entity_multi_player_excel_config_loader:
    seq: []
    instances: {}
  charge_bar_style_excel_config_loader:
    seq: []
    instances: {}
  perception_template_excel_config_loader:
    seq: []
    instances: {}
  attack_attenuation_excel_config_loader:
    seq: []
    instances: {}
  ks__enum__combine_unlock_method:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: combine_unlock_method
  combine_unlock_method_comparer:
    seq: []
    instances: {}
  recipe_type_comparer:
    seq: []
    instances: {}
  combine_unlock_config:
    seq:
      - id: ks__bit_field
        type: u1
      - id: unlock_method
        type: ks__enum__combine_unlock_method
        if: ks__has_field_unlock_method
      - id: unlock_param
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_unlock_param
    instances:
      ks__has_field_unlock_method: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_unlock_param: # Field №1
        value: (ks__bit_field & 0b10) != 0
  combine_excel_config_loader:
    seq: []
    instances: {}
  reliquary_decompose_excel_config_loader:
    seq: []
    instances: {}
  arith_type_comparer:
    seq: []
    instances: {}
  quality_type_comparer:
    seq: []
    instances: {}
  ks__enum__job_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: job_type
  job_type_comparer:
    seq: []
    instances: {}
  body_type_comparer:
    seq: []
    instances: {}
  ks__enum__life_state:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: life_state
  life_state_comparer:
    seq: []
    instances: {}
  state_type_comparer:
    seq: []
    instances: {}
  monster_type_comparer:
    seq: []
    instances: {}
  skill_drag_comparer:
    seq: []
    instances: {}
  fight_prop_type_comparer:
    seq: []
    instances: {}
  ks__enum__prop_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: prop_type
  prop_type_comparer:
    seq: []
    instances: {}
  item_type_comparer:
    seq: []
    instances: {}
  material_type_comparer:
    seq: []
    instances: {}
  grow_curve_type_comparer:
    seq: []
    instances: {}
  equip_type_comparer:
    seq: []
    instances: {}
  ks__enum__type_count:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: type_count
  type_count_comparer:
    seq: []
    instances: {}
  weapon_type_comparer:
    seq: []
    instances: {}
  dungeon_play_type_comparer:
    seq: []
    instances: {}
  vision_level_type_comparer:
    seq: []
    instances: {}
  ks__enum__round_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: round_type
  round_type_comparer:
    seq: []
    instances: {}
  server_buff_type_comparer:
    seq: []
    instances: {}
  ks__enum__watcher_trigger_trace_back_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: watcher_trigger_trace_back_type
  watcher_trigger_trace_back_type_comparer:
    seq: []
    instances: {}
  watcher_trigger_type_comparer:
    seq: []
    instances: {}
  open_state_type_comparer:
    seq: []
    instances: {}
  material_destroy_type_comparer:
    seq: []
    instances: {}
  climate_type_comparer:
    seq: []
    instances: {}
  fetter_cond_type_comparer:
    seq: []
    instances: {}
  item_limit_type_comparer:
    seq: []
    instances: {}
  general_routine_type_comparer:
    seq: []
    instances: {}
  sbyte_index_serializer:
    seq: []
    instances: {}
  byte_index_serializer:
    seq: []
    instances: {}
  short_index_serializer:
    seq: []
    instances: {}
  ushort_index_serializer:
    seq: []
    instances: {}
  int_index_serializer:
    seq: []
    instances: {}
  uint_index_serializer:
    seq: []
    instances: {}
  long_index_serializer:
    seq: []
    instances: {}
  ulong_index_serializer:
    seq: []
    instances: {}
  float_index_serializer:
    seq: []
    instances: {}
  double_index_serializer:
    seq: []
    instances: {}
  bool_index_serializer:
    seq: []
    instances: {}
  string_index_serializer:
    seq: []
    instances: {}
  entity_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_name
      - id: prefab_path_hash_pre
        type: s1
        if: ks__has_field_prefab_path_hash
      - id: prefab_path_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_prefab_path_hash
      - id: prefab_path_remote_hash_pre
        type: s1
        if: ks__has_field_prefab_path_remote_hash
      - id: prefab_path_remote_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_prefab_path_remote_hash
      - id: controller_path_hash_pre
        type: s1
        if: ks__has_field_controller_path_hash
      - id: controller_path_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_controller_path_hash
      - id: controller_path_remote_hash_pre
        type: s1
        if: ks__has_field_controller_path_remote_hash
      - id: controller_path_remote_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_controller_path_remote_hash
      - id: camp_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_camp_id
      - id: lod_pattern_name
        type: aux_types::string
        if: ks__has_field_lod_pattern_name
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.value & 0b000000000001) != 0
      ks__has_field_name: # Field №1
        value: (ks__bit_field.value & 0b000000000010) != 0
      ks__has_field_prefab_path_hash: # Field №2
        value: (ks__bit_field.value & 0b000000000100) != 0
      ks__has_field_prefab_path_remote_hash: # Field №3
        value: (ks__bit_field.value & 0b000000001000) != 0
      ks__has_field_controller_path_hash: # Field №4
        value: (ks__bit_field.value & 0b000000010000) != 0
      ks__has_field_controller_path_remote_hash: # Field №5
        value: (ks__bit_field.value & 0b000000100000) != 0
      ks__has_field_camp_id: # Field №6
        value: (ks__bit_field.value & 0b000001000000) != 0
      ks__has_field_lod_pattern_name: # Field №7
        value: (ks__bit_field.value & 0b000010000000) != 0
  ks__array_of__fight_prop_grow_config__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: fight_prop_grow_config
        repeat: expr
        repeat-expr: length.value
  creature_excel_config:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: hp_base
        type: f4
        if: ks__has_field_hp_base
      - id: attack_base
        type: f4
        if: ks__has_field_attack_base
      - id: defense_base
        type: f4
        if: ks__has_field_defense_base
      - id: critical
        type: f4
        if: ks__has_field_critical
      - id: anti_critical
        type: f4
        if: ks__has_field_anti_critical
      - id: critical_hurt
        type: f4
        if: ks__has_field_critical_hurt
      - id: fire_sub_hurt
        type: f4
        if: ks__has_field_fire_sub_hurt
      - id: grass_sub_hurt
        type: f4
        if: ks__has_field_grass_sub_hurt
      - id: water_sub_hurt
        type: f4
        if: ks__has_field_water_sub_hurt
      - id: elec_sub_hurt
        type: f4
        if: ks__has_field_elec_sub_hurt
      - id: wind_sub_hurt
        type: f4
        if: ks__has_field_wind_sub_hurt
      - id: ice_sub_hurt
        type: f4
        if: ks__has_field_ice_sub_hurt
      - id: rock_sub_hurt
        type: f4
        if: ks__has_field_rock_sub_hurt
      - id: fire_add_hurt
        type: f4
        if: ks__has_field_fire_add_hurt
      - id: grass_add_hurt
        type: f4
        if: ks__has_field_grass_add_hurt
      - id: water_add_hurt
        type: f4
        if: ks__has_field_water_add_hurt
      - id: elec_add_hurt
        type: f4
        if: ks__has_field_elec_add_hurt
      - id: wind_add_hurt
        type: f4
        if: ks__has_field_wind_add_hurt
      - id: ice_add_hurt
        type: f4
        if: ks__has_field_ice_add_hurt
      - id: rock_add_hurt
        type: f4
        if: ks__has_field_rock_add_hurt
      - id: prop_grow_curves
        type: ks__array_of__fight_prop_grow_config__length_u
        if: ks__has_field_prop_grow_curves
      - id: element_mastery
        type: f4
        if: ks__has_field_element_mastery
      - id: physical_sub_hurt
        type: f4
        if: ks__has_field_physical_sub_hurt
      - id: physical_add_hurt
        type: f4
        if: ks__has_field_physical_add_hurt
      - id: prefab_path_ragdoll_hash_pre
        type: s1
        if: ks__has_field_prefab_path_ragdoll_hash
      - id: prefab_path_ragdoll_hash_suffix
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_prefab_path_ragdoll_hash
    instances:
      ks__has_field_hp_base: # Field №0
        value: (ks__bit_field.value & 0b00000000000000000000000001) != 0
      ks__has_field_attack_base: # Field №1
        value: (ks__bit_field.value & 0b00000000000000000000000010) != 0
      ks__has_field_defense_base: # Field №2
        value: (ks__bit_field.value & 0b00000000000000000000000100) != 0
      ks__has_field_critical: # Field №3
        value: (ks__bit_field.value & 0b00000000000000000000001000) != 0
      ks__has_field_anti_critical: # Field №4
        value: (ks__bit_field.value & 0b00000000000000000000010000) != 0
      ks__has_field_critical_hurt: # Field №5
        value: (ks__bit_field.value & 0b00000000000000000000100000) != 0
      ks__has_field_fire_sub_hurt: # Field №6
        value: (ks__bit_field.value & 0b00000000000000000001000000) != 0
      ks__has_field_grass_sub_hurt: # Field №7
        value: (ks__bit_field.value & 0b00000000000000000010000000) != 0
      ks__has_field_water_sub_hurt: # Field №8
        value: (ks__bit_field.value & 0b00000000000000000100000000) != 0
      ks__has_field_elec_sub_hurt: # Field №9
        value: (ks__bit_field.value & 0b00000000000000001000000000) != 0
      ks__has_field_wind_sub_hurt: # Field №10
        value: (ks__bit_field.value & 0b00000000000000010000000000) != 0
      ks__has_field_ice_sub_hurt: # Field №11
        value: (ks__bit_field.value & 0b00000000000000100000000000) != 0
      ks__has_field_rock_sub_hurt: # Field №12
        value: (ks__bit_field.value & 0b00000000000001000000000000) != 0
      ks__has_field_fire_add_hurt: # Field №13
        value: (ks__bit_field.value & 0b00000000000010000000000000) != 0
      ks__has_field_grass_add_hurt: # Field №14
        value: (ks__bit_field.value & 0b00000000000100000000000000) != 0
      ks__has_field_water_add_hurt: # Field №15
        value: (ks__bit_field.value & 0b00000000001000000000000000) != 0
      ks__has_field_elec_add_hurt: # Field №16
        value: (ks__bit_field.value & 0b00000000010000000000000000) != 0
      ks__has_field_wind_add_hurt: # Field №17
        value: (ks__bit_field.value & 0b00000000100000000000000000) != 0
      ks__has_field_ice_add_hurt: # Field №18
        value: (ks__bit_field.value & 0b00000001000000000000000000) != 0
      ks__has_field_rock_add_hurt: # Field №19
        value: (ks__bit_field.value & 0b00000010000000000000000000) != 0
      ks__has_field_prop_grow_curves: # Field №20
        value: (ks__bit_field.value & 0b00000100000000000000000000) != 0
      ks__has_field_element_mastery: # Field №21
        value: (ks__bit_field.value & 0b00001000000000000000000000) != 0
      ks__has_field_physical_sub_hurt: # Field №22
        value: (ks__bit_field.value & 0b00010000000000000000000000) != 0
      ks__has_field_physical_add_hurt: # Field №23
        value: (ks__bit_field.value & 0b00100000000000000000000000) != 0
      ks__has_field_prefab_path_ragdoll_hash: # Field №24
        value: (ks__bit_field.value & 0b01000000000000000000000000) != 0
  interval_value:
    seq:
      - id: ks__bit_field
        type: u1
      - id: low
        type: f4
        if: ks__has_field_low
      - id: high
        type: f4
        if: ks__has_field_high
    instances:
      ks__has_field_low: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_high: # Field №1
        value: (ks__bit_field & 0b10) != 0
  base_server_buff_config:
    seq:
      - id: ks__bit_field
        type: u1
      - id: server_buff_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_server_buff_id
      - id: server_buff_type
        type: ks__enum__server_buff_type
        if: ks__has_field_server_buff_type
      - id: ability_name
        type: aux_types::string
        if: ks__has_field_ability_name
      - id: modifier_name
        type: aux_types::string
        if: ks__has_field_modifier_name
    instances:
      ks__has_field_server_buff_id: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_server_buff_type: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_ability_name: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_modifier_name: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  watcher_config:
    seq:
      - id: ks__bit_field
        type: u1
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: trigger_config
        type: watcher_trigger_config
        if: ks__has_field_trigger_config
      - id: progress
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_progress
      - id: is_disuse
        type: u1
        if: ks__has_field_is_disuse
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_trigger_config: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_progress: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_is_disuse: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  ks__array_of__fetter_condition_config__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: fetter_condition_config
        repeat: expr
        repeat-expr: length.value
  fetter_config:
    seq:
      - id: ks__bit_field
        type: u1
      - id: fetter_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_fetter_id
      - id: avatar_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_avatar_id
      - id: open_conds
        type: ks__array_of__fetter_condition_config__length_u
        if: ks__has_field_open_conds
      - id: finish_conds
        type: ks__array_of__fetter_condition_config__length_u
        if: ks__has_field_finish_conds
    instances:
      ks__has_field_fetter_id: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_avatar_id: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_open_conds: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_finish_conds: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  custom_slot_config:
    seq:
      - id: ks__bit_field
        type: u1
      - id: slot_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_slot_id
      - id: optional_parts_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_optional_parts_id_list
      - id: is_necessary
        type: u1
        if: ks__has_field_is_necessary
      - id: default_parts_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_default_parts_id_list
      - id: init_parts_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_init_parts_id
    instances:
      ks__has_field_slot_id: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_optional_parts_id_list: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_is_necessary: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_default_parts_id_list: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_init_parts_id: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  ks__enum__region_shape:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: region_shape
  region_shape_comparer:
    seq: []
    instances: {}
  ks__enum__event_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: event_type
  event_type_comparer:
    seq: []
    instances: {}
  ks__enum__gadget_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: gadget_type
  gadget_type_comparer:
    seq: []
    instances: {}
  ks__enum__group_kill_policy:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: group_kill_policy
  group_kill_policy_comparer:
    seq: []
    instances: {}
  ks__enum__platform_rot_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: platform_rot_type
  platform_rot_type_comparer:
    seq: []
    instances: {}
  ks__enum__explore_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: explore_type
  explore_type_comparer:
    seq: []
    instances: {}
  ks__enum__father_challenge_property:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: father_challenge_property
  father_challenge_property_comparer:
    seq: []
    instances: {}
  ks__enum__challenge_event_mark_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: challenge_event_mark_type
  challenge_event_mark_type_comparer:
    seq: []
    instances: {}
  ks__enum__multistage_stage_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: multistage_stage_type
  multistage_stage_type_comparer:
    seq: []
    instances: {}
  ks__enum__group_io_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: group_io_type
  group_io_type_comparer:
    seq: []
    instances: {}
  ks__enum__common_player_tips_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: common_player_tips_type
  common_player_tips_type_comparer:
    seq: []
    instances: {}
  ks__enum__flow_suite_operate_policy:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: flow_suite_operate_policy
  flow_suite_operate_policy_comparer:
    seq: []
    instances: {}
  ks__enum__gallery_progress_score_ui_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: gallery_progress_score_ui_type
  gallery_progress_score_ui_type_comparer:
    seq: []
    instances: {}
  ks__enum__gallery_progress_score_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: gallery_progress_score_type
  gallery_progress_score_type_comparer:
    seq: []
    instances: {}
  compound_type_comparer:
    seq: []
    instances: {}
  const_value_type_comparer:
    seq: []
    instances: {}
  cook_food_type_comparer:
    seq: []
    instances: {}
  cook_method_type_comparer:
    seq: []
    instances: {}
  cook_bonus_type_comparer:
    seq: []
    instances: {}
  coop_task_cond_type_comparer:
    seq: []
    instances: {}
  coop_cg_type_comparer:
    seq: []
    instances: {}
  coop_point_type_comparer:
    seq: []
    instances: {}
  main_coop_excel_config_loader:
    seq: []
    instances: {}
  coop_interaction_excel_config_loader:
    seq: []
    instances: {}
  coop_activity_excel_config_loader:
    seq: []
    instances: {}
  cutscene_excel_config_loader:
    seq: []
    instances: {}
  daily_task_type_comparer:
    seq: []
    instances: {}
  ks__enum__condition_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: condition_type
  condition_type_comparer:
    seq: []
    instances: {}
  daily_task_finish_type_comparer:
    seq: []
    instances: {}
  ks__enum__daily_task_action_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: daily_task_action_type
  daily_task_action_type_comparer:
    seq: []
    instances: {}
  ks__enum__daily_task_cond_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: daily_task_cond_type
  daily_task_cond_type_comparer:
    seq: []
    instances: {}
  daily_task_tag_type:
    seq:
      - id: ks__bit_field
        type: u1
      - id: value
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_value
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b1) != 0
  daily_task_action:
    seq:
      - id: ks__bit_field
        type: u1
      - id: cond_type
        type: ks__enum__daily_task_cond_type
        if: ks__has_field_cond_type
      - id: cond_param1
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_cond_param1
      - id: cond_param2
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_cond_param2
      - id: cond_param3
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_cond_param3
      - id: type
        type: ks__enum__daily_task_action_type
        if: ks__has_field_type
      - id: param1
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_param1
      - id: param2
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_param2
      - id: param3
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_param3
    instances:
      ks__has_field_cond_type: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_cond_param1: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_cond_param2: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_cond_param3: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_type: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_param1: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_param2: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_param3: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
  daily_task_statisfied_cond:
    seq:
      - id: ks__bit_field
        type: u1
      - id: type
        type: ks__enum__condition_type
        if: ks__has_field_type
      - id: param1
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_param1
      - id: param2
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_param2
      - id: param3
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_param3
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_param1: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_param2: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_param3: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  daily_task_excel_config_loader:
    seq: []
    instances: {}
  daily_task_reward_excel_config_loader:
    seq: []
    instances: {}
  daily_task_level_excel_config_loader:
    seq: []
    instances: {}
  city_task_open_excel_config_loader:
    seq: []
    instances: {}
  player_die_type_comparer:
    seq: []
    instances: {}
  display_item_type_comparer:
    seq: []
    instances: {}
  display_item_excel_config_loader:
    seq: []
    instances: {}
  draft_exec_type_comparer:
    seq: []
    instances: {}
  draft_excel_config_loader:
    seq: []
    instances: {}
  draft_text_data_excel_config_loader:
    seq: []
    instances: {}
  ks__enum__drop_random_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: drop_random_type
  drop_random_type_comparer:
    seq: []
    instances: {}
  ks__enum__drop_node_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: drop_node_type
  drop_node_type_comparer:
    seq: []
    instances: {}
  ks__enum__data_entity_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: data_entity_type
  data_entity_type_comparer:
    seq: []
    instances: {}
  drop_node:
    seq:
      - id: ks__bit_field
        type: u1
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: num_interval
        type: aux_types::string
        if: ks__has_field_num_interval
      - id: weight
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_weight
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_num_interval: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_weight: # Field №2
        value: (ks__bit_field & 0b100) != 0
  drop_subfield_entry:
    seq:
      - id: ks__bit_field
        type: u1
      - id: name
        type: aux_types::string
        if: ks__has_field_name
      - id: drop_subfield_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_drop_subfield_id
    instances:
      ks__has_field_name: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_drop_subfield_id: # Field №1
        value: (ks__bit_field & 0b10) != 0
  base_drop_index_config:
    seq:
      - id: ks__bit_field
        type: u1
      - id: min_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_min_level
      - id: drop_tag
        type: aux_types::string
        if: ks__has_field_drop_tag
      - id: drop_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_drop_id
      - id: drop_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_drop_count
    instances:
      ks__has_field_min_level: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_drop_tag: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_drop_id: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_drop_count: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  chest_level_set_config_loader:
    seq: []
    instances: {}
  dungeon_element_challenge_excel_config_loader:
    seq: []
    instances: {}
  dungeon_entry_satisfied_condition_type_comparer:
    seq: []
    instances: {}
  dungun_entry_type_comparer:
    seq: []
    instances: {}
  dungeon_type_comparer:
    seq: []
    instances: {}
  involve_type_comparer:
    seq: []
    instances: {}
  settle_show_type_comparer:
    seq: []
    instances: {}
  settle_ui_type_comparer:
    seq: []
    instances: {}
  dungeon_state_type_comparer:
    seq: []
    instances: {}
  sub_challenge_fade_out_type_comparer:
    seq: []
    instances: {}
  sub_challenge_banner_type_comparer:
    seq: []
    instances: {}
  dungeon_cond_type_comparer:
    seq: []
    instances: {}
  challenge_type_comparer:
    seq: []
    instances: {}
  challenge_record_type_comparer:
    seq: []
    instances: {}
  ks__enum__challenge_cond_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: challenge_cond_type
  challenge_cond_type_comparer:
    seq: []
    instances: {}
  interrupt_button_type_comparer:
    seq: []
    instances: {}
  dungeon_roster_cycle_type_comparer:
    seq: []
    instances: {}
  dungeon_excel_config_loader:
    seq: []
    instances: {}
  dungeon_pass_excel_config_loader:
    seq: []
    instances: {}
  dungeon_challenge_config_loader:
    seq: []
    instances: {}
  daily_dungeon_config_loader:
    seq: []
    instances: {}
  dungeon_serial_config_loader:
    seq: []
    instances: {}
  dungeon_roster_config_loader:
    seq: []
    instances: {}
  dynamic_interaction_excel_config_loader:
    seq: []
    instances: {}
  element_coeff_excel_config_loader:
    seq: []
    instances: {}
  reaction_energy_excel_config_loader:
    seq: []
    instances: {}
  embedded_text_map_config_loader:
    seq: []
    instances: {}
  emoji_data_excel_config_loader:
    seq: []
    instances: {}
  emoji_set_data_excel_config_loader:
    seq: []
    instances: {}
  emotion_template_excel_config_loader:
    seq: []
    instances: {}
  endure_template_excel_config_loader:
    seq: []
    instances: {}
  env_animal_gather_excel_config_loader:
    seq: []
    instances: {}
  env_animal_weight_excel_config_loader:
    seq: []
    instances: {}
  ks__enum__exclusive_platform_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: exclusive_platform_type
  exclusive_platform_type_comparer:
    seq: []
    instances: {}
  ks__enum__exclusive_rule_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: exclusive_rule_type
  exclusive_rule_type_comparer:
    seq: []
    instances: {}
  ks__enum__exhibition_key_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: exhibition_key_type
  exhibition_key_type_comparer:
    seq: []
    instances: {}
  ks__enum__exhibition_server_trigger_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: exhibition_server_trigger_type
  exhibition_server_trigger_type_comparer:
    seq: []
    instances: {}
  ks__enum__exhibition_display_cond_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: exhibition_display_cond_type
  exhibition_display_cond_type_comparer:
    seq: []
    instances: {}
  ks__enum__exhibition_display_cond_param_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: exhibition_display_cond_param_type
  exhibition_display_cond_param_type_comparer:
    seq: []
    instances: {}
  ks__enum__exhibition_series_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: exhibition_series_type
  exhibition_series_type_comparer:
    seq: []
    instances: {}
  exhibition_score_type_comparer:
    seq: []
    instances: {}
  exhibition_card_order_type_comparer:
    seq: []
    instances: {}
  exhibition_display_cond_param:
    seq:
      - id: ks__bit_field
        type: u1
      - id: param_type
        type: ks__enum__exhibition_display_cond_param_type
        if: ks__has_field_param_type
      - id: param
        type: aux_types::string
        if: ks__has_field_param
    instances:
      ks__has_field_param_type: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_param: # Field №1
        value: (ks__bit_field & 0b10) != 0
  exhibition_card_excel_config_loader:
    seq: []
    instances: {}
  expedition_open_cond_type_comparer:
    seq: []
    instances: {}
  expedition_data_excel_config_loader:
    seq: []
    instances: {}
  explore_excel_config_loader:
    seq: []
    instances: {}
  explore_area_total_exp_excel_config_loader:
    seq: []
    instances: {}
  dungeon_map_area_excel_config_loader:
    seq: []
    instances: {}
  feature_tag_group_excel_config_loader:
    seq: []
    instances: {}
  feature_tag_excel_config_loader:
    seq: []
    instances: {}
  assoc_type_comparer:
    seq: []
    instances: {}
  fetters_excel_config_loader:
    seq: []
    instances: {}
  fetter_story_excel_config_loader:
    seq: []
    instances: {}
  fetter_character_card_excel_config_loader:
    seq: []
    instances: {}
  fish_stock_type_comparer:
    seq: []
    instances: {}
  fish_skill_type_comparer:
    seq: []
    instances: {}
  fish_skill_category_comparer:
    seq: []
    instances: {}
  fish_stock_excel_config_loader:
    seq: []
    instances: {}
  fish_pool_excel_config_loader:
    seq: []
    instances: {}
  fish_excel_config_loader:
    seq: []
    instances: {}
  fish_skill_excel_config_loader:
    seq: []
    instances: {}
  fish_bait_excel_config_loader:
    seq: []
    instances: {}
  fish_rod_excel_config_loader:
    seq: []
    instances: {}
  ks__enum__forge_unlock_method:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: forge_unlock_method
  forge_unlock_method_comparer:
    seq: []
    instances: {}
  forge_unlock_config:
    seq:
      - id: ks__bit_field
        type: u1
      - id: unlock_method
        type: ks__enum__forge_unlock_method
        if: ks__has_field_unlock_method
      - id: unlock_param
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_unlock_param
    instances:
      ks__has_field_unlock_method: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_unlock_param: # Field №1
        value: (ks__bit_field & 0b10) != 0
  forge_excel_config_loader:
    seq: []
    instances: {}
  forge_random_excel_config_loader:
    seq: []
    instances: {}
  forge_update_excel_config_loader:
    seq: []
    instances: {}
  ks__enum__gacha_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: gacha_type
  gacha_type_comparer:
    seq: []
    instances: {}
  ks__enum__gacha_item_parent_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: gacha_item_parent_type
  gacha_item_parent_type_comparer:
    seq: []
    instances: {}
  ks__enum__radar_hint_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: radar_hint_type
  radar_hint_type_comparer:
    seq: []
    instances: {}
  interact_action_type_comparer:
    seq: []
    instances: {}
  interact_cond_type_comparer:
    seq: []
    instances: {}
  guest_button_show_type_comparer:
    seq: []
    instances: {}
  gadget_excel_config_loader:
    seq: []
    instances: {}
  gadget_prop_excel_config_loader:
    seq: []
    instances: {}
  radar_hint_excel_config_loader:
    seq: []
    instances: {}
  land_sound_excel_config_loader:
    seq: []
    instances: {}
  gadget_interact_excel_config_loader:
    seq: []
    instances: {}
  gadget_guest_excel_config_loader:
    seq: []
    instances: {}
  gadget_title_excel_config_loader:
    seq: []
    instances: {}
  gadget_chain_excel_config_loader:
    seq: []
    instances: {}
  gallery_type_comparer:
    seq: []
    instances: {}
  gallery_excel_config_loader:
    seq: []
    instances: {}
  point_location_comparer:
    seq: []
    instances: {}
  ks__enum__gather_area_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: gather_area_type
  gather_area_type_comparer:
    seq: []
    instances: {}
  gather_save_type_comparer:
    seq: []
    instances: {}
  gather_excel_config_loader:
    seq: []
    instances: {}
  gather_bundle_excel_config_loader:
    seq: []
    instances: {}
  option_excel_config_loader:
    seq: []
    instances: {}
  giving_method_comparer:
    seq: []
    instances: {}
  bag_tab_comparer:
    seq: []
    instances: {}
  giving_excel_config_loader:
    seq: []
    instances: {}
  giving_group_excel_config_loader:
    seq: []
    instances: {}
  avatar_curve_excel_config_loader:
    seq: []
    instances: {}
  monster_curve_excel_config_loader:
    seq: []
    instances: {}
  gadget_curve_excel_config_loader:
    seq: []
    instances: {}
  weapon_curve_excel_config_loader:
    seq: []
    instances: {}
  guide_trigger_type_comparer:
    seq: []
    instances: {}
  guide_trigger_excel_config_loader:
    seq: []
    instances: {}
  guide_platform_type_comparer:
    seq: []
    instances: {}
  h5activity_cond_type_comparer:
    seq: []
    instances: {}
  h5activity_excel_config_loader:
    seq: []
    instances: {}
  h5activity_watcher_excel_config_loader:
    seq: []
    instances: {}
  furniture_deploy_type_comparer:
    seq: []
    instances: {}
  speical_furniture_type_comparer:
    seq: []
    instances: {}
  furniture_deploy_surface_type_comparer:
    seq: []
    instances: {}
  home_world_limit_shop_cond_type_comparer:
    seq: []
    instances: {}
  home_world_area_type_comparer:
    seq: []
    instances: {}
  home_avatar_event_type_comparer:
    seq: []
    instances: {}
  home_avatar_event_cond_type_comparer:
    seq: []
    instances: {}
  home_world_field_type_comparer:
    seq: []
    instances: {}
  home_world_furniture_excel_config_loader:
    seq: []
    instances: {}
  home_world_special_furniture_excel_config_loader:
    seq: []
    instances: {}
  homeworld_animal_excel_config_loader:
    seq: []
    instances: {}
  homeworld_module_excel_config_loader:
    seq: []
    instances: {}
  furniture_suite_excel_config_loader:
    seq: []
    instances: {}
  homeworld_level_excel_config_loader:
    seq: []
    instances: {}
  home_world_shop_sub_tag_excel_config_loader:
    seq: []
    instances: {}
  home_world_limit_shop_excel_config_loader:
    seq: []
    instances: {}
  home_world_least_shop_excel_config_loader:
    seq: []
    instances: {}
  home_world_area_comfort_excel_config_loader:
    seq: []
    instances: {}
  home_world_comfort_level_excel_config_loader:
    seq: []
    instances: {}
  home_world_event_excel_config_loader:
    seq: []
    instances: {}
  home_world_plant_excel_config_loader:
    seq: []
    instances: {}
  home_world_farm_field_excel_config_loader:
    seq: []
    instances: {}
  home_world_extra_furniture_excel_config_loader:
    seq: []
    instances: {}
  home_world_npc_excel_config_loader:
    seq: []
    instances: {}
  home_world_custom_furniture_slot_excel_config_loader:
    seq: []
    instances: {}
  hunting_offer_difficulty_type_comparer:
    seq: []
    instances: {}
  hunting_monster_create_pos_type_comparer:
    seq: []
    instances: {}
  hunting_clue_point_type_comparer:
    seq: []
    instances: {}
  hunting_monster_group_type_comparer:
    seq: []
    instances: {}
  hunting_refresh_cond_type_comparer:
    seq: []
    instances: {}
  hunting_monster_finish_type_comparer:
    seq: []
    instances: {}
  hunting_refresh_excel_config_loader:
    seq: []
    instances: {}
  hunting_region_excel_config_loader:
    seq: []
    instances: {}
  hunting_group_info_excel_config_loader:
    seq: []
    instances: {}
  hunting_clue_monster_excel_config_loader:
    seq: []
    instances: {}
  hunting_clue_gather_excel_config_loader:
    seq: []
    instances: {}
  hunting_monster_excel_config_loader:
    seq: []
    instances: {}
  hunting_clue_text_excel_config_loader:
    seq: []
    instances: {}
  investigation_type_comparer:
    seq: []
    instances: {}
  investigation_monster_map_mark_create_type_comparer:
    seq: []
    instances: {}
  monster_category_comparer:
    seq: []
    instances: {}
  investigation_monster_map_mark_create_condition_type_comparer:
    seq: []
    instances: {}
  investigation_config_loader:
    seq: []
    instances: {}
  investigation_target_config_loader:
    seq: []
    instances: {}
  investigation_monster_config_loader:
    seq: []
    instances: {}
  ks__enum__item_limit_refresh_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: item_limit_refresh_type
  item_limit_refresh_type_comparer:
    seq: []
    instances: {}
  ks__enum__output_control_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: output_control_type
  output_control_type_comparer:
    seq: []
    instances: {}
  ks__enum__item_limit_const_value_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: item_limit_const_value_type
  item_limit_const_value_type_comparer:
    seq: []
    instances: {}
  ks__enum__bonus_source_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: bonus_source_type
  bonus_source_type_comparer:
    seq: []
    instances: {}
  output_control_config:
    seq:
      - id: ks__bit_field
        type: u1
      - id: daily_output_limit
        type: optional_limit_config
        if: ks__has_field_daily_output_limit
      - id: total_output_limit
        type: optional_limit_config
        if: ks__has_field_total_output_limit
      - id: activity_output_limit
        type: optional_limit_config
        if: ks__has_field_activity_output_limit
    instances:
      ks__has_field_daily_output_limit: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_total_output_limit: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_activity_output_limit: # Field №2
        value: (ks__bit_field & 0b100) != 0
  level_suppress_excel_config_loader:
    seq: []
    instances: {}
  limit_region_type_comparer:
    seq: []
    instances: {}
  loading_area_type_comparer:
    seq: []
    instances: {}
  loading_tips_situation_type_comparer:
    seq: []
    instances: {}
  loading_tips_excel_config_loader:
    seq: []
    instances: {}
  loading_situation_excel_config_loader:
    seq: []
    instances: {}
  localization_asset_type_comparer:
    seq: []
    instances: {}
  ks__enum__excel_mail_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: excel_mail_type
  excel_mail_type_comparer:
    seq: []
    instances: {}
  mail_excel_config_loader:
    seq: []
    instances: {}
  birthday_mail_excel_config_loader:
    seq: []
    instances: {}
  match_limit_type_comparer:
    seq: []
    instances: {}
  match_sub_type_comparer:
    seq: []
    instances: {}
  ks__array_of__match_cond__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: match_cond
        repeat: expr
        repeat-expr: length.value
  match_limit_excel_config:
    seq:
      - id: ks__bit_field
        type: u1
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: cond
        type: ks__array_of__match_cond__length_u
        if: ks__has_field_cond
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_cond: # Field №1
        value: (ks__bit_field & 0b10) != 0
  match_excel_config_loader:
    seq: []
    instances: {}
  matching_text_data_excel_config_loader:
    seq: []
    instances: {}
  match_punish_excel_config_loader:
    seq: []
    instances: {}
  food_quality_type_comparer:
    seq: []
    instances: {}
  item_use_op_comparer:
    seq: []
    instances: {}
  item_use_target_comparer:
    seq: []
    instances: {}
  document_type_comparer:
    seq: []
    instances: {}
  source_jump_type_comparer:
    seq: []
    instances: {}
  ks__enum__material_expire_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: material_expire_type
  material_expire_type_comparer:
    seq: []
    instances: {}
  document_excel_config_loader:
    seq: []
    instances: {}
  material_source_data_excel_config_loader:
    seq: []
    instances: {}
  book_suit_excel_config_loader:
    seq: []
    instances: {}
  miracle_tag_comparer:
    seq: []
    instances: {}
  miracle_ring_excel_config_loader:
    seq: []
    instances: {}
  miracle_ring_drop_excel_config_loader:
    seq: []
    instances: {}
  monster_security_level_comparer:
    seq: []
    instances: {}
  monster_rarity_type_comparer:
    seq: []
    instances: {}
  monster_affix_excel_config_loader:
    seq: []
    instances: {}
  monster_relationship_excel_config_loader:
    seq: []
    instances: {}
  animal_describe_excel_config_loader:
    seq: []
    instances: {}
  monster_title_excel_config_loader:
    seq: []
    instances: {}
  monster_special_name_excel_config_loader:
    seq: []
    instances: {}
  mp_play_type_comparer:
    seq: []
    instances: {}
  mp_play_show_type_comparer:
    seq: []
    instances: {}
  mp_player_settle_type_comparer:
    seq: []
    instances: {}
  mp_player_settle_sync_type_comparer:
    seq: []
    instances: {}
  mp_play_match_excel_config_loader:
    seq: []
    instances: {}
  mp_play_group_excel_config_loader:
    seq: []
    instances: {}
  mp_play_watcher_config_loader:
    seq: []
    instances: {}
  mp_play_statistic_config_loader:
    seq: []
    instances: {}
  mp_play_buff_excel_config_loader:
    seq: []
    instances: {}
  mp_play_text_data_excel_config_loader:
    seq: []
    instances: {}
  mp_play_level_text_data_excel_config_loader:
    seq: []
    instances: {}
  mp_play_score_excel_config_loader:
    seq: []
    instances: {}
  mp_play_ability_group_excel_config_loader:
    seq: []
    instances: {}
  new_activity_type_comparer:
    seq: []
    instances: {}
  new_activity_cond_type_comparer:
    seq: []
    instances: {}
  new_activity_sale_type_comparer:
    seq: []
    instances: {}
  new_activity_excel_config_loader:
    seq: []
    instances: {}
  new_activity_cond_excel_config_loader:
    seq: []
    instances: {}
  new_activity_watcher_config_loader:
    seq: []
    instances: {}
  new_activity_entry_config_loader:
    seq: []
    instances: {}
  new_activity_avatar_selection_excel_config_loader:
    seq: []
    instances: {}
  new_activity_score_limit_excel_config_loader:
    seq: []
    instances: {}
  new_activity_score_reward_excel_config_loader:
    seq: []
    instances: {}
  new_activity_time_group_excel_config_loader:
    seq: []
    instances: {}
  new_activity_score_show_excel_config_loader:
    seq: []
    instances: {}
  new_activity_overlap_excel_config_loader:
    seq: []
    instances: {}
  new_activity_preview_config_loader:
    seq: []
    instances: {}
  npc_crowd_excel_config_loader:
    seq: []
    instances: {}
  billboard_type_comparer:
    seq: []
    instances: {}
  npc_excel_config_loader:
    seq: []
    instances: {}
  npc_first_met_excel_config_loader:
    seq: []
    instances: {}
  offering_action_type_comparer:
    seq: []
    instances: {}
  offering_level_up_excel_config_loader:
    seq: []
    instances: {}
  offering_open_state_config_loader:
    seq: []
    instances: {}
  oraionokami_data_excel_config_loader:
    seq: []
    instances: {}
  oraionokami_desc_excel_config_loader:
    seq: []
    instances: {}
  offering_version_excel_config_loader:
    seq: []
    instances: {}
  op_activity_bonus_type_comparer:
    seq: []
    instances: {}
  op_activity_bonus_source_type_comparer:
    seq: []
    instances: {}
  op_activity_track_type_comparer:
    seq: []
    instances: {}
  op_activity_excel_config_loader:
    seq: []
    instances: {}
  op_activity_bonus_excel_config_loader:
    seq: []
    instances: {}
  open_state_cond_type_comparer:
    seq: []
    instances: {}
  open_state_config_loader:
    seq: []
    instances: {}
  system_open_ui_config_loader:
    seq: []
    instances: {}
  overflow_transform_type_comparer:
    seq: []
    instances: {}
  personal_line_activity_feature_comparer:
    seq: []
    instances: {}
  personal_line_excel_config_loader:
    seq: []
    instances: {}
  personal_line_activity_excel_config_loader:
    seq: []
    instances: {}
  photograph_task_type_comparer:
    seq: []
    instances: {}
  photograph_pose_excel_config_loader:
    seq: []
    instances: {}
  photograph_posename_excel_config_loader:
    seq: []
    instances: {}
  photograph_expression_excel_config_loader:
    seq: []
    instances: {}
  photograph_task_loader:
    seq: []
    instances: {}
  player_level_lock_excel_config_loader:
    seq: []
    instances: {}
  ps_activities_category_type_comparer:
    seq: []
    instances: {}
  ps_activities_base_config:
    seq:
      - id: ks__bit_field
        type: u1
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: object_id
        type: aux_types::string
        if: ks__has_field_object_id
      - id: export_version
        type: aux_types::string
        if: ks__has_field_export_version
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_object_id: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_export_version: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ps_activities_activity_config_loader:
    seq: []
    instances: {}
  ps_activities_task_config_loader:
    seq: []
    instances: {}
  ps_activities_sub_task_config_loader:
    seq: []
    instances: {}
  qte_type_comparer:
    seq: []
    instances: {}
  qte_action_type_comparer:
    seq: []
    instances: {}
  qte_excel_config_loader:
    seq: []
    instances: {}
  qte_step_excel_config_loader:
    seq: []
    instances: {}
  quest_special_show_type_comparer:
    seq: []
    instances: {}
  chapter_excel_config_loader:
    seq: []
    instances: {}
  main_quest_excel_config_loader:
    seq: []
    instances: {}
  rq_talk_excel_config_loader:
    seq: []
    instances: {}
  talk_select_time_out_excel_config_loader:
    seq: []
    instances: {}
  dialog_select_time_out_excel_config_loader:
    seq: []
    instances: {}
  dialog_excel_config_loader:
    seq: []
    instances: {}
  random_id_count_config:
    seq:
      - id: ks__bit_field
        type: u1
      - id: id
        type: aux_types::string
        if: ks__has_field_id
      - id: count
        type: aux_types::string
        if: ks__has_field_count
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_count: # Field №1
        value: (ks__bit_field & 0b10) != 0
  random_quest_entrance_excel_config_loader:
    seq: []
    instances: {}
  random_quest_template_excel_config_loader:
    seq: []
    instances: {}
  random_quest_elem_pool_excel_config_loader:
    seq: []
    instances: {}
  random_main_quest_excel_config_loader:
    seq: []
    instances: {}
  random_quest_excel_config_loader:
    seq: []
    instances: {}
  quest_global_var_config_loader:
    seq: []
    instances: {}
  quest_place_config_loader:
    seq: []
    instances: {}
  quest_special_show_config_loader:
    seq: []
    instances: {}
  quest_dialog_decorator_excel_config_loader:
    seq: []
    instances: {}
  ks__enum__rand_task_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: rand_task_type
  rand_task_type_comparer:
    seq: []
    instances: {}
  rand_task_excel_config_loader:
    seq: []
    instances: {}
  rand_task_reward_config_loader:
    seq: []
    instances: {}
  rand_task_level_config_loader:
    seq: []
    instances: {}
  refresh_type_comparer:
    seq: []
    instances: {}
  refresh_index_type_comparer:
    seq: []
    instances: {}
  refresh_policy_excel_config_loader:
    seq: []
    instances: {}
  refresh_index_excel_config_loader:
    seq: []
    instances: {}
  reliquary_main_affix_name_comparer:
    seq: []
    instances: {}
  reliquary_excel_config_loader:
    seq: []
    instances: {}
  reliquary_main_prop_excel_config_loader:
    seq: []
    instances: {}
  reliquary_affix_excel_config_loader:
    seq: []
    instances: {}
  reliquary_level_excel_config_loader:
    seq: []
    instances: {}
  reliquary_powerup_excel_config_loader:
    seq: []
    instances: {}
  reminder_show_type_comparer:
    seq: []
    instances: {}
  reminder_style_type_comparer:
    seq: []
    instances: {}
  template_reminder_style_type_comparer:
    seq: []
    instances: {}
  server_message_show_type_comparer:
    seq: []
    instances: {}
  reminder_index_excel_config_loader:
    seq: []
    instances: {}
  reminder_excel_config_loader:
    seq: []
    instances: {}
  template_reminder_excel_config_loader:
    seq: []
    instances: {}
  uid_op_notify_excel_config_loader:
    seq: []
    instances: {}
  server_message_excel_config_loader:
    seq: []
    instances: {}
  reputation_entrance_type_comparer:
    seq: []
    instances: {}
  reputation_entrance_cond_type_comparer:
    seq: []
    instances: {}
  reputation_request_excel_config_loader:
    seq: []
    instances: {}
  reputation_function_excel_config_loader:
    seq: []
    instances: {}
  reunion_privilege_type_comparer:
    seq: []
    instances: {}
  reunion_schedule_excel_config_loader:
    seq: []
    instances: {}
  reunion_sign_in_excel_config_loader:
    seq: []
    instances: {}
  reunion_mission_excel_config_loader:
    seq: []
    instances: {}
  reunion_watcher_excel_config_loader:
    seq: []
    instances: {}
  reunion_privilege_excel_config_loader:
    seq: []
    instances: {}
  reunion_commercial_excel_config_loader:
    seq: []
    instances: {}
  revise_level_grow_excel_config_loader:
    seq: []
    instances: {}
  reward_source_system_type_comparer:
    seq: []
    instances: {}
  reward_preview_excel_config_loader:
    seq: []
    instances: {}
  general_reward_excel_config_loader:
    seq: []
    instances: {}
  routine_finish_type_comparer:
    seq: []
    instances: {}
  routine_cond_type_comparer:
    seq: []
    instances: {}
  routine_actionype_comparer:
    seq: []
    instances: {}
  routine_type_excel_config_loader:
    seq: []
    instances: {}
  routine_detail_excel_config_loader:
    seq: []
    instances: {}
  world_type_comparer:
    seq: []
    instances: {}
  scene_tag_cond_type_comparer:
    seq: []
    instances: {}
  scene_excel_config_loader:
    seq: []
    instances: {}
  trigger_excel_config_loader:
    seq: []
    instances: {}
  room_excel_config_loader:
    seq: []
    instances: {}
  world_excel_config_loader:
    seq: []
    instances: {}
  world_level_excel_config_loader:
    seq: []
    instances: {}
  scene_tag_config_loader:
    seq: []
    instances: {}
  sensitive_word_config_loader:
    seq: []
    instances: {}
  shop_type_comparer:
    seq: []
    instances: {}
  shop_refresh_type_comparer:
    seq: []
    instances: {}
  shop_precondition_comparer:
    seq: []
    instances: {}
  shop_excel_config_loader:
    seq: []
    instances: {}
  shop_goods_excel_config_loader:
    seq: []
    instances: {}
  shop_rotate_excel_config_loader:
    seq: []
    instances: {}
  shop_material_order_excel_config_loader:
    seq: []
    instances: {}
  shop_special_keys_data_excel_config_loader:
    seq: []
    instances: {}
  shopmall_recommend_cond_type_comparer:
    seq: []
    instances: {}
  shopmall_entrance_type_comparer:
    seq: []
    instances: {}
  ks__enum__product_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: product_type
  product_type_comparer:
    seq: []
    instances: {}
  shop_recommend_tab_type_comparer:
    seq: []
    instances: {}
  shop_recommend_tag_type_comparer:
    seq: []
    instances: {}
  card_product_type_comparer:
    seq: []
    instances: {}
  product_play_type_comparer:
    seq: []
    instances: {}
  shopmall_sub_tab_excel_config_loader:
    seq: []
    instances: {}
  product_detail_config:
    seq:
      - id: ks__bit_field
        type: u1
      - id: config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_config_id
      - id: price_tier
        type: aux_types::string
        if: ks__has_field_price_tier
      - id: shop_type
        type: ks__enum__shop_type
        if: ks__has_field_shop_type
    instances:
      ks__has_field_config_id: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_price_tier: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_shop_type: # Field №2
        value: (ks__bit_field & 0b100) != 0
  shopmall_recommend_config_loader:
    seq: []
    instances: {}
  product_mcoin_detail_config_loader:
    seq: []
    instances: {}
  product_card_detail_config_loader:
    seq: []
    instances: {}
  product_play_detail_config_loader:
    seq: []
    instances: {}
  product_ps4package_detail_config_loader:
    seq: []
    instances: {}
  product_google_gift_card_detail_config_loader:
    seq: []
    instances: {}
  product_concert_package_detail_config_loader:
    seq: []
    instances: {}
  product_apple_gift_card_detail_config_loader:
    seq: []
    instances: {}
  price_tier_config_loader:
    seq: []
    instances: {}
  shopmall_goods_sale_config_loader:
    seq: []
    instances: {}
  sign_in_cond_type_comparer:
    seq: []
    instances: {}
  ks__enum__bonus_activity_state:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: bonus_activity_state
  bonus_activity_state_comparer:
    seq: []
    instances: {}
  bonus_activity_type_comparer:
    seq: []
    instances: {}
  sign_in_cond_excel_config_loader:
    seq: []
    instances: {}
  sign_in_day_excel_config_loader:
    seq: []
    instances: {}
  sign_in_period_excel_config_loader:
    seq: []
    instances: {}
  bonus_activity_excel_config_loader:
    seq: []
    instances: {}
  bonus_activity_client_excel_config_loader:
    seq: []
    instances: {}
  ks__enum__strengthen_point_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: strengthen_point_type
  strengthen_point_type_comparer:
    seq: []
    instances: {}
  strengthen_dungeon_type_comparer:
    seq: []
    instances: {}
  strengthen_base_point_excel_config_loader:
    seq: []
    instances: {}
  team_resonance_cond_type_comparer:
    seq: []
    instances: {}
  team_resonance_excel_config_loader:
    seq: []
    instances: {}
  ks__enum__text_show_place:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: text_show_place
  text_show_place_comparer:
    seq: []
    instances: {}
  text_param_type_comparer:
    seq: []
    instances: {}
  manual_text_map_config_loader:
    seq: []
    instances: {}
  tower_cond_type_comparer:
    seq: []
    instances: {}
  tower_buff_lasting_type_comparer:
    seq: []
    instances: {}
  tower_schedule_excel_config_loader:
    seq: []
    instances: {}
  tower_buff:
    seq:
      - id: ks__bit_field
        type: u1
      - id: tower_buff_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_tower_buff_id
      - id: weight
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_weight
    instances:
      ks__has_field_tower_buff_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_weight: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__array_of__tower_buff__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: tower_buff
        repeat: expr
        repeat-expr: length.value
  tower_buff_config:
    seq:
      - id: ks__bit_field
        type: u1
      - id: tower_buff_list
        type: ks__array_of__tower_buff__length_u
        if: ks__has_field_tower_buff_list
    instances:
      ks__has_field_tower_buff_list: # Field №0
        value: (ks__bit_field & 0b1) != 0
  tower_buff_excel_config_loader:
    seq: []
    instances: {}
  tower_skip_floor_excel_config_loader:
    seq: []
    instances: {}
  mechanicus_card_type_comparer:
    seq: []
    instances: {}
  mechanicus_card_target_type_comparer:
    seq: []
    instances: {}
  mechanicus_card_effect_type_comparer:
    seq: []
    instances: {}
  mechanic_building_excel_config_loader:
    seq: []
    instances: {}
  mechanicus_excel_config_loader:
    seq: []
    instances: {}
  mechanicus_sequence_excel_config_loader:
    seq: []
    instances: {}
  mechanicus_map_excel_config_loader:
    seq: []
    instances: {}
  mechanicus_card_excel_config_loader:
    seq: []
    instances: {}
  mechanicus_card_effect_excel_config_loader:
    seq: []
    instances: {}
  mechanicus_card_curse_excel_config_loader:
    seq: []
    instances: {}
  mechanicus_map_point_excel_config_loader:
    seq: []
    instances: {}
  tree_type_comparer:
    seq: []
    instances: {}
  tree_drop_excel_config_loader:
    seq: []
    instances: {}
  tree_type_excel_config_loader:
    seq: []
    instances: {}
  ks__enum__trial_avatar_template_placeholder_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: trial_avatar_template_placeholder_type
  trial_avatar_template_placeholder_type_comparer:
    seq: []
    instances: {}
  trial_avatar_excel_config_loader:
    seq: []
    instances: {}
  trial_reliquary_excel_config_loader:
    seq: []
    instances: {}
  trial_avatar_template_excel_config_loader:
    seq: []
    instances: {}
  tutorial_detail_type_comparer:
    seq: []
    instances: {}
  tutorial_excel_config_loader:
    seq: []
    instances: {}
  tutorial_detail_excel_config_loader:
    seq: []
    instances: {}
  excel_config_util:
    seq: []
    instances: {}
  vehicle_skill_excel_config_loader:
    seq: []
    instances: {}
  vehicle_skill_depot_excel_config_loader:
    seq: []
    instances: {}
  ks__enum__avatar_filter_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: avatar_filter_type
  avatar_filter_type_comparer:
    seq: []
    instances: {}
  watcher_predicate_type_comparer:
    seq: []
    instances: {}
  push_tips_type_comparer:
    seq: []
    instances: {}
  push_tips_codex_type_comparer:
    seq: []
    instances: {}
  global_watcher_config_loader:
    seq: []
    instances: {}
  push_tips_config_loader:
    seq: []
    instances: {}
  weapon_material_type_comparer:
    seq: []
    instances: {}
  ks__enum__weapon_enhance_rule_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: weapon_enhance_rule_type
  weapon_enhance_rule_type_comparer:
    seq: []
    instances: {}
  weapon_excel_config_loader:
    seq: []
    instances: {}
  weapon_level_excel_config_loader:
    seq: []
    instances: {}
  weather_excel_config_loader:
    seq: []
    instances: {}
  weather_template_excel_config_loader:
    seq: []
    instances: {}
  room_weather_excel_config_loader:
    seq: []
    instances: {}
  widget_camera_action_type_comparer:
    seq: []
    instances: {}
  widget_camera_excel_config_loader:
    seq: []
    instances: {}
  widget_camera_scan_excel_config_loader:
    seq: []
    instances: {}
  vehicle_limit_type_comparer:
    seq: []
    instances: {}
  widget_excel_config_loader:
    seq: []
    instances: {}
  widget_general_excel_config_loader:
    seq: []
    instances: {}
  widget_active_excel_config_loader:
    seq: []
    instances: {}
  world_area_type_comparer:
    seq: []
    instances: {}
  area_terrain_type_comparer:
    seq: []
    instances: {}
  map_area_state_comparer:
    seq: []
    instances: {}
  explore_event_type_comparer:
    seq: []
    instances: {}
  world_area_levelup_action_type_comparer:
    seq: []
    instances: {}
  map_tag_type_comparer:
    seq: []
    instances: {}
  map_area_config_loader:
    seq: []
    instances: {}
  world_area_explore_event_config_loader:
    seq: []
    instances: {}
  world_area_levelup_config_loader:
    seq: []
    instances: {}
  trans_point_reward_config_loader:
    seq: []
    instances: {}
  config_wwise_string:
    seq:
      - id: ks__bit_field
        type: u1
      - id: text
        type: aux_types::string
        if: ks__has_field_text
    instances:
      ks__has_field_text: # Field №0
        value: (ks__bit_field & 0b1) != 0
  audio_one_time_event:
    seq:
      - id: ks__bit_field
        type: u1
      - id: event_name
        type: config_wwise_string
        if: ks__has_field_event_name
      - id: duration
        type: f4
        if: ks__has_field_duration
    instances:
      ks__has_field_event_name: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_duration: # Field №1
        value: (ks__bit_field & 0b10) != 0
  audio_state_op:
    seq:
      - id: ks__bit_field
        type: u1
      - id: group
        type: config_wwise_string
        if: ks__has_field_group
      - id: value
        type: config_wwise_string
        if: ks__has_field_value
    instances:
      ks__has_field_group: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_value: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_dummy_ability_register:
    seq: []
    instances: {}
  config_dummy_ability:
    seq:
      - id: ks__base
        type: config_ability
    instances:
      # Base class fields
      ability_name:
        value: ks__base.ability_name
      ability_mixins:
        value: ks__base.ability_mixins
      ability_specials:
        value: ks__base.ability_specials
      modifiers:
        value: ks__base.modifiers
      default_modifier:
        value: ks__base.default_modifier
      on_added:
        value: ks__base.on_added
      on_removed:
        value: ks__base.on_removed
      on_ability_start:
        value: ks__base.on_ability_start
      on_kill:
        value: ks__base.on_kill
      on_field_enter:
        value: ks__base.on_field_enter
      on_field_exit:
        value: ks__base.on_field_exit
      on_attach:
        value: ks__base.on_attach
      on_detach:
        value: ks__base.on_detach
      on_avatar_in:
        value: ks__base.on_avatar_in
      on_avatar_out:
        value: ks__base.on_avatar_out
      on_vehicle_in:
        value: ks__base.on_vehicle_in
      on_vehicle_out:
        value: ks__base.on_vehicle_out
      on_trigger_avatar_ray:
        value: ks__base.on_trigger_avatar_ray
      on_zone_enter:
        value: ks__base.on_zone_enter
      on_zone_exit:
        value: ks__base.on_zone_exit
      is_dynamic_ability:
        value: ks__base.is_dynamic_ability
      ability_defined_properties:
        value: ks__base.ability_defined_properties
  config_ability_task:
    seq:
      - id: ks__bit_field
        type: u1
      - id: is_async
        type: u1
        if: ks__has_field_is_async
      - id: duration
        type: f4
        if: ks__has_field_duration
      - id: delay
        type: f4
        if: ks__has_field_delay
    instances:
      ks__has_field_is_async: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_duration: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_delay: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__array_of__ks__disp__config_ability_task__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__disp__config_ability_task
        repeat: expr
        repeat-expr: length.value
  config_ability_system:
    seq:
      - id: ks__bit_field
        type: u1
      - id: should_pre_active
        type: u1
        if: ks__has_field_should_pre_active
      - id: tasks
        type: ks__array_of__ks__disp__config_ability_task__length_u
        if: ks__has_field_tasks
    instances:
      ks__has_field_should_pre_active: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_tasks: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__array_of__config_ability_system__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_ability_system
        repeat: expr
        repeat-expr: length.value
  config_entity_ability_system:
    seq:
      - id: ks__bit_field
        type: u1
      - id: on_being_hit
        type: ks__array_of__config_ability_system__length_u
        if: ks__has_field_on_being_hit
    instances:
      ks__has_field_on_being_hit: # Field №0
        value: (ks__bit_field & 0b1) != 0
  action_token_type_comparer:
    seq: []
    instances: {}
  ks__enum__action_token_source_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: action_token_source_type
  action_token_source_type_comparer:
    seq: []
    instances: {}
  config_action_token_channel:
    seq:
      - id: ks__bit_field
        type: u1
      - id: max_num
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_max_num
    instances:
      ks__has_field_max_num: # Field №0
        value: (ks__bit_field & 0b1) != 0
  ks__enum__entity_token_action_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: entity_token_action_type
  entity_token_action_type_comparer:
    seq: []
    instances: {}
  config_entity_action_token_group:
    seq:
      - id: ks__bit_field
        type: u1
      - id: low_entity_token
        type: config_ability_action_token
        if: ks__has_field_low_entity_token
      - id: other_entity_token
        type: config_ability_action_token
        if: ks__has_field_other_entity_token
      - id: use_high_entity_types
        type: u1
        if: ks__has_field_use_high_entity_types
    instances:
      ks__has_field_low_entity_token: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_other_entity_token: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_use_high_entity_types: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__kvp_of_dict__ks__enum__entity_token_action_type_config_entity_action_token_group:
    seq:
      - id: key
        type: ks__enum__entity_token_action_type
      - id: value
        type: config_entity_action_token_group
  ks__dict_of__ks__enum__entity_token_action_type_config_entity_action_token_group:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__ks__enum__entity_token_action_type_config_entity_action_token_group
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__ks__enum__action_token_source_type_ks__dict_of__ks__enum__entity_token_action_type_config_entity_action_token_group:
    seq:
      - id: key
        type: ks__enum__action_token_source_type
      - id: value
        type: ks__dict_of__ks__enum__entity_token_action_type_config_entity_action_token_group
  ks__dict_of__ks__enum__action_token_source_type_ks__dict_of__ks__enum__entity_token_action_type_config_entity_action_token_group:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__ks__enum__action_token_source_type_ks__dict_of__ks__enum__entity_token_action_type_config_entity_action_token_group
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_action_token_channel:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_s
      - id: value
        type: config_action_token_channel
  ks__dict_of__aux_types__vlq_base128_le_s_config_action_token_channel:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_action_token_channel
        repeat: expr
        repeat-expr: length.value
  config_action_token_channel_group_info:
    seq:
      - id: ks__bit_field
        type: u1
      - id: low_level_dist
        type: f4
        if: ks__has_field_low_level_dist
      - id: low_level_dist_token
        type: ks__dict_of__ks__enum__entity_token_action_type_config_entity_action_token_group
        if: ks__has_field_low_level_dist_token
      - id: action_source_token
        type: ks__dict_of__ks__enum__action_token_source_type_ks__dict_of__ks__enum__entity_token_action_type_config_entity_action_token_group
        if: ks__has_field_action_source_token
      - id: cfg
        type: ks__dict_of__aux_types__vlq_base128_le_s_config_action_token_channel
        if: ks__has_field_cfg
    instances:
      ks__has_field_low_level_dist: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_low_level_dist_token: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_action_source_token: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_cfg: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  ks__kvp_of_dict__aux_types__string_config_action_token_channel_group_info:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: config_action_token_channel_group_info
  ks__dict_of__aux_types__string_config_action_token_channel_group_info:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_config_action_token_channel_group_info
        repeat: expr
        repeat-expr: length.value
  config_platform_action_token_channel:
    seq:
      - id: ks__bit_field
        type: u1
      - id: high_entity_types
        type: ks__array_of__ks__enum__entity_type__length_u
        if: ks__has_field_high_entity_types
      - id: low_entity_types
        type: ks__array_of__ks__enum__entity_type__length_u
        if: ks__has_field_low_entity_types
      - id: entity_type_token
        type: ks__dict_of__ks__enum__entity_token_action_type_config_entity_action_token_group
        if: ks__has_field_entity_type_token
      - id: default_cfg
        type: config_action_token_channel_group_info
        if: ks__has_field_default_cfg
      - id: platform_cfg
        type: ks__dict_of__aux_types__string_config_action_token_channel_group_info
        if: ks__has_field_platform_cfg
    instances:
      ks__has_field_high_entity_types: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_low_entity_types: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_entity_type_token: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_default_cfg: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_platform_cfg: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  ks__enum__param_logic_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: param_logic_type
  param_logic_type_comparer:
    seq: []
    instances: {}
  ks__enum__level_buff_special:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: level_buff_special
  level_buff_special_comparer:
    seq: []
    instances: {}
  ks__enum__sort_modifier_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: sort_modifier_type
  sort_modifier_type_comparer:
    seq: []
    instances: {}
  base_utility_action_register:
    seq: []
    instances: {}
  base_utility_action:
    seq:
      - id: ks__base
        type: config_ability_action
    instances:
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  apply_modifier_register:
    seq: []
    instances: {}
  apply_level_modifier_register:
    seq: []
    instances: {}
  apply_level_modifier:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: modifier_name
        type: aux_types::string
        if: ks__has_field_modifier_name
    instances:
      ks__has_field_modifier_name: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  attach_modifier_register:
    seq: []
    instances: {}
  attach_modifier:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: modifier_name
        type: aux_types::string
        if: ks__has_field_modifier_name
    instances:
      ks__has_field_modifier_name: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  remove_unique_modifier_register:
    seq: []
    instances: {}
  remove_unique_modifier:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: modifier_name
        type: aux_types::string
        if: ks__has_field_modifier_name
    instances:
      ks__has_field_modifier_name: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  fire_effect_register:
    seq: []
    instances: {}
  fire_effect:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: effect_pattern
        type: aux_types::dynamic_string
        if: ks__has_field_effect_pattern
      - id: othereffect_patterns
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_othereffect_patterns
      - id: born
        type: ks__disp__config_born_type
        if: ks__has_field_born
      - id: owned_by_level
        type: u1
        if: ks__has_field_owned_by_level
      - id: use_y
        type: u1
        if: ks__has_field_use_y
      - id: scale
        type: f4
        if: ks__has_field_scale
      - id: effect_templete_id
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_effect_templete_id
      - id: set_self_as_effect_plugin_target
        type: u1
        if: ks__has_field_set_self_as_effect_plugin_target
    instances:
      ks__has_field_effect_pattern: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_othereffect_patterns: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_born: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_owned_by_level: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_use_y: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_scale: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_effect_templete_id: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_set_self_as_effect_plugin_target: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  fire_sub_emitter_effect_register:
    seq: []
    instances: {}
  fire_sub_emitter_effect:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: effect_pattern
        type: aux_types::dynamic_string
        if: ks__has_field_effect_pattern
      - id: born
        type: ks__disp__config_born_type
        if: ks__has_field_born
      - id: scale
        type: f4
        if: ks__has_field_scale
    instances:
      ks__has_field_effect_pattern: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_born: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_scale: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  fire_effect_for_storm_register:
    seq: []
    instances: {}
  fire_effect_for_storm:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: born
        type: ks__disp__config_born_type
        if: ks__has_field_born
      - id: height
        type: f4
        if: ks__has_field_height
    instances:
      ks__has_field_born: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_height: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  fire_effect_to_target_register:
    seq: []
    instances: {}
  fire_effect_to_target:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: effect_pattern
        type: aux_types::dynamic_string
        if: ks__has_field_effect_pattern
      - id: reverse
        type: u1
        if: ks__has_field_reverse
      - id: from_self
        type: u1
        if: ks__has_field_from_self
      - id: scale
        type: f4
        if: ks__has_field_scale
    instances:
      ks__has_field_effect_pattern: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_reverse: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_from_self: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_scale: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  fire_hit_effect_register:
    seq: []
    instances: {}
  ks__kvp_of_dict__aux_types__string_aux_types__string:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: aux_types::string
  ks__dict_of__aux_types__string_aux_types__string:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_aux_types__string
        repeat: expr
        repeat-expr: length.value
  config_hit_scene:
    seq:
      - id: ks__bit_field
        type: u1
      - id: default_effect
        type: aux_types::string
        if: ks__has_field_default_effect
      - id: surface_effect
        type: ks__dict_of__aux_types__string_aux_types__string
        if: ks__has_field_surface_effect
    instances:
      ks__has_field_default_effect: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_surface_effect: # Field №1
        value: (ks__bit_field & 0b10) != 0
  fire_hit_effect:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: hit_entity
        type: aux_types::string
        if: ks__has_field_hit_entity
      - id: hit_scene
        type: config_hit_scene
        if: ks__has_field_hit_scene
    instances:
      ks__has_field_hit_entity: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_hit_scene: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  avatar_skill_start_register:
    seq: []
    instances: {}
  avatar_skill_start:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: skill_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_skill_id
      - id: cd_ratio
        type: aux_types::dynamic_float
        if: ks__has_field_cd_ratio
      - id: cost_stamina_ratio
        type: aux_types::dynamic_float
        if: ks__has_field_cost_stamina_ratio
    instances:
      ks__has_field_skill_id: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_cd_ratio: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_cost_stamina_ratio: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  entity_do_skill_register:
    seq: []
    instances: {}
  entity_do_skill:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: skill_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_skill_id
      - id: is_hold
        type: u1
        if: ks__has_field_is_hold
    instances:
      ks__has_field_skill_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_is_hold: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  focus_assistance:
    seq:
      - id: ks__bit_field
        type: u1
      - id: use_focus_sticky
        type: u1
        if: ks__has_field_use_focus_sticky
      - id: use_auto_focus
        type: u1
        if: ks__has_field_use_auto_focus
      - id: use_gyro
        type: u1
        if: ks__has_field_use_gyro
    instances:
      ks__has_field_use_focus_sticky: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_use_auto_focus: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_use_gyro: # Field №2
        value: (ks__bit_field & 0b100) != 0
  focus_assistance_group:
    seq:
      - id: ks__bit_field
        type: u1
      - id: ps4
        type: focus_assistance
        if: ks__has_field_ps4
      - id: ps5
        type: focus_assistance
        if: ks__has_field_ps5
      - id: other
        type: focus_assistance
        if: ks__has_field_other
    instances:
      ks__has_field_ps4: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_ps5: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_other: # Field №2
        value: (ks__bit_field & 0b100) != 0
  avatar_enter_focus_register:
    seq: []
    instances: {}
  avatar_enter_focus:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: camera_follow_lower
        type: vector
        if: ks__has_field_camera_follow_lower
      - id: camera_follow_upper
        type: vector
        if: ks__has_field_camera_follow_upper
      - id: camera_follow_max_degree
        type: f4
        if: ks__has_field_camera_follow_max_degree
      - id: camera_follow_min_degree
        type: f4
        if: ks__has_field_camera_follow_min_degree
      - id: camera_fast_focus_mode
        type: u1
        if: ks__has_field_camera_fast_focus_mode
      - id: face_to_target
        type: u1
        if: ks__has_field_face_to_target
      - id: face_to_target_angle_threshold
        type: f4
        if: ks__has_field_face_to_target_angle_threshold
      - id: change_main_skill_id
        type: u1
        if: ks__has_field_change_main_skill_id
      - id: drag_button_name
        type: aux_types::string
        if: ks__has_field_drag_button_name
      - id: assistance
        type: focus_assistance_group
        if: ks__has_field_assistance
      - id: can_move
        type: u1
        if: ks__has_field_can_move
      - id: show_crosshair
        type: u1
        if: ks__has_field_show_crosshair
      - id: vcam_fov
        type: f4
        if: ks__has_field_vcam_fov
      - id: focus_anchor_hor_angle
        type: f4
        if: ks__has_field_focus_anchor_hor_angle
      - id: focus_anchor_ver_angle
        type: f4
        if: ks__has_field_focus_anchor_ver_angle
      - id: disable_anim
        type: u1
        if: ks__has_field_disable_anim
    instances:
      ks__has_field_camera_follow_lower: # Field №0
        value: (ks__bit_field.value & 0b0000000000000001) != 0
      ks__has_field_camera_follow_upper: # Field №1
        value: (ks__bit_field.value & 0b0000000000000010) != 0
      ks__has_field_camera_follow_max_degree: # Field №2
        value: (ks__bit_field.value & 0b0000000000000100) != 0
      ks__has_field_camera_follow_min_degree: # Field №3
        value: (ks__bit_field.value & 0b0000000000001000) != 0
      ks__has_field_camera_fast_focus_mode: # Field №4
        value: (ks__bit_field.value & 0b0000000000010000) != 0
      ks__has_field_face_to_target: # Field №5
        value: (ks__bit_field.value & 0b0000000000100000) != 0
      ks__has_field_face_to_target_angle_threshold: # Field №6
        value: (ks__bit_field.value & 0b0000000001000000) != 0
      ks__has_field_change_main_skill_id: # Field №7
        value: (ks__bit_field.value & 0b0000000010000000) != 0
      ks__has_field_drag_button_name: # Field №8
        value: (ks__bit_field.value & 0b0000000100000000) != 0
      ks__has_field_assistance: # Field №9
        value: (ks__bit_field.value & 0b0000001000000000) != 0
      ks__has_field_can_move: # Field №10
        value: (ks__bit_field.value & 0b0000010000000000) != 0
      ks__has_field_show_crosshair: # Field №11
        value: (ks__bit_field.value & 0b0000100000000000) != 0
      ks__has_field_vcam_fov: # Field №12
        value: (ks__bit_field.value & 0b0001000000000000) != 0
      ks__has_field_focus_anchor_hor_angle: # Field №13
        value: (ks__bit_field.value & 0b0010000000000000) != 0
      ks__has_field_focus_anchor_ver_angle: # Field №14
        value: (ks__bit_field.value & 0b0100000000000000) != 0
      ks__has_field_disable_anim: # Field №15
        value: (ks__bit_field.value & 0b1000000000000000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  avatar_exit_focus_register:
    seq: []
    instances: {}
  avatar_exit_focus:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: keep_rotation
        type: u1
        if: ks__has_field_keep_rotation
    instances:
      ks__has_field_keep_rotation: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  avatar_enter_view_bias_register:
    seq: []
    instances: {}
  avatar_enter_view_bias:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: sphere_bias_pole
        type: f4
        if: ks__has_field_sphere_bias_pole
      - id: sphere_bias_elev
        type: f4
        if: ks__has_field_sphere_bias_elev
      - id: sphere_radius
        type: f4
        if: ks__has_field_sphere_radius
      - id: post_forward_pole_delta_angle
        type: f4
        if: ks__has_field_post_forward_pole_delta_angle
      - id: post_forward_elev_delta_angle
        type: f4
        if: ks__has_field_post_forward_elev_delta_angle
      - id: duration_in_normal_state
        type: f4
        if: ks__has_field_duration_in_normal_state
      - id: lock_zoom
        type: u1
        if: ks__has_field_lock_zoom
      - id: lock_reset_back
        type: u1
        if: ks__has_field_lock_reset_back
    instances:
      ks__has_field_sphere_bias_pole: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_sphere_bias_elev: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_sphere_radius: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_post_forward_pole_delta_angle: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_post_forward_elev_delta_angle: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_duration_in_normal_state: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_lock_zoom: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_lock_reset_back: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  avatar_exit_view_bias_register:
    seq: []
    instances: {}
  avatar_exit_view_bias:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: lerp_duration
        type: f4
        if: ks__has_field_lerp_duration
      - id: lerp_radius
        type: f4
        if: ks__has_field_lerp_radius
    instances:
      ks__has_field_lerp_duration: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_lerp_radius: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  avatar_exit_climb_register:
    seq: []
    instances: {}
  avatar_exit_climb:
    seq:
      - id: ks__base
        type: config_ability_action
    instances:
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  avatar_camera_param_register:
    seq: []
    instances: {}
  config_state_camera_param:
    seq:
      - id: ks__bit_field
        type: u1
      - id: radius_spring_ratio
        type: f4
        if: ks__has_field_radius_spring_ratio
      - id: combat_elev_with_height_ratio
        type: f4
        if: ks__has_field_combat_elev_with_height_ratio
      - id: force_radius
        type: f4
        if: ks__has_field_force_radius
      - id: force_radius_duration
        type: f4
        if: ks__has_field_force_radius_duration
      - id: should_keep_force_radius
        type: u1
        if: ks__has_field_should_keep_force_radius
    instances:
      ks__has_field_radius_spring_ratio: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_combat_elev_with_height_ratio: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_force_radius: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_force_radius_duration: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_should_keep_force_radius: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  avatar_camera_param:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: camera_param
        type: config_state_camera_param
        if: ks__has_field_camera_param
    instances:
      ks__has_field_camera_param: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  avatar_enter_camera_shot_register:
    seq: []
    instances: {}
  ks__enum__ability_camera_shot_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: ability_camera_shot_type
  avatar_enter_camera_shot:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: camera_move_cfg_path
        type: aux_types::string
        if: ks__has_field_camera_move_cfg_path
      - id: shot_type
        type: ks__enum__ability_camera_shot_type
        if: ks__has_field_shot_type
    instances:
      ks__has_field_camera_move_cfg_path: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_shot_type: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  avatar_exit_camera_shot_register:
    seq: []
    instances: {}
  avatar_exit_camera_shot:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: shot_type
        type: ks__enum__ability_camera_shot_type
        if: ks__has_field_shot_type
    instances:
      ks__has_field_shot_type: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  play_emo_sync_register:
    seq: []
    instances: {}
  play_emo_sync:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: dialog_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_dialog_id
      - id: emo_sync_asset_path
        type: aux_types::string
        if: ks__has_field_emo_sync_asset_path
    instances:
      ks__has_field_dialog_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_emo_sync_asset_path: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  control_emotion_register:
    seq: []
    instances: {}
  control_emotion:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: toggle_emo_sync
        type: u1
        if: ks__has_field_toggle_emo_sync
      - id: toggle_blink
        type: u1
        if: ks__has_field_toggle_blink
      - id: toggle_eye_key
        type: u1
        if: ks__has_field_toggle_eye_key
    instances:
      ks__has_field_toggle_emo_sync: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_toggle_blink: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_toggle_eye_key: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  spawn_attach_register:
    seq: []
    instances: {}
  spawn_attach:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: enable
        type: u1
        if: ks__has_field_enable
      - id: attach_name
        type: aux_types::string
        if: ks__has_field_attach_name
    instances:
      ks__has_field_enable: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_attach_name: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  ks__enum__turn_mode:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: turn_mode
  turn_mode_comparer:
    seq: []
    instances: {}
  turn_direction_register:
    seq: []
    instances: {}
  turn_direction:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: turn_mode
        type: ks__enum__turn_mode
        if: ks__has_field_turn_mode
    instances:
      ks__has_field_turn_mode: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  turn_direction_to_pos_register:
    seq: []
    instances: {}
  turn_direction_to_pos:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: to_pos
        type: ks__disp__config_born_type
        if: ks__has_field_to_pos
      - id: min_angle
        type: f4
        if: ks__has_field_min_angle
      - id: max_angle
        type: f4
        if: ks__has_field_max_angle
    instances:
      ks__has_field_to_pos: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_min_angle: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_max_angle: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_camera_lock_time_register:
    seq: []
    instances: {}
  set_camera_lock_time:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: lock_time
        type: f4
        if: ks__has_field_lock_time
    instances:
      ks__has_field_lock_time: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  fire_monster_being_hit_after_image_register:
    seq: []
    instances: {}
  fire_monster_being_hit_after_image:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: effect_index
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_effect_index
    instances:
      ks__has_field_effect_index: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  fire_avatar_being_hit_after_image_register:
    seq: []
    instances: {}
  fire_avatar_being_hit_after_image:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: effect_index
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_effect_index
    instances:
      ks__has_field_effect_index: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  attach_effect_register:
    seq: []
    instances: {}
  attach_effect:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: effect_pattern
        type: aux_types::dynamic_string
        if: ks__has_field_effect_pattern
      - id: born
        type: ks__disp__config_born_type
        if: ks__has_field_born
      - id: scale
        type: f4
        if: ks__has_field_scale
      - id: effect_templete_id
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_effect_templete_id
      - id: set_self_as_effect_plugin_target
        type: u1
        if: ks__has_field_set_self_as_effect_plugin_target
    instances:
      ks__has_field_effect_pattern: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_born: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_scale: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_effect_templete_id: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_set_self_as_effect_plugin_target: # Field №4
        value: (ks__bit_field & 0b10000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  config_light_attach:
    seq:
      - id: ks__bit_field
        type: u1
      - id: attach_point
        type: aux_types::string
        if: ks__has_field_attach_point
      - id: local_pos_x
        type: f4
        if: ks__has_field_local_pos_x
      - id: local_pos_y
        type: f4
        if: ks__has_field_local_pos_y
      - id: local_pos_z
        type: f4
        if: ks__has_field_local_pos_z
      - id: local_rot_x
        type: f4
        if: ks__has_field_local_rot_x
      - id: local_rot_y
        type: f4
        if: ks__has_field_local_rot_y
      - id: local_rot_z
        type: f4
        if: ks__has_field_local_rot_z
      - id: local_rot_w
        type: f4
        if: ks__has_field_local_rot_w
    instances:
      ks__has_field_attach_point: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_local_pos_x: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_local_pos_y: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_local_pos_z: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_local_rot_x: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_local_rot_y: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_local_rot_z: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_local_rot_w: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
  config_light_component:
    seq:
      - id: ks__bit_field
        type: u1
      - id: light_type
        type: aux_types::string
        if: ks__has_field_light_type
      - id: range
        type: f4
        if: ks__has_field_range
      - id: color_r
        type: f4
        if: ks__has_field_color_r
      - id: color_g
        type: f4
        if: ks__has_field_color_g
      - id: color_b
        type: f4
        if: ks__has_field_color_b
      - id: angle
        type: f4
        if: ks__has_field_angle
      - id: intensity
        type: f4
        if: ks__has_field_intensity
      - id: indirect_mult
        type: f4
        if: ks__has_field_indirect_mult
    instances:
      ks__has_field_light_type: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_range: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_color_r: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_color_g: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_color_b: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_angle: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_intensity: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_indirect_mult: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
  attach_light_register:
    seq: []
    instances: {}
  attach_light:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: attach
        type: config_light_attach
        if: ks__has_field_attach
      - id: light
        type: config_light_component
        if: ks__has_field_light
    instances:
      ks__has_field_attach: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_light: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  add_global_value_register:
    seq: []
    instances: {}
  add_global_value:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: value
        type: aux_types::dynamic_float
        if: ks__has_field_value
      - id: key
        type: aux_types::string
        if: ks__has_field_key
      - id: use_limit_range
        type: u1
        if: ks__has_field_use_limit_range
      - id: random_in_range
        type: u1
        if: ks__has_field_random_in_range
      - id: max_value
        type: aux_types::dynamic_float
        if: ks__has_field_max_value
      - id: min_value
        type: aux_types::dynamic_float
        if: ks__has_field_min_value
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_key: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_use_limit_range: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_random_in_range: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_max_value: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_min_value: # Field №5
        value: (ks__bit_field & 0b100000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_global_value_register:
    seq: []
    instances: {}
  set_global_value:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: value
        type: aux_types::dynamic_float
        if: ks__has_field_value
      - id: key
        type: aux_types::string
        if: ks__has_field_key
      - id: use_limit_range
        type: u1
        if: ks__has_field_use_limit_range
      - id: random_in_range
        type: u1
        if: ks__has_field_random_in_range
      - id: max_value
        type: aux_types::dynamic_float
        if: ks__has_field_max_value
      - id: min_value
        type: aux_types::dynamic_float
        if: ks__has_field_min_value
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_key: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_use_limit_range: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_random_in_range: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_max_value: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_min_value: # Field №5
        value: (ks__bit_field & 0b100000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  multiply_global_value_register:
    seq: []
    instances: {}
  multiply_global_value:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: value
        type: aux_types::dynamic_float
        if: ks__has_field_value
      - id: key
        type: aux_types::string
        if: ks__has_field_key
      - id: use_limit_range
        type: u1
        if: ks__has_field_use_limit_range
      - id: random_in_range
        type: u1
        if: ks__has_field_random_in_range
      - id: max_value
        type: aux_types::dynamic_float
        if: ks__has_field_max_value
      - id: min_value
        type: aux_types::dynamic_float
        if: ks__has_field_min_value
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_key: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_use_limit_range: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_random_in_range: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_max_value: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_min_value: # Field №5
        value: (ks__bit_field & 0b100000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  copy_global_value_register:
    seq: []
    instances: {}
  copy_global_value:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: src_target
        type: ks__enum__ability_targetting
        if: ks__has_field_src_target
      - id: dst_target
        type: ks__enum__ability_targetting
        if: ks__has_field_dst_target
      - id: src_key
        type: aux_types::string
        if: ks__has_field_src_key
      - id: dst_key
        type: aux_types::string
        if: ks__has_field_dst_key
    instances:
      ks__has_field_src_target: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_dst_target: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_src_key: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_dst_key: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  global_value_pair:
    seq:
      - id: ks__bit_field
        type: u1
      - id: key
        type: aux_types::string
        if: ks__has_field_key
      - id: value
        type: aux_types::dynamic_float
        if: ks__has_field_value
      - id: use_limit_range
        type: u1
        if: ks__has_field_use_limit_range
      - id: random_in_range
        type: u1
        if: ks__has_field_random_in_range
      - id: max_value
        type: aux_types::dynamic_float
        if: ks__has_field_max_value
      - id: min_value
        type: aux_types::dynamic_float
        if: ks__has_field_min_value
    instances:
      ks__has_field_key: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_value: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_use_limit_range: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_random_in_range: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_max_value: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_min_value: # Field №5
        value: (ks__bit_field & 0b100000) != 0
  set_global_value_list_register:
    seq: []
    instances: {}
  ks__array_of__global_value_pair__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: global_value_pair
        repeat: expr
        repeat-expr: length.value
  set_global_value_list:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: global_value_list
        type: ks__array_of__global_value_pair__length_u
        if: ks__has_field_global_value_list
    instances:
      ks__has_field_global_value_list: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_global_value_to_override_map_register:
    seq: []
    instances: {}
  ks__enum__ability_formula:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: ability_formula
  set_global_value_to_override_map:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: ability_formula
        type: ks__enum__ability_formula
        if: ks__has_field_ability_formula
      - id: is_from_owner
        type: u1
        if: ks__has_field_is_from_owner
      - id: global_value_key
        type: aux_types::string
        if: ks__has_field_global_value_key
      - id: override_map_key
        type: aux_types::string
        if: ks__has_field_override_map_key
    instances:
      ks__has_field_ability_formula: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_is_from_owner: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_global_value_key: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_override_map_key: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  ks__enum__round_random_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: round_random_type
  round_random_type_comparer:
    seq: []
    instances: {}
  set_random_override_map_value_register:
    seq: []
    instances: {}
  set_random_override_map_value:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: value_range_max
        type: f4
        if: ks__has_field_value_range_max
      - id: value_range_min
        type: f4
        if: ks__has_field_value_range_min
      - id: override_map_key
        type: aux_types::string
        if: ks__has_field_override_map_key
      - id: round_type
        type: ks__enum__round_random_type
        if: ks__has_field_round_type
    instances:
      ks__has_field_value_range_max: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_value_range_min: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_override_map_key: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_round_type: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_override_map_value_register:
    seq: []
    instances: {}
  set_override_map_value:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: value
        type: aux_types::dynamic_float
        if: ks__has_field_value
      - id: override_map_key
        type: aux_types::string
        if: ks__has_field_override_map_key
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_override_map_key: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_crystal_shield_hp_to_override_map_register:
    seq: []
    instances: {}
  set_crystal_shield_hp_to_override_map:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: override_map_key
        type: aux_types::string
        if: ks__has_field_override_map_key
    instances:
      ks__has_field_override_map_key: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  ks__enum__system_valuer_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: system_valuer_type
  system_valuer_type_comparer:
    seq: []
    instances: {}
  set_system_value_to_override_map_register:
    seq: []
    instances: {}
  set_system_value_to_override_map:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: key
        type: aux_types::string
        if: ks__has_field_key
      - id: type
        type: ks__enum__system_valuer_type
        if: ks__has_field_type
    instances:
      ks__has_field_key: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_type: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_global_value_by_target_distance_register:
    seq: []
    instances: {}
  set_global_value_by_target_distance:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: key
        type: aux_types::string
        if: ks__has_field_key
      - id: is_xz
        type: u1
        if: ks__has_field_is_xz
    instances:
      ks__has_field_key: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_is_xz: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  clear_global_value_register:
    seq: []
    instances: {}
  clear_global_value:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: key
        type: aux_types::string
        if: ks__has_field_key
    instances:
      ks__has_field_key: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  sum_target_weight_to_self_global_value_register:
    seq: []
    instances: {}
  sum_target_weight_to_self_global_value:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: key
        type: aux_types::string
        if: ks__has_field_key
    instances:
      ks__has_field_key: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_global_pos_register:
    seq: []
    instances: {}
  set_global_pos:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: key
        type: aux_types::string
        if: ks__has_field_key
      - id: born
        type: ks__disp__config_born_type
        if: ks__has_field_born
      - id: set_target
        type: u1
        if: ks__has_field_set_target
    instances:
      ks__has_field_key: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_born: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_set_target: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  add_global_pos_register:
    seq: []
    instances: {}
  add_global_pos:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: key
        type: aux_types::string
        if: ks__has_field_key
      - id: born
        type: ks__disp__config_born_type
        if: ks__has_field_born
      - id: set_target
        type: u1
        if: ks__has_field_set_target
    instances:
      ks__has_field_key: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_born: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_set_target: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  clear_global_pos_register:
    seq: []
    instances: {}
  clear_global_pos:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: key
        type: aux_types::string
        if: ks__has_field_key
      - id: set_target
        type: u1
        if: ks__has_field_set_target
    instances:
      ks__has_field_key: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_set_target: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_global_dir_register:
    seq: []
    instances: {}
  set_global_dir:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: key
        type: aux_types::string
        if: ks__has_field_key
      - id: born
        type: ks__disp__config_born_type
        if: ks__has_field_born
      - id: set_target
        type: u1
        if: ks__has_field_set_target
    instances:
      ks__has_field_key: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_born: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_set_target: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  push_pos_register:
    seq: []
    instances: {}
  push_pos:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: pos_type
        type: ks__disp__config_born_type
        if: ks__has_field_pos_type
      - id: save_to
        type: ks__enum__ability_targetting
        if: ks__has_field_save_to
    instances:
      ks__has_field_pos_type: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_save_to: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  clear_pos_register:
    seq: []
    instances: {}
  clear_pos:
    seq:
      - id: ks__base
        type: config_ability_action
    instances:
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  ks__enum__get_pos_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: get_pos_type
  get_pos_type_comparer:
    seq: []
    instances: {}
  get_pos_register:
    seq: []
    instances: {}
  get_pos:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: key
        type: aux_types::string
        if: ks__has_field_key
      - id: pos_type
        type: ks__enum__get_pos_type
        if: ks__has_field_pos_type
    instances:
      ks__has_field_key: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_pos_type: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  ks__enum__damage_attacker:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: damage_attacker
  damage_attacker_comparer:
    seq: []
    instances: {}
  damage_by_attack_value_register:
    seq: []
    instances: {}
  damage_by_attack_value:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: attacker
        type: ks__enum__damage_attacker
        if: ks__has_field_attacker
      - id: born
        type: ks__disp__config_born_type
        if: ks__has_field_born
      - id: attack_info
        type: config_attack_info
        if: ks__has_field_attack_info
    instances:
      ks__has_field_attacker: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_born: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_attack_info: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  predicated_register:
    seq: []
    instances: {}
  predicated:
    seq:
      - id: ks__base
        type: base_utility_action
      - id: ks__bit_field
        type: u1
      - id: target_predicates
        type: ks__array_of__ks__disp__config_ability_predicate__length_u
        if: ks__has_field_target_predicates
      - id: success_actions
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_success_actions
      - id: fail_actions
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_fail_actions
    instances:
      ks__has_field_target_predicates: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_success_actions: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_fail_actions: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  heal_sp_register:
    seq: []
    instances: {}
  heal_sp:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: amount
        type: aux_types::dynamic_float
        if: ks__has_field_amount
      - id: amount_by_caster_max_sp_ratio
        type: aux_types::dynamic_float
        if: ks__has_field_amount_by_caster_max_sp_ratio
      - id: amount_by_target_max_sp_ratio
        type: aux_types::dynamic_float
        if: ks__has_field_amount_by_target_max_sp_ratio
      - id: amount_by_current_combo_ratio
        type: aux_types::dynamic_float
        if: ks__has_field_amount_by_current_combo_ratio
      - id: mute_heal_effect
        type: u1
        if: ks__has_field_mute_heal_effect
      - id: heal_ratio
        type: f4
        if: ks__has_field_heal_ratio
    instances:
      ks__has_field_amount: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_amount_by_caster_max_sp_ratio: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_amount_by_target_max_sp_ratio: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_amount_by_current_combo_ratio: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_mute_heal_effect: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_heal_ratio: # Field №5
        value: (ks__bit_field & 0b100000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  heal_hp_register:
    seq: []
    instances: {}
  heal_hp:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: amount
        type: aux_types::dynamic_float
        if: ks__has_field_amount
      - id: amount_by_caster_max_hp_ratio
        type: aux_types::dynamic_float
        if: ks__has_field_amount_by_caster_max_hp_ratio
      - id: amount_by_target_max_hp_ratio
        type: aux_types::dynamic_float
        if: ks__has_field_amount_by_target_max_hp_ratio
      - id: amount_by_target_current_hp_ratio
        type: aux_types::dynamic_float
        if: ks__has_field_amount_by_target_current_hp_ratio
      - id: amount_by_caster_attack_ratio
        type: aux_types::dynamic_float
        if: ks__has_field_amount_by_caster_attack_ratio
      - id: mute_heal_effect
        type: u1
        if: ks__has_field_mute_heal_effect
      - id: heal_ratio
        type: f4
        if: ks__has_field_heal_ratio
      - id: ignore_ability_property
        type: u1
        if: ks__has_field_ignore_ability_property
    instances:
      ks__has_field_amount: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_amount_by_caster_max_hp_ratio: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_amount_by_target_max_hp_ratio: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_amount_by_target_current_hp_ratio: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_amount_by_caster_attack_ratio: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_mute_heal_effect: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_heal_ratio: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_ignore_ability_property: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  lose_hp_register:
    seq: []
    instances: {}
  lose_hp:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: amount
        type: aux_types::dynamic_float
        if: ks__has_field_amount
      - id: amount_by_caster_max_hp_ratio
        type: aux_types::dynamic_float
        if: ks__has_field_amount_by_caster_max_hp_ratio
      - id: amount_by_target_max_hp_ratio
        type: aux_types::dynamic_float
        if: ks__has_field_amount_by_target_max_hp_ratio
      - id: amount_by_target_current_hp_ratio
        type: aux_types::dynamic_float
        if: ks__has_field_amount_by_target_current_hp_ratio
      - id: amount_by_caster_attack_ratio
        type: aux_types::dynamic_float
        if: ks__has_field_amount_by_caster_attack_ratio
      - id: lethal
        type: u1
        if: ks__has_field_lethal
      - id: enable_invincible
        type: u1
        if: ks__has_field_enable_invincible
      - id: enable_lock_hp
        type: u1
        if: ks__has_field_enable_lock_hp
      - id: disable_when_loading
        type: u1
        if: ks__has_field_disable_when_loading
      - id: use_meta
        type: u1
        if: ks__has_field_use_meta
    instances:
      ks__has_field_amount: # Field №0
        value: (ks__bit_field.value & 0b0000000001) != 0
      ks__has_field_amount_by_caster_max_hp_ratio: # Field №1
        value: (ks__bit_field.value & 0b0000000010) != 0
      ks__has_field_amount_by_target_max_hp_ratio: # Field №2
        value: (ks__bit_field.value & 0b0000000100) != 0
      ks__has_field_amount_by_target_current_hp_ratio: # Field №3
        value: (ks__bit_field.value & 0b0000001000) != 0
      ks__has_field_amount_by_caster_attack_ratio: # Field №4
        value: (ks__bit_field.value & 0b0000010000) != 0
      ks__has_field_lethal: # Field №5
        value: (ks__bit_field.value & 0b0000100000) != 0
      ks__has_field_enable_invincible: # Field №6
        value: (ks__bit_field.value & 0b0001000000) != 0
      ks__has_field_enable_lock_hp: # Field №7
        value: (ks__bit_field.value & 0b0010000000) != 0
      ks__has_field_disable_when_loading: # Field №8
        value: (ks__bit_field.value & 0b0100000000) != 0
      ks__has_field_use_meta: # Field №9
        value: (ks__bit_field.value & 0b1000000000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  revive_avatar_register:
    seq: []
    instances: {}
  revive_avatar:
    seq:
      - id: ks__base
        type: heal_hp
    instances:
      # Base class fields
      amount:
        value: ks__base.amount
      amount_by_caster_max_hp_ratio:
        value: ks__base.amount_by_caster_max_hp_ratio
      amount_by_target_max_hp_ratio:
        value: ks__base.amount_by_target_max_hp_ratio
      amount_by_target_current_hp_ratio:
        value: ks__base.amount_by_target_current_hp_ratio
      amount_by_caster_attack_ratio:
        value: ks__base.amount_by_caster_attack_ratio
      mute_heal_effect:
        value: ks__base.mute_heal_effect
      heal_ratio:
        value: ks__base.heal_ratio
      ignore_ability_property:
        value: ks__base.ignore_ability_property
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  revive_dead_avatar_register:
    seq: []
    instances: {}
  revive_dead_avatar:
    seq:
      - id: ks__base
        type: revive_avatar
      - id: ks__bit_field
        type: u1
      - id: is_revive_other_player_avatar
        type: u1
        if: ks__has_field_is_revive_other_player_avatar
      - id: skill_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_skill_id
      - id: cd_ratio
        type: aux_types::dynamic_float
        if: ks__has_field_cd_ratio
      - id: range
        type: f4
        if: ks__has_field_range
    instances:
      ks__has_field_is_revive_other_player_avatar: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_skill_id: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_cd_ratio: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_range: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      amount:
        value: ks__base.amount
      amount_by_caster_max_hp_ratio:
        value: ks__base.amount_by_caster_max_hp_ratio
      amount_by_target_max_hp_ratio:
        value: ks__base.amount_by_target_max_hp_ratio
      amount_by_target_current_hp_ratio:
        value: ks__base.amount_by_target_current_hp_ratio
      amount_by_caster_attack_ratio:
        value: ks__base.amount_by_caster_attack_ratio
      mute_heal_effect:
        value: ks__base.mute_heal_effect
      heal_ratio:
        value: ks__base.heal_ratio
      ignore_ability_property:
        value: ks__base.ignore_ability_property
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  rocket_jump_ext:
    seq:
      - id: ks__bit_field
        type: u1
      - id: xz_multiplier
        type: f4
        if: ks__has_field_xz_multiplier
      - id: y_multiplier
        type: f4
        if: ks__has_field_y_multiplier
    instances:
      ks__has_field_xz_multiplier: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_y_multiplier: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__enum__rocket_jump_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: rocket_jump_type
  rocket_jump_type_comparer:
    seq: []
    instances: {}
  enable_rocket_jump_register:
    seq: []
    instances: {}
  enable_rocket_jump:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: type
        type: ks__enum__rocket_jump_type
        if: ks__has_field_type
      - id: enable
        type: u1
        if: ks__has_field_enable
      - id: extention
        type: rocket_jump_ext
        if: ks__has_field_extention
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_enable: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_extention: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  force_trigger_jump_register:
    seq: []
    instances: {}
  force_trigger_jump:
    seq:
      - id: ks__base
        type: config_ability_action
    instances:
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  enable_after_image_register:
    seq: []
    instances: {}
  enable_after_image:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: enable
        type: u1
        if: ks__has_field_enable
      - id: index
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_index
    instances:
      ks__has_field_enable: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_index: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  act_time_slow_register:
    seq: []
    instances: {}
  config_time_slow:
    seq:
      - id: ks__bit_field
        type: u1
      - id: duration
        type: f4
        if: ks__has_field_duration
      - id: slow_ratio
        type: f4
        if: ks__has_field_slow_ratio
    instances:
      ks__has_field_duration: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_slow_ratio: # Field №1
        value: (ks__bit_field & 0b10) != 0
  act_time_slow:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: time_slow
        type: config_time_slow
        if: ks__has_field_time_slow
      - id: is_global
        type: u1
        if: ks__has_field_is_global
    instances:
      ks__has_field_time_slow: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_is_global: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  trigger_ability_register:
    seq: []
    instances: {}
  trigger_ability:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: ability_name
        type: aux_types::string
        if: ks__has_field_ability_name
      - id: ability_specials
        type: ks__dict_of__aux_types__string_aux_types__dynamic_float
        if: ks__has_field_ability_specials
      - id: force_use_self_current_attack_target
        type: u1
        if: ks__has_field_force_use_self_current_attack_target
    instances:
      ks__has_field_ability_name: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_ability_specials: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_force_use_self_current_attack_target: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  remove_modifier_register:
    seq: []
    instances: {}
  remove_modifier:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: modifier_name
        type: aux_types::string
        if: ks__has_field_modifier_name
    instances:
      ks__has_field_modifier_name: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_ai_param_register:
    seq: []
    instances: {}
  set_ai_param:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: param
        type: aux_types::dynamic_string
        if: ks__has_field_param
      - id: value
        type: aux_types::dynamic_float
        if: ks__has_field_value
      - id: is_bool
        type: u1
        if: ks__has_field_is_bool
      - id: logic_type
        type: ks__enum__param_logic_type
        if: ks__has_field_logic_type
    instances:
      ks__has_field_param: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_value: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_is_bool: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_logic_type: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  act_camera_shake_register:
    seq: []
    instances: {}
  act_camera_shake:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: camera_shake
        type: config_camera_shake
        if: ks__has_field_camera_shake
      - id: born
        type: ks__disp__config_born_type
        if: ks__has_field_born
    instances:
      ks__has_field_camera_shake: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_born: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  act_camera_radial_blur_register:
    seq: []
    instances: {}
  config_camera_radial_blur:
    seq:
      - id: ks__bit_field
        type: u1
      - id: power
        type: f4
        if: ks__has_field_power
      - id: blur_time
        type: f4
        if: ks__has_field_blur_time
      - id: fade_time
        type: f4
        if: ks__has_field_fade_time
    instances:
      ks__has_field_power: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_blur_time: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_fade_time: # Field №2
        value: (ks__bit_field & 0b100) != 0
  act_camera_radial_blur:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: camera_radial_blur
        type: config_camera_radial_blur
        if: ks__has_field_camera_radial_blur
    instances:
      ks__has_field_camera_radial_blur: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_animator_bool_register:
    seq: []
    instances: {}
  set_animator_bool:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: bool_id
        type: aux_types::string
        if: ks__has_field_bool_id
      - id: value
        type: u1
        if: ks__has_field_value
      - id: persistent
        type: u1
        if: ks__has_field_persistent
    instances:
      ks__has_field_bool_id: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_value: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_persistent: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_animator_int_register:
    seq: []
    instances: {}
  set_animator_int:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: int_id
        type: aux_types::string
        if: ks__has_field_int_id
      - id: value
        type: aux_types::dynamic_float
        if: ks__has_field_value
      - id: persistent
        type: u1
        if: ks__has_field_persistent
    instances:
      ks__has_field_int_id: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_value: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_persistent: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_animator_float_register:
    seq: []
    instances: {}
  set_animator_float:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: float_id
        type: aux_types::string
        if: ks__has_field_float_id
      - id: value
        type: aux_types::dynamic_float
        if: ks__has_field_value
      - id: persistent
        type: u1
        if: ks__has_field_persistent
      - id: use_random_value
        type: u1
        if: ks__has_field_use_random_value
      - id: random_value_min
        type: aux_types::dynamic_float
        if: ks__has_field_random_value_min
      - id: random_value_max
        type: aux_types::dynamic_float
        if: ks__has_field_random_value_max
      - id: transition_time
        type: f4
        if: ks__has_field_transition_time
    instances:
      ks__has_field_float_id: # Field №0
        value: (ks__bit_field & 0b0000001) != 0
      ks__has_field_value: # Field №1
        value: (ks__bit_field & 0b0000010) != 0
      ks__has_field_persistent: # Field №2
        value: (ks__bit_field & 0b0000100) != 0
      ks__has_field_use_random_value: # Field №3
        value: (ks__bit_field & 0b0001000) != 0
      ks__has_field_random_value_min: # Field №4
        value: (ks__bit_field & 0b0010000) != 0
      ks__has_field_random_value_max: # Field №5
        value: (ks__bit_field & 0b0100000) != 0
      ks__has_field_transition_time: # Field №6
        value: (ks__bit_field & 0b1000000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_animator_trigger_register:
    seq: []
    instances: {}
  set_animator_trigger:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: trigger_id
        type: aux_types::dynamic_string
        if: ks__has_field_trigger_id
      - id: mp_trigger_on_remote
        type: u1
        if: ks__has_field_mp_trigger_on_remote
    instances:
      ks__has_field_trigger_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_mp_trigger_on_remote: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  reset_animator_trigger_register:
    seq: []
    instances: {}
  reset_animator_trigger:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: trigger_id
        type: aux_types::string
        if: ks__has_field_trigger_id
    instances:
      ks__has_field_trigger_id: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_material_param_float_by_transform_register:
    seq: []
    instances: {}
  set_material_param_float_by_transform:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: mat_name
        type: aux_types::string
        if: ks__has_field_mat_name
      - id: pattern_name
        type: aux_types::string
        if: ks__has_field_pattern_name
      - id: value
        type: f4
        if: ks__has_field_value
      - id: use_curve
        type: u1
        if: ks__has_field_use_curve
      - id: lerp_curve_index
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_lerp_curve_index
      - id: lerp_time
        type: f4
        if: ks__has_field_lerp_time
    instances:
      ks__has_field_mat_name: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_pattern_name: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_value: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_use_curve: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_lerp_curve_index: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_lerp_time: # Field №5
        value: (ks__bit_field & 0b100000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  debug_log_register:
    seq: []
    instances: {}
  debug_log:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: content
        type: aux_types::string
        if: ks__has_field_content
    instances:
      ks__has_field_content: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  trigger_bullet_register:
    seq: []
    instances: {}
  trigger_bullet:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: bullet_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_bullet_id
      - id: born
        type: ks__disp__config_born_type
        if: ks__has_field_born
      - id: owner_is_target
        type: u1
        if: ks__has_field_owner_is_target
      - id: owner_is
        type: ks__enum__ability_targetting
        if: ks__has_field_owner_is
      - id: prop_owner_is
        type: ks__enum__ability_targetting
        if: ks__has_field_prop_owner_is
      - id: life_by_owner_is_alive
        type: u1
        if: ks__has_field_life_by_owner_is_alive
      - id: track_target
        type: ks__enum__ability_targetting
        if: ks__has_field_track_target
      - id: sight_group_with_owner
        type: u1
        if: ks__has_field_sight_group_with_owner
    instances:
      ks__has_field_bullet_id: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_born: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_owner_is_target: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_owner_is: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_prop_owner_is: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_life_by_owner_is_alive: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_track_target: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_sight_group_with_owner: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  trigger_attack_event_register:
    seq: []
    instances: {}
  ks__enum__trigger_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: trigger_type
  ks__enum__check_hit_layer_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: check_hit_layer_type
  ks__enum__entity_attack_filter:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: entity_attack_filter
  config_base_attack_pattern:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: trigger_type
        type: ks__enum__trigger_type
        if: ks__has_field_trigger_type
      - id: check_hit_layer_type
        type: ks__enum__check_hit_layer_type
        if: ks__has_field_check_hit_layer_type
      - id: hit_scene
        type: config_hit_scene
        if: ks__has_field_hit_scene
      - id: trigger_cd
        type: f4
        if: ks__has_field_trigger_cd
      - id: filter_by_frame
        type: u1
        if: ks__has_field_filter_by_frame
      - id: ignore_massive
        type: u1
        if: ks__has_field_ignore_massive
      - id: entity_attack_filter
        type: ks__enum__entity_attack_filter
        if: ks__has_field_entity_attack_filter
      - id: massive_attack_ratio
        type: f4
        if: ks__has_field_massive_attack_ratio
      - id: born
        type: ks__disp__config_born_type
        if: ks__has_field_born
    instances:
      ks__has_field_trigger_type: # Field №0
        value: (ks__bit_field.value & 0b000000001) != 0
      ks__has_field_check_hit_layer_type: # Field №1
        value: (ks__bit_field.value & 0b000000010) != 0
      ks__has_field_hit_scene: # Field №2
        value: (ks__bit_field.value & 0b000000100) != 0
      ks__has_field_trigger_cd: # Field №3
        value: (ks__bit_field.value & 0b000001000) != 0
      ks__has_field_filter_by_frame: # Field №4
        value: (ks__bit_field.value & 0b000010000) != 0
      ks__has_field_ignore_massive: # Field №5
        value: (ks__bit_field.value & 0b000100000) != 0
      ks__has_field_entity_attack_filter: # Field №6
        value: (ks__bit_field.value & 0b001000000) != 0
      ks__has_field_massive_attack_ratio: # Field №7
        value: (ks__bit_field.value & 0b010000000) != 0
      ks__has_field_born: # Field №8
        value: (ks__bit_field.value & 0b100000000) != 0
  config_attack_event:
    seq:
      - id: ks__bit_field
        type: u1
      - id: attack_pattern
        type: ks__disp__config_base_attack_pattern
        if: ks__has_field_attack_pattern
      - id: attack_info
        type: config_attack_info
        if: ks__has_field_attack_info
    instances:
      ks__has_field_attack_pattern: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_attack_info: # Field №1
        value: (ks__bit_field & 0b10) != 0
  trigger_attack_event:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: attack_event
        type: config_attack_event
        if: ks__has_field_attack_event
      - id: target_type
        type: ks__enum__target_type
        if: ks__has_field_target_type
    instances:
      ks__has_field_attack_event: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_target_type: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  trigger_attack_target_map_event_register:
    seq: []
    instances: {}
  ks__kvp_of_dict__ks__enum__target_type_config_attack_info:
    seq:
      - id: key
        type: ks__enum__target_type
      - id: value
        type: config_attack_info
  ks__dict_of__ks__enum__target_type_config_attack_info:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__ks__enum__target_type_config_attack_info
        repeat: expr
        repeat-expr: length.value
  config_attack_target_map_event:
    seq:
      - id: ks__bit_field
        type: u1
      - id: attack_pattern
        type: ks__disp__config_base_attack_pattern
        if: ks__has_field_attack_pattern
      - id: attack_info_map
        type: ks__dict_of__ks__enum__target_type_config_attack_info
        if: ks__has_field_attack_info_map
    instances:
      ks__has_field_attack_pattern: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_attack_info_map: # Field №1
        value: (ks__bit_field & 0b10) != 0
  trigger_attack_target_map_event:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: attack_target_map_event
        type: config_attack_target_map_event
        if: ks__has_field_attack_target_map_event
    instances:
      ks__has_field_attack_target_map_event: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  enable_wet_electric_hit_box_register:
    seq: []
    instances: {}
  enable_wet_electric_hit_box:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: enabled
        type: u1
        if: ks__has_field_enabled
    instances:
      ks__has_field_enabled: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  check_ground:
    seq:
      - id: ks__bit_field
        type: u1
      - id: enable
        type: u1
        if: ks__has_field_enable
      - id: raycast_up_height
        type: f4
        if: ks__has_field_raycast_up_height
      - id: raycast_down_height
        type: f4
        if: ks__has_field_raycast_down_height
      - id: stick_to_ground_if_valid
        type: u1
        if: ks__has_field_stick_to_ground_if_valid
      - id: dont_create_if_invalid
        type: u1
        if: ks__has_field_dont_create_if_invalid
    instances:
      ks__has_field_enable: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_raycast_up_height: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_raycast_down_height: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_stick_to_ground_if_valid: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_dont_create_if_invalid: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  create_entity_register:
    seq: []
    instances: {}
  create_entity:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: owner_is_target
        type: u1
        if: ks__has_field_owner_is_target
      - id: owner_is
        type: ks__enum__ability_targetting
        if: ks__has_field_owner_is
      - id: prop_owner_is
        type: ks__enum__ability_targetting
        if: ks__has_field_prop_owner_is
      - id: life_by_owner_is_alive
        type: u1
        if: ks__has_field_life_by_owner_is_alive
      - id: born
        type: ks__disp__config_born_type
        if: ks__has_field_born
      - id: check_ground
        type: check_ground
        if: ks__has_field_check_ground
      - id: sight_group_with_owner
        type: u1
        if: ks__has_field_sight_group_with_owner
    instances:
      ks__has_field_owner_is_target: # Field №0
        value: (ks__bit_field & 0b0000001) != 0
      ks__has_field_owner_is: # Field №1
        value: (ks__bit_field & 0b0000010) != 0
      ks__has_field_prop_owner_is: # Field №2
        value: (ks__bit_field & 0b0000100) != 0
      ks__has_field_life_by_owner_is_alive: # Field №3
        value: (ks__bit_field & 0b0001000) != 0
      ks__has_field_born: # Field №4
        value: (ks__bit_field & 0b0010000) != 0
      ks__has_field_check_ground: # Field №5
        value: (ks__bit_field & 0b0100000) != 0
      ks__has_field_sight_group_with_owner: # Field №6
        value: (ks__bit_field & 0b1000000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  create_gadget_register:
    seq: []
    instances: {}
  create_gadget:
    seq:
      - id: ks__base
        type: create_entity
      - id: ks__bit_field
        type: u1
      - id: gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gadget_id
      - id: camp_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_camp_id
      - id: camp_target_type
        type: ks__enum__target_type
        if: ks__has_field_camp_target_type
      - id: by_server
        type: u1
        if: ks__has_field_by_server
    instances:
      ks__has_field_gadget_id: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_camp_id: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_camp_target_type: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_by_server: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      owner_is_target:
        value: ks__base.owner_is_target
      owner_is:
        value: ks__base.owner_is
      prop_owner_is:
        value: ks__base.prop_owner_is
      life_by_owner_is_alive:
        value: ks__base.life_by_owner_is_alive
      born:
        value: ks__base.born
      check_ground:
        value: ks__base.check_ground
      sight_group_with_owner:
        value: ks__base.sight_group_with_owner
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  create_moving_platform_register:
    seq: []
    instances: {}
  create_moving_platform:
    seq:
      - id: ks__base
        type: create_gadget
      - id: ks__bit_field
        type: u1
      - id: route_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_route_id
      - id: detect_height
        type: f4
        if: ks__has_field_detect_height
      - id: detect_width
        type: f4
        if: ks__has_field_detect_width
      - id: enable_rotation_offset
        type: u1
        if: ks__has_field_enable_rotation_offset
      - id: fail_actions
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_fail_actions
    instances:
      ks__has_field_route_id: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_detect_height: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_detect_width: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_enable_rotation_offset: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_fail_actions: # Field №4
        value: (ks__bit_field & 0b10000) != 0
      # Base class fields
      gadget_id:
        value: ks__base.gadget_id
      camp_id:
        value: ks__base.camp_id
      camp_target_type:
        value: ks__base.camp_target_type
      by_server:
        value: ks__base.by_server
      owner_is_target:
        value: ks__base.owner_is_target
      owner_is:
        value: ks__base.owner_is
      prop_owner_is:
        value: ks__base.prop_owner_is
      life_by_owner_is_alive:
        value: ks__base.life_by_owner_is_alive
      born:
        value: ks__base.born
      check_ground:
        value: ks__base.check_ground
      sight_group_with_owner:
        value: ks__base.sight_group_with_owner
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  try_trigger_platform_start_move_register:
    seq: []
    instances: {}
  try_trigger_platform_start_move:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: detect_height
        type: f4
        if: ks__has_field_detect_height
      - id: detect_width
        type: f4
        if: ks__has_field_detect_width
      - id: enable_rotation_offset
        type: u1
        if: ks__has_field_enable_rotation_offset
      - id: fail_actions
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_fail_actions
      - id: force_reset
        type: u1
        if: ks__has_field_force_reset
      - id: force_trigger
        type: u1
        if: ks__has_field_force_trigger
    instances:
      ks__has_field_detect_height: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_detect_width: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_enable_rotation_offset: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_fail_actions: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_force_reset: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_force_trigger: # Field №5
        value: (ks__bit_field & 0b100000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  kill_gadget_register:
    seq: []
    instances: {}
  select_targets_by_children:
    seq:
      - id: ks__base
        type: select_targets
      - id: ks__bit_field
        type: u1
      - id: config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_config_id
    instances:
      ks__has_field_config_id: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      top_limit:
        value: ks__base.top_limit
      entity_type_priority:
        value: ks__base.entity_type_priority
      sort_type:
        value: ks__base.sort_type
  kill_gadget:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: gadget_info
        type: select_targets_by_children
        if: ks__has_field_gadget_info
    instances:
      ks__has_field_gadget_info: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  ks__enum__kill_self_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: kill_self_type
  kill_self_type_comparer:
    seq: []
    instances: {}
  kill_self_register:
    seq: []
    instances: {}
  ks__enum__die_state_flag:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: die_state_flag
  kill_self:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: duration
        type: f4
        if: ks__has_field_duration
      - id: die_state_flage
        type: ks__enum__die_state_flag
        if: ks__has_field_die_state_flage
      - id: ban_drop
        type: u1
        if: ks__has_field_ban_drop
      - id: ban_exp
        type: u1
        if: ks__has_field_ban_exp
      - id: ban_hp_percentage_drop
        type: u1
        if: ks__has_field_ban_hp_percentage_drop
      - id: kill_self_type
        type: ks__enum__kill_self_type
        if: ks__has_field_kill_self_type
      - id: hide_entity
        type: u1
        if: ks__has_field_hide_entity
    instances:
      ks__has_field_duration: # Field №0
        value: (ks__bit_field & 0b0000001) != 0
      ks__has_field_die_state_flage: # Field №1
        value: (ks__bit_field & 0b0000010) != 0
      ks__has_field_ban_drop: # Field №2
        value: (ks__bit_field & 0b0000100) != 0
      ks__has_field_ban_exp: # Field №3
        value: (ks__bit_field & 0b0001000) != 0
      ks__has_field_ban_hp_percentage_drop: # Field №4
        value: (ks__bit_field & 0b0010000) != 0
      ks__has_field_kill_self_type: # Field №5
        value: (ks__bit_field & 0b0100000) != 0
      ks__has_field_hide_entity: # Field №6
        value: (ks__bit_field & 0b1000000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  trigger_audio_register:
    seq: []
    instances: {}
  ks__enum__op_responder:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: op_responder
  config_audio_operation:
    seq:
      - id: ks__bit_field
        type: u1
      - id: operation
        type: config_wwise_string
        if: ks__has_field_operation
    instances:
      ks__has_field_operation: # Field №0
        value: (ks__bit_field & 0b1) != 0
  trigger_audio:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: responder
        type: ks__enum__op_responder
        if: ks__has_field_responder
      - id: operation
        type: ks__disp__config_audio_operation
        if: ks__has_field_operation
    instances:
      ks__has_field_responder: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_operation: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  trigger_drop_equip_parts_register:
    seq: []
    instances: {}
  trigger_drop_equip_parts:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: drop_all
        type: u1
        if: ks__has_field_drop_all
      - id: equip_parts
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_equip_parts
    instances:
      ks__has_field_drop_all: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_equip_parts: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  trigger_throw_equip_part_register:
    seq: []
    instances: {}
  trigger_throw_equip_part:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: equip_part
        type: aux_types::string
        if: ks__has_field_equip_part
      - id: chase_attack_target
        type: u1
        if: ks__has_field_chase_attack_target
      - id: born
        type: ks__disp__config_born_type
        if: ks__has_field_born
    instances:
      ks__has_field_equip_part: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_chase_attack_target: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_born: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  trigger_create_gadget_to_equip_part_register:
    seq: []
    instances: {}
  trigger_create_gadget_to_equip_part:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gadget_id
      - id: equip_part
        type: aux_types::string
        if: ks__has_field_equip_part
    instances:
      ks__has_field_gadget_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_equip_part: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  trigger_aux_weapon_trans_register:
    seq: []
    instances: {}
  trigger_aux_weapon_trans:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: set_enable
        type: u1
        if: ks__has_field_set_enable
      - id: equip_part
        type: aux_types::string
        if: ks__has_field_equip_part
    instances:
      ks__has_field_set_enable: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_equip_part: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  trigger_gadget_interactive_register:
    seq: []
    instances: {}
  trigger_gadget_interactive:
    seq:
      - id: ks__base
        type: config_ability_action
    instances:
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  trigger_set_visible_register:
    seq: []
    instances: {}
  trigger_set_visible:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: visible
        type: u1
        if: ks__has_field_visible
    instances:
      ks__has_field_visible: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  trigger_set_cast_shadow_register:
    seq: []
    instances: {}
  trigger_set_cast_shadow:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: cast_shadow
        type: u1
        if: ks__has_field_cast_shadow
    instances:
      ks__has_field_cast_shadow: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  trigger_set_pass_through_register:
    seq: []
    instances: {}
  trigger_set_pass_through:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: pass_through
        type: u1
        if: ks__has_field_pass_through
    instances:
      ks__has_field_pass_through: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  trigger_set_renderers_enable_register:
    seq: []
    instances: {}
  trigger_set_renderers_enable:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: render_names
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_render_names
      - id: set_enable
        type: u1
        if: ks__has_field_set_enable
    instances:
      ks__has_field_render_names: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_set_enable: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  trigger_hide_weapon_register:
    seq: []
    instances: {}
  trigger_hide_weapon:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: visible
        type: u1
        if: ks__has_field_visible
      - id: part_names
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_part_names
    instances:
      ks__has_field_visible: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_part_names: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  trigger_taunt_register:
    seq: []
    instances: {}
  trigger_taunt:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: taunt_level
        type: ks__enum__taunt_level
        if: ks__has_field_taunt_level
      - id: care_value
        type: f4
        if: ks__has_field_care_value
    instances:
      ks__has_field_taunt_level: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_care_value: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  trigger_set_chest_lock_register:
    seq: []
    instances: {}
  trigger_set_chest_lock:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: locked
        type: u1
        if: ks__has_field_locked
    instances:
      ks__has_field_locked: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  clear_lock_target_register:
    seq: []
    instances: {}
  clear_lock_target:
    seq:
      - id: ks__base
        type: config_ability_action
    instances:
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_pose_bool_register:
    seq: []
    instances: {}
  set_pose_bool:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: bool_id
        type: aux_types::string
        if: ks__has_field_bool_id
      - id: value
        type: u1
        if: ks__has_field_value
    instances:
      ks__has_field_bool_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_value: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_pose_int_register:
    seq: []
    instances: {}
  set_pose_int:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: int_id
        type: aux_types::string
        if: ks__has_field_int_id
      - id: value
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_value
    instances:
      ks__has_field_int_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_value: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_pose_float_register:
    seq: []
    instances: {}
  set_pose_float:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: float_id
        type: aux_types::string
        if: ks__has_field_float_id
      - id: value
        type: aux_types::dynamic_float
        if: ks__has_field_value
    instances:
      ks__has_field_float_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_value: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  trigger_face_animation_register:
    seq: []
    instances: {}
  trigger_face_animation:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: face_animation
        type: aux_types::string
        if: ks__has_field_face_animation
    instances:
      ks__has_field_face_animation: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  enable_crash_damage_register:
    seq: []
    instances: {}
  enable_crash_damage:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: enable
        type: u1
        if: ks__has_field_enable
    instances:
      ks__has_field_enable: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_crash_damage_register:
    seq: []
    instances: {}
  set_crash_damage:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: key
        type: aux_types::string
        if: ks__has_field_key
    instances:
      ks__has_field_key: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  try_find_blink_point_register:
    seq: []
    instances: {}
  try_find_blink_point:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: forward_angle
        type: f4
        if: ks__has_field_forward_angle
      - id: min_range
        type: f4
        if: ks__has_field_min_range
      - id: max_range
        type: f4
        if: ks__has_field_max_range
      - id: limit_y
        type: f4
        if: ks__has_field_limit_y
      - id: ignore_water
        type: u1
        if: ks__has_field_ignore_water
    instances:
      ks__has_field_forward_angle: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_min_range: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_max_range: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_limit_y: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_ignore_water: # Field №4
        value: (ks__bit_field & 0b10000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  ks__enum__blink_hit_scene_test_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: blink_hit_scene_test_type
  blink_hit_scene_test_type_comparer:
    seq: []
    instances: {}
  try_find_blink_point_by_born_register:
    seq: []
    instances: {}
  try_find_blink_point_by_born:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: born
        type: ks__disp__config_born_type
        if: ks__has_field_born
      - id: hit_scene_test
        type: u1
        if: ks__has_field_hit_scene_test
      - id: hit_scene_type
        type: ks__enum__blink_hit_scene_test_type
        if: ks__has_field_hit_scene_type
      - id: limit_y
        type: aux_types::dynamic_float
        if: ks__has_field_limit_y
      - id: ignore_water
        type: u1
        if: ks__has_field_ignore_water
    instances:
      ks__has_field_born: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_hit_scene_test: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_hit_scene_type: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_limit_y: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_ignore_water: # Field №4
        value: (ks__bit_field & 0b10000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  do_blink_register:
    seq: []
    instances: {}
  do_blink:
    seq:
      - id: ks__base
        type: config_ability_action
    instances:
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  avatar_do_blink_register:
    seq: []
    instances: {}
  avatar_do_blink:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: prefer_input
        type: u1
        if: ks__has_field_prefer_input
      - id: distance
        type: f4
        if: ks__has_field_distance
    instances:
      ks__has_field_prefer_input: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_distance: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  enable_hit_box_by_name_register:
    seq: []
    instances: {}
  enable_hit_box_by_name:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: hit_box_names
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_hit_box_names
      - id: set_enable
        type: u1
        if: ks__has_field_set_enable
    instances:
      ks__has_field_hit_box_names: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_set_enable: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  enable_push_collider_name_register:
    seq: []
    instances: {}
  enable_push_collider_name:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: push_collider_names
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_push_collider_names
      - id: set_enable
        type: u1
        if: ks__has_field_set_enable
    instances:
      ks__has_field_push_collider_names: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_set_enable: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  enable_scene_transform_by_name_register:
    seq: []
    instances: {}
  enable_scene_transform_by_name:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: transform_names
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_transform_names
      - id: set_enable
        type: u1
        if: ks__has_field_set_enable
    instances:
      ks__has_field_transform_names: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_set_enable: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  ks__enum__drop_elem_ball_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: drop_elem_ball_type
  drop_elem_ball_type_comparer:
    seq: []
    instances: {}
  generate_elem_ball_register:
    seq: []
    instances: {}
  generate_elem_ball:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: drop_type
        type: ks__enum__drop_elem_ball_type
        if: ks__has_field_drop_type
      - id: config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_config_id
      - id: born
        type: ks__disp__config_born_type
        if: ks__has_field_born
      - id: ratio
        type: aux_types::dynamic_float
        if: ks__has_field_ratio
      - id: base_energy
        type: f4
        if: ks__has_field_base_energy
    instances:
      ks__has_field_drop_type: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_config_id: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_born: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_ratio: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_base_energy: # Field №4
        value: (ks__bit_field & 0b10000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  randomed_register:
    seq: []
    instances: {}
  randomed:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: chance
        type: aux_types::dynamic_float
        if: ks__has_field_chance
      - id: success_actions
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_success_actions
      - id: fail_actions
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_fail_actions
    instances:
      ks__has_field_chance: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_success_actions: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_fail_actions: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  hide_ui_bill_board_register:
    seq: []
    instances: {}
  hide_ui_bill_board:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: hide
        type: u1
        if: ks__has_field_hide
    instances:
      ks__has_field_hide: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  send_effect_trigger_register:
    seq: []
    instances: {}
  send_effect_trigger:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: parameter
        type: aux_types::string
        if: ks__has_field_parameter
      - id: type
        type: ks__enum__animator_param_type
        if: ks__has_field_type
      - id: value
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_value
      - id: effect_pattern
        type: aux_types::dynamic_string
        if: ks__has_field_effect_pattern
      - id: float_value
        type: f4
        if: ks__has_field_float_value
    instances:
      ks__has_field_parameter: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_type: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_value: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_effect_pattern: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_float_value: # Field №4
        value: (ks__bit_field & 0b10000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  change_follow_damp_time_register:
    seq: []
    instances: {}
  change_follow_damp_time:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: effect_pattern
        type: aux_types::dynamic_string
        if: ks__has_field_effect_pattern
      - id: position_damp_time
        type: aux_types::dynamic_float
        if: ks__has_field_position_damp_time
      - id: rotation_damp_time
        type: aux_types::dynamic_float
        if: ks__has_field_rotation_damp_time
    instances:
      ks__has_field_effect_pattern: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_position_damp_time: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_rotation_damp_time: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_self_attack_target_register:
    seq: []
    instances: {}
  set_self_attack_target:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: turn_to_target_immediately
        type: u1
        if: ks__has_field_turn_to_target_immediately
      - id: turn_to_target_keep_up_axis_direction
        type: u1
        if: ks__has_field_turn_to_target_keep_up_axis_direction
    instances:
      ks__has_field_turn_to_target_immediately: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_turn_to_target_keep_up_axis_direction: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  force_init_massive_entity_register:
    seq: []
    instances: {}
  force_init_massive_entity:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: born
        type: ks__disp__config_born_type
        if: ks__has_field_born
      - id: radius
        type: f4
        if: ks__has_field_radius
      - id: angle
        type: f4
        if: ks__has_field_angle
      - id: height
        type: f4
        if: ks__has_field_height
    instances:
      ks__has_field_born: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_radius: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_angle: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_height: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  enable_head_control_register:
    seq: []
    instances: {}
  enable_head_control:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: enable
        type: u1
        if: ks__has_field_enable
      - id: blend
        type: u1
        if: ks__has_field_blend
    instances:
      ks__has_field_enable: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_blend: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  enable_part_control_register:
    seq: []
    instances: {}
  enable_part_control:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: part_root_names
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_part_root_names
      - id: enable
        type: u1
        if: ks__has_field_enable
    instances:
      ks__has_field_part_root_names: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_enable: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  start_dither_register:
    seq: []
    instances: {}
  start_dither:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: duration
        type: f4
        if: ks__has_field_duration
      - id: reverse
        type: u1
        if: ks__has_field_reverse
    instances:
      ks__has_field_duration: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_reverse: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  summon_register:
    seq: []
    instances: {}
  summon:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: monster_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_monster_id
      - id: born
        type: ks__disp__config_born_type
        if: ks__has_field_born
      - id: born_slot_index
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_born_slot_index
      - id: face_to_target
        type: ks__enum__ability_targetting
        if: ks__has_field_face_to_target
      - id: summon_tag
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_summon_tag
      - id: alive_by_owner
        type: u1
        if: ks__has_field_alive_by_owner
      - id: is_elite
        type: u1
        if: ks__has_field_is_elite
      - id: affix_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_affix_list
      - id: level_delta
        type: aux_types::dynamic_int
        if: ks__has_field_level_delta
      - id: has_drop
        type: u1
        if: ks__has_field_has_drop
      - id: has_exp
        type: u1
        if: ks__has_field_has_exp
      - id: sight_group_with_owner
        type: u1
        if: ks__has_field_sight_group_with_owner
    instances:
      ks__has_field_monster_id: # Field №0
        value: (ks__bit_field.value & 0b000000000001) != 0
      ks__has_field_born: # Field №1
        value: (ks__bit_field.value & 0b000000000010) != 0
      ks__has_field_born_slot_index: # Field №2
        value: (ks__bit_field.value & 0b000000000100) != 0
      ks__has_field_face_to_target: # Field №3
        value: (ks__bit_field.value & 0b000000001000) != 0
      ks__has_field_summon_tag: # Field №4
        value: (ks__bit_field.value & 0b000000010000) != 0
      ks__has_field_alive_by_owner: # Field №5
        value: (ks__bit_field.value & 0b000000100000) != 0
      ks__has_field_is_elite: # Field №6
        value: (ks__bit_field.value & 0b000001000000) != 0
      ks__has_field_affix_list: # Field №7
        value: (ks__bit_field.value & 0b000010000000) != 0
      ks__has_field_level_delta: # Field №8
        value: (ks__bit_field.value & 0b000100000000) != 0
      ks__has_field_has_drop: # Field №9
        value: (ks__bit_field.value & 0b001000000000) != 0
      ks__has_field_has_exp: # Field №10
        value: (ks__bit_field.value & 0b010000000000) != 0
      ks__has_field_sight_group_with_owner: # Field №11
        value: (ks__bit_field.value & 0b100000000000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  attach_ability_state_resistance_register:
    seq: []
    instances: {}
  attach_ability_state_resistance:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: resistance_list_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_resistance_list_id
      - id: resistance_buff_debuffs
        type: ks__array_of__ks__enum__ability_state__length_u
        if: ks__has_field_resistance_buff_debuffs
      - id: duration_ratio
        type: f4
        if: ks__has_field_duration_ratio
    instances:
      ks__has_field_resistance_list_id: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_resistance_buff_debuffs: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_duration_ratio: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  fire_ai_sound_event_register:
    seq: []
    instances: {}
  fire_ai_sound_event:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: volume
        type: f4
        if: ks__has_field_volume
    instances:
      ks__has_field_volume: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  add_element_durability_register:
    seq: []
    instances: {}
  add_element_durability:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: value
        type: aux_types::dynamic_float
        if: ks__has_field_value
      - id: modifier_name
        type: aux_types::string
        if: ks__has_field_modifier_name
      - id: element_type
        type: ks__enum__element_type
        if: ks__has_field_element_type
      - id: sort_modifier
        type: ks__enum__sort_modifier_type
        if: ks__has_field_sort_modifier
      - id: use_limit_range
        type: u1
        if: ks__has_field_use_limit_range
      - id: max_value
        type: aux_types::dynamic_float
        if: ks__has_field_max_value
      - id: min_value
        type: aux_types::dynamic_float
        if: ks__has_field_min_value
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b0000001) != 0
      ks__has_field_modifier_name: # Field №1
        value: (ks__bit_field & 0b0000010) != 0
      ks__has_field_element_type: # Field №2
        value: (ks__bit_field & 0b0000100) != 0
      ks__has_field_sort_modifier: # Field №3
        value: (ks__bit_field & 0b0001000) != 0
      ks__has_field_use_limit_range: # Field №4
        value: (ks__bit_field & 0b0010000) != 0
      ks__has_field_max_value: # Field №5
        value: (ks__bit_field & 0b0100000) != 0
      ks__has_field_min_value: # Field №6
        value: (ks__bit_field & 0b1000000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_part_control_target_register:
    seq: []
    instances: {}
  ks__enum__control_part_target_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: control_part_target_type
  set_part_control_target:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: part_root_names
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_part_root_names
      - id: target_type
        type: ks__enum__control_part_target_type
        if: ks__has_field_target_type
    instances:
      ks__has_field_part_root_names: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_target_type: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  drop_subfield_register:
    seq: []
    instances: {}
  drop_subfield:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: subfield_name
        type: aux_types::string
        if: ks__has_field_subfield_name
    instances:
      ks__has_field_subfield_name: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  enable_gadget_intee_register:
    seq: []
    instances: {}
  enable_gadget_intee:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: enable
        type: u1
        if: ks__has_field_enable
    instances:
      ks__has_field_enable: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  remove_velocity_force_register:
    seq: []
    instances: {}
  ks__enum__velocity_force_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: velocity_force_type
  ks__array_of__ks__enum__velocity_force_type__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__enum__velocity_force_type
        repeat: expr
        repeat-expr: length.value
  remove_velocity_force:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: forces
        type: ks__array_of__ks__enum__velocity_force_type__length_u
        if: ks__has_field_forces
    instances:
      ks__has_field_forces: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  execute_group_trigger_register:
    seq: []
    instances: {}
  execute_group_trigger:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: source_name
        type: aux_types::string
        if: ks__has_field_source_name
      - id: param1
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_param1
      - id: param2
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_param2
      - id: param3
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_param3
    instances:
      ks__has_field_source_name: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_param1: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_param2: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_param3: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  re_trigger_ai_skill_initial_cd_register:
    seq: []
    instances: {}
  re_trigger_ai_skill_initial_cd:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: skill_i_ds
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_skill_i_ds
    instances:
      ks__has_field_skill_i_ds: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_ai_skill_cd_available_now_register:
    seq: []
    instances: {}
  set_ai_skill_cd_available_now:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: skill_i_ds
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_skill_i_ds
    instances:
      ks__has_field_skill_i_ds: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_ai_skill_gcd_register:
    seq: []
    instances: {}
  set_ai_skill_gcd:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: value
        type: f4
        if: ks__has_field_value
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  enable_ai_stealthy_register:
    seq: []
    instances: {}
  enable_ai_stealthy:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: enable
        type: u1
        if: ks__has_field_enable
    instances:
      ks__has_field_enable: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  unlock_skill_register:
    seq: []
    instances: {}
  unlock_skill:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: skill_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_skill_id
    instances:
      ks__has_field_skill_id: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  add_avatar_skill_info_register:
    seq: []
    instances: {}
  add_avatar_skill_info:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: skill_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_skill_id
    instances:
      ks__has_field_skill_id: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  remove_avatar_skill_info_register:
    seq: []
    instances: {}
  remove_avatar_skill_info:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: skill_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_skill_id
    instances:
      ks__has_field_skill_id: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_can_die_immediately_register:
    seq: []
    instances: {}
  set_can_die_immediately:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: die_immediately
        type: u1
        if: ks__has_field_die_immediately
    instances:
      ks__has_field_die_immediately: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  play_emoji_bubble_register:
    seq: []
    instances: {}
  play_emoji_bubble:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: name
        type: aux_types::string
        if: ks__has_field_name
    instances:
      ks__has_field_name: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  attach_bullet_aim_point_register:
    seq: []
    instances: {}
  attach_bullet_aim_point:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: bullet_aim_point
        type: aux_types::string
        if: ks__has_field_bullet_aim_point
    instances:
      ks__has_field_bullet_aim_point: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  enable_bullet_collision_plugin_trigger_register:
    seq: []
    instances: {}
  enable_bullet_collision_plugin_trigger:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: set_enable
        type: u1
        if: ks__has_field_set_enable
    instances:
      ks__has_field_set_enable: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  guide_paimon_disappear_end_register:
    seq: []
    instances: {}
  guide_paimon_disappear_end:
    seq:
      - id: ks__base
        type: config_ability_action
    instances:
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_paimon_look_at_camera_register:
    seq: []
    instances: {}
  ks__enum__paimon_request_from:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: paimon_request_from
  set_paimon_look_at_camera:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: from_
        type: ks__enum__paimon_request_from
        if: ks__has_field_from_
      - id: lookat
        type: u1
        if: ks__has_field_lookat
      - id: min_time
        type: f4
        if: ks__has_field_min_time
      - id: max_time
        type: f4
        if: ks__has_field_max_time
    instances:
      ks__has_field_from_: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_lookat: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_min_time: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_max_time: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  paimon_action_register:
    seq: []
    instances: {}
  ks__enum__paimon_skill:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: paimon_skill
  paimon_action:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: from_
        type: ks__enum__paimon_request_from
        if: ks__has_field_from_
      - id: action_name
        type: ks__enum__paimon_skill
        if: ks__has_field_action_name
    instances:
      ks__has_field_from_: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_action_name: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_paimon_look_at_avatar_register:
    seq: []
    instances: {}
  set_paimon_look_at_avatar:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: from_
        type: ks__enum__paimon_request_from
        if: ks__has_field_from_
      - id: lookat
        type: u1
        if: ks__has_field_lookat
      - id: min_time
        type: f4
        if: ks__has_field_min_time
      - id: max_time
        type: f4
        if: ks__has_field_max_time
    instances:
      ks__has_field_from_: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_lookat: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_min_time: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_max_time: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_paimon_temp_offset_register:
    seq: []
    instances: {}
  set_paimon_temp_offset:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: from_
        type: ks__enum__paimon_request_from
        if: ks__has_field_from_
      - id: off_set_pos
        type: vector
        if: ks__has_field_off_set_pos
      - id: time
        type: f4
        if: ks__has_field_time
    instances:
      ks__has_field_from_: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_off_set_pos: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_time: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_keep_in_air_velocity_force_register:
    seq: []
    instances: {}
  set_keep_in_air_velocity_force:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: set_enable
        type: u1
        if: ks__has_field_set_enable
    instances:
      ks__has_field_set_enable: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  force_air_state_fly_register:
    seq: []
    instances: {}
  force_air_state_fly:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: is_active
        type: u1
        if: ks__has_field_is_active
    instances:
      ks__has_field_is_active: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  to_nearst_anchor_point_register:
    seq: []
    instances: {}
  to_nearst_anchor_point:
    seq:
      - id: ks__base
        type: config_ability_action
    instances:
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  push_dvalin_s01process_register:
    seq: []
    instances: {}
  push_dvalin_s01process:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: time
        type: f4
        if: ks__has_field_time
      - id: to_percentage
        type: f4
        if: ks__has_field_to_percentage
      - id: un_break
        type: u1
        if: ks__has_field_un_break
      - id: set_force
        type: u1
        if: ks__has_field_set_force
      - id: vector
        type: vector
        if: ks__has_field_vector
      - id: attenuation
        type: f4
        if: ks__has_field_attenuation
    instances:
      ks__has_field_time: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_to_percentage: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_un_break: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_set_force: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_vector: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_attenuation: # Field №5
        value: (ks__bit_field & 0b100000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_dvalin_s01fly_state_register:
    seq: []
    instances: {}
  set_dvalin_s01fly_state:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: to_state
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_to_state
    instances:
      ks__has_field_to_state: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  regist_to_stage_script_register:
    seq: []
    instances: {}
  regist_to_stage_script:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: alias
        type: aux_types::string
        if: ks__has_field_alias
    instances:
      ks__has_field_alias: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  sync_to_stage_script_register:
    seq: []
    instances: {}
  sync_to_stage_script:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: alias
        type: aux_types::string
        if: ks__has_field_alias
    instances:
      ks__has_field_alias: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  calc_dvalin_s04reborn_point_register:
    seq: []
    instances: {}
  calc_dvalin_s04reborn_point:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: enable
        type: u1
        if: ks__has_field_enable
    instances:
      ks__has_field_enable: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  trigger_player_die_register:
    seq: []
    instances: {}
  trigger_player_die:
    seq:
      - id: ks__base
        type: config_ability_action
    instances:
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  reset_enviro_eular_register:
    seq: []
    instances: {}
  reset_enviro_eular:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: eular_angles
        type: vector
        if: ks__has_field_eular_angles
    instances:
      ks__has_field_eular_angles: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_emission_scaler_register:
    seq: []
    instances: {}
  ks__enum__body_material_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: body_material_type
  set_emission_scaler:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: material_type
        type: ks__enum__body_material_type
        if: ks__has_field_material_type
      - id: use_default_color
        type: u1
        if: ks__has_field_use_default_color
      - id: value
        type: f4
        if: ks__has_field_value
      - id: duration
        type: f4
        if: ks__has_field_duration
    instances:
      ks__has_field_material_type: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_use_default_color: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_value: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_duration: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  enter_camera_lock_register:
    seq: []
    instances: {}
  enter_camera_lock:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: trans_name
        type: aux_types::string
        if: ks__has_field_trans_name
      - id: cfg_path
        type: aux_types::string
        if: ks__has_field_cfg_path
    instances:
      ks__has_field_trans_name: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_cfg_path: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  show_ui_combat_bar_register:
    seq: []
    instances: {}
  show_ui_combat_bar:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: show
        type: u1
        if: ks__has_field_show
      - id: sort_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sort_id
      - id: changing_sort_id
        type: u1
        if: ks__has_field_changing_sort_id
      - id: fore
        type: u1
        if: ks__has_field_fore
    instances:
      ks__has_field_show: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_sort_id: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_changing_sort_id: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_fore: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  ks__enum__effect_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: effect_type
  effect_type_comparer:
    seq: []
    instances: {}
  show_screen_effect_register:
    seq: []
    instances: {}
  show_screen_effect:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: effect_type
        type: ks__enum__effect_type
        if: ks__has_field_effect_type
      - id: show
        type: u1
        if: ks__has_field_show
    instances:
      ks__has_field_effect_type: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_show: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  add_server_buff_register:
    seq: []
    instances: {}
  add_server_buff:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: s_buff_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_s_buff_id
      - id: time
        type: f4
        if: ks__has_field_time
    instances:
      ks__has_field_s_buff_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_time: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  remove_server_buff_register:
    seq: []
    instances: {}
  remove_server_buff:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: s_buff_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_s_buff_id
      - id: is_team_buff
        type: u1
        if: ks__has_field_is_team_buff
    instances:
      ks__has_field_s_buff_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_is_team_buff: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  modify_avatar_skill_cd_register:
    seq: []
    instances: {}
  modify_avatar_skill_cd:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: skill_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_skill_id
      - id: skill_slot
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_skill_slot
      - id: cd_delta
        type: aux_types::dynamic_float
        if: ks__has_field_cd_delta
      - id: cd_ratio
        type: aux_types::dynamic_float
        if: ks__has_field_cd_ratio
    instances:
      ks__has_field_skill_id: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_skill_slot: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_cd_delta: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_cd_ratio: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  modify_vehicle_skill_cd_register:
    seq: []
    instances: {}
  modify_vehicle_skill_cd:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: skill_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_skill_id
      - id: cd_delta
        type: aux_types::dynamic_float
        if: ks__has_field_cd_delta
      - id: cd_ratio
        type: aux_types::dynamic_float
        if: ks__has_field_cd_ratio
    instances:
      ks__has_field_skill_id: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_cd_delta: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_cd_ratio: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  reset_ability_special_register:
    seq: []
    instances: {}
  reset_ability_special:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: key_name
        type: aux_types::string
        if: ks__has_field_key_name
      - id: value_name
        type: aux_types::string
        if: ks__has_field_value_name
    instances:
      ks__has_field_key_name: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_value_name: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  enable_avatar_fly_state_trail_register:
    seq: []
    instances: {}
  enable_avatar_fly_state_trail:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: set_enable
        type: u1
        if: ks__has_field_set_enable
    instances:
      ks__has_field_set_enable: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  show_reminder_register:
    seq: []
    instances: {}
  show_reminder:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  update_reaction_damage_register:
    seq: []
    instances: {}
  update_reaction_damage:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: level_target
        type: ks__enum__ability_targetting
        if: ks__has_field_level_target
      - id: reaction_damage_name
        type: aux_types::string
        if: ks__has_field_reaction_damage_name
    instances:
      ks__has_field_level_target: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_reaction_damage_name: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  execute_gadget_lua_register:
    seq: []
    instances: {}
  execute_gadget_lua:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: param1
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_param1
      - id: param2
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_param2
      - id: param3
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_param3
    instances:
      ks__has_field_param1: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_param2: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_param3: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_weapon_bind_state_register:
    seq: []
    instances: {}
  set_weapon_bind_state:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: place
        type: u1
        if: ks__has_field_place
      - id: equip_part_name
        type: aux_types::string
        if: ks__has_field_equip_part_name
      - id: born
        type: ks__disp__config_born_type
        if: ks__has_field_born
    instances:
      ks__has_field_place: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_equip_part_name: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_born: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_weapon_attach_point_real_name_register:
    seq: []
    instances: {}
  set_weapon_attach_point_real_name:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: part_name
        type: aux_types::string
        if: ks__has_field_part_name
      - id: real_name
        type: aux_types::string
        if: ks__has_field_real_name
    instances:
      ks__has_field_part_name: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_real_name: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_avatar_can_shake_off_register:
    seq: []
    instances: {}
  set_avatar_can_shake_off:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: can_shake_off
        type: u1
        if: ks__has_field_can_shake_off
    instances:
      ks__has_field_can_shake_off: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  enable_main_interface_register:
    seq: []
    instances: {}
  enable_main_interface:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: enable
        type: u1
        if: ks__has_field_enable
    instances:
      ks__has_field_enable: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  change_play_mode_register:
    seq: []
    instances: {}
  ks__enum__play_mode_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: play_mode_type
  change_play_mode:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: to_play_mode
        type: ks__enum__play_mode_type
        if: ks__has_field_to_play_mode
      - id: authority_only
        type: u1
        if: ks__has_field_authority_only
    instances:
      ks__has_field_to_play_mode: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_authority_only: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  enable_camera_dof_register:
    seq: []
    instances: {}
  enable_camera_dof:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: enable_dof
        type: u1
        if: ks__has_field_enable_dof
    instances:
      ks__has_field_enable_dof: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  enable_hit_auto_redirect_register:
    seq: []
    instances: {}
  enable_hit_auto_redirect:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: set_enable
        type: u1
        if: ks__has_field_set_enable
    instances:
      ks__has_field_set_enable: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  clear_endura_register:
    seq: []
    instances: {}
  clear_endura:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: percent
        type: f4
        if: ks__has_field_percent
    instances:
      ks__has_field_percent: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  rush_move_register:
    seq: []
    instances: {}
  rush_move:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: to_pos
        type: ks__disp__config_born_type
        if: ks__has_field_to_pos
      - id: min_range
        type: f4
        if: ks__has_field_min_range
      - id: max_range
        type: f4
        if: ks__has_field_max_range
      - id: time_range
        type: f4
        if: ks__has_field_time_range
    instances:
      ks__has_field_to_pos: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_min_range: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_max_range: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_time_range: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  reset_ai_attack_target_register:
    seq: []
    instances: {}
  reset_ai_attack_target:
    seq:
      - id: ks__base
        type: config_ability_action
    instances:
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  reset_ai_resist_taunt_level_register:
    seq: []
    instances: {}
  reset_ai_resist_taunt_level:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: resist_taunt_level
        type: ks__enum__taunt_level
        if: ks__has_field_resist_taunt_level
    instances:
      ks__has_field_resist_taunt_level: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  change_collider_surface_register:
    seq: []
    instances: {}
  ks__enum__scene_surface_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: scene_surface_type
  change_collider_surface:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: transform_name
        type: aux_types::string
        if: ks__has_field_transform_name
      - id: surface_type
        type: ks__enum__scene_surface_type
        if: ks__has_field_surface_type
    instances:
      ks__has_field_transform_name: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_surface_type: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_surround_anchor_register:
    seq: []
    instances: {}
  ks__enum__action_point_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: action_point_type
  set_surround_anchor:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: set_point
        type: u1
        if: ks__has_field_set_point
      - id: action_point_type
        type: ks__enum__action_point_type
        if: ks__has_field_action_point_type
      - id: action_point_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_action_point_id
    instances:
      ks__has_field_set_point: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_action_point_type: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_action_point_id: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_combat_fixed_move_point_register:
    seq: []
    instances: {}
  set_combat_fixed_move_point:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: set_point
        type: u1
        if: ks__has_field_set_point
      - id: to_pos
        type: ks__disp__config_born_type
        if: ks__has_field_to_pos
    instances:
      ks__has_field_set_point: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_to_pos: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_avatar_hit_buckets_register:
    seq: []
    instances: {}
  config_avatar_hit_bucket_setting:
    seq:
      - id: ks__bit_field
        type: u1
      - id: melee_bucket_count
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_melee_bucket_count
      - id: melee_bucket_cd
        type: f4
        if: ks__has_field_melee_bucket_cd
      - id: ranged_bucket_count
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_ranged_bucket_count
      - id: ranged_bucket_cd
        type: f4
        if: ks__has_field_ranged_bucket_cd
    instances:
      ks__has_field_melee_bucket_count: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_melee_bucket_cd: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_ranged_bucket_count: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_ranged_bucket_cd: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  set_avatar_hit_buckets:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: override_avatar_hit_bucket_setting
        type: config_avatar_hit_bucket_setting
        if: ks__has_field_override_avatar_hit_bucket_setting
    instances:
      ks__has_field_override_avatar_hit_bucket_setting: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  reset_avatar_hit_buckets_register:
    seq: []
    instances: {}
  reset_avatar_hit_buckets:
    seq:
      - id: ks__base
        type: config_ability_action
    instances:
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_ai_skill_cd_multiplier_register:
    seq: []
    instances: {}
  set_ai_skill_cd_multiplier:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: multiplier
        type: f4
        if: ks__has_field_multiplier
    instances:
      ks__has_field_multiplier: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  register_ai_action_point_register:
    seq: []
    instances: {}
  register_ai_action_point:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: point_type
        type: ks__enum__action_point_type
        if: ks__has_field_point_type
    instances:
      ks__has_field_point_type: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  release_ai_action_point_register:
    seq: []
    instances: {}
  release_ai_action_point:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: point_type
        type: ks__enum__action_point_type
        if: ks__has_field_point_type
    instances:
      ks__has_field_point_type: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_neuron_enable_register:
    seq: []
    instances: {}
  ks__enum__neuron_name:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: neuron_name
  set_neuron_enable:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: neuron_name
        type: ks__enum__neuron_name
        if: ks__has_field_neuron_name
      - id: enable
        type: u1
        if: ks__has_field_enable
    instances:
      ks__has_field_neuron_name: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_enable: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_neuron_mute_register:
    seq: []
    instances: {}
  set_neuron_mute:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: neuron_name
        type: ks__enum__neuron_name
        if: ks__has_field_neuron_name
      - id: enable
        type: u1
        if: ks__has_field_enable
    instances:
      ks__has_field_neuron_name: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_enable: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  broadcast_neuron_stimulate_register:
    seq: []
    instances: {}
  broadcast_neuron_stimulate:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: neuron_name
        type: ks__enum__neuron_name
        if: ks__has_field_neuron_name
      - id: stimulate
        type: u1
        if: ks__has_field_stimulate
      - id: range
        type: f4
        if: ks__has_field_range
    instances:
      ks__has_field_neuron_name: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_stimulate: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_range: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  issue_command_register:
    seq: []
    instances: {}
  issue_command:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: command_id
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_command_id
      - id: duration
        type: f4
        if: ks__has_field_duration
    instances:
      ks__has_field_command_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_duration: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  reset_ai_threat_broadcast_range_register:
    seq: []
    instances: {}
  reset_ai_threat_broadcast_range:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: range
        type: aux_types::dynamic_float
        if: ks__has_field_range
    instances:
      ks__has_field_range: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_ai_hit_feeling_register:
    seq: []
    instances: {}
  set_ai_hit_feeling:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: enable
        type: u1
        if: ks__has_field_enable
    instances:
      ks__has_field_enable: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_velocity_ignore_air_gy_register:
    seq: []
    instances: {}
  set_velocity_ignore_air_gy:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: ignore_air_gy
        type: u1
        if: ks__has_field_ignore_air_gy
    instances:
      ks__has_field_ignore_air_gy: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  use_item_register:
    seq: []
    instances: {}
  use_item:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: item_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_item_id
      - id: item_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_item_num
    instances:
      ks__has_field_item_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_item_num: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  repeated_register:
    seq: []
    instances: {}
  repeated:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: repeat_times
        type: aux_types::dynamic_int
        if: ks__has_field_repeat_times
      - id: actions
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_actions
    instances:
      ks__has_field_repeat_times: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_actions: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_entity_scale_register:
    seq: []
    instances: {}
  set_entity_scale:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: scale
        type: f4
        if: ks__has_field_scale
    instances:
      ks__has_field_scale: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  call_lua_task_register:
    seq: []
    instances: {}
  call_lua_task:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: target_alias
        type: aux_types::string
        if: ks__has_field_target_alias
      - id: value_int
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_value_int
      - id: value_float
        type: f4
        if: ks__has_field_value_float
      - id: value_string
        type: aux_types::string
        if: ks__has_field_value_string
    instances:
      ks__has_field_target_alias: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_value_int: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_value_float: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_value_string: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  dungeon_fog_effects_register:
    seq: []
    instances: {}
  dungeon_fog_effects:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: enable
        type: u1
        if: ks__has_field_enable
      - id: camera_fog_effect_name
        type: aux_types::string
        if: ks__has_field_camera_fog_effect_name
      - id: player_fog_effect_name
        type: aux_types::string
        if: ks__has_field_player_fog_effect_name
      - id: local_offset
        type: vector
        if: ks__has_field_local_offset
    instances:
      ks__has_field_enable: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_camera_fog_effect_name: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_player_fog_effect_name: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_local_offset: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  do_tile_action_register:
    seq: []
    instances: {}
  do_tile_action:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: action_id
        type: aux_types::string
        if: ks__has_field_action_id
    instances:
      ks__has_field_action_id: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  do_watcher_system_action_register:
    seq: []
    instances: {}
  do_watcher_system_action:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: watcher_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_watcher_id
      - id: authority_only
        type: u1
        if: ks__has_field_authority_only
      - id: in_threat_list_only
        type: u1
        if: ks__has_field_in_threat_list_only
    instances:
      ks__has_field_watcher_id: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_authority_only: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_in_threat_list_only: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  show_progress_bar_action_register:
    seq: []
    instances: {}
  show_progress_bar_action:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: show
        type: u1
        if: ks__has_field_show
    instances:
      ks__has_field_show: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  change_tag_register:
    seq: []
    instances: {}
  change_tag:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: is_add
        type: u1
        if: ks__has_field_is_add
      - id: tag
        type: aux_types::string
        if: ks__has_field_tag
    instances:
      ks__has_field_is_add: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_tag: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  use_skill_elite_set_register:
    seq: []
    instances: {}
  use_skill_elite_set:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: skill_elite_set_id
        type: u1
        if: ks__has_field_skill_elite_set_id
    instances:
      ks__has_field_skill_elite_set_id: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  fixed_monster_rush_move_register:
    seq: []
    instances: {}
  fixed_monster_rush_move:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: to_pos
        type: ks__disp__config_born_type
        if: ks__has_field_to_pos
      - id: time_range
        type: aux_types::dynamic_float
        if: ks__has_field_time_range
      - id: max_range
        type: f4
        if: ks__has_field_max_range
      - id: animator_state_i_ds
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_animator_state_i_ds
      - id: override_move_collider
        type: aux_types::string
        if: ks__has_field_override_move_collider
      - id: is_in_air
        type: u1
        if: ks__has_field_is_in_air
      - id: check_animator_state_on_exit_only
        type: u1
        if: ks__has_field_check_animator_state_on_exit_only
      - id: ignore_detect_forward
        type: u1
        if: ks__has_field_ignore_detect_forward
    instances:
      ks__has_field_to_pos: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_time_range: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_max_range: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_animator_state_i_ds: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_override_move_collider: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_is_in_air: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_check_animator_state_on_exit_only: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_ignore_detect_forward: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  fixed_avatar_rush_move_register:
    seq: []
    instances: {}
  fixed_avatar_rush_move:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: to_pos
        type: ks__disp__config_born_type
        if: ks__has_field_to_pos
      - id: time_range
        type: aux_types::dynamic_float
        if: ks__has_field_time_range
      - id: max_range
        type: f4
        if: ks__has_field_max_range
      - id: animator_state_i_ds
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_animator_state_i_ds
      - id: override_move_collider
        type: aux_types::string
        if: ks__has_field_override_move_collider
      - id: is_in_air
        type: u1
        if: ks__has_field_is_in_air
      - id: check_animator_state_on_exit_only
        type: u1
        if: ks__has_field_check_animator_state_on_exit_only
      - id: ignore_detect_forward
        type: u1
        if: ks__has_field_ignore_detect_forward
    instances:
      ks__has_field_to_pos: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_time_range: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_max_range: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_animator_state_i_ds: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_override_move_collider: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_is_in_air: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_check_animator_state_on_exit_only: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_ignore_detect_forward: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  attach_element_type_resistance_register:
    seq: []
    instances: {}
  attach_element_type_resistance:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: element_type
        type: ks__enum__element_type
        if: ks__has_field_element_type
      - id: duration_ratio
        type: f4
        if: ks__has_field_duration_ratio
    instances:
      ks__has_field_element_type: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_duration_ratio: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  add_global_value_to_target_register:
    seq: []
    instances: {}
  add_global_value_to_target:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: src_target
        type: ks__enum__ability_targetting
        if: ks__has_field_src_target
      - id: dst_target
        type: ks__enum__ability_targetting
        if: ks__has_field_dst_target
      - id: src_key
        type: aux_types::string
        if: ks__has_field_src_key
      - id: dst_key
        type: aux_types::string
        if: ks__has_field_dst_key
    instances:
      ks__has_field_src_target: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_dst_target: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_src_key: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_dst_key: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  revive_elem_energy_register:
    seq: []
    instances: {}
  revive_elem_energy:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: value
        type: aux_types::dynamic_float
        if: ks__has_field_value
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  add_climate_meter_register:
    seq: []
    instances: {}
  ks__enum__json_climate_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: json_climate_type
  add_climate_meter:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: climate_type
        type: ks__enum__json_climate_type
        if: ks__has_field_climate_type
      - id: value
        type: aux_types::dynamic_float
        if: ks__has_field_value
    instances:
      ks__has_field_climate_type: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_value: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  reset_climate_meter_register:
    seq: []
    instances: {}
  reset_climate_meter:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: climate_type
        type: ks__enum__json_climate_type
        if: ks__has_field_climate_type
    instances:
      ks__has_field_climate_type: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  fire_gain_crystal_seed_event_register:
    seq: []
    instances: {}
  fire_gain_crystal_seed_event:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: element_type
        type: ks__enum__element_type
        if: ks__has_field_element_type
    instances:
      ks__has_field_element_type: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  enable_monster_move_on_water_register:
    seq: []
    instances: {}
  enable_monster_move_on_water:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: enable
        type: u1
        if: ks__has_field_enable
    instances:
      ks__has_field_enable: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  enable_avatar_move_on_water_register:
    seq: []
    instances: {}
  enable_avatar_move_on_water:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: enable
        type: u1
        if: ks__has_field_enable
    instances:
      ks__has_field_enable: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  change_enviro_weather_register:
    seq: []
    instances: {}
  change_enviro_weather:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: area_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_area_id
      - id: climate_type
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_climate_type
      - id: trans_duration
        type: f4
        if: ks__has_field_trans_duration
    instances:
      ks__has_field_area_id: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_climate_type: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_trans_duration: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  sync_entity_position_by_normalized_time_register:
    seq: []
    instances: {}
  sync_entity_position_by_normalized_time:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: normalized_time
        type: f4
        if: ks__has_field_normalized_time
    instances:
      ks__has_field_normalized_time: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  equip_affix_start_register:
    seq: []
    instances: {}
  equip_affix_start:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: cd
        type: aux_types::dynamic_float
        if: ks__has_field_cd
      - id: equip_affix_data_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_equip_affix_data_id
    instances:
      ks__has_field_cd: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_equip_affix_data_id: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  show_extra_ability_register:
    seq: []
    instances: {}
  show_extra_ability:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: skill_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_skill_id
    instances:
      ks__has_field_skill_id: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_extra_ability_enable_register:
    seq: []
    instances: {}
  set_extra_ability_enable:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: enable
        type: u1
        if: ks__has_field_enable
    instances:
      ks__has_field_enable: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  ks__enum__extra_ability_state:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: extra_ability_state
  extra_ability_state_comparer:
    seq: []
    instances: {}
  set_extra_ability_state_register:
    seq: []
    instances: {}
  set_extra_ability_state:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: state
        type: ks__enum__extra_ability_state
        if: ks__has_field_state
    instances:
      ks__has_field_state: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  update_uid_value_register:
    seq: []
    instances: {}
  update_uid_value:
    seq:
      - id: ks__base
        type: config_ability_action
    instances:
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  ks__enum__use_skill_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: use_skill_type
  use_skill_type_comparer:
    seq: []
    instances: {}
  force_use_skill_success_register:
    seq: []
    instances: {}
  force_use_skill_success:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: skill_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_skill_id
      - id: type
        type: ks__enum__use_skill_type
        if: ks__has_field_type
      - id: immediately
        type: u1
        if: ks__has_field_immediately
    instances:
      ks__has_field_skill_id: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_type: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_immediately: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  ks__enum__lua_call_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: lua_call_type
  lua_call_type_comparer:
    seq: []
    instances: {}
  server_lua_call_register:
    seq: []
    instances: {}
  server_lua_call:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: lua_call_type
        type: ks__enum__lua_call_type
        if: ks__has_field_lua_call_type
      - id: is_target
        type: u1
        if: ks__has_field_is_target
      - id: call_param_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_call_param_list
      - id: func_name
        type: aux_types::string
        if: ks__has_field_func_name
      - id: param_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_param_num
      - id: param1
        type: aux_types::dynamic_float
        if: ks__has_field_param1
      - id: param2
        type: aux_types::dynamic_float
        if: ks__has_field_param2
      - id: param3
        type: aux_types::dynamic_float
        if: ks__has_field_param3
    instances:
      ks__has_field_lua_call_type: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_is_target: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_call_param_list: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_func_name: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_param_num: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_param1: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_param2: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_param3: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  do_widget_system_action_register:
    seq: []
    instances: {}
  ks__enum__widget_event_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: widget_event_type
  do_widget_system_action:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: widget_event
        type: ks__enum__widget_event_type
        if: ks__has_field_widget_event
    instances:
      ks__has_field_widget_event: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  change_gadget_ui_interact_hint_register:
    seq: []
    instances: {}
  change_gadget_ui_interact_hint:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: hint_text_map_id
        type: aux_types::string
        if: ks__has_field_hint_text_map_id
    instances:
      ks__has_field_hint_text_map_id: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  kill_play_entity_register:
    seq: []
    instances: {}
  kill_play_entity:
    seq:
      - id: ks__base
        type: config_ability_action
    instances:
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  dummy_action_register:
    seq: []
    instances: {}
  dummy_action:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: action_list
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_action_list
    instances:
      ks__has_field_action_list: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  ban_entity_mark_register:
    seq: []
    instances: {}
  ban_entity_mark:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: is_ban
        type: u1
        if: ks__has_field_is_ban
    instances:
      ks__has_field_is_ban: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  ks__enum__action_panel_effect_slot:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: action_panel_effect_slot
  action_panel_effect_slot_comparer:
    seq: []
    instances: {}
  fire_ui_effect_register:
    seq: []
    instances: {}
  fire_ui_effect:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: effect_pattern
        type: aux_types::string
        if: ks__has_field_effect_pattern
      - id: effect_slot
        type: ks__enum__action_panel_effect_slot
        if: ks__has_field_effect_slot
    instances:
      ks__has_field_effect_pattern: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_effect_slot: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  attach_ui_effect_register:
    seq: []
    instances: {}
  attach_ui_effect:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: effect_pattern
        type: aux_types::string
        if: ks__has_field_effect_pattern
      - id: effect_slot
        type: ks__enum__action_panel_effect_slot
        if: ks__has_field_effect_slot
    instances:
      ks__has_field_effect_pattern: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_effect_slot: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_skill_anchor_register:
    seq: []
    instances: {}
  set_skill_anchor:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: born
        type: ks__disp__config_born_type
        if: ks__has_field_born
    instances:
      ks__has_field_born: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  add_charge_value_register:
    seq: []
    instances: {}
  add_charge_value:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: charge_type
        type: ks__enum__element_type
        if: ks__has_field_charge_type
      - id: value
        type: aux_types::dynamic_float
        if: ks__has_field_value
      - id: global_value_key
        type: aux_types::string
        if: ks__has_field_global_value_key
    instances:
      ks__has_field_charge_type: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_value: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_global_value_key: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_charge_ratio_register:
    seq: []
    instances: {}
  set_charge_ratio:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: charge_type
        type: ks__enum__element_type
        if: ks__has_field_charge_type
      - id: ratio
        type: aux_types::dynamic_float
        if: ks__has_field_ratio
      - id: global_value_key
        type: aux_types::string
        if: ks__has_field_global_value_key
    instances:
      ks__has_field_charge_type: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_ratio: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_global_value_key: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  enable_light_core_component_register:
    seq: []
    instances: {}
  enable_light_core_component:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: enable
        type: u1
        if: ks__has_field_enable
    instances:
      ks__has_field_enable: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  server_monster_log_register:
    seq: []
    instances: {}
  server_monster_log:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: param_list
        type: ks__array_of__aux_types__vlq_base128_le_s__length_u
        if: ks__has_field_param_list
    instances:
      ks__has_field_param_list: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  enable_position_synchronization_register:
    seq: []
    instances: {}
  enable_position_synchronization:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: enable
        type: u1
        if: ks__has_field_enable
    instances:
      ks__has_field_enable: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  revive_stamina_register:
    seq: []
    instances: {}
  revive_stamina:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: value
        type: aux_types::dynamic_float
        if: ks__has_field_value
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  add_charge_bar_value_register:
    seq: []
    instances: {}
  add_charge_bar_value:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: value
        type: aux_types::dynamic_float
        if: ks__has_field_value
      - id: random_in_range
        type: u1
        if: ks__has_field_random_in_range
      - id: max_value
        type: aux_types::dynamic_float
        if: ks__has_field_max_value
      - id: min_value
        type: aux_types::dynamic_float
        if: ks__has_field_min_value
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_random_in_range: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_max_value: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_min_value: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_charge_bar_value_register:
    seq: []
    instances: {}
  set_charge_bar_value:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: value
        type: aux_types::dynamic_float
        if: ks__has_field_value
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  set_ui_combat_bar_spark_register:
    seq: []
    instances: {}
  set_ui_combat_bar_spark:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: enable
        type: u1
        if: ks__has_field_enable
    instances:
      ks__has_field_enable: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  refresh_ui_combat_bar_layout_register:
    seq: []
    instances: {}
  refresh_ui_combat_bar_layout:
    seq:
      - id: ks__base
        type: config_ability_action
    instances:
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  enable_gadget_special_camera_register:
    seq: []
    instances: {}
  enable_gadget_special_camera:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: enable
        type: u1
        if: ks__has_field_enable
    instances:
      ks__has_field_enable: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  kill_server_gadget_register:
    seq: []
    instances: {}
  kill_server_gadget:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: gadget_info
        type: select_targets_by_children
        if: ks__has_field_gadget_info
    instances:
      ks__has_field_gadget_info: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  show_text_map_register:
    seq: []
    instances: {}
  show_text_map:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: id
        type: aux_types::string
        if: ks__has_field_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  fire_charge_bar_effect_register:
    seq: []
    instances: {}
  fire_charge_bar_effect:
    seq:
      - id: ks__base
        type: config_ability_action
    instances:
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  enable_weather_lock_register:
    seq: []
    instances: {}
  enable_weather_lock:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: enable
        type: u1
        if: ks__has_field_enable
    instances:
      ks__has_field_enable: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  push_inter_action_by_config_path_register:
    seq: []
    instances: {}
  push_inter_action_by_config_path:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: cfg_path
        type: aux_types::string
        if: ks__has_field_cfg_path
      - id: is_external
        type: u1
        if: ks__has_field_is_external
    instances:
      ks__has_field_cfg_path: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_is_external: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  ignore_move_col_to_rock_col_register:
    seq: []
    instances: {}
  ignore_move_col_to_rock_col:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: ignore
        type: u1
        if: ks__has_field_ignore
    instances:
      ks__has_field_ignore: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  create_tile_register:
    seq: []
    instances: {}
  create_tile:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: tile_name
        type: aux_types::string
        if: ks__has_field_tile_name
      - id: attack_pattern
        type: ks__disp__config_base_attack_pattern
        if: ks__has_field_attack_pattern
    instances:
      ks__has_field_tile_name: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_attack_pattern: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  destroy_tile_register:
    seq: []
    instances: {}
  destroy_tile:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: tile_name
        type: aux_types::string
        if: ks__has_field_tile_name
      - id: attack_pattern
        type: ks__disp__config_base_attack_pattern
        if: ks__has_field_attack_pattern
    instances:
      ks__has_field_tile_name: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_attack_pattern: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  clear_tile_register:
    seq: []
    instances: {}
  clear_tile:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: tile_name
        type: aux_types::string
        if: ks__has_field_tile_name
    instances:
      ks__has_field_tile_name: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  change_shield_value_register:
    seq: []
    instances: {}
  change_shield_value:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: shield_hp_ratio
        type: aux_types::dynamic_float
        if: ks__has_field_shield_hp_ratio
      - id: shield_hp
        type: aux_types::dynamic_float
        if: ks__has_field_shield_hp
      - id: max_shield_by_hp_ratio
        type: aux_types::dynamic_float
        if: ks__has_field_max_shield_by_hp_ratio
      - id: max_shield_hp
        type: aux_types::dynamic_float
        if: ks__has_field_max_shield_hp
      - id: modifier_name
        type: aux_types::string
        if: ks__has_field_modifier_name
      - id: refresh_time
        type: u1
        if: ks__has_field_refresh_time
    instances:
      ks__has_field_shield_hp_ratio: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_shield_hp: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_max_shield_by_hp_ratio: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_max_shield_hp: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_modifier_name: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_refresh_time: # Field №5
        value: (ks__bit_field & 0b100000) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  ks__enum__fishing_event:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: fishing_event
  fishing_event_comparer:
    seq: []
    instances: {}
  fire_fishing_event_register:
    seq: []
    instances: {}
  fire_fishing_event:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: event_type
        type: ks__enum__fishing_event
        if: ks__has_field_event_type
    instances:
      ks__has_field_event_type: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  send_evt_electric_core_move_enter_p1register:
    seq: []
    instances: {}
  send_evt_electric_core_move_enter_p1:
    seq:
      - id: ks__base
        type: config_ability_action
    instances:
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  send_evt_electric_core_move_interrupt_register:
    seq: []
    instances: {}
  send_evt_electric_core_move_interrupt:
    seq:
      - id: ks__base
        type: config_ability_action
    instances:
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  get_fight_property_register:
    seq: []
    instances: {}
  get_fight_property:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: fight_prop_source_target
        type: ks__enum__ability_targetting
        if: ks__has_field_fight_prop_source_target
      - id: fight_prop
        type: aux_types::string
        if: ks__has_field_fight_prop
      - id: global_value_key
        type: aux_types::string
        if: ks__has_field_global_value_key
    instances:
      ks__has_field_fight_prop_source_target: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_fight_prop: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_global_value_key: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  ks__enum__team_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: team_type
  team_type_comparer:
    seq: []
    instances: {}
  get_team_total_max_energy_to_overridemap_register:
    seq: []
    instances: {}
  get_team_total_max_energy_to_overridemap:
    seq:
      - id: ks__base
        type: config_ability_action
      - id: ks__bit_field
        type: u1
      - id: team_type
        type: ks__enum__team_type
        if: ks__has_field_team_type
      - id: override_map_key
        type: aux_types::string
        if: ks__has_field_override_map_key
    instances:
      ks__has_field_team_type: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_override_map_key: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  ability_targetting_comparer:
    seq: []
    instances: {}
  ks__enum__relational_operator:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: relational_operator
  relational_operator_comparer:
    seq: []
    instances: {}
  ks__enum__mixin_targetting:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: mixin_targetting
  mixin_targetting_comparer:
    seq: []
    instances: {}
  property_type_comparer:
    seq: []
    instances: {}
  stack_method_comparer:
    seq: []
    instances: {}
  targetting_option:
    seq:
      - id: ks__bit_field
        type: u1
      - id: range
        type: aux_types::dynamic_float
        if: ks__has_field_range
    instances:
      ks__has_field_range: # Field №0
        value: (ks__bit_field & 0b1) != 0
  select_targets_sort_type_comparer:
    seq: []
    instances: {}
  select_targets_by_shape_register:
    seq: []
    instances: {}
  select_targets_by_equip_parts_register:
    seq: []
    instances: {}
  select_targets_by_equip_parts:
    seq:
      - id: ks__base
        type: select_targets
      - id: ks__bit_field
        type: u1
      - id: equip_part_names
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_equip_part_names
    instances:
      ks__has_field_equip_part_names: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      top_limit:
        value: ks__base.top_limit
      entity_type_priority:
        value: ks__base.entity_type_priority
      sort_type:
        value: ks__base.sort_type
  select_targets_by_children_register:
    seq: []
    instances: {}
  select_targets_by_children_entity_type_register:
    seq: []
    instances: {}
  select_targets_by_children_entity_type:
    seq:
      - id: ks__base
        type: select_targets
      - id: ks__bit_field
        type: u1
      - id: entity_type
        type: ks__enum__entity_type
        if: ks__has_field_entity_type
    instances:
      ks__has_field_entity_type: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      top_limit:
        value: ks__base.top_limit
      entity_type_priority:
        value: ks__base.entity_type_priority
      sort_type:
        value: ks__base.sort_type
  select_targets_by_tag_register:
    seq: []
    instances: {}
  select_targets_by_tag:
    seq:
      - id: ks__base
        type: select_targets
      - id: ks__bit_field
        type: u1
      - id: tag
        type: aux_types::string
        if: ks__has_field_tag
    instances:
      ks__has_field_tag: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      top_limit:
        value: ks__base.top_limit
      entity_type_priority:
        value: ks__base.entity_type_priority
      sort_type:
        value: ks__base.sort_type
  ks__enum__bitwise_operator:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: bitwise_operator
  bitwise_operator_comparer:
    seq: []
    instances: {}
  select_targets_by_self_group_register:
    seq: []
    instances: {}
  select_targets_by_self_group:
    seq:
      - id: ks__base
        type: select_targets
      - id: ks__bit_field
        type: u1
      - id: operation
        type: ks__enum__bitwise_operator
        if: ks__has_field_operation
      - id: value
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_value
      - id: dynamic_value
        type: aux_types::dynamic_int
        if: ks__has_field_dynamic_value
      - id: use_binary
        type: u1
        if: ks__has_field_use_binary
      - id: compare_type
        type: ks__enum__relational_operator
        if: ks__has_field_compare_type
    instances:
      ks__has_field_operation: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_value: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_dynamic_value: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_use_binary: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_compare_type: # Field №4
        value: (ks__bit_field & 0b10000) != 0
      # Base class fields
      top_limit:
        value: ks__base.top_limit
      entity_type_priority:
        value: ks__base.entity_type_priority
      sort_type:
        value: ks__base.sort_type
  select_targets_by_lc_trigger_register:
    seq: []
    instances: {}
  select_targets_by_lc_trigger:
    seq:
      - id: ks__base
        type: select_targets
      - id: ks__bit_field
        type: u1
      - id: camp_target_type
        type: ks__enum__target_type
        if: ks__has_field_camp_target_type
    instances:
      ks__has_field_camp_target_type: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      top_limit:
        value: ks__base.top_limit
      entity_type_priority:
        value: ks__base.entity_type_priority
      sort_type:
        value: ks__base.sort_type
  select_targets_by_lc_trigger_all_register:
    seq: []
    instances: {}
  select_targets_by_lc_trigger_all:
    seq:
      - id: ks__base
        type: select_targets
    instances:
      # Base class fields
      top_limit:
        value: ks__base.top_limit
      entity_type_priority:
        value: ks__base.entity_type_priority
      sort_type:
        value: ks__base.sort_type
  config_buff_debuff_addition:
    seq:
      - id: ks__bit_field
        type: u1
      - id: addition_buff_debuffs
        type: ks__array_of__ks__enum__ability_state__length_u
        if: ks__has_field_addition_buff_debuffs
      - id: addition_ratio
        type: f4
        if: ks__has_field_addition_ratio
    instances:
      ks__has_field_addition_buff_debuffs: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_addition_ratio: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_debuff_resistance:
    seq:
      - id: ks__bit_field
        type: u1
      - id: immune_states
        type: ks__array_of__ks__enum__ability_state__length_u
        if: ks__has_field_immune_states
      - id: resistance_ratio
        type: f4
        if: ks__has_field_resistance_ratio
      - id: duration_ratio
        type: f4
        if: ks__has_field_duration_ratio
    instances:
      ks__has_field_immune_states: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_resistance_ratio: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_duration_ratio: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_buff_debuff_resistance:
    seq:
      - id: ks__bit_field
        type: u1
      - id: resistance_buff_debuffs
        type: ks__array_of__ks__enum__ability_state__length_u
        if: ks__has_field_resistance_buff_debuffs
      - id: resistance_ratio
        type: f4
        if: ks__has_field_resistance_ratio
      - id: duration_ratio
        type: f4
        if: ks__has_field_duration_ratio
    instances:
      ks__has_field_resistance_buff_debuffs: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_resistance_ratio: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_duration_ratio: # Field №2
        value: (ks__bit_field & 0b100) != 0
  base_action_container:
    seq:
      - id: ks__bit_field
        type: u1
      - id: local_id
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_local_id
    instances:
      ks__has_field_local_id: # Field №0
        value: (ks__bit_field & 0b1) != 0
  ability_property:
    seq: []
    instances: {}
  element_define:
    seq: []
    instances: {}
  ability_define:
    seq: []
    instances: {}
  ability_camera_shot_type_comparer:
    seq: []
    instances: {}
  ks__enum__switch_skill_priority:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: switch_skill_priority
  switch_skill_priority_comparer:
    seq: []
    instances: {}
  ks__enum__ability_group_source_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: ability_group_source_type
  ability_group_source_type_comparer:
    seq: []
    instances: {}
  ks__enum__ability_group_target_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: ability_group_target_type
  ability_group_target_type_comparer:
    seq: []
    instances: {}
  config_entity_ability_entry:
    seq:
      - id: ks__bit_field
        type: u1
      - id: ability_id
        type: aux_types::string
        if: ks__has_field_ability_id
      - id: ability_name
        type: aux_types::string
        if: ks__has_field_ability_name
      - id: ability_override
        type: aux_types::string
        if: ks__has_field_ability_override
    instances:
      ks__has_field_ability_id: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_ability_name: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_ability_override: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__array_of__config_entity_ability_entry__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_entity_ability_entry
        repeat: expr
        repeat-expr: length.value
  config_dynamic_talent:
    seq:
      - id: ks__bit_field
        type: u1
      - id: talent_name
        type: aux_types::string
        if: ks__has_field_talent_name
    instances:
      ks__has_field_talent_name: # Field №0
        value: (ks__bit_field & 0b1) != 0
  ks__array_of__config_dynamic_talent__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_dynamic_talent
        repeat: expr
        repeat-expr: length.value
  config_ability_group:
    seq:
      - id: ks__bit_field
        type: u1
      - id: ability_group_source_type
        type: ks__enum__ability_group_source_type
        if: ks__has_field_ability_group_source_type
      - id: ability_group_target_type
        type: ks__enum__ability_group_target_type
        if: ks__has_field_ability_group_target_type
      - id: ability_group_target_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_ability_group_target_id_list
      - id: target_abilities
        type: ks__array_of__config_entity_ability_entry__length_u
        if: ks__has_field_target_abilities
      - id: target_talents
        type: ks__array_of__config_dynamic_talent__length_u
        if: ks__has_field_target_talents
    instances:
      ks__has_field_ability_group_source_type: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_ability_group_target_type: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_ability_group_target_id_list: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_target_abilities: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_target_talents: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  ks__enum__avatar_stage_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: avatar_stage_type
  avatar_stage_type_comparer:
    seq: []
    instances: {}
  config_ability_state_to_actions:
    seq:
      - id: ks__bit_field
        type: u1
      - id: ability_state
        type: ks__enum__ability_state
        if: ks__has_field_ability_state
      - id: actions
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_actions
    instances:
      ks__has_field_ability_state: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_actions: # Field №1
        value: (ks__bit_field & 0b10) != 0
  debug_mixin_register:
    seq: []
    instances: {}
  debug_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
    instances:
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  rely_on_element_mixin_register:
    seq: []
    instances: {}
  rely_on_element_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: element_type
        type: ks__enum__element_type
        if: ks__has_field_element_type
    instances:
      ks__has_field_element_type: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  replace_event_pattern_mixin_register:
    seq: []
    instances: {}
  replace_event_pattern_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: old_patterns
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_old_patterns
      - id: new_patterns
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_new_patterns
    instances:
      ks__has_field_old_patterns: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_new_patterns: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  attach_to_state_id_mixin_register:
    seq: []
    instances: {}
  attach_to_state_id_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: state_i_ds
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_state_i_ds
      - id: modifier_name
        type: aux_types::string
        if: ks__has_field_modifier_name
      - id: target
        type: ks__enum__ability_targetting
        if: ks__has_field_target
      - id: predicates
        type: ks__array_of__ks__disp__config_ability_predicate__length_u
        if: ks__has_field_predicates
      - id: is_check_on_attach
        type: u1
        if: ks__has_field_is_check_on_attach
    instances:
      ks__has_field_state_i_ds: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_modifier_name: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_target: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_predicates: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_is_check_on_attach: # Field №4
        value: (ks__bit_field & 0b10000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  attach_to_monster_air_state_mixin_register:
    seq: []
    instances: {}
  attach_to_monster_air_state_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: modifier_name
        type: aux_types::string
        if: ks__has_field_modifier_name
      - id: is_air_move
        type: u1
        if: ks__has_field_is_air_move
    instances:
      ks__has_field_modifier_name: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_is_air_move: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  attach_to_normalized_time_mixin_register:
    seq: []
    instances: {}
  attach_to_normalized_time_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: state_id
        type: aux_types::string
        if: ks__has_field_state_id
      - id: modifier_name
        type: aux_types::string
        if: ks__has_field_modifier_name
      - id: target
        type: ks__enum__ability_targetting
        if: ks__has_field_target
      - id: predicates
        type: ks__array_of__ks__disp__config_ability_predicate__length_u
        if: ks__has_field_predicates
      - id: normalize_start
        type: f4
        if: ks__has_field_normalize_start
      - id: normalize_end
        type: f4
        if: ks__has_field_normalize_end
    instances:
      ks__has_field_state_id: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_modifier_name: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_target: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_predicates: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_normalize_start: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_normalize_end: # Field №5
        value: (ks__bit_field & 0b100000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  attach_to_animator_state_id_mixin_register:
    seq: []
    instances: {}
  attach_to_animator_state_id_mixin:
    seq:
      - id: ks__base
        type: attach_to_state_id_mixin
    instances:
      # Base class fields
      state_i_ds:
        value: ks__base.state_i_ds
      modifier_name:
        value: ks__base.modifier_name
      target:
        value: ks__base.target
      predicates:
        value: ks__base.predicates
      is_check_on_attach:
        value: ks__base.is_check_on_attach
      is_unique:
        value: ks__base.is_unique
  attach_to_pose_id_mixin_register:
    seq: []
    instances: {}
  attach_to_pose_id_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: pose_i_ds
        type: ks__array_of__aux_types__vlq_base128_le_s__length_u
        if: ks__has_field_pose_i_ds
      - id: modifier_name
        type: aux_types::string
        if: ks__has_field_modifier_name
    instances:
      ks__has_field_pose_i_ds: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_modifier_name: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  attach_to_gadget_state_mixin_register:
    seq: []
    instances: {}
  attach_to_gadget_state_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: gadget_state
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_gadget_state
      - id: modifier_name
        type: aux_types::string
        if: ks__has_field_modifier_name
    instances:
      ks__has_field_gadget_state: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_modifier_name: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  attach_to_gadget_state_mutex_mixin_register:
    seq: []
    instances: {}
  ks__array_of__ks__array_of__aux_types__string__length_u__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__array_of__aux_types__string__length_u
        repeat: expr
        repeat-expr: length.value
  attach_to_gadget_state_mutex_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: gadget_states
        type: ks__array_of__aux_types__vlq_base128_le_s__length_u
        if: ks__has_field_gadget_states
      - id: modifier_names
        type: ks__array_of__ks__array_of__aux_types__string__length_u__length_u
        if: ks__has_field_modifier_names
    instances:
      ks__has_field_gadget_states: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_modifier_names: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  attach_modifier_by_stacking_mixin_register:
    seq: []
    instances: {}
  attach_modifier_by_stacking_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: action_queue
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_action_queue
      - id: stacking_modifier
        type: aux_types::string
        if: ks__has_field_stacking_modifier
    instances:
      ks__has_field_action_queue: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_stacking_modifier: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  attach_to_ai_alertness_mixin_register:
    seq: []
    instances: {}
  attach_to_ai_alertness_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: alertness
        type: ks__array_of__aux_types__vlq_base128_le_s__length_u
        if: ks__has_field_alertness
      - id: modifier_name
        type: aux_types::string
        if: ks__has_field_modifier_name
    instances:
      ks__has_field_alertness: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_modifier_name: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  ks__enum__on_event_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: on_event_type
  on_event_type_comparer:
    seq: []
    instances: {}
  attach_modifier_to_predicate_mixin_register:
    seq: []
    instances: {}
  ks__array_of__config_ability_state_to_actions__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_ability_state_to_actions
        repeat: expr
        repeat-expr: length.value
  attach_modifier_to_predicate_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: type
        type: ks__enum__avatar_stage_type
        if: ks__has_field_type
      - id: on_event
        type: ks__enum__on_event_type
        if: ks__has_field_on_event
      - id: predicates
        type: ks__array_of__ks__disp__config_ability_predicate__length_u
        if: ks__has_field_predicates
      - id: modifier_name
        type: aux_types::string
        if: ks__has_field_modifier_name
      - id: on_ability_state_added
        type: ks__array_of__config_ability_state_to_actions__length_u
        if: ks__has_field_on_ability_state_added
      - id: on_ability_state_removed
        type: ks__array_of__config_ability_state_to_actions__length_u
        if: ks__has_field_on_ability_state_removed
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_on_event: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_predicates: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_modifier_name: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_on_ability_state_added: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_on_ability_state_removed: # Field №5
        value: (ks__bit_field & 0b100000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  do_action_by_event_mixin_register:
    seq: []
    instances: {}
  do_action_by_event_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: type
        type: ks__enum__avatar_stage_type
        if: ks__has_field_type
      - id: on_event
        type: ks__enum__on_event_type
        if: ks__has_field_on_event
      - id: pick_item_config_i_ds
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_pick_item_config_i_ds
      - id: predicates
        type: ks__array_of__ks__disp__config_ability_predicate__length_u
        if: ks__has_field_predicates
      - id: actions
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_actions
      - id: on_ability_state_added
        type: ks__array_of__config_ability_state_to_actions__length_u
        if: ks__has_field_on_ability_state_added
      - id: on_ability_state_removed
        type: ks__array_of__config_ability_state_to_actions__length_u
        if: ks__has_field_on_ability_state_removed
      - id: cost_energy_delta_name
        type: aux_types::string
        if: ks__has_field_cost_energy_delta_name
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_on_event: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_pick_item_config_i_ds: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_predicates: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_actions: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_on_ability_state_added: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_on_ability_state_removed: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_cost_energy_delta_name: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  button_hold_charge_mixin_register:
    seq: []
    instances: {}
  button_hold_charge_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: skill_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_skill_id
      - id: charge_time
        type: f4
        if: ks__has_field_charge_time
      - id: second_charge_time
        type: aux_types::dynamic_float
        if: ks__has_field_second_charge_time
      - id: on_begin_uncharged
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_begin_uncharged
      - id: on_release_uncharged
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_release_uncharged
      - id: on_begin_charged
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_begin_charged
      - id: on_release_charged
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_release_charged
      - id: on_begin_second_charged
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_begin_second_charged
      - id: on_release_second_charged
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_release_second_charged
      - id: charge_state_i_ds
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_charge_state_i_ds
    instances:
      ks__has_field_skill_id: # Field №0
        value: (ks__bit_field.value & 0b0000000001) != 0
      ks__has_field_charge_time: # Field №1
        value: (ks__bit_field.value & 0b0000000010) != 0
      ks__has_field_second_charge_time: # Field №2
        value: (ks__bit_field.value & 0b0000000100) != 0
      ks__has_field_on_begin_uncharged: # Field №3
        value: (ks__bit_field.value & 0b0000001000) != 0
      ks__has_field_on_release_uncharged: # Field №4
        value: (ks__bit_field.value & 0b0000010000) != 0
      ks__has_field_on_begin_charged: # Field №5
        value: (ks__bit_field.value & 0b0000100000) != 0
      ks__has_field_on_release_charged: # Field №6
        value: (ks__bit_field.value & 0b0001000000) != 0
      ks__has_field_on_begin_second_charged: # Field №7
        value: (ks__bit_field.value & 0b0010000000) != 0
      ks__has_field_on_release_second_charged: # Field №8
        value: (ks__bit_field.value & 0b0100000000) != 0
      ks__has_field_charge_state_i_ds: # Field №9
        value: (ks__bit_field.value & 0b1000000000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  skill_button_hold_charge_mixin_register:
    seq: []
    instances: {}
  skill_button_hold_charge_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: allow_hold_lock_direction
        type: u1
        if: ks__has_field_allow_hold_lock_direction
      - id: skill_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_skill_id
      - id: next_loop_trigger_id
        type: aux_types::string
        if: ks__has_field_next_loop_trigger_id
      - id: end_hold_trigger
        type: aux_types::string
        if: ks__has_field_end_hold_trigger
      - id: before_state_i_ds
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_before_state_i_ds
      - id: before_hold_duration
        type: f4
        if: ks__has_field_before_hold_duration
      - id: charge_loop_state_i_ds
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_charge_loop_state_i_ds
      - id: after_state_i_ds
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_after_state_i_ds
      - id: charge_loop_durations
        type: ks__array_of__f4__length_u
        if: ks__has_field_charge_loop_durations
      - id: transient_state_i_ds
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_transient_state_i_ds
    instances:
      ks__has_field_allow_hold_lock_direction: # Field №0
        value: (ks__bit_field.value & 0b0000000001) != 0
      ks__has_field_skill_id: # Field №1
        value: (ks__bit_field.value & 0b0000000010) != 0
      ks__has_field_next_loop_trigger_id: # Field №2
        value: (ks__bit_field.value & 0b0000000100) != 0
      ks__has_field_end_hold_trigger: # Field №3
        value: (ks__bit_field.value & 0b0000001000) != 0
      ks__has_field_before_state_i_ds: # Field №4
        value: (ks__bit_field.value & 0b0000010000) != 0
      ks__has_field_before_hold_duration: # Field №5
        value: (ks__bit_field.value & 0b0000100000) != 0
      ks__has_field_charge_loop_state_i_ds: # Field №6
        value: (ks__bit_field.value & 0b0001000000) != 0
      ks__has_field_after_state_i_ds: # Field №7
        value: (ks__bit_field.value & 0b0010000000) != 0
      ks__has_field_charge_loop_durations: # Field №8
        value: (ks__bit_field.value & 0b0100000000) != 0
      ks__has_field_transient_state_i_ds: # Field №9
        value: (ks__bit_field.value & 0b1000000000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  avatar_steer_by_camera_mixin_register:
    seq: []
    instances: {}
  avatar_steer_by_camera_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: state_i_ds
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_state_i_ds
      - id: angular_speed
        type: f4
        if: ks__has_field_angular_speed
      - id: can_revive_stamina
        type: u1
        if: ks__has_field_can_revive_stamina
    instances:
      ks__has_field_state_i_ds: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_angular_speed: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_can_revive_stamina: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  steer_attack_mixin_register:
    seq: []
    instances: {}
  steer_attack_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: steer_state_i_ds
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_steer_state_i_ds
      - id: start_normalized_time
        type: f4
        if: ks__has_field_start_normalized_time
      - id: end_normalized_time
        type: f4
        if: ks__has_field_end_normalized_time
      - id: angular_speed
        type: f4
        if: ks__has_field_angular_speed
      - id: attack_angle
        type: f4
        if: ks__has_field_attack_angle
      - id: attack_trigger
        type: aux_types::string
        if: ks__has_field_attack_trigger
      - id: attack_distance
        type: f4
        if: ks__has_field_attack_distance
      - id: remote_steer_to_local_target
        type: u1
        if: ks__has_field_remote_steer_to_local_target
    instances:
      ks__has_field_steer_state_i_ds: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_start_normalized_time: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_end_normalized_time: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_angular_speed: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_attack_angle: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_attack_trigger: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_attack_distance: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_remote_steer_to_local_target: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  steer_attack_move_mixin_register:
    seq: []
    instances: {}
  steer_attack_move_mixin:
    seq:
      - id: ks__base
        type: steer_attack_mixin
    instances:
      # Base class fields
      steer_state_i_ds:
        value: ks__base.steer_state_i_ds
      start_normalized_time:
        value: ks__base.start_normalized_time
      end_normalized_time:
        value: ks__base.end_normalized_time
      angular_speed:
        value: ks__base.angular_speed
      attack_angle:
        value: ks__base.attack_angle
      attack_trigger:
        value: ks__base.attack_trigger
      attack_distance:
        value: ks__base.attack_distance
      remote_steer_to_local_target:
        value: ks__base.remote_steer_to_local_target
      is_unique:
        value: ks__base.is_unique
  steer_attack_trace_mixin_register:
    seq: []
    instances: {}
  steer_attack_trace_mixin:
    seq:
      - id: ks__base
        type: steer_attack_mixin
    instances:
      # Base class fields
      steer_state_i_ds:
        value: ks__base.steer_state_i_ds
      start_normalized_time:
        value: ks__base.start_normalized_time
      end_normalized_time:
        value: ks__base.end_normalized_time
      angular_speed:
        value: ks__base.angular_speed
      attack_angle:
        value: ks__base.attack_angle
      attack_trigger:
        value: ks__base.attack_trigger
      attack_distance:
        value: ks__base.attack_distance
      remote_steer_to_local_target:
        value: ks__base.remote_steer_to_local_target
      is_unique:
        value: ks__base.is_unique
  steer_attack_trace_to_pos_mixin_register:
    seq: []
    instances: {}
  steer_attack_trace_to_pos_mixin:
    seq:
      - id: ks__base
        type: steer_attack_mixin
      - id: ks__bit_field
        type: u1
      - id: global_pos_key
        type: aux_types::string
        if: ks__has_field_global_pos_key
    instances:
      ks__has_field_global_pos_key: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      steer_state_i_ds:
        value: ks__base.steer_state_i_ds
      start_normalized_time:
        value: ks__base.start_normalized_time
      end_normalized_time:
        value: ks__base.end_normalized_time
      angular_speed:
        value: ks__base.angular_speed
      attack_angle:
        value: ks__base.attack_angle
      attack_trigger:
        value: ks__base.attack_trigger
      attack_distance:
        value: ks__base.attack_distance
      remote_steer_to_local_target:
        value: ks__base.remote_steer_to_local_target
      is_unique:
        value: ks__base.is_unique
  shield_bar_mixin_register:
    seq: []
    instances: {}
  shield_bar_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: on_shield_broken
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_shield_broken
      - id: revert
        type: u1
        if: ks__has_field_revert
      - id: show_damage_text
        type: aux_types::string
        if: ks__has_field_show_damage_text
      - id: use_muti_player_fix_data
        type: u1
        if: ks__has_field_use_muti_player_fix_data
    instances:
      ks__has_field_on_shield_broken: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_revert: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_show_damage_text: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_use_muti_player_fix_data: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  charge_bar_mixin_register:
    seq: []
    instances: {}
  charge_bar_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: charge_bar_element_type
        type: ks__enum__element_type
        if: ks__has_field_charge_bar_element_type
      - id: charge_bar_icon_id
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_charge_bar_icon_id
      - id: initial_value
        type: aux_types::dynamic_float
        if: ks__has_field_initial_value
      - id: max_value
        type: aux_types::dynamic_float
        if: ks__has_field_max_value
    instances:
      ks__has_field_charge_bar_element_type: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_charge_bar_icon_id: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_initial_value: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_max_value: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  element_shield_mixin_register:
    seq: []
    instances: {}
  element_shield_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: element_type
        type: ks__enum__element_type
        if: ks__has_field_element_type
      - id: show_damage_text
        type: aux_types::string
        if: ks__has_field_show_damage_text
      - id: shield_angle
        type: aux_types::dynamic_float
        if: ks__has_field_shield_angle
      - id: shield_hp_ratio
        type: aux_types::dynamic_float
        if: ks__has_field_shield_hp_ratio
      - id: shield_hp
        type: aux_types::dynamic_float
        if: ks__has_field_shield_hp
      - id: damage_ratio
        type: aux_types::dynamic_float
        if: ks__has_field_damage_ratio
      - id: on_shield_broken
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_shield_broken
      - id: on_shield_success
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_shield_success
      - id: on_shield_failed
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_shield_failed
      - id: use_muti_player_fix_data
        type: u1
        if: ks__has_field_use_muti_player_fix_data
      - id: update_shield_by_max_hp
        type: u1
        if: ks__has_field_update_shield_by_max_hp
    instances:
      ks__has_field_element_type: # Field №0
        value: (ks__bit_field.value & 0b00000000001) != 0
      ks__has_field_show_damage_text: # Field №1
        value: (ks__bit_field.value & 0b00000000010) != 0
      ks__has_field_shield_angle: # Field №2
        value: (ks__bit_field.value & 0b00000000100) != 0
      ks__has_field_shield_hp_ratio: # Field №3
        value: (ks__bit_field.value & 0b00000001000) != 0
      ks__has_field_shield_hp: # Field №4
        value: (ks__bit_field.value & 0b00000010000) != 0
      ks__has_field_damage_ratio: # Field №5
        value: (ks__bit_field.value & 0b00000100000) != 0
      ks__has_field_on_shield_broken: # Field №6
        value: (ks__bit_field.value & 0b00001000000) != 0
      ks__has_field_on_shield_success: # Field №7
        value: (ks__bit_field.value & 0b00010000000) != 0
      ks__has_field_on_shield_failed: # Field №8
        value: (ks__bit_field.value & 0b00100000000) != 0
      ks__has_field_use_muti_player_fix_data: # Field №9
        value: (ks__bit_field.value & 0b01000000000) != 0
      ks__has_field_update_shield_by_max_hp: # Field №10
        value: (ks__bit_field.value & 0b10000000000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  elite_shield_mixin_register:
    seq: []
    instances: {}
  elite_shield_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: shield_type
        type: aux_types::string
        if: ks__has_field_shield_type
      - id: shield_angle
        type: aux_types::dynamic_float
        if: ks__has_field_shield_angle
      - id: shield_hp_ratio
        type: aux_types::dynamic_float
        if: ks__has_field_shield_hp_ratio
      - id: shield_hp
        type: aux_types::dynamic_float
        if: ks__has_field_shield_hp
      - id: cost_shield_ratio_name
        type: aux_types::string
        if: ks__has_field_cost_shield_ratio_name
      - id: show_damage_text
        type: aux_types::string
        if: ks__has_field_show_damage_text
      - id: on_shield_broken
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_shield_broken
      - id: amount_by_get_damage
        type: aux_types::dynamic_float
        if: ks__has_field_amount_by_get_damage
      - id: target_mute_hit_effect
        type: u1
        if: ks__has_field_target_mute_hit_effect
      - id: infinite_shield
        type: u1
        if: ks__has_field_infinite_shield
      - id: heal_limited_by_caster_max_hp_ratio
        type: aux_types::dynamic_float
        if: ks__has_field_heal_limited_by_caster_max_hp_ratio
    instances:
      ks__has_field_shield_type: # Field №0
        value: (ks__bit_field.value & 0b00000000001) != 0
      ks__has_field_shield_angle: # Field №1
        value: (ks__bit_field.value & 0b00000000010) != 0
      ks__has_field_shield_hp_ratio: # Field №2
        value: (ks__bit_field.value & 0b00000000100) != 0
      ks__has_field_shield_hp: # Field №3
        value: (ks__bit_field.value & 0b00000001000) != 0
      ks__has_field_cost_shield_ratio_name: # Field №4
        value: (ks__bit_field.value & 0b00000010000) != 0
      ks__has_field_show_damage_text: # Field №5
        value: (ks__bit_field.value & 0b00000100000) != 0
      ks__has_field_on_shield_broken: # Field №6
        value: (ks__bit_field.value & 0b00001000000) != 0
      ks__has_field_amount_by_get_damage: # Field №7
        value: (ks__bit_field.value & 0b00010000000) != 0
      ks__has_field_target_mute_hit_effect: # Field №8
        value: (ks__bit_field.value & 0b00100000000) != 0
      ks__has_field_infinite_shield: # Field №9
        value: (ks__bit_field.value & 0b01000000000) != 0
      ks__has_field_heal_limited_by_caster_max_hp_ratio: # Field №10
        value: (ks__bit_field.value & 0b10000000000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  override_attack_event_mixin_register:
    seq: []
    instances: {}
  override_attack_event_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: override_attack_event
        type: aux_types::string
        if: ks__has_field_override_attack_event
    instances:
      ks__has_field_override_attack_event: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  ks__enum__add_action_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: add_action_type
  add_action_type_comparer:
    seq: []
    instances: {}
  attach_modifier_to_self_global_value_mixin_register:
    seq: []
    instances: {}
  ks__array_of__aux_types__dynamic_float__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: aux_types::dynamic_float
        repeat: expr
        repeat-expr: length.value
  ks__array_of__ks__array_of__ks__disp__config_ability_action__length_u__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__array_of__ks__disp__config_ability_action__length_u
        repeat: expr
        repeat-expr: length.value
  attach_modifier_to_self_global_value_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: global_value_target
        type: ks__enum__ability_targetting
        if: ks__has_field_global_value_target
      - id: global_value_key
        type: aux_types::string
        if: ks__has_field_global_value_key
      - id: add_action
        type: ks__enum__add_action_type
        if: ks__has_field_add_action
      - id: default_global_value_on_create
        type: aux_types::dynamic_float
        if: ks__has_field_default_global_value_on_create
      - id: value_steps
        type: ks__array_of__aux_types__dynamic_float__length_u
        if: ks__has_field_value_steps
      - id: modifier_name_steps
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_modifier_name_steps
      - id: action_queues
        type: ks__array_of__ks__array_of__ks__disp__config_ability_action__length_u__length_u
        if: ks__has_field_action_queues
      - id: remove_applied_modifier
        type: u1
        if: ks__has_field_remove_applied_modifier
    instances:
      ks__has_field_global_value_target: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_global_value_key: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_add_action: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_default_global_value_on_create: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_value_steps: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_modifier_name_steps: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_action_queues: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_remove_applied_modifier: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  attach_modifier_to_self_global_value_no_init_mixin_register:
    seq: []
    instances: {}
  attach_modifier_to_self_global_value_no_init_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: global_value_key
        type: aux_types::string
        if: ks__has_field_global_value_key
      - id: add_action
        type: ks__enum__add_action_type
        if: ks__has_field_add_action
      - id: value_steps
        type: ks__array_of__aux_types__dynamic_float__length_u
        if: ks__has_field_value_steps
      - id: modifier_name_steps
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_modifier_name_steps
      - id: action_queues
        type: ks__array_of__ks__array_of__ks__disp__config_ability_action__length_u__length_u
        if: ks__has_field_action_queues
      - id: remove_applied_modifier
        type: u1
        if: ks__has_field_remove_applied_modifier
    instances:
      ks__has_field_global_value_key: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_add_action: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_value_steps: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_modifier_name_steps: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_action_queues: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_remove_applied_modifier: # Field №5
        value: (ks__bit_field & 0b100000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  attach_modifier_to_global_value_mixin_register:
    seq: []
    instances: {}
  attach_modifier_to_global_value_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: global_value_target
        type: ks__enum__ability_targetting
        if: ks__has_field_global_value_target
      - id: global_value_key
        type: aux_types::string
        if: ks__has_field_global_value_key
      - id: value_steps
        type: ks__array_of__aux_types__dynamic_float__length_u
        if: ks__has_field_value_steps
      - id: modifier_name_steps
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_modifier_name_steps
      - id: action_queues
        type: ks__array_of__ks__array_of__ks__disp__config_ability_action__length_u__length_u
        if: ks__has_field_action_queues
      - id: remove_applied_modifier
        type: u1
        if: ks__has_field_remove_applied_modifier
      - id: remove_applied_modifier_target_disappear
        type: u1
        if: ks__has_field_remove_applied_modifier_target_disappear
      - id: remove_applied_modifier_clear_global_value
        type: u1
        if: ks__has_field_remove_applied_modifier_clear_global_value
    instances:
      ks__has_field_global_value_target: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_global_value_key: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_value_steps: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_modifier_name_steps: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_action_queues: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_remove_applied_modifier: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_remove_applied_modifier_target_disappear: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_remove_applied_modifier_clear_global_value: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  trigger_type_support_mixin_register:
    seq: []
    instances: {}
  trigger_type_support_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: duration
        type: f4
        if: ks__has_field_duration
      - id: radius
        type: f4
        if: ks__has_field_radius
    instances:
      ks__has_field_duration: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_radius: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  trigger_element_support_mixin_register:
    seq: []
    instances: {}
  trigger_element_support_mixin:
    seq:
      - id: ks__base
        type: trigger_type_support_mixin
      - id: ks__bit_field
        type: u1
      - id: element_type
        type: ks__enum__element_type
        if: ks__has_field_element_type
    instances:
      ks__has_field_element_type: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      duration:
        value: ks__base.duration
      radius:
        value: ks__base.radius
      is_unique:
        value: ks__base.is_unique
  trigger_be_hit_support_mixin_register:
    seq: []
    instances: {}
  trigger_be_hit_support_mixin:
    seq:
      - id: ks__base
        type: trigger_type_support_mixin
      - id: ks__bit_field
        type: u1
      - id: hit_level
        type: ks__enum__hit_level
        if: ks__has_field_hit_level
    instances:
      ks__has_field_hit_level: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      duration:
        value: ks__base.duration
      radius:
        value: ks__base.radius
      is_unique:
        value: ks__base.is_unique
  trigger_rage_support_mixin_register:
    seq: []
    instances: {}
  trigger_rage_support_mixin:
    seq:
      - id: ks__base
        type: trigger_type_support_mixin
      - id: ks__bit_field
        type: u1
      - id: damp_ratio
        type: f4
        if: ks__has_field_damp_ratio
      - id: add_ratio
        type: f4
        if: ks__has_field_add_ratio
      - id: max_value
        type: f4
        if: ks__has_field_max_value
      - id: min_value
        type: f4
        if: ks__has_field_min_value
    instances:
      ks__has_field_damp_ratio: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_add_ratio: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_max_value: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_min_value: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      duration:
        value: ks__base.duration
      radius:
        value: ks__base.radius
      is_unique:
        value: ks__base.is_unique
  wind_zone_mixin_register:
    seq: []
    instances: {}
  wind_zone_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: shape_name
        type: aux_types::string
        if: ks__has_field_shape_name
      - id: born
        type: ks__disp__config_born_type
        if: ks__has_field_born
      - id: strength
        type: aux_types::dynamic_float
        if: ks__has_field_strength
      - id: attenuation
        type: aux_types::dynamic_float
        if: ks__has_field_attenuation
      - id: inner_radius
        type: aux_types::dynamic_float
        if: ks__has_field_inner_radius
      - id: reverse
        type: u1
        if: ks__has_field_reverse
      - id: target_type
        type: ks__enum__target_type
        if: ks__has_field_target_type
      - id: predicates
        type: ks__array_of__ks__disp__config_ability_predicate__length_u
        if: ks__has_field_predicates
      - id: modifier_name
        type: aux_types::string
        if: ks__has_field_modifier_name
      - id: max_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_num
      - id: force_growth
        type: f4
        if: ks__has_field_force_growth
      - id: force_fallen
        type: f4
        if: ks__has_field_force_fallen
      - id: offset
        type: vector
        if: ks__has_field_offset
    instances:
      ks__has_field_shape_name: # Field №0
        value: (ks__bit_field.value & 0b0000000000001) != 0
      ks__has_field_born: # Field №1
        value: (ks__bit_field.value & 0b0000000000010) != 0
      ks__has_field_strength: # Field №2
        value: (ks__bit_field.value & 0b0000000000100) != 0
      ks__has_field_attenuation: # Field №3
        value: (ks__bit_field.value & 0b0000000001000) != 0
      ks__has_field_inner_radius: # Field №4
        value: (ks__bit_field.value & 0b0000000010000) != 0
      ks__has_field_reverse: # Field №5
        value: (ks__bit_field.value & 0b0000000100000) != 0
      ks__has_field_target_type: # Field №6
        value: (ks__bit_field.value & 0b0000001000000) != 0
      ks__has_field_predicates: # Field №7
        value: (ks__bit_field.value & 0b0000010000000) != 0
      ks__has_field_modifier_name: # Field №8
        value: (ks__bit_field.value & 0b0000100000000) != 0
      ks__has_field_max_num: # Field №9
        value: (ks__bit_field.value & 0b0001000000000) != 0
      ks__has_field_force_growth: # Field №10
        value: (ks__bit_field.value & 0b0010000000000) != 0
      ks__has_field_force_fallen: # Field №11
        value: (ks__bit_field.value & 0b0100000000000) != 0
      ks__has_field_offset: # Field №12
        value: (ks__bit_field.value & 0b1000000000000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  config_tornado_zone:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: shape_name
        type: aux_types::string
        if: ks__has_field_shape_name
      - id: offset
        type: vector
        if: ks__has_field_offset
      - id: dir
        type: vector
        if: ks__has_field_dir
      - id: strength
        type: aux_types::dynamic_float
        if: ks__has_field_strength
      - id: attenuation
        type: aux_types::dynamic_float
        if: ks__has_field_attenuation
      - id: inner_radius
        type: aux_types::dynamic_float
        if: ks__has_field_inner_radius
      - id: modifier_name
        type: aux_types::string
        if: ks__has_field_modifier_name
      - id: max_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_num
      - id: force_growth
        type: f4
        if: ks__has_field_force_growth
      - id: force_fallen
        type: f4
        if: ks__has_field_force_fallen
      - id: duration
        type: f4
        if: ks__has_field_duration
    instances:
      ks__has_field_shape_name: # Field №0
        value: (ks__bit_field.value & 0b00000000001) != 0
      ks__has_field_offset: # Field №1
        value: (ks__bit_field.value & 0b00000000010) != 0
      ks__has_field_dir: # Field №2
        value: (ks__bit_field.value & 0b00000000100) != 0
      ks__has_field_strength: # Field №3
        value: (ks__bit_field.value & 0b00000001000) != 0
      ks__has_field_attenuation: # Field №4
        value: (ks__bit_field.value & 0b00000010000) != 0
      ks__has_field_inner_radius: # Field №5
        value: (ks__bit_field.value & 0b00000100000) != 0
      ks__has_field_modifier_name: # Field №6
        value: (ks__bit_field.value & 0b00001000000) != 0
      ks__has_field_max_num: # Field №7
        value: (ks__bit_field.value & 0b00010000000) != 0
      ks__has_field_force_growth: # Field №8
        value: (ks__bit_field.value & 0b00100000000) != 0
      ks__has_field_force_fallen: # Field №9
        value: (ks__bit_field.value & 0b01000000000) != 0
      ks__has_field_duration: # Field №10
        value: (ks__bit_field.value & 0b10000000000) != 0
  tornado_mixin_register:
    seq: []
    instances: {}
  ks__array_of__config_tornado_zone__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_tornado_zone
        repeat: expr
        repeat-expr: length.value
  tornado_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: stage_zone
        type: ks__array_of__config_tornado_zone__length_u
        if: ks__has_field_stage_zone
      - id: predicates
        type: ks__array_of__ks__disp__config_ability_predicate__length_u
        if: ks__has_field_predicates
      - id: target_type
        type: ks__enum__target_type
        if: ks__has_field_target_type
      - id: born
        type: ks__disp__config_born_type
        if: ks__has_field_born
      - id: enviro_wind_strength
        type: aux_types::dynamic_float
        if: ks__has_field_enviro_wind_strength
      - id: enviro_wind_radius
        type: aux_types::dynamic_float
        if: ks__has_field_enviro_wind_radius
    instances:
      ks__has_field_stage_zone: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_predicates: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_target_type: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_born: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_enviro_wind_strength: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_enviro_wind_radius: # Field №5
        value: (ks__bit_field & 0b100000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  air_flow_mixin_register:
    seq: []
    instances: {}
  air_flow_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gadget_id
      - id: camp_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_camp_id
      - id: camp_target_type
        type: ks__enum__target_type
        if: ks__has_field_camp_target_type
      - id: born
        type: ks__disp__config_born_type
        if: ks__has_field_born
    instances:
      ks__has_field_gadget_id: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_camp_id: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_camp_target_type: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_born: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  wind_seed_spawner_mixin_register:
    seq: []
    instances: {}
  wind_seed_spawner_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: refresh_enable
        type: u1
        if: ks__has_field_refresh_enable
      - id: spawner_radius
        type: f4
        if: ks__has_field_spawner_radius
      - id: spawner_height_angle
        type: f4
        if: ks__has_field_spawner_height_angle
      - id: spawner_area_angle
        type: f4
        if: ks__has_field_spawner_area_angle
      - id: min_distance_to_avatar
        type: f4
        if: ks__has_field_min_distance_to_avatar
      - id: move_suppress_speed
        type: f4
        if: ks__has_field_move_suppress_speed
      - id: move_refresh_angle_freeze
        type: f4
        if: ks__has_field_move_refresh_angle_freeze
      - id: move_refresh_angle_slow
        type: f4
        if: ks__has_field_move_refresh_angle_slow
      - id: min_num_per_spawn
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_min_num_per_spawn
      - id: max_num_per_spawn
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_num_per_spawn
      - id: max_swap_num_per_spawn
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_swap_num_per_spawn
      - id: min_separate_range
        type: f4
        if: ks__has_field_min_separate_range
      - id: max_separate_range
        type: f4
        if: ks__has_field_max_separate_range
      - id: remove_seed_distance
        type: f4
        if: ks__has_field_remove_seed_distance
      - id: refresh_meter_per_meter
        type: f4
        if: ks__has_field_refresh_meter_per_meter
      - id: refresh_meter_per_second
        type: f4
        if: ks__has_field_refresh_meter_per_second
      - id: refresh_meter_per_dist_remove
        type: f4
        if: ks__has_field_refresh_meter_per_dist_remove
      - id: refresh_meter_max
        type: f4
        if: ks__has_field_refresh_meter_max
      - id: wind_force_modifier
        type: aux_types::string
        if: ks__has_field_wind_force_modifier
      - id: wind_explode_modifier
        type: aux_types::string
        if: ks__has_field_wind_explode_modifier
      - id: wind_bullet_ability
        type: aux_types::string
        if: ks__has_field_wind_bullet_ability
      - id: global_value_key
        type: aux_types::string
        if: ks__has_field_global_value_key
      - id: spawn_num_array
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_spawn_num_array
      - id: seed_gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_seed_gadget_id
      - id: init_signal_strength
        type: f4
        if: ks__has_field_init_signal_strength
      - id: trigger_signal_strength
        type: f4
        if: ks__has_field_trigger_signal_strength
      - id: signal_decay_speed
        type: f4
        if: ks__has_field_signal_decay_speed
      - id: mutiple_range
        type: f4
        if: ks__has_field_mutiple_range
      - id: catch_seed_range
        type: f4
        if: ks__has_field_catch_seed_range
    instances:
      ks__has_field_refresh_enable: # Field №0
        value: (ks__bit_field.value & 0b00000000000000000000000000001) != 0
      ks__has_field_spawner_radius: # Field №1
        value: (ks__bit_field.value & 0b00000000000000000000000000010) != 0
      ks__has_field_spawner_height_angle: # Field №2
        value: (ks__bit_field.value & 0b00000000000000000000000000100) != 0
      ks__has_field_spawner_area_angle: # Field №3
        value: (ks__bit_field.value & 0b00000000000000000000000001000) != 0
      ks__has_field_min_distance_to_avatar: # Field №4
        value: (ks__bit_field.value & 0b00000000000000000000000010000) != 0
      ks__has_field_move_suppress_speed: # Field №5
        value: (ks__bit_field.value & 0b00000000000000000000000100000) != 0
      ks__has_field_move_refresh_angle_freeze: # Field №6
        value: (ks__bit_field.value & 0b00000000000000000000001000000) != 0
      ks__has_field_move_refresh_angle_slow: # Field №7
        value: (ks__bit_field.value & 0b00000000000000000000010000000) != 0
      ks__has_field_min_num_per_spawn: # Field №8
        value: (ks__bit_field.value & 0b00000000000000000000100000000) != 0
      ks__has_field_max_num_per_spawn: # Field №9
        value: (ks__bit_field.value & 0b00000000000000000001000000000) != 0
      ks__has_field_max_swap_num_per_spawn: # Field №10
        value: (ks__bit_field.value & 0b00000000000000000010000000000) != 0
      ks__has_field_min_separate_range: # Field №11
        value: (ks__bit_field.value & 0b00000000000000000100000000000) != 0
      ks__has_field_max_separate_range: # Field №12
        value: (ks__bit_field.value & 0b00000000000000001000000000000) != 0
      ks__has_field_remove_seed_distance: # Field №13
        value: (ks__bit_field.value & 0b00000000000000010000000000000) != 0
      ks__has_field_refresh_meter_per_meter: # Field №14
        value: (ks__bit_field.value & 0b00000000000000100000000000000) != 0
      ks__has_field_refresh_meter_per_second: # Field №15
        value: (ks__bit_field.value & 0b00000000000001000000000000000) != 0
      ks__has_field_refresh_meter_per_dist_remove: # Field №16
        value: (ks__bit_field.value & 0b00000000000010000000000000000) != 0
      ks__has_field_refresh_meter_max: # Field №17
        value: (ks__bit_field.value & 0b00000000000100000000000000000) != 0
      ks__has_field_wind_force_modifier: # Field №18
        value: (ks__bit_field.value & 0b00000000001000000000000000000) != 0
      ks__has_field_wind_explode_modifier: # Field №19
        value: (ks__bit_field.value & 0b00000000010000000000000000000) != 0
      ks__has_field_wind_bullet_ability: # Field №20
        value: (ks__bit_field.value & 0b00000000100000000000000000000) != 0
      ks__has_field_global_value_key: # Field №21
        value: (ks__bit_field.value & 0b00000001000000000000000000000) != 0
      ks__has_field_spawn_num_array: # Field №22
        value: (ks__bit_field.value & 0b00000010000000000000000000000) != 0
      ks__has_field_seed_gadget_id: # Field №23
        value: (ks__bit_field.value & 0b00000100000000000000000000000) != 0
      ks__has_field_init_signal_strength: # Field №24
        value: (ks__bit_field.value & 0b00001000000000000000000000000) != 0
      ks__has_field_trigger_signal_strength: # Field №25
        value: (ks__bit_field.value & 0b00010000000000000000000000000) != 0
      ks__has_field_signal_decay_speed: # Field №26
        value: (ks__bit_field.value & 0b00100000000000000000000000000) != 0
      ks__has_field_mutiple_range: # Field №27
        value: (ks__bit_field.value & 0b01000000000000000000000000000) != 0
      ks__has_field_catch_seed_range: # Field №28
        value: (ks__bit_field.value & 0b10000000000000000000000000000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  collision_mixin_register:
    seq: []
    instances: {}
  ks__enum__ccd_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: ccd_type
  config_ccd:
    seq:
      - id: ks__bit_field
        type: u1
      - id: type
        type: ks__enum__ccd_type
        if: ks__has_field_type
      - id: detect_cd
        type: f4
        if: ks__has_field_detect_cd
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_detect_cd: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__enum__collider_trigger_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: collider_trigger_type
  config_collision:
    seq:
      - id: ks__bit_field
        type: u1
      - id: ccd
        type: config_ccd
        if: ks__has_field_ccd
      - id: trigger_type
        type: ks__enum__collider_trigger_type
        if: ks__has_field_trigger_type
      - id: trigger_cd
        type: f4
        if: ks__has_field_trigger_cd
      - id: target_type
        type: ks__enum__target_type
        if: ks__has_field_target_type
      - id: ignore_scene
        type: u1
        if: ks__has_field_ignore_scene
      - id: ignore_water
        type: u1
        if: ks__has_field_ignore_water
      - id: born_with_trigger_enabled
        type: u1
        if: ks__has_field_born_with_trigger_enabled
      - id: delay_enable_collision
        type: f4
        if: ks__has_field_delay_enable_collision
    instances:
      ks__has_field_ccd: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_trigger_type: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_trigger_cd: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_target_type: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_ignore_scene: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_ignore_water: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_born_with_trigger_enabled: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_delay_enable_collision: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
  collision_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: collision
        type: config_collision
        if: ks__has_field_collision
      - id: min_shock_speed
        type: f4
        if: ks__has_field_min_shock_speed
      - id: cd
        type: f4
        if: ks__has_field_cd
      - id: on_collision
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_collision
    instances:
      ks__has_field_collision: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_min_shock_speed: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_cd: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_on_collision: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  velocity_detect_mixin_register:
    seq: []
    instances: {}
  velocity_detect_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: min_speed
        type: f4
        if: ks__has_field_min_speed
      - id: max_speed
        type: f4
        if: ks__has_field_max_speed
      - id: detect_on_start
        type: u1
        if: ks__has_field_detect_on_start
      - id: on_poseedge
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_poseedge
      - id: on_negedge
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_negedge
    instances:
      ks__has_field_min_speed: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_max_speed: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_detect_on_start: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_on_poseedge: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_on_negedge: # Field №4
        value: (ks__bit_field & 0b10000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  weight_detect_region_mixin_register:
    seq: []
    instances: {}
  weight_detect_region_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: global_value_key
        type: aux_types::string
        if: ks__has_field_global_value_key
      - id: on_weight_changed
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_weight_changed
    instances:
      ks__has_field_global_value_key: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_on_weight_changed: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  ks__enum__change_field_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: change_field_type
  change_field_type_comparer:
    seq: []
    instances: {}
  change_field_mixin_register:
    seq: []
    instances: {}
  change_field_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: type
        type: ks__enum__change_field_type
        if: ks__has_field_type
      - id: target_radius
        type: f4
        if: ks__has_field_target_radius
      - id: time
        type: f4
        if: ks__has_field_time
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_target_radius: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_time: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  switch_skill_id_mixin_register:
    seq: []
    instances: {}
  switch_skill_id_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: priority
        type: ks__enum__switch_skill_priority
        if: ks__has_field_priority
      - id: skill_index
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_skill_index
      - id: skill_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_skill_id
      - id: from_skill_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_from_skill_id
      - id: to_skill_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_to_skill_id
    instances:
      ks__has_field_priority: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_skill_index: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_skill_id: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_from_skill_id: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_to_skill_id: # Field №4
        value: (ks__bit_field & 0b10000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  avatar_change_skill_mixin_register:
    seq: []
    instances: {}
  avatar_change_skill_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: index
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_index
      - id: priority
        type: ks__enum__switch_skill_priority
        if: ks__has_field_priority
      - id: aim_skill_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_aim_skill_id
      - id: jump_skill_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_jump_skill_id
      - id: fly_skill_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_fly_skill_id
      - id: change_on_add
        type: u1
        if: ks__has_field_change_on_add
    instances:
      ks__has_field_index: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_priority: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_aim_skill_id: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_jump_skill_id: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_fly_skill_id: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_change_on_add: # Field №5
        value: (ks__bit_field & 0b100000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  avatar_level_skill_mixin_register:
    seq: []
    instances: {}
  avatar_level_skill_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: skill_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_skill_id
      - id: skill_index
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_skill_index
    instances:
      ks__has_field_skill_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_skill_index: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  on_avatar_use_skill_mixin_register:
    seq: []
    instances: {}
  on_avatar_use_skill_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: on_trigger_normal_attack
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_trigger_normal_attack
      - id: on_trigger_skill
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_trigger_skill
      - id: on_trigger_ultimate_skill
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_trigger_ultimate_skill
      - id: use_skill_start
        type: u1
        if: ks__has_field_use_skill_start
    instances:
      ks__has_field_on_trigger_normal_attack: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_on_trigger_skill: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_on_trigger_ultimate_skill: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_use_skill_start: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  cost_stamina_mixin_register:
    seq: []
    instances: {}
  cost_stamina_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: cost_stamina_delta
        type: aux_types::dynamic_float
        if: ks__has_field_cost_stamina_delta
      - id: cost_stamina_ratio
        type: aux_types::dynamic_float
        if: ks__has_field_cost_stamina_ratio
      - id: on_stamina_empty
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_stamina_empty
    instances:
      ks__has_field_cost_stamina_delta: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_cost_stamina_ratio: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_on_stamina_empty: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  entity_defence_mixin_register:
    seq: []
    instances: {}
  entity_defence_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: state_i_ds
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_state_i_ds
      - id: defend_trigger_id
        type: aux_types::string
        if: ks__has_field_defend_trigger_id
      - id: defend_angle
        type: f4
        if: ks__has_field_defend_angle
      - id: defend_probability
        type: aux_types::dynamic_float
        if: ks__has_field_defend_probability
      - id: defend_probability_delta
        type: aux_types::dynamic_float
        if: ks__has_field_defend_probability_delta
      - id: defend_time_interval
        type: aux_types::dynamic_float
        if: ks__has_field_defend_time_interval
      - id: always_recover
        type: u1
        if: ks__has_field_always_recover
      - id: defend_count_interval
        type: aux_types::dynamic_int
        if: ks__has_field_defend_count_interval
    instances:
      ks__has_field_state_i_ds: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_defend_trigger_id: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_defend_angle: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_defend_probability: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_defend_probability_delta: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_defend_time_interval: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_always_recover: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_defend_count_interval: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  monster_defend_mixin_register:
    seq: []
    instances: {}
  monster_defend_mixin:
    seq:
      - id: ks__base
        type: entity_defence_mixin
      - id: ks__bit_field
        type: u1
      - id: attack_type
        type: ks__enum__attack_type
        if: ks__has_field_attack_type
      - id: on_defend_succeded
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_defend_succeded
      - id: random_direction
        type: u1
        if: ks__has_field_random_direction
      - id: do_not_turn_direction
        type: u1
        if: ks__has_field_do_not_turn_direction
    instances:
      ks__has_field_attack_type: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_on_defend_succeded: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_random_direction: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_do_not_turn_direction: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      state_i_ds:
        value: ks__base.state_i_ds
      defend_trigger_id:
        value: ks__base.defend_trigger_id
      defend_angle:
        value: ks__base.defend_angle
      defend_probability:
        value: ks__base.defend_probability
      defend_probability_delta:
        value: ks__base.defend_probability_delta
      defend_time_interval:
        value: ks__base.defend_time_interval
      always_recover:
        value: ks__base.always_recover
      defend_count_interval:
        value: ks__base.defend_count_interval
      is_unique:
        value: ks__base.is_unique
  being_hit_mixin_register:
    seq: []
    instances: {}
  being_hit_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: to_attacker
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_to_attacker
      - id: to_attacker_owner
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_to_attacker_owner
      - id: to_attacker_origin_owner
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_to_attacker_origin_owner
    instances:
      ks__has_field_to_attacker: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_to_attacker_owner: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_to_attacker_origin_owner: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  auto_defence_mixin_register:
    seq: []
    instances: {}
  auto_defence_mixin:
    seq:
      - id: ks__base
        type: entity_defence_mixin
      - id: ks__bit_field
        type: u1
      - id: cost_stamina_ratio
        type: f4
        if: ks__has_field_cost_stamina_ratio
    instances:
      ks__has_field_cost_stamina_ratio: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      state_i_ds:
        value: ks__base.state_i_ds
      defend_trigger_id:
        value: ks__base.defend_trigger_id
      defend_angle:
        value: ks__base.defend_angle
      defend_probability:
        value: ks__base.defend_probability
      defend_probability_delta:
        value: ks__base.defend_probability_delta
      defend_time_interval:
        value: ks__base.defend_time_interval
      always_recover:
        value: ks__base.always_recover
      defend_count_interval:
        value: ks__base.defend_count_interval
      is_unique:
        value: ks__base.is_unique
  attack_hitting_scene_mixin_register:
    seq: []
    instances: {}
  attack_hitting_scene_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: on_hitting_scene
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_hitting_scene
      - id: anim_event_i_ds
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_anim_event_i_ds
    instances:
      ks__has_field_on_hitting_scene: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_anim_event_i_ds: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  trigger_witch_time_mixin_register:
    seq: []
    instances: {}
  trigger_witch_time_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: ignore_target_type
        type: ks__enum__target_type
        if: ks__has_field_ignore_target_type
      - id: timescale
        type: f4
        if: ks__has_field_timescale
      - id: duration
        type: f4
        if: ks__has_field_duration
      - id: use_max
        type: u1
        if: ks__has_field_use_max
      - id: enable_effect
        type: u1
        if: ks__has_field_enable_effect
      - id: enable_delay
        type: u1
        if: ks__has_field_enable_delay
      - id: delay_time_scale
        type: f4
        if: ks__has_field_delay_time_scale
      - id: delay_duration
        type: f4
        if: ks__has_field_delay_duration
      - id: open_effect_pattern
        type: aux_types::string
        if: ks__has_field_open_effect_pattern
      - id: close_effect_pattern
        type: aux_types::string
        if: ks__has_field_close_effect_pattern
      - id: weather_pattern
        type: aux_types::string
        if: ks__has_field_weather_pattern
    instances:
      ks__has_field_ignore_target_type: # Field №0
        value: (ks__bit_field.value & 0b00000000001) != 0
      ks__has_field_timescale: # Field №1
        value: (ks__bit_field.value & 0b00000000010) != 0
      ks__has_field_duration: # Field №2
        value: (ks__bit_field.value & 0b00000000100) != 0
      ks__has_field_use_max: # Field №3
        value: (ks__bit_field.value & 0b00000001000) != 0
      ks__has_field_enable_effect: # Field №4
        value: (ks__bit_field.value & 0b00000010000) != 0
      ks__has_field_enable_delay: # Field №5
        value: (ks__bit_field.value & 0b00000100000) != 0
      ks__has_field_delay_time_scale: # Field №6
        value: (ks__bit_field.value & 0b00001000000) != 0
      ks__has_field_delay_duration: # Field №7
        value: (ks__bit_field.value & 0b00010000000) != 0
      ks__has_field_open_effect_pattern: # Field №8
        value: (ks__bit_field.value & 0b00100000000) != 0
      ks__has_field_close_effect_pattern: # Field №9
        value: (ks__bit_field.value & 0b01000000000) != 0
      ks__has_field_weather_pattern: # Field №10
        value: (ks__bit_field.value & 0b10000000000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  ks__enum__trigger_weather_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: trigger_weather_type
  trigger_weather_type_comparer:
    seq: []
    instances: {}
  trigger_weather_mixin_register:
    seq: []
    instances: {}
  trigger_weather_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: type
        type: ks__enum__trigger_weather_type
        if: ks__has_field_type
      - id: area_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_area_id
      - id: weather_pattern
        type: aux_types::string
        if: ks__has_field_weather_pattern
      - id: trans_duration
        type: f4
        if: ks__has_field_trans_duration
      - id: duration
        type: f4
        if: ks__has_field_duration
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_area_id: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_weather_pattern: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_trans_duration: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_duration: # Field №4
        value: (ks__bit_field & 0b10000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  trigger_post_process_effect_mixin_register:
    seq: []
    instances: {}
  trigger_post_process_effect_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: post_effect_asset_name
        type: aux_types::string
        if: ks__has_field_post_effect_asset_name
      - id: duration
        type: f4
        if: ks__has_field_duration
      - id: is_stage_effect
        type: u1
        if: ks__has_field_is_stage_effect
    instances:
      ks__has_field_post_effect_asset_name: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_duration: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_is_stage_effect: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  element_type_modifier:
    seq:
      - id: ks__bit_field
        type: u1
      - id: element_type
        type: ks__enum__element_type
        if: ks__has_field_element_type
    instances:
      ks__has_field_element_type: # Field №0
        value: (ks__bit_field & 0b1) != 0
  modify_damage_mixin_register:
    seq: []
    instances: {}
  modify_damage_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: anim_event_names
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_anim_event_names
      - id: attack_tags
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_attack_tags
      - id: attack_type
        type: ks__enum__attack_type
        if: ks__has_field_attack_type
      - id: ignore_event_info
        type: u1
        if: ks__has_field_ignore_event_info
      - id: damage_percentage
        type: aux_types::dynamic_float
        if: ks__has_field_damage_percentage
      - id: damage_percentage_ratio
        type: aux_types::dynamic_float
        if: ks__has_field_damage_percentage_ratio
      - id: damage_extra
        type: aux_types::dynamic_float
        if: ks__has_field_damage_extra
      - id: bonus_critical
        type: aux_types::dynamic_float
        if: ks__has_field_bonus_critical
      - id: bonus_critical_hurt
        type: aux_types::dynamic_float
        if: ks__has_field_bonus_critical_hurt
      - id: element_type_modifier
        type: element_type_modifier
        if: ks__has_field_element_type_modifier
      - id: predicates
        type: ks__array_of__ks__disp__config_ability_predicate__length_u
        if: ks__has_field_predicates
      - id: true_damage
        type: u1
        if: ks__has_field_true_damage
    instances:
      ks__has_field_anim_event_names: # Field №0
        value: (ks__bit_field.value & 0b000000000001) != 0
      ks__has_field_attack_tags: # Field №1
        value: (ks__bit_field.value & 0b000000000010) != 0
      ks__has_field_attack_type: # Field №2
        value: (ks__bit_field.value & 0b000000000100) != 0
      ks__has_field_ignore_event_info: # Field №3
        value: (ks__bit_field.value & 0b000000001000) != 0
      ks__has_field_damage_percentage: # Field №4
        value: (ks__bit_field.value & 0b000000010000) != 0
      ks__has_field_damage_percentage_ratio: # Field №5
        value: (ks__bit_field.value & 0b000000100000) != 0
      ks__has_field_damage_extra: # Field №6
        value: (ks__bit_field.value & 0b000001000000) != 0
      ks__has_field_bonus_critical: # Field №7
        value: (ks__bit_field.value & 0b000010000000) != 0
      ks__has_field_bonus_critical_hurt: # Field №8
        value: (ks__bit_field.value & 0b000100000000) != 0
      ks__has_field_element_type_modifier: # Field №9
        value: (ks__bit_field.value & 0b001000000000) != 0
      ks__has_field_predicates: # Field №10
        value: (ks__bit_field.value & 0b010000000000) != 0
      ks__has_field_true_damage: # Field №11
        value: (ks__bit_field.value & 0b100000000000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  cluster_trigger_mixin_register:
    seq: []
    instances: {}
  cluster_trigger_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: born
        type: ks__disp__config_born_type
        if: ks__has_field_born
      - id: config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_config_id
      - id: radius
        type: f4
        if: ks__has_field_radius
      - id: duration
        type: f4
        if: ks__has_field_duration
      - id: value_steps
        type: ks__array_of__aux_types__dynamic_float__length_u
        if: ks__has_field_value_steps
      - id: action_queue
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_action_queue
    instances:
      ks__has_field_born: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_config_id: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_radius: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_duration: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_value_steps: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_action_queue: # Field №5
        value: (ks__bit_field & 0b100000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  modify_skill_cd_by_modifier_count_mixin_register:
    seq: []
    instances: {}
  modify_skill_cd_by_modifier_count_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: target_type
        type: ks__enum__target_type
        if: ks__has_field_target_type
      - id: modifier_name
        type: aux_types::string
        if: ks__has_field_modifier_name
      - id: skill_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_skill_id
      - id: cd_delta
        type: aux_types::dynamic_float
        if: ks__has_field_cd_delta
    instances:
      ks__has_field_target_type: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_modifier_name: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_skill_id: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_cd_delta: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  revive_elem_energy_mixin_register:
    seq: []
    instances: {}
  revive_elem_energy_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: type
        type: ks__enum__avatar_stage_type
        if: ks__has_field_type
      - id: period
        type: aux_types::dynamic_float
        if: ks__has_field_period
      - id: base_energy
        type: aux_types::dynamic_float
        if: ks__has_field_base_energy
      - id: ratio
        type: aux_types::dynamic_float
        if: ks__has_field_ratio
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_period: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_base_energy: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_ratio: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  ks__enum__reject_event_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: reject_event_type
  reject_event_type_comparer:
    seq: []
    instances: {}
  reject_attack_mixin_register:
    seq: []
    instances: {}
  reject_attack_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: attack_tag
        type: aux_types::string
        if: ks__has_field_attack_tag
      - id: limit_time
        type: f4
        if: ks__has_field_limit_time
      - id: type
        type: ks__enum__reject_event_type
        if: ks__has_field_type
    instances:
      ks__has_field_attack_tag: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_limit_time: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_type: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  reject_attack_mixin_v2register:
    seq: []
    instances: {}
  reject_attack_mixin_v2:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: attack_tags
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_attack_tags
      - id: limit_time
        type: f4
        if: ks__has_field_limit_time
      - id: type
        type: ks__enum__reject_event_type
        if: ks__has_field_type
      - id: is_white_list
        type: u1
        if: ks__has_field_is_white_list
    instances:
      ks__has_field_attack_tags: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_limit_time: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_type: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_is_white_list: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  ks__enum__attack_cost_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: attack_cost_type
  attack_cost_type_comparer:
    seq: []
    instances: {}
  attack_cost_element_mixin_register:
    seq: []
    instances: {}
  attack_cost_element_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: strike_type
        type: ks__enum__strike_type
        if: ks__has_field_strike_type
      - id: element_type
        type: ks__enum__element_type
        if: ks__has_field_element_type
      - id: attack_type
        type: ks__enum__attack_type
        if: ks__has_field_attack_type
      - id: strike_cost_ratio
        type: f4
        if: ks__has_field_strike_cost_ratio
      - id: attack_cost_ratio
        type: f4
        if: ks__has_field_attack_cost_ratio
      - id: element_cost_ratio
        type: f4
        if: ks__has_field_element_cost_ratio
      - id: cost_element_type
        type: ks__enum__element_type
        if: ks__has_field_cost_element_type
      - id: cost_type
        type: ks__enum__attack_cost_type
        if: ks__has_field_cost_type
    instances:
      ks__has_field_strike_type: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_element_type: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_attack_type: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_strike_cost_ratio: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_attack_cost_ratio: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_element_cost_ratio: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_cost_element_type: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_cost_type: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  apply_inertia_velocity_mixin_register:
    seq: []
    instances: {}
  apply_inertia_velocity_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: damping
        type: f4
        if: ks__has_field_damping
      - id: use_xz
        type: u1
        if: ks__has_field_use_xz
      - id: use_y
        type: u1
        if: ks__has_field_use_y
    instances:
      ks__has_field_damping: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_use_xz: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_use_y: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  change_prop_type_value_mixin_register:
    seq: []
    instances: {}
  change_prop_type_value_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: prop_type
        type: aux_types::string
        if: ks__has_field_prop_type
      - id: energy_cost_delta
        type: aux_types::dynamic_float
        if: ks__has_field_energy_cost_delta
    instances:
      ks__has_field_prop_type: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_energy_cost_delta: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  extend_lifetime_by_picked_gadget_mixin_register:
    seq: []
    instances: {}
  extend_lifetime_by_picked_gadget_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: picked_config_i_ds
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_picked_config_i_ds
      - id: extend_life_time
        type: aux_types::dynamic_float
        if: ks__has_field_extend_life_time
      - id: max_extend_life_time
        type: aux_types::dynamic_float
        if: ks__has_field_max_extend_life_time
    instances:
      ks__has_field_picked_config_i_ds: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_extend_life_time: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_max_extend_life_time: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  do_action_by_energy_change_mixin_register:
    seq: []
    instances: {}
  do_action_by_energy_change_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: type
        type: ks__enum__avatar_stage_type
        if: ks__has_field_type
      - id: element_types
        type: ks__array_of__ks__enum__element_type__length_u
        if: ks__has_field_element_types
      - id: do_when_energy_max
        type: u1
        if: ks__has_field_do_when_energy_max
      - id: on_gain_energy_by_ball
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_gain_energy_by_ball
      - id: on_gain_energy_by_other
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_gain_energy_by_other
      - id: on_gain_energy_by_all
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_gain_energy_by_all
      - id: on_gain_energy_max
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_gain_energy_max
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field & 0b0000001) != 0
      ks__has_field_element_types: # Field №1
        value: (ks__bit_field & 0b0000010) != 0
      ks__has_field_do_when_energy_max: # Field №2
        value: (ks__bit_field & 0b0000100) != 0
      ks__has_field_on_gain_energy_by_ball: # Field №3
        value: (ks__bit_field & 0b0001000) != 0
      ks__has_field_on_gain_energy_by_other: # Field №4
        value: (ks__bit_field & 0b0010000) != 0
      ks__has_field_on_gain_energy_by_all: # Field №5
        value: (ks__bit_field & 0b0100000) != 0
      ks__has_field_on_gain_energy_max: # Field №6
        value: (ks__bit_field & 0b1000000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  do_revive_mixin_register:
    seq: []
    instances: {}
  do_revive_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: type
        type: ks__enum__avatar_stage_type
        if: ks__has_field_type
      - id: ignore_die_abyss
        type: u1
        if: ks__has_field_ignore_die_abyss
      - id: ignore_die_drawn
        type: u1
        if: ks__has_field_ignore_die_drawn
      - id: on_kill_actions
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_kill_actions
      - id: on_revive_actions
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_revive_actions
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_ignore_die_abyss: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_ignore_die_drawn: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_on_kill_actions: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_on_revive_actions: # Field №4
        value: (ks__bit_field & 0b10000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  ice_floor_mixin_register:
    seq: []
    instances: {}
  ice_floor_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: width
        type: f4
        if: ks__has_field_width
      - id: height
        type: f4
        if: ks__has_field_height
      - id: move_distance
        type: f4
        if: ks__has_field_move_distance
      - id: min_interval
        type: f4
        if: ks__has_field_min_interval
      - id: do_action
        type: ks__disp__config_ability_action
        if: ks__has_field_do_action
    instances:
      ks__has_field_width: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_height: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_move_distance: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_min_interval: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_do_action: # Field №4
        value: (ks__bit_field & 0b10000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  hit_level_gauge_mixin_register:
    seq: []
    instances: {}
  hit_level_gauge_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: from_hit_level
        type: ks__enum__hit_level
        if: ks__has_field_from_hit_level
      - id: to_hit_level
        type: ks__enum__hit_level
        if: ks__has_field_to_hit_level
      - id: max_charge
        type: f4
        if: ks__has_field_max_charge
      - id: min_charge_delta
        type: f4
        if: ks__has_field_min_charge_delta
      - id: max_charge_delta
        type: f4
        if: ks__has_field_max_charge_delta
      - id: fade_time
        type: f4
        if: ks__has_field_fade_time
    instances:
      ks__has_field_from_hit_level: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_to_hit_level: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_max_charge: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_min_charge_delta: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_max_charge_delta: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_fade_time: # Field №5
        value: (ks__bit_field & 0b100000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  recycle_modifier_mixin_register:
    seq: []
    instances: {}
  recycle_modifier_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: modifier_name
        type: aux_types::string
        if: ks__has_field_modifier_name
      - id: cd
        type: f4
        if: ks__has_field_cd
      - id: initial_cd
        type: f4
        if: ks__has_field_initial_cd
    instances:
      ks__has_field_modifier_name: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_cd: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_initial_cd: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  cur_local_avatar_mixin_register:
    seq: []
    instances: {}
  cur_local_avatar_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: modifier_name
        type: aux_types::string
        if: ks__has_field_modifier_name
    instances:
      ks__has_field_modifier_name: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  local_avatars_mixin_register:
    seq: []
    instances: {}
  local_avatars_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: modifier_name
        type: aux_types::string
        if: ks__has_field_modifier_name
    instances:
      ks__has_field_modifier_name: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  cur_local_avatar_mixin_v2register:
    seq: []
    instances: {}
  cur_local_avatar_mixin_v2:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: modifier_name
        type: aux_types::string
        if: ks__has_field_modifier_name
    instances:
      ks__has_field_modifier_name: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  attach_to_day_night_mixin_register:
    seq: []
    instances: {}
  ks__enum__level_day_time_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: level_day_time_type
  attach_to_day_night_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: time
        type: ks__enum__level_day_time_type
        if: ks__has_field_time
      - id: modifier_name
        type: aux_types::string
        if: ks__has_field_modifier_name
    instances:
      ks__has_field_time: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_modifier_name: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  ks__enum__create_gadget_mixin_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: create_gadget_mixin_type
  create_gadget_mixin_type_comparer:
    seq: []
    instances: {}
  do_action_by_create_gadget_mixin_register:
    seq: []
    instances: {}
  do_action_by_create_gadget_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: type
        type: ks__enum__create_gadget_mixin_type
        if: ks__has_field_type
      - id: action_queue
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_action_queue
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_action_queue: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  enviro_follow_rotate_mixin_register:
    seq: []
    instances: {}
  enviro_follow_rotate_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: self_rotate_off_set
        type: vector
        if: ks__has_field_self_rotate_off_set
      - id: deactive_on_cutsecne_name
        type: aux_types::string
        if: ks__has_field_deactive_on_cutsecne_name
    instances:
      ks__has_field_self_rotate_off_set: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_deactive_on_cutsecne_name: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  box_clamp_wind_zone_mixin_register:
    seq: []
    instances: {}
  box_clamp_wind_zone_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: size
        type: vector
        if: ks__has_field_size
      - id: born
        type: ks__disp__config_born_type
        if: ks__has_field_born
      - id: attrac_force_strength
        type: f4
        if: ks__has_field_attrac_force_strength
      - id: max_strength_range
        type: f4
        if: ks__has_field_max_strength_range
    instances:
      ks__has_field_size: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_born: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_attrac_force_strength: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_max_strength_range: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  dvalin_s01box_moxe_mixin_register:
    seq: []
    instances: {}
  dvalin_s01box_moxe_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
    instances:
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  fix_dvalin_s04move_mixin_register:
    seq: []
    instances: {}
  fix_dvalin_s04move_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
    instances:
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  dvalin_s01path_effs_info:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: fly_state
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_fly_state
      - id: effect_name
        type: aux_types::string
        if: ks__has_field_effect_name
      - id: path_center
        type: u1
        if: ks__has_field_path_center
      - id: interval_max
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_interval_max
      - id: interval_min
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_interval_min
      - id: num_max
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_num_max
      - id: num_min
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_num_min
      - id: range_max
        type: f4
        if: ks__has_field_range_max
      - id: range_min
        type: f4
        if: ks__has_field_range_min
      - id: eular_max
        type: f4
        if: ks__has_field_eular_max
      - id: eular_min
        type: f4
        if: ks__has_field_eular_min
      - id: y_scale
        type: f4
        if: ks__has_field_y_scale
    instances:
      ks__has_field_fly_state: # Field №0
        value: (ks__bit_field.value & 0b000000000001) != 0
      ks__has_field_effect_name: # Field №1
        value: (ks__bit_field.value & 0b000000000010) != 0
      ks__has_field_path_center: # Field №2
        value: (ks__bit_field.value & 0b000000000100) != 0
      ks__has_field_interval_max: # Field №3
        value: (ks__bit_field.value & 0b000000001000) != 0
      ks__has_field_interval_min: # Field №4
        value: (ks__bit_field.value & 0b000000010000) != 0
      ks__has_field_num_max: # Field №5
        value: (ks__bit_field.value & 0b000000100000) != 0
      ks__has_field_num_min: # Field №6
        value: (ks__bit_field.value & 0b000001000000) != 0
      ks__has_field_range_max: # Field №7
        value: (ks__bit_field.value & 0b000010000000) != 0
      ks__has_field_range_min: # Field №8
        value: (ks__bit_field.value & 0b000100000000) != 0
      ks__has_field_eular_max: # Field №9
        value: (ks__bit_field.value & 0b001000000000) != 0
      ks__has_field_eular_min: # Field №10
        value: (ks__bit_field.value & 0b010000000000) != 0
      ks__has_field_y_scale: # Field №11
        value: (ks__bit_field.value & 0b100000000000) != 0
  dvalin_s01path_effs_mixin_register:
    seq: []
    instances: {}
  ks__array_of__dvalin_s01path_effs_info__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: dvalin_s01path_effs_info
        repeat: expr
        repeat-expr: length.value
  dvalin_s01path_effs_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: effect_start
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_effect_start
      - id: effect_end
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_effect_end
      - id: eff_infos
        type: ks__array_of__dvalin_s01path_effs_info__length_u
        if: ks__has_field_eff_infos
    instances:
      ks__has_field_effect_start: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_effect_end: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_eff_infos: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  camera_lock_mixin_register:
    seq: []
    instances: {}
  camera_lock_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: trans_name
        type: aux_types::string
        if: ks__has_field_trans_name
      - id: cfg_path
        type: aux_types::string
        if: ks__has_field_cfg_path
    instances:
      ks__has_field_trans_name: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_cfg_path: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  avatar_lock_forward_fly_mixin_register:
    seq: []
    instances: {}
  avatar_lock_forward_fly_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: world_forward
        type: vector
        if: ks__has_field_world_forward
      - id: fly_speed_scale
        type: f4
        if: ks__has_field_fly_speed_scale
      - id: fly_back_speed_scale
        type: f4
        if: ks__has_field_fly_back_speed_scale
      - id: eular_raw_input
        type: vector
        if: ks__has_field_eular_raw_input
    instances:
      ks__has_field_world_forward: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_fly_speed_scale: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_fly_back_speed_scale: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_eular_raw_input: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  trigger_resist_damage_text_mixin_register:
    seq: []
    instances: {}
  trigger_resist_damage_text_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: element_types
        type: ks__array_of__ks__enum__element_type__length_u
        if: ks__has_field_element_types
    instances:
      ks__has_field_element_types: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  stage_ready_mixin_register:
    seq: []
    instances: {}
  stage_ready_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: on_stage_ready
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_stage_ready
    instances:
      ks__has_field_on_stage_ready: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  attach_modifier_to_element_durability_mixin_register:
    seq: []
    instances: {}
  attach_modifier_to_element_durability_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: value_steps
        type: ks__array_of__aux_types__dynamic_float__length_u
        if: ks__has_field_value_steps
      - id: modifier_name_steps
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_modifier_name_steps
    instances:
      ks__has_field_value_steps: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_modifier_name_steps: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  do_action_by_state_id_mixin_register:
    seq: []
    instances: {}
  do_action_by_state_id_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: state_i_ds
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_state_i_ds
      - id: enter_predicates
        type: ks__array_of__ks__disp__config_ability_predicate__length_u
        if: ks__has_field_enter_predicates
      - id: exit_predicates
        type: ks__array_of__ks__disp__config_ability_predicate__length_u
        if: ks__has_field_exit_predicates
      - id: enter_actions
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_enter_actions
      - id: exit_actions
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_exit_actions
    instances:
      ks__has_field_state_i_ds: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_enter_predicates: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_exit_predicates: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_enter_actions: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_exit_actions: # Field №4
        value: (ks__bit_field & 0b10000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  do_action_by_animator_state_id_mixin_register:
    seq: []
    instances: {}
  do_action_by_animator_state_id_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: state_i_ds
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_state_i_ds
      - id: enter_predicates
        type: ks__array_of__ks__disp__config_ability_predicate__length_u
        if: ks__has_field_enter_predicates
      - id: exit_predicates
        type: ks__array_of__ks__disp__config_ability_predicate__length_u
        if: ks__has_field_exit_predicates
      - id: enter_actions
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_enter_actions
      - id: exit_actions
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_exit_actions
    instances:
      ks__has_field_state_i_ds: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_enter_predicates: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_exit_predicates: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_enter_actions: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_exit_actions: # Field №4
        value: (ks__bit_field & 0b10000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  do_action_by_pose_id_mixin_register:
    seq: []
    instances: {}
  do_action_by_pose_id_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: pose_i_ds
        type: ks__array_of__aux_types__vlq_base128_le_s__length_u
        if: ks__has_field_pose_i_ds
      - id: enter_predicates
        type: ks__array_of__ks__disp__config_ability_predicate__length_u
        if: ks__has_field_enter_predicates
      - id: exit_predicates
        type: ks__array_of__ks__disp__config_ability_predicate__length_u
        if: ks__has_field_exit_predicates
      - id: enter_actions
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_enter_actions
      - id: exit_actions
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_exit_actions
    instances:
      ks__has_field_pose_i_ds: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_enter_predicates: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_exit_predicates: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_enter_actions: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_exit_actions: # Field №4
        value: (ks__bit_field & 0b10000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  override_stick_elem_ui_mixin_register:
    seq: []
    instances: {}
  override_stick_elem_ui_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: eff_name
        type: aux_types::string
        if: ks__has_field_eff_name
    instances:
      ks__has_field_eff_name: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  global_main_shield_mixin_register:
    seq: []
    instances: {}
  global_main_shield_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: shield_type
        type: aux_types::string
        if: ks__has_field_shield_type
      - id: shield_angle
        type: aux_types::dynamic_float
        if: ks__has_field_shield_angle
      - id: shield_hp_ratio
        type: aux_types::dynamic_float
        if: ks__has_field_shield_hp_ratio
      - id: shield_hp
        type: aux_types::dynamic_float
        if: ks__has_field_shield_hp
      - id: cost_shield_ratio_name
        type: aux_types::string
        if: ks__has_field_cost_shield_ratio_name
      - id: show_damage_text
        type: aux_types::string
        if: ks__has_field_show_damage_text
      - id: on_shield_broken
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_shield_broken
      - id: amount_by_get_damage
        type: aux_types::dynamic_float
        if: ks__has_field_amount_by_get_damage
      - id: effect_pattern
        type: aux_types::string
        if: ks__has_field_effect_pattern
      - id: child_shield_modifier_name
        type: aux_types::string
        if: ks__has_field_child_shield_modifier_name
      - id: target_mute_hit_effect
        type: u1
        if: ks__has_field_target_mute_hit_effect
      - id: infinite_shield
        type: u1
        if: ks__has_field_infinite_shield
      - id: heal_limited_by_caster_max_hp_ratio
        type: aux_types::dynamic_float
        if: ks__has_field_heal_limited_by_caster_max_hp_ratio
      - id: heal_limited_by_local_creature_max_hp_ratio
        type: aux_types::dynamic_float
        if: ks__has_field_heal_limited_by_local_creature_max_hp_ratio
    instances:
      ks__has_field_shield_type: # Field №0
        value: (ks__bit_field.value & 0b00000000000001) != 0
      ks__has_field_shield_angle: # Field №1
        value: (ks__bit_field.value & 0b00000000000010) != 0
      ks__has_field_shield_hp_ratio: # Field №2
        value: (ks__bit_field.value & 0b00000000000100) != 0
      ks__has_field_shield_hp: # Field №3
        value: (ks__bit_field.value & 0b00000000001000) != 0
      ks__has_field_cost_shield_ratio_name: # Field №4
        value: (ks__bit_field.value & 0b00000000010000) != 0
      ks__has_field_show_damage_text: # Field №5
        value: (ks__bit_field.value & 0b00000000100000) != 0
      ks__has_field_on_shield_broken: # Field №6
        value: (ks__bit_field.value & 0b00000001000000) != 0
      ks__has_field_amount_by_get_damage: # Field №7
        value: (ks__bit_field.value & 0b00000010000000) != 0
      ks__has_field_effect_pattern: # Field №8
        value: (ks__bit_field.value & 0b00000100000000) != 0
      ks__has_field_child_shield_modifier_name: # Field №9
        value: (ks__bit_field.value & 0b00001000000000) != 0
      ks__has_field_target_mute_hit_effect: # Field №10
        value: (ks__bit_field.value & 0b00010000000000) != 0
      ks__has_field_infinite_shield: # Field №11
        value: (ks__bit_field.value & 0b00100000000000) != 0
      ks__has_field_heal_limited_by_caster_max_hp_ratio: # Field №12
        value: (ks__bit_field.value & 0b01000000000000) != 0
      ks__has_field_heal_limited_by_local_creature_max_hp_ratio: # Field №13
        value: (ks__bit_field.value & 0b10000000000000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  global_sub_shield_mixin_register:
    seq: []
    instances: {}
  global_sub_shield_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: main_shield_modifier_name
        type: aux_types::string
        if: ks__has_field_main_shield_modifier_name
      - id: notify_mainshield_when_hit
        type: u1
        if: ks__has_field_notify_mainshield_when_hit
    instances:
      ks__has_field_main_shield_modifier_name: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_notify_mainshield_when_hit: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  attach_modifier_to_hp_percent_mixin_register:
    seq: []
    instances: {}
  attach_modifier_to_hp_percent_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: value_steps
        type: ks__array_of__aux_types__dynamic_float__length_u
        if: ks__has_field_value_steps
      - id: modifier_name_steps
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_modifier_name_steps
    instances:
      ks__has_field_value_steps: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_modifier_name_steps: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  do_action_by_team_status_mixin_register:
    seq: []
    instances: {}
  do_action_by_team_status_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: actions
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_actions
      - id: predicates
        type: ks__array_of__ks__disp__config_ability_predicate__length_u
        if: ks__has_field_predicates
      - id: wait_time
        type: f4
        if: ks__has_field_wait_time
    instances:
      ks__has_field_actions: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_predicates: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_wait_time: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  do_action_by_element_reaction_mixin_register:
    seq: []
    instances: {}
  ks__array_of__ks__enum__element_reaction_type__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__enum__element_reaction_type
        repeat: expr
        repeat-expr: length.value
  do_action_by_element_reaction_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: range
        type: f4
        if: ks__has_field_range
      - id: entity_types
        type: ks__array_of__ks__enum__entity_type__length_u
        if: ks__has_field_entity_types
      - id: reaction_types
        type: ks__array_of__ks__enum__element_reaction_type__length_u
        if: ks__has_field_reaction_types
      - id: actions
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_actions
    instances:
      ks__has_field_range: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_entity_types: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_reaction_types: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_actions: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  animator_rotation_compensate_mixin_register:
    seq: []
    instances: {}
  animator_rotation_compensate_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: animator_state_i_ds
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_animator_state_i_ds
      - id: animation_rotate
        type: f4
        if: ks__has_field_animation_rotate
      - id: angle_limit
        type: f4
        if: ks__has_field_angle_limit
    instances:
      ks__has_field_animator_state_i_ds: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_animation_rotate: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_angle_limit: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  tile_attack_mixin_register:
    seq: []
    instances: {}
  tile_attack_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: attack_id
        type: aux_types::string
        if: ks__has_field_attack_id
    instances:
      ks__has_field_attack_id: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  sphere_tile_shape_info_register:
    seq: []
    instances: {}
  tile_complex_mixin_register:
    seq: []
    instances: {}
  tile_complex_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: attack_id
        type: aux_types::string
        if: ks__has_field_attack_id
      - id: attach_point_name
        type: aux_types::string
        if: ks__has_field_attach_point_name
      - id: offset
        type: vector
        if: ks__has_field_offset
      - id: shape
        type: ks__disp__tile_shape_info
        if: ks__has_field_shape
    instances:
      ks__has_field_attack_id: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_attach_point_name: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_offset: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_shape: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  ks__enum__tile_camp_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: tile_camp_type
  tile_camp_type_comparer:
    seq: []
    instances: {}
  tile_attack_manager_mixin_register:
    seq: []
    instances: {}
  tile_attack_manager_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: attack_id
        type: aux_types::string
        if: ks__has_field_attack_id
      - id: interval
        type: f4
        if: ks__has_field_interval
      - id: camp_type
        type: ks__enum__tile_camp_type
        if: ks__has_field_camp_type
      - id: fix_camp
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_fix_camp
      - id: authority_handle
        type: u1
        if: ks__has_field_authority_handle
      - id: attack_info
        type: config_attack_info
        if: ks__has_field_attack_info
    instances:
      ks__has_field_attack_id: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_interval: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_camp_type: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_fix_camp: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_authority_handle: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_attack_info: # Field №5
        value: (ks__bit_field & 0b100000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  do_tile_action_manager_mixin_register:
    seq: []
    instances: {}
  do_tile_action_manager_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: duration
        type: f4
        if: ks__has_field_duration
      - id: action_id
        type: aux_types::string
        if: ks__has_field_action_id
      - id: action_pos_key
        type: aux_types::string
        if: ks__has_field_action_pos_key
      - id: action_radius_key
        type: aux_types::string
        if: ks__has_field_action_radius_key
      - id: reaction_force_use_owner_prop
        type: u1
        if: ks__has_field_reaction_force_use_owner_prop
      - id: actions
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_actions
    instances:
      ks__has_field_duration: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_action_id: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_action_pos_key: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_action_radius_key: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_reaction_force_use_owner_prop: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_actions: # Field №5
        value: (ks__bit_field & 0b100000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  tile_complex_manager_mixin_register:
    seq: []
    instances: {}
  tile_complex_manager_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: attack_id
        type: aux_types::string
        if: ks__has_field_attack_id
      - id: interval
        type: f4
        if: ks__has_field_interval
      - id: src_camp
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_src_camp
      - id: attack_info
        type: config_attack_info
        if: ks__has_field_attack_info
    instances:
      ks__has_field_attack_id: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_interval: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_src_camp: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_attack_info: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  monster_ready_mixin_register:
    seq: []
    instances: {}
  monster_ready_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: on_monster_ready
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_monster_ready
    instances:
      ks__has_field_on_monster_ready: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  do_action_by_killing_mixin_register:
    seq: []
    instances: {}
  do_action_by_killing_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: attack_tags
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_attack_tags
      - id: detect_window
        type: f4
        if: ks__has_field_detect_window
      - id: on_kill
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_kill
    instances:
      ks__has_field_attack_tags: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_detect_window: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_on_kill: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  shader_lerp_mixin_register:
    seq: []
    instances: {}
  ks__enum__e_shader_data:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: e_shader_data
  shader_lerp_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: type
        type: ks__enum__e_shader_data
        if: ks__has_field_type
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  element_adjust_mixin_register:
    seq: []
    instances: {}
  ks__kvp_of_dict__ks__enum__element_type_aux_types__string:
    seq:
      - id: key
        type: ks__enum__element_type
      - id: value
        type: aux_types::string
  ks__dict_of__ks__enum__element_type_aux_types__string:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__ks__enum__element_type_aux_types__string
        repeat: expr
        repeat-expr: length.value
  element_adjust_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: change_interval
        type: f4
        if: ks__has_field_change_interval
      - id: element_modifies
        type: ks__dict_of__ks__enum__element_type_aux_types__string
        if: ks__has_field_element_modifies
    instances:
      ks__has_field_change_interval: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_element_modifies: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  attach_to_element_type_mixin_register:
    seq: []
    instances: {}
  attach_to_element_type_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: element_types
        type: ks__array_of__ks__enum__element_type__length_u
        if: ks__has_field_element_types
      - id: reject
        type: u1
        if: ks__has_field_reject
      - id: modifier_name
        type: aux_types::string
        if: ks__has_field_modifier_name
    instances:
      ks__has_field_element_types: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_reject: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_modifier_name: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  attach_to_ability_state_mixin_register:
    seq: []
    instances: {}
  attach_to_ability_state_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: ability_states
        type: ks__array_of__ks__enum__ability_state__length_u
        if: ks__has_field_ability_states
      - id: reject
        type: u1
        if: ks__has_field_reject
      - id: modifier_name
        type: aux_types::string
        if: ks__has_field_modifier_name
    instances:
      ks__has_field_ability_states: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_reject: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_modifier_name: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  ks__enum__watcher_system_mixin_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: watcher_system_mixin_type
  watcher_system_mixin_type_comparer:
    seq: []
    instances: {}
  ks__enum__watcher_system_listen_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: watcher_system_listen_type
  watcher_system_listen_type_comparer:
    seq: []
    instances: {}
  watcher_system_mixin_register:
    seq: []
    instances: {}
  watcher_system_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: watcher_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_watcher_id
      - id: mixin_type
        type: ks__enum__watcher_system_mixin_type
        if: ks__has_field_mixin_type
      - id: listen_entity_type
        type: ks__enum__watcher_system_listen_type
        if: ks__has_field_listen_entity_type
      - id: listen_state_id
        type: aux_types::string
        if: ks__has_field_listen_state_id
      - id: predicates
        type: ks__array_of__ks__disp__config_ability_predicate__length_u
        if: ks__has_field_predicates
    instances:
      ks__has_field_watcher_id: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_mixin_type: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_listen_entity_type: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_listen_state_id: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_predicates: # Field №4
        value: (ks__bit_field & 0b10000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  element_outer_glow_effect_mixin_register:
    seq: []
    instances: {}
  element_outer_glow_effect_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
    instances:
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  apply_modifier_with_shared_durability_mixin_register:
    seq: []
    instances: {}
  apply_modifier_with_shared_durability_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: modifier_name
        type: aux_types::string
        if: ks__has_field_modifier_name
    instances:
      ks__has_field_modifier_name: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  player_uid_notify_mixin_register:
    seq: []
    instances: {}
  player_uid_notify_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: op_param
        type: aux_types::string
        if: ks__has_field_op_param
      - id: op_type
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_op_type
      - id: logic
        type: ks__enum__relational_operator
        if: ks__has_field_logic
      - id: actions
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_actions
    instances:
      ks__has_field_op_param: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_op_type: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_logic: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_actions: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  attach_to_play_stage_mixin_register:
    seq: []
    instances: {}
  attach_to_play_stage_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: stage
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_stage
      - id: actions
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_actions
    instances:
      ks__has_field_stage: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_actions: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  server_create_gadget_on_kill_mixin_register:
    seq: []
    instances: {}
  server_create_gadget_on_kill_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: gadget_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_gadget_id_list
      - id: camp_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_camp_id
      - id: camp_target_type
        type: ks__enum__target_type
        if: ks__has_field_camp_target_type
      - id: random_create
        type: u1
        if: ks__has_field_random_create
      - id: use_origin_owner_as_gadget_owner
        type: u1
        if: ks__has_field_use_origin_owner_as_gadget_owner
      - id: life_by_owner_is_alive
        type: u1
        if: ks__has_field_life_by_owner_is_alive
    instances:
      ks__has_field_gadget_id_list: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_camp_id: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_camp_target_type: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_random_create: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_use_origin_owner_as_gadget_owner: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_life_by_owner_is_alive: # Field №5
        value: (ks__bit_field & 0b100000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  camera_blur_mixin_register:
    seq: []
    instances: {}
  camera_blur_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: camera_radial_blur
        type: config_camera_radial_blur
        if: ks__has_field_camera_radial_blur
    instances:
      ks__has_field_camera_radial_blur: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  do_action_by_gain_crystal_seed_mixin_register:
    seq: []
    instances: {}
  do_action_by_gain_crystal_seed_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: element_types
        type: ks__array_of__ks__enum__element_type__length_u
        if: ks__has_field_element_types
      - id: actions
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_actions
    instances:
      ks__has_field_element_types: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_actions: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  modify_element_decrate_mixin_register:
    seq: []
    instances: {}
  modify_element_decrate_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: group
        type: aux_types::string
        if: ks__has_field_group
    instances:
      ks__has_field_group: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  element_batch_predicated:
    seq:
      - id: ks__bit_field
        type: u1
      - id: element_type_arr
        type: ks__array_of__ks__enum__element_type__length_u
        if: ks__has_field_element_type_arr
      - id: success_actions
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_success_actions
      - id: fail_actions
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_fail_actions
    instances:
      ks__has_field_element_type_arr: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_success_actions: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_fail_actions: # Field №2
        value: (ks__bit_field & 0b100) != 0
  element_hitting_other_predicated_mixin_register:
    seq: []
    instances: {}
  ks__array_of__element_batch_predicated__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: element_batch_predicated
        repeat: expr
        repeat-expr: length.value
  element_hitting_other_predicated_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: pre_predicates
        type: ks__array_of__ks__disp__config_ability_predicate__length_u
        if: ks__has_field_pre_predicates
      - id: element_batch_predicateds
        type: ks__array_of__element_batch_predicated__length_u
        if: ks__has_field_element_batch_predicateds
    instances:
      ks__has_field_pre_predicates: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_element_batch_predicateds: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  ks__enum__climate_source_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: climate_source_type
  climate_source_type_comparer:
    seq: []
    instances: {}
  ks__enum__climate_trend_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: climate_trend_type
  climate_trend_type_comparer:
    seq: []
    instances: {}
  resist_climate_mixin_register:
    seq: []
    instances: {}
  ks__array_of__ks__enum__json_climate_type__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__enum__json_climate_type
        repeat: expr
        repeat-expr: length.value
  resist_climate_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: climate_types
        type: ks__array_of__ks__enum__json_climate_type__length_u
        if: ks__has_field_climate_types
      - id: source
        type: ks__enum__climate_source_type
        if: ks__has_field_source
      - id: trend
        type: ks__enum__climate_trend_type
        if: ks__has_field_trend
      - id: ratio
        type: aux_types::dynamic_float
        if: ks__has_field_ratio
      - id: type
        type: ks__enum__avatar_stage_type
        if: ks__has_field_type
    instances:
      ks__has_field_climate_types: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_source: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_trend: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_ratio: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_type: # Field №4
        value: (ks__bit_field & 0b10000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  server_update_global_value_mixin_register:
    seq: []
    instances: {}
  server_update_global_value_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: key
        type: aux_types::string
        if: ks__has_field_key
      - id: use_limit_range
        type: u1
        if: ks__has_field_use_limit_range
      - id: max_value
        type: aux_types::dynamic_float
        if: ks__has_field_max_value
      - id: min_value
        type: aux_types::dynamic_float
        if: ks__has_field_min_value
    instances:
      ks__has_field_key: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_use_limit_range: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_max_value: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_min_value: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  element_reaction_shock_mixin_register:
    seq: []
    instances: {}
  element_reaction_shock_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: think_interval
        type: f4
        if: ks__has_field_think_interval
      - id: camp_global_key
        type: aux_types::string
        if: ks__has_field_camp_global_key
      - id: attack_action
        type: ks__disp__config_ability_action
        if: ks__has_field_attack_action
      - id: conduct_action
        type: ks__disp__config_ability_action
        if: ks__has_field_conduct_action
    instances:
      ks__has_field_think_interval: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_camp_global_key: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_attack_action: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_conduct_action: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  billboard_mark_mixin_register:
    seq: []
    instances: {}
  billboard_mark_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: icon_name
        type: aux_types::string
        if: ks__has_field_icon_name
      - id: show_distance
        type: f4
        if: ks__has_field_show_distance
    instances:
      ks__has_field_icon_name: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_show_distance: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  billboard_fixed_mark_mixin_register:
    seq: []
    instances: {}
  billboard_fixed_mark_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: prefab_name
        type: aux_types::string
        if: ks__has_field_prefab_name
      - id: only_show_in_element_view
        type: u1
        if: ks__has_field_only_show_in_element_view
    instances:
      ks__has_field_prefab_name: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_only_show_in_element_view: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  attach_modifier_to_target_distance_mixin_register:
    seq: []
    instances: {}
  attach_modifier_to_target_distance_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: target_i_ds
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_target_i_ds
      - id: byserver
        type: u1
        if: ks__has_field_byserver
      - id: value_steps
        type: ks__array_of__aux_types__dynamic_float__length_u
        if: ks__has_field_value_steps
      - id: modifier_name_steps
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_modifier_name_steps
      - id: remove_applied_modifier
        type: u1
        if: ks__has_field_remove_applied_modifier
      - id: blend_param
        type: aux_types::string
        if: ks__has_field_blend_param
      - id: blend_distance
        type: ks__array_of__aux_types__dynamic_float__length_u
        if: ks__has_field_blend_distance
      - id: effect_pattern
        type: aux_types::string
        if: ks__has_field_effect_pattern
    instances:
      ks__has_field_target_i_ds: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_byserver: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_value_steps: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_modifier_name_steps: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_remove_applied_modifier: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_blend_param: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_blend_distance: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_effect_pattern: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  ks__enum__move_state_mixin_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: move_state_mixin_type
  move_state_mixin_type_comparer:
    seq: []
    instances: {}
  move_state_mixin_register:
    seq: []
    instances: {}
  move_state_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: type
        type: ks__enum__move_state_mixin_type
        if: ks__has_field_type
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  server_finish_watcher_mixin_register:
    seq: []
    instances: {}
  server_finish_watcher_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: watcher_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_watcher_id
      - id: predicates
        type: ks__array_of__ks__disp__config_ability_predicate__length_u
        if: ks__has_field_predicates
    instances:
      ks__has_field_watcher_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_predicates: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  dummy_mixin_register:
    seq: []
    instances: {}
  dummy_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: action_list
        type: ks__array_of__ks__array_of__ks__disp__config_ability_action__length_u__length_u
        if: ks__has_field_action_list
    instances:
      ks__has_field_action_list: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  urgent_hot_fix_mixin_register:
    seq: []
    instances: {}
  urgent_hot_fix_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: logic_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_logic_id
      - id: think_interval
        type: f4
        if: ks__has_field_think_interval
      - id: action_list
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_action_list
    instances:
      ks__has_field_logic_id: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_think_interval: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_action_list: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  field_entity_count_change_mixin_register:
    seq: []
    instances: {}
  field_entity_count_change_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: camp_target_type
        type: ks__enum__target_type
        if: ks__has_field_camp_target_type
      - id: force_trigger_when_change_authority
        type: u1
        if: ks__has_field_force_trigger_when_change_authority
      - id: target_predicates
        type: ks__array_of__ks__disp__config_ability_predicate__length_u
        if: ks__has_field_target_predicates
      - id: on_field_enter
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_field_enter
      - id: on_field_exit
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_field_exit
    instances:
      ks__has_field_camp_target_type: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_force_trigger_when_change_authority: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_target_predicates: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_on_field_enter: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_on_field_exit: # Field №4
        value: (ks__bit_field & 0b10000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  td_play_mixin_register:
    seq: []
    instances: {}
  ks__enum__td_play_tower_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: td_play_tower_type
  td_play_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: tower_type
        type: ks__enum__td_play_tower_type
        if: ks__has_field_tower_type
      - id: base_cd
        type: f4
        if: ks__has_field_base_cd
      - id: base_attack_range
        type: f4
        if: ks__has_field_base_attack_range
      - id: on_fire_actions
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_fire_actions
      - id: tower_modifier_name
        type: aux_types::string
        if: ks__has_field_tower_modifier_name
      - id: bullet_i_ds
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_bullet_i_ds
      - id: born
        type: ks__disp__config_born_type
        if: ks__has_field_born
      - id: part_root_names
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_part_root_names
      - id: target_type
        type: ks__enum__control_part_target_type
        if: ks__has_field_target_type
    instances:
      ks__has_field_tower_type: # Field №0
        value: (ks__bit_field.value & 0b000000001) != 0
      ks__has_field_base_cd: # Field №1
        value: (ks__bit_field.value & 0b000000010) != 0
      ks__has_field_base_attack_range: # Field №2
        value: (ks__bit_field.value & 0b000000100) != 0
      ks__has_field_on_fire_actions: # Field №3
        value: (ks__bit_field.value & 0b000001000) != 0
      ks__has_field_tower_modifier_name: # Field №4
        value: (ks__bit_field.value & 0b000010000) != 0
      ks__has_field_bullet_i_ds: # Field №5
        value: (ks__bit_field.value & 0b000100000) != 0
      ks__has_field_born: # Field №6
        value: (ks__bit_field.value & 0b001000000) != 0
      ks__has_field_part_root_names: # Field №7
        value: (ks__bit_field.value & 0b010000000) != 0
      ks__has_field_target_type: # Field №8
        value: (ks__bit_field.value & 0b100000000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  td_play_mixin_v2register:
    seq: []
    instances: {}
  td_play_mixin_v2:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: tower_type
        type: ks__enum__td_play_tower_type
        if: ks__has_field_tower_type
      - id: base_cd
        type: f4
        if: ks__has_field_base_cd
      - id: base_attack_range
        type: f4
        if: ks__has_field_base_attack_range
      - id: on_fire_actions
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_fire_actions
      - id: bullet_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_bullet_id
      - id: born
        type: ks__disp__config_born_type
        if: ks__has_field_born
      - id: part_root_names
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_part_root_names
      - id: target_type
        type: ks__enum__control_part_target_type
        if: ks__has_field_target_type
    instances:
      ks__has_field_tower_type: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_base_cd: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_base_attack_range: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_on_fire_actions: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_bullet_id: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_born: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_part_root_names: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_target_type: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  circle_barrage_mixin_register:
    seq: []
    instances: {}
  circle_barrage_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: bullet_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_bullet_id
      - id: inner_radius
        type: f4
        if: ks__has_field_inner_radius
      - id: cut_num
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_cut_num
      - id: wave_num
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_wave_num
      - id: wave_cd
        type: f4
        if: ks__has_field_wave_cd
      - id: wavebullet_num
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_wavebullet_num
      - id: waveangle
        type: f4
        if: ks__has_field_waveangle
      - id: trigger_cd
        type: f4
        if: ks__has_field_trigger_cd
      - id: shoot_point
        type: aux_types::string
        if: ks__has_field_shoot_point
    instances:
      ks__has_field_bullet_id: # Field №0
        value: (ks__bit_field.value & 0b000000001) != 0
      ks__has_field_inner_radius: # Field №1
        value: (ks__bit_field.value & 0b000000010) != 0
      ks__has_field_cut_num: # Field №2
        value: (ks__bit_field.value & 0b000000100) != 0
      ks__has_field_wave_num: # Field №3
        value: (ks__bit_field.value & 0b000001000) != 0
      ks__has_field_wave_cd: # Field №4
        value: (ks__bit_field.value & 0b000010000) != 0
      ks__has_field_wavebullet_num: # Field №5
        value: (ks__bit_field.value & 0b000100000) != 0
      ks__has_field_waveangle: # Field №6
        value: (ks__bit_field.value & 0b001000000) != 0
      ks__has_field_trigger_cd: # Field №7
        value: (ks__bit_field.value & 0b010000000) != 0
      ks__has_field_shoot_point: # Field №8
        value: (ks__bit_field.value & 0b100000000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  velocity_force_mixin_register:
    seq: []
    instances: {}
  velocity_force_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: mute_all
        type: u1
        if: ks__has_field_mute_all
      - id: use_all
        type: u1
        if: ks__has_field_use_all
      - id: include_forces
        type: ks__array_of__ks__enum__velocity_force_type__length_u
        if: ks__has_field_include_forces
      - id: exclude_forces
        type: ks__array_of__ks__enum__velocity_force_type__length_u
        if: ks__has_field_exclude_forces
    instances:
      ks__has_field_mute_all: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_use_all: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_include_forces: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_exclude_forces: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  scene_prop_sync_mixin_register:
    seq: []
    instances: {}
  scene_prop_sync_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: tile_name
        type: aux_types::string
        if: ks__has_field_tile_name
      - id: is_world_type
        type: u1
        if: ks__has_field_is_world_type
    instances:
      ks__has_field_tile_name: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_is_world_type: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  ban_entity_mark_mixin_register:
    seq: []
    instances: {}
  ban_entity_mark_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
    instances:
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  ks__enum__entity_mark_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: entity_mark_type
  entity_mark_type_comparer:
    seq: []
    instances: {}
  entity_mark_show_type_mixin_register:
    seq: []
    instances: {}
  entity_mark_show_type_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: mark_type
        type: ks__enum__entity_mark_type
        if: ks__has_field_mark_type
    instances:
      ks__has_field_mark_type: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  entity_dither_mixin_register:
    seq: []
    instances: {}
  entity_dither_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: predicates
        type: ks__array_of__ks__disp__config_ability_predicate__length_u
        if: ks__has_field_predicates
      - id: dither_value
        type: f4
        if: ks__has_field_dither_value
      - id: cut_in_time
        type: f4
        if: ks__has_field_cut_in_time
      - id: cut_out_time
        type: f4
        if: ks__has_field_cut_out_time
    instances:
      ks__has_field_predicates: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_dither_value: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_cut_in_time: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_cut_out_time: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  ks__enum__ability_entity_visible_reason:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: ability_entity_visible_reason
  ability_entity_visible_reason_comparer:
    seq: []
    instances: {}
  entity_in_visible_mixin_register:
    seq: []
    instances: {}
  entity_in_visible_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: predicates
        type: ks__array_of__ks__disp__config_ability_predicate__length_u
        if: ks__has_field_predicates
      - id: reason
        type: ks__enum__ability_entity_visible_reason
        if: ks__has_field_reason
      - id: disable_audio
        type: u1
        if: ks__has_field_disable_audio
    instances:
      ks__has_field_predicates: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_reason: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_disable_audio: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  set_skill_can_use_in_state_mixin_register:
    seq: []
    instances: {}
  set_skill_can_use_in_state_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: skill_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_skill_list
      - id: state_list
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_state_list
    instances:
      ks__has_field_skill_list: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_state_list: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  gadget_charge_mixin_register:
    seq: []
    instances: {}
  gadget_charge_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: charge_type
        type: ks__enum__element_type
        if: ks__has_field_charge_type
      - id: charge_ratio
        type: f4
        if: ks__has_field_charge_ratio
      - id: charge_value
        type: f4
        if: ks__has_field_charge_value
      - id: max_charge_value
        type: f4
        if: ks__has_field_max_charge_value
      - id: value_steps
        type: ks__array_of__aux_types__dynamic_float__length_u
        if: ks__has_field_value_steps
      - id: modifier_name_steps
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_modifier_name_steps
      - id: global_value_key
        type: aux_types::string
        if: ks__has_field_global_value_key
      - id: ratio_global_value_key
        type: aux_types::string
        if: ks__has_field_ratio_global_value_key
    instances:
      ks__has_field_charge_type: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_charge_ratio: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_charge_value: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_max_charge_value: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_value_steps: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_modifier_name_steps: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_global_value_key: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_ratio_global_value_key: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  homeworld_enter_editor_mixin_register:
    seq: []
    instances: {}
  homeworld_enter_editor_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: editor_modifier_names
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_editor_modifier_names
      - id: world_modifier_names
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_world_modifier_names
    instances:
      ks__has_field_editor_modifier_names: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_world_modifier_names: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  gadget_upgrade_chain_mixin_register:
    seq: []
    instances: {}
  gadget_upgrade_chain_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: global_value_key
        type: aux_types::string
        if: ks__has_field_global_value_key
    instances:
      ks__has_field_global_value_key: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  interact_trigger_ability_register:
    seq: []
    instances: {}
  interact_trigger_ability:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: ability_name
        type: aux_types::string
        if: ks__has_field_ability_name
    instances:
      ks__has_field_ability_name: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  interact_trigger_ability_mixin_register:
    seq: []
    instances: {}
  interact_trigger_ability_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: ability_name
        type: aux_types::string
        if: ks__has_field_ability_name
    instances:
      ks__has_field_ability_name: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  attach_to_widget_state_mixin_register:
    seq: []
    instances: {}
  attach_to_widget_state_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: target_widget_material_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_target_widget_material_id
      - id: on_active
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_active
      - id: on_disable
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_disable
      - id: on_removed
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_removed
    instances:
      ks__has_field_target_widget_material_id: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_on_active: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_on_disable: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_on_removed: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  widget_mp_support_mixin_register:
    seq: []
    instances: {}
  widget_mp_support_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: succ_actions
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_succ_actions
      - id: fail_actions
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_fail_actions
      - id: predicates
        type: ks__array_of__ks__disp__config_ability_predicate__length_u
        if: ks__has_field_predicates
    instances:
      ks__has_field_succ_actions: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_fail_actions: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_predicates: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  ks__enum__follow_attach_occupy_priority:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: follow_attach_occupy_priority
  follow_attach_occupy_priority_comparer:
    seq: []
    instances: {}
  follow_attach_point_effect_mixin_register:
    seq: []
    instances: {}
  follow_attach_point_effect_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: modifier_name
        type: aux_types::string
        if: ks__has_field_modifier_name
      - id: attach_priority
        type: ks__enum__follow_attach_occupy_priority
        if: ks__has_field_attach_priority
      - id: anbnaolcdee
        type: u1
        if: ks__has_field_anbnaolcdee
    instances:
      ks__has_field_modifier_name: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_attach_priority: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_anbnaolcdee: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  multi_badminton_bullet:
    seq:
      - id: ks__bit_field
        type: u1
      - id: bullet_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_bullet_id
      - id: weight
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_weight
      - id: speed
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_speed
    instances:
      ks__has_field_bullet_id: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_weight: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_speed: # Field №2
        value: (ks__bit_field & 0b100) != 0
  multi_badminton_shoot_mixin_register:
    seq: []
    instances: {}
  ks__array_of__multi_badminton_bullet__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: multi_badminton_bullet
        repeat: expr
        repeat-expr: length.value
  multi_badminton_shoot_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: min_interval
        type: f4
        if: ks__has_field_min_interval
      - id: max_interval
        type: f4
        if: ks__has_field_max_interval
      - id: extra_shoot_interval
        type: f4
        if: ks__has_field_extra_shoot_interval
      - id: extra_shoot_tag
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_extra_shoot_tag
      - id: bullets
        type: ks__array_of__multi_badminton_bullet__length_u
        if: ks__has_field_bullets
      - id: tres_bullet_id
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_tres_bullet_id
      - id: normal_bullet_id
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_normal_bullet_id
      - id: trace_bullet_id
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_trace_bullet_id
      - id: trace_target
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_trace_target
      - id: per_change_weight
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_per_change_weight
      - id: born
        type: ks__disp__config_born_type
        if: ks__has_field_born
    instances:
      ks__has_field_min_interval: # Field №0
        value: (ks__bit_field.value & 0b00000000001) != 0
      ks__has_field_max_interval: # Field №1
        value: (ks__bit_field.value & 0b00000000010) != 0
      ks__has_field_extra_shoot_interval: # Field №2
        value: (ks__bit_field.value & 0b00000000100) != 0
      ks__has_field_extra_shoot_tag: # Field №3
        value: (ks__bit_field.value & 0b00000001000) != 0
      ks__has_field_bullets: # Field №4
        value: (ks__bit_field.value & 0b00000010000) != 0
      ks__has_field_tres_bullet_id: # Field №5
        value: (ks__bit_field.value & 0b00000100000) != 0
      ks__has_field_normal_bullet_id: # Field №6
        value: (ks__bit_field.value & 0b00001000000) != 0
      ks__has_field_trace_bullet_id: # Field №7
        value: (ks__bit_field.value & 0b00010000000) != 0
      ks__has_field_trace_target: # Field №8
        value: (ks__bit_field.value & 0b00100000000) != 0
      ks__has_field_per_change_weight: # Field №9
        value: (ks__bit_field.value & 0b01000000000) != 0
      ks__has_field_born: # Field №10
        value: (ks__bit_field.value & 0b10000000000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  element_convert_to_charge_bar_value_mixin_register:
    seq: []
    instances: {}
  element_convert_to_charge_bar_value_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: group
        type: aux_types::string
        if: ks__has_field_group
    instances:
      ks__has_field_group: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  dynamic_collision_mixin_register:
    seq: []
    instances: {}
  dynamic_collision_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: tags
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_tags
      - id: is_checker
        type: u1
        if: ks__has_field_is_checker
    instances:
      ks__has_field_tags: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_is_checker: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  ai_perception_mixin_register:
    seq: []
    instances: {}
  ai_perception_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: feature_tag_i_ds
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_feature_tag_i_ds
      - id: perception_template_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_perception_template_id
    instances:
      ks__has_field_feature_tag_i_ds: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_perception_template_id: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  ks__enum__neuron_mixin_remove_operator_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: neuron_mixin_remove_operator_type
  neuron_mixin_remove_operator_type_comparer:
    seq: []
    instances: {}
  attach_modifier_by_neuron_mixin_register:
    seq: []
    instances: {}
  ks__array_of__ks__enum__neuron_name__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__enum__neuron_name
        repeat: expr
        repeat-expr: length.value
  attach_modifier_by_neuron_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: neuron_name_list
        type: ks__array_of__ks__enum__neuron_name__length_u
        if: ks__has_field_neuron_name_list
      - id: remove_operator
        type: ks__enum__neuron_mixin_remove_operator_type
        if: ks__has_field_remove_operator
      - id: modifier_name
        type: aux_types::string
        if: ks__has_field_modifier_name
      - id: authority_only
        type: u1
        if: ks__has_field_authority_only
    instances:
      ks__has_field_neuron_name_list: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_remove_operator: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_modifier_name: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_authority_only: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  override_monster_move_speed_ratio_mixin_register:
    seq: []
    instances: {}
  override_monster_move_speed_ratio_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: min_value
        type: f4
        if: ks__has_field_min_value
      - id: max_value
        type: f4
        if: ks__has_field_max_value
    instances:
      ks__has_field_min_value: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_max_value: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  connect_line_mixin_register:
    seq: []
    instances: {}
  connect_line_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: repeater_modifier
        type: aux_types::string
        if: ks__has_field_repeater_modifier
      - id: collector_modifier
        type: aux_types::string
        if: ks__has_field_collector_modifier
      - id: collector_globalvalue_key
        type: aux_types::string
        if: ks__has_field_collector_globalvalue_key
      - id: other_targets
        type: ks__disp__select_targets
        if: ks__has_field_other_targets
      - id: predicates
        type: ks__array_of__ks__disp__config_ability_predicate__length_u
        if: ks__has_field_predicates
      - id: predicates_foreach
        type: ks__array_of__ks__disp__config_ability_predicate__length_u
        if: ks__has_field_predicates_foreach
    instances:
      ks__has_field_repeater_modifier: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_collector_modifier: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_collector_globalvalue_key: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_other_targets: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_predicates: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_predicates_foreach: # Field №5
        value: (ks__bit_field & 0b100000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  electric_core_move_mixin_register:
    seq: []
    instances: {}
  electric_core_move_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: stage_once_velocity
        type: f4
        if: ks__has_field_stage_once_velocity
      - id: stage_one_accelerate
        type: f4
        if: ks__has_field_stage_one_accelerate
      - id: stage_two_velocity
        type: f4
        if: ks__has_field_stage_two_velocity
      - id: stage_two_attenuation
        type: f4
        if: ks__has_field_stage_two_attenuation
      - id: max_absorb_time
        type: f4
        if: ks__has_field_max_absorb_time
      - id: to_pos
        type: ks__disp__config_born_type
        if: ks__has_field_to_pos
      - id: on_core_enter
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_core_enter
      - id: on_interrupted
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_interrupted
      - id: on_start_success
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_start_success
      - id: on_start_failed
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_on_start_failed
    instances:
      ks__has_field_stage_once_velocity: # Field №0
        value: (ks__bit_field.value & 0b0000000001) != 0
      ks__has_field_stage_one_accelerate: # Field №1
        value: (ks__bit_field.value & 0b0000000010) != 0
      ks__has_field_stage_two_velocity: # Field №2
        value: (ks__bit_field.value & 0b0000000100) != 0
      ks__has_field_stage_two_attenuation: # Field №3
        value: (ks__bit_field.value & 0b0000001000) != 0
      ks__has_field_max_absorb_time: # Field №4
        value: (ks__bit_field.value & 0b0000010000) != 0
      ks__has_field_to_pos: # Field №5
        value: (ks__bit_field.value & 0b0000100000) != 0
      ks__has_field_on_core_enter: # Field №6
        value: (ks__bit_field.value & 0b0001000000) != 0
      ks__has_field_on_interrupted: # Field №7
        value: (ks__bit_field.value & 0b0010000000) != 0
      ks__has_field_on_start_success: # Field №8
        value: (ks__bit_field.value & 0b0100000000) != 0
      ks__has_field_on_start_failed: # Field №9
        value: (ks__bit_field.value & 0b1000000000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  send_postion_to_shader_cut_mixin_register:
    seq: []
    instances: {}
  send_postion_to_shader_cut_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: send_target
        type: ks__enum__ability_targetting
        if: ks__has_field_send_target
      - id: send_radius
        type: f4
        if: ks__has_field_send_radius
      - id: scale
        type: vector
        if: ks__has_field_scale
      - id: offset
        type: vector
        if: ks__has_field_offset
    instances:
      ks__has_field_send_target: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_send_radius: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_scale: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_offset: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  fishing_aim_parabola_mixin_register:
    seq: []
    instances: {}
  fishing_aim_parabola_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: min_angle
        type: f4
        if: ks__has_field_min_angle
      - id: max_angle
        type: f4
        if: ks__has_field_max_angle
      - id: min_range
        type: f4
        if: ks__has_field_min_range
      - id: max_range
        type: f4
        if: ks__has_field_max_range
      - id: global_value_key
        type: aux_types::string
        if: ks__has_field_global_value_key
      - id: other_targets
        type: ks__disp__select_targets
        if: ks__has_field_other_targets
      - id: target
        type: ks__enum__ability_targetting
        if: ks__has_field_target
    instances:
      ks__has_field_min_angle: # Field №0
        value: (ks__bit_field & 0b0000001) != 0
      ks__has_field_max_angle: # Field №1
        value: (ks__bit_field & 0b0000010) != 0
      ks__has_field_min_range: # Field №2
        value: (ks__bit_field & 0b0000100) != 0
      ks__has_field_max_range: # Field №3
        value: (ks__bit_field & 0b0001000) != 0
      ks__has_field_global_value_key: # Field №4
        value: (ks__bit_field & 0b0010000) != 0
      ks__has_field_other_targets: # Field №5
        value: (ks__bit_field & 0b0100000) != 0
      ks__has_field_target: # Field №6
        value: (ks__bit_field & 0b1000000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  electric_core_line_mixin_register:
    seq: []
    instances: {}
  electric_core_line_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: other_targets
        type: ks__disp__select_targets
        if: ks__has_field_other_targets
      - id: activate_skill_key
        type: aux_types::string
        if: ks__has_field_activate_skill_key
      - id: predicates
        type: ks__array_of__ks__disp__config_ability_predicate__length_u
        if: ks__has_field_predicates
    instances:
      ks__has_field_other_targets: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_activate_skill_key: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_predicates: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  streaming_modifier_mixin_register:
    seq: []
    instances: {}
  streaming_modifier_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: apply_modifier
        type: u1
        if: ks__has_field_apply_modifier
    instances:
      ks__has_field_apply_modifier: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  self_add_durability_mixin_register:
    seq: []
    instances: {}
  self_add_durability_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: value
        type: aux_types::dynamic_float
        if: ks__has_field_value
      - id: use_limit_range
        type: u1
        if: ks__has_field_use_limit_range
      - id: max_value
        type: aux_types::dynamic_float
        if: ks__has_field_max_value
      - id: min_value
        type: aux_types::dynamic_float
        if: ks__has_field_min_value
      - id: think_interval
        type: f4
        if: ks__has_field_think_interval
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_use_limit_range: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_max_value: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_min_value: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_think_interval: # Field №4
        value: (ks__bit_field & 0b10000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  ks__enum__damage_clamp_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: damage_clamp_type
  damage_clamp_type_comparer:
    seq: []
    instances: {}
  clamp_damage_received_mixin_register:
    seq: []
    instances: {}
  clamp_damage_received_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: clamp_type
        type: ks__enum__damage_clamp_type
        if: ks__has_field_clamp_type
      - id: max_value
        type: aux_types::dynamic_float
        if: ks__has_field_max_value
      - id: min_value
        type: aux_types::dynamic_float
        if: ks__has_field_min_value
    instances:
      ks__has_field_clamp_type: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_max_value: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_min_value: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  ks__enum__do_action_by_damage_received_param_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: do_action_by_damage_received_param_type
  do_action_by_damage_received_param_type_comparer:
    seq: []
    instances: {}
  do_action_by_damage_received_mixin_register:
    seq: []
    instances: {}
  do_action_by_damage_received_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: param_type
        type: ks__enum__do_action_by_damage_received_param_type
        if: ks__has_field_param_type
      - id: value_min
        type: aux_types::dynamic_float
        if: ks__has_field_value_min
      - id: value_max
        type: aux_types::dynamic_float
        if: ks__has_field_value_max
      - id: action_queue
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_action_queue
    instances:
      ks__has_field_param_type: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_value_min: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_value_max: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_action_queue: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  attach_modifier_to_climate_meter_mixin_register:
    seq: []
    instances: {}
  attach_modifier_to_climate_meter_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: value_steps
        type: ks__array_of__aux_types__dynamic_float__length_u
        if: ks__has_field_value_steps
      - id: modifier_name_steps
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_modifier_name_steps
    instances:
      ks__has_field_value_steps: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_modifier_name_steps: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  change_lock_type_mixin_register:
    seq: []
    instances: {}
  change_lock_type_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: lock_type
        type: aux_types::string
        if: ks__has_field_lock_type
      - id: override_range
        type: f4
        if: ks__has_field_override_range
      - id: override_normal_pri
        type: f4
        if: ks__has_field_override_normal_pri
      - id: override_combat_pri
        type: f4
        if: ks__has_field_override_combat_pri
    instances:
      ks__has_field_lock_type: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_override_range: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_override_normal_pri: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_override_combat_pri: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  effect_change_alpha_mixin_register:
    seq: []
    instances: {}
  effect_change_alpha_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: target
        type: ks__enum__ability_targetting
        if: ks__has_field_target
      - id: start_duration
        type: f4
        if: ks__has_field_start_duration
      - id: end_duration
        type: f4
        if: ks__has_field_end_duration
    instances:
      ks__has_field_target: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_start_duration: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_end_duration: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  replace_face_animation_mixin_register:
    seq: []
    instances: {}
  replace_face_animation_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: old_face_animations
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_old_face_animations
      - id: new_face_animations
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_new_face_animations
    instances:
      ks__has_field_old_face_animations: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_new_face_animations: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  dig_attach_modifier_to_target_distance_mixin_register:
    seq: []
    instances: {}
  dig_attach_modifier_to_target_distance_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: target_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_target_id
      - id: distance
        type: f4
        if: ks__has_field_distance
      - id: unfound_effect_pattern
        type: aux_types::string
        if: ks__has_field_unfound_effect_pattern
      - id: found_effect_pattern
        type: aux_types::string
        if: ks__has_field_found_effect_pattern
      - id: unfound_action_array
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_unfound_action_array
      - id: found_action_array
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_found_action_array
    instances:
      ks__has_field_target_id: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_distance: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_unfound_effect_pattern: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_found_effect_pattern: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_unfound_action_array: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_found_action_array: # Field №5
        value: (ks__bit_field & 0b100000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  rigid_body_freeze_mixin_register:
    seq: []
    instances: {}
  rigid_body_freeze_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
    instances:
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  do_action_on_global_value_change_mixin_register:
    seq: []
    instances: {}
  do_action_on_global_value_change_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: u1
      - id: global_value_key
        type: aux_types::string
        if: ks__has_field_global_value_key
      - id: actions
        type: ks__array_of__ks__disp__config_ability_action__length_u
        if: ks__has_field_actions
      - id: is_delay
        type: u1
        if: ks__has_field_is_delay
      - id: delay_time
        type: f4
        if: ks__has_field_delay_time
    instances:
      ks__has_field_global_value_key: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_actions: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_is_delay: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_delay_time: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  die_pattern_switch_mixin_register:
    seq: []
    instances: {}
  die_pattern_switch_mixin:
    seq:
      - id: ks__base
        type: config_ability_mixin
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: has_animator_die
        type: u1
        if: ks__has_field_has_animator_die
      - id: mute_all_shader_die_eff
        type: u1
        if: ks__has_field_mute_all_shader_die_eff
      - id: fall_when_air_die
        type: u1
        if: ks__has_field_fall_when_air_die
      - id: die_end_time
        type: f4
        if: ks__has_field_die_end_time
      - id: die_force_disappear_time
        type: f4
        if: ks__has_field_die_force_disappear_time
      - id: die_disappear_effect
        type: aux_types::string
        if: ks__has_field_die_disappear_effect
      - id: die_disappear_effect_delay
        type: f4
        if: ks__has_field_die_disappear_effect_delay
      - id: die_shader_data
        type: ks__enum__e_shader_data
        if: ks__has_field_die_shader_data
      - id: die_shader_enable_duration_time
        type: f4
        if: ks__has_field_die_shader_enable_duration_time
      - id: die_shader_disable_duration_time
        type: f4
        if: ks__has_field_die_shader_disable_duration_time
      - id: die_model_fade_delay
        type: f4
        if: ks__has_field_die_model_fade_delay
      - id: rag_doll_die_end_time_delay
        type: f4
        if: ks__has_field_rag_doll_die_end_time_delay
      - id: start_die_end_at_once
        type: u1
        if: ks__has_field_start_die_end_at_once
      - id: ignore_element_die
        type: u1
        if: ks__has_field_ignore_element_die
    instances:
      ks__has_field_has_animator_die: # Field №0
        value: (ks__bit_field.value & 0b00000000000001) != 0
      ks__has_field_mute_all_shader_die_eff: # Field №1
        value: (ks__bit_field.value & 0b00000000000010) != 0
      ks__has_field_fall_when_air_die: # Field №2
        value: (ks__bit_field.value & 0b00000000000100) != 0
      ks__has_field_die_end_time: # Field №3
        value: (ks__bit_field.value & 0b00000000001000) != 0
      ks__has_field_die_force_disappear_time: # Field №4
        value: (ks__bit_field.value & 0b00000000010000) != 0
      ks__has_field_die_disappear_effect: # Field №5
        value: (ks__bit_field.value & 0b00000000100000) != 0
      ks__has_field_die_disappear_effect_delay: # Field №6
        value: (ks__bit_field.value & 0b00000001000000) != 0
      ks__has_field_die_shader_data: # Field №7
        value: (ks__bit_field.value & 0b00000010000000) != 0
      ks__has_field_die_shader_enable_duration_time: # Field №8
        value: (ks__bit_field.value & 0b00000100000000) != 0
      ks__has_field_die_shader_disable_duration_time: # Field №9
        value: (ks__bit_field.value & 0b00001000000000) != 0
      ks__has_field_die_model_fade_delay: # Field №10
        value: (ks__bit_field.value & 0b00010000000000) != 0
      ks__has_field_rag_doll_die_end_time_delay: # Field №11
        value: (ks__bit_field.value & 0b00100000000000) != 0
      ks__has_field_start_die_end_at_once: # Field №12
        value: (ks__bit_field.value & 0b01000000000000) != 0
      ks__has_field_ignore_element_die: # Field №13
        value: (ks__bit_field.value & 0b10000000000000) != 0
      # Base class fields
      is_unique:
        value: ks__base.is_unique
  modifier_time_scale_comparer:
    seq: []
    instances: {}
  modifier_stacking_comparer:
    seq: []
    instances: {}
  unique_modifier_cond_comparer:
    seq: []
    instances: {}
  ks__kvp_of_dict__aux_types__string_ks__array_of__aux_types__string__length_u:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: ks__array_of__aux_types__string__length_u
  ks__dict_of__aux_types__string_ks__array_of__aux_types__string__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_ks__array_of__aux_types__string__length_u
        repeat: expr
        repeat-expr: length.value
  config_ability_path:
    seq:
      - id: ks__bit_field
        type: u1
      - id: ability_paths
        type: ks__dict_of__aux_types__string_ks__array_of__aux_types__string__length_u
        if: ks__has_field_ability_paths
    instances:
      ks__has_field_ability_paths: # Field №0
        value: (ks__bit_field & 0b1) != 0
  relational_operation_predicate_register:
    seq: []
    instances: {}
  relational_operation_predicate:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: logic
        type: ks__enum__relational_operator
        if: ks__has_field_logic
    instances:
      ks__has_field_logic: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_target_hp_ratio_register:
    seq: []
    instances: {}
  by_target_hp_ratio:
    seq:
      - id: ks__base
        type: relational_operation_predicate
      - id: ks__bit_field
        type: u1
      - id: hp_ratio
        type: aux_types::dynamic_float
        if: ks__has_field_hp_ratio
    instances:
      ks__has_field_hp_ratio: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      logic:
        value: ks__base.logic
      target:
        value: ks__base.target
  by_target_raycast_visiable_register:
    seq: []
    instances: {}
  by_target_raycast_visiable:
    seq:
      - id: ks__base
        type: config_ability_predicate
    instances:
      # Base class fields
      target:
        value: ks__base.target
  by_local_avatar_stamina_register:
    seq: []
    instances: {}
  by_local_avatar_stamina:
    seq:
      - id: ks__base
        type: relational_operation_predicate
      - id: ks__bit_field
        type: u1
      - id: stamina
        type: aux_types::dynamic_float
        if: ks__has_field_stamina
    instances:
      ks__has_field_stamina: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      logic:
        value: ks__base.logic
      target:
        value: ks__base.target
  by_local_avatar_stamina_ratio_register:
    seq: []
    instances: {}
  by_local_avatar_stamina_ratio:
    seq:
      - id: ks__base
        type: relational_operation_predicate
      - id: ks__bit_field
        type: u1
      - id: stamina_ratio
        type: aux_types::dynamic_float
        if: ks__has_field_stamina_ratio
    instances:
      ks__has_field_stamina_ratio: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      logic:
        value: ks__base.logic
      target:
        value: ks__base.target
  by_target_hp_value_register:
    seq: []
    instances: {}
  by_target_hp_value:
    seq:
      - id: ks__base
        type: relational_operation_predicate
      - id: ks__bit_field
        type: u1
      - id: hp
        type: aux_types::dynamic_float
        if: ks__has_field_hp
    instances:
      ks__has_field_hp: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      logic:
        value: ks__base.logic
      target:
        value: ks__base.target
  by_hit_damage_register:
    seq: []
    instances: {}
  by_hit_damage:
    seq:
      - id: ks__base
        type: relational_operation_predicate
      - id: ks__bit_field
        type: u1
      - id: damage
        type: aux_types::dynamic_float
        if: ks__has_field_damage
      - id: use_origin_damage
        type: u1
        if: ks__has_field_use_origin_damage
    instances:
      ks__has_field_damage: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_use_origin_damage: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      logic:
        value: ks__base.logic
      target:
        value: ks__base.target
  by_hit_en_break_register:
    seq: []
    instances: {}
  by_hit_en_break:
    seq:
      - id: ks__base
        type: relational_operation_predicate
      - id: ks__bit_field
        type: u1
      - id: en_break
        type: aux_types::dynamic_float
        if: ks__has_field_en_break
    instances:
      ks__has_field_en_break: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      logic:
        value: ks__base.logic
      target:
        value: ks__base.target
  by_hit_critical_register:
    seq: []
    instances: {}
  by_hit_critical:
    seq:
      - id: ks__base
        type: config_ability_predicate
    instances:
      # Base class fields
      target:
        value: ks__base.target
  by_target_override_map_value_register:
    seq: []
    instances: {}
  by_target_override_map_value:
    seq:
      - id: ks__base
        type: relational_operation_predicate
      - id: ks__bit_field
        type: u1
      - id: target_ability_name
        type: aux_types::string
        if: ks__has_field_target_ability_name
      - id: target_key
        type: aux_types::string
        if: ks__has_field_target_key
      - id: target_value
        type: aux_types::dynamic_float
        if: ks__has_field_target_value
    instances:
      ks__has_field_target_ability_name: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_target_key: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_target_value: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      logic:
        value: ks__base.logic
      target:
        value: ks__base.target
  by_wet_hit_collider_register:
    seq: []
    instances: {}
  by_wet_hit_collider:
    seq:
      - id: ks__base
        type: config_ability_predicate
    instances:
      # Base class fields
      target:
        value: ks__base.target
  by_hit_box_name_register:
    seq: []
    instances: {}
  by_hit_box_name:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: hit_box_names
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_hit_box_names
    instances:
      ks__has_field_hit_box_names: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_hit_box_type_register:
    seq: []
    instances: {}
  ks__enum__hit_box_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: hit_box_type
  by_hit_box_type:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: hit_box_type
        type: ks__enum__hit_box_type
        if: ks__has_field_hit_box_type
    instances:
      ks__has_field_hit_box_type: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_has_element_register:
    seq: []
    instances: {}
  by_has_element:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: element
        type: ks__enum__element_type
        if: ks__has_field_element
    instances:
      ks__has_field_element: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_has_ability_state_register:
    seq: []
    instances: {}
  by_has_ability_state:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: ability_state
        type: ks__enum__ability_state
        if: ks__has_field_ability_state
    instances:
      ks__has_field_ability_state: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_not_register:
    seq: []
    instances: {}
  by_not:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: predicates
        type: ks__array_of__ks__disp__config_ability_predicate__length_u
        if: ks__has_field_predicates
    instances:
      ks__has_field_predicates: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_any_register:
    seq: []
    instances: {}
  by_any:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: predicates
        type: ks__array_of__ks__disp__config_ability_predicate__length_u
        if: ks__has_field_predicates
    instances:
      ks__has_field_predicates: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_has_attack_target_register:
    seq: []
    instances: {}
  by_has_attack_target:
    seq:
      - id: ks__base
        type: config_ability_predicate
    instances:
      # Base class fields
      target:
        value: ks__base.target
  by_target_is_ghost_to_enemy_register:
    seq: []
    instances: {}
  by_target_is_ghost_to_enemy:
    seq:
      - id: ks__base
        type: config_ability_predicate
    instances:
      # Base class fields
      target:
        value: ks__base.target
  by_target_is_self_register:
    seq: []
    instances: {}
  by_target_is_self:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: is_self
        type: u1
        if: ks__has_field_is_self
    instances:
      ks__has_field_is_self: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_target_element_register:
    seq: []
    instances: {}
  by_target_element:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: element_type
        type: ks__enum__element_type
        if: ks__has_field_element_type
    instances:
      ks__has_field_element_type: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_host_or_guest_register:
    seq: []
    instances: {}
  by_host_or_guest:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: is_host
        type: u1
        if: ks__has_field_is_host
    instances:
      ks__has_field_is_host: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_target_weight_register:
    seq: []
    instances: {}
  by_target_weight:
    seq:
      - id: ks__base
        type: relational_operation_predicate
      - id: ks__bit_field
        type: u1
      - id: weight
        type: aux_types::dynamic_float
        if: ks__has_field_weight
    instances:
      ks__has_field_weight: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      logic:
        value: ks__base.logic
      target:
        value: ks__base.target
  by_animator_float_register:
    seq: []
    instances: {}
  by_animator_float:
    seq:
      - id: ks__base
        type: relational_operation_predicate
      - id: ks__bit_field
        type: u1
      - id: value
        type: aux_types::dynamic_float
        if: ks__has_field_value
      - id: parameter
        type: aux_types::string
        if: ks__has_field_parameter
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_parameter: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      logic:
        value: ks__base.logic
      target:
        value: ks__base.target
  by_animator_int_register:
    seq: []
    instances: {}
  by_animator_int:
    seq:
      - id: ks__base
        type: relational_operation_predicate
      - id: ks__bit_field
        type: u1
      - id: value
        type: aux_types::dynamic_int
        if: ks__has_field_value
      - id: parameter
        type: aux_types::string
        if: ks__has_field_parameter
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_parameter: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      logic:
        value: ks__base.logic
      target:
        value: ks__base.target
  by_animator_bool_register:
    seq: []
    instances: {}
  by_animator_bool:
    seq:
      - id: ks__base
        type: relational_operation_predicate
      - id: ks__bit_field
        type: u1
      - id: value
        type: u1
        if: ks__has_field_value
      - id: parameter
        type: aux_types::string
        if: ks__has_field_parameter
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_parameter: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      logic:
        value: ks__base.logic
      target:
        value: ks__base.target
  ks__enum__relation_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: relation_type
  relation_type_comparer:
    seq: []
    instances: {}
  ks__enum__scene_obj_state:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: scene_obj_state
  scene_obj_state_comparer:
    seq: []
    instances: {}
  by_target_global_value_register:
    seq: []
    instances: {}
  by_target_global_value:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: key
        type: aux_types::string
        if: ks__has_field_key
      - id: value
        type: aux_types::dynamic_float
        if: ks__has_field_value
      - id: max_value
        type: aux_types::dynamic_float
        if: ks__has_field_max_value
      - id: force_by_caster
        type: u1
        if: ks__has_field_force_by_caster
      - id: compare_type
        type: ks__enum__relation_type
        if: ks__has_field_compare_type
    instances:
      ks__has_field_key: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_value: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_max_value: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_force_by_caster: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_compare_type: # Field №4
        value: (ks__bit_field & 0b10000) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_scene_prop_state_register:
    seq: []
    instances: {}
  by_scene_prop_state:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: entity_type
        type: ks__enum__entity_type
        if: ks__has_field_entity_type
      - id: state
        type: ks__enum__scene_obj_state
        if: ks__has_field_state
    instances:
      ks__has_field_entity_type: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_state: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_avatar_in_water_depth_register:
    seq: []
    instances: {}
  by_avatar_in_water_depth:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: compare_type
        type: ks__enum__relation_type
        if: ks__has_field_compare_type
      - id: depth
        type: f4
        if: ks__has_field_depth
    instances:
      ks__has_field_compare_type: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_depth: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_entity_types_register:
    seq: []
    instances: {}
  by_entity_types:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: entity_types
        type: ks__array_of__ks__enum__entity_type__length_u
        if: ks__has_field_entity_types
      - id: reject
        type: u1
        if: ks__has_field_reject
      - id: use_event_source
        type: u1
        if: ks__has_field_use_event_source
      - id: is_authority
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_is_authority
    instances:
      ks__has_field_entity_types: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_reject: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_use_event_source: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_is_authority: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_hit_impulse_register:
    seq: []
    instances: {}
  by_hit_impulse:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: hit_impulse
        type: f4
        if: ks__has_field_hit_impulse
    instances:
      ks__has_field_hit_impulse: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_hit_element_register:
    seq: []
    instances: {}
  by_hit_element:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: element
        type: ks__enum__element_type
        if: ks__has_field_element
    instances:
      ks__has_field_element: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_hit_strike_type_register:
    seq: []
    instances: {}
  by_hit_strike_type:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: strike_type
        type: ks__enum__strike_type
        if: ks__has_field_strike_type
    instances:
      ks__has_field_strike_type: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_is_move_on_water_register:
    seq: []
    instances: {}
  by_is_move_on_water:
    seq:
      - id: ks__base
        type: config_ability_predicate
    instances:
      # Base class fields
      target:
        value: ks__base.target
  by_attack_tags_register:
    seq: []
    instances: {}
  by_attack_tags:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: attack_tags
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_attack_tags
    instances:
      ks__has_field_attack_tags: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      target:
        value: ks__base.target
  scene_surface_type_comparer:
    seq: []
    instances: {}
  by_scene_surface_type_register:
    seq: []
    instances: {}
  ks__array_of__ks__enum__scene_surface_type__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__enum__scene_surface_type
        repeat: expr
        repeat-expr: length.value
  by_scene_surface_type:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: filters
        type: ks__array_of__ks__enum__scene_surface_type__length_u
        if: ks__has_field_filters
      - id: include
        type: u1
        if: ks__has_field_include
      - id: offset
        type: vector
        if: ks__has_field_offset
    instances:
      ks__has_field_filters: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_include: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_offset: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_unlock_talent_param_register:
    seq: []
    instances: {}
  by_unlock_talent_param:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: talent_param
        type: aux_types::string
        if: ks__has_field_talent_param
    instances:
      ks__has_field_talent_param: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_conductive_register:
    seq: []
    instances: {}
  by_conductive:
    seq:
      - id: ks__base
        type: config_ability_predicate
    instances:
      # Base class fields
      target:
        value: ks__base.target
  by_skill_ready_register:
    seq: []
    instances: {}
  by_skill_ready:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: skill_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_skill_id
      - id: skill_slot
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_skill_slot
    instances:
      ks__has_field_skill_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_skill_slot: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      target:
        value: ks__base.target
  ks__enum__target_pos_to_self_pos_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: target_pos_to_self_pos_type
  target_pos_to_self_pos_type_comparer:
    seq: []
    instances: {}
  by_target_position_to_self_position_register:
    seq: []
    instances: {}
  by_target_position_to_self_position:
    seq:
      - id: ks__base
        type: relational_operation_predicate
      - id: ks__bit_field
        type: u1
      - id: compare_type
        type: ks__enum__target_pos_to_self_pos_type
        if: ks__has_field_compare_type
      - id: value
        type: aux_types::dynamic_float
        if: ks__has_field_value
    instances:
      ks__has_field_compare_type: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_value: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      logic:
        value: ks__base.logic
      target:
        value: ks__base.target
  by_target_forward_and_self_position_register:
    seq: []
    instances: {}
  by_target_forward_and_self_position:
    seq:
      - id: ks__base
        type: relational_operation_predicate
      - id: ks__bit_field
        type: u1
      - id: value
        type: aux_types::dynamic_float
        if: ks__has_field_value
      - id: is_xz
        type: u1
        if: ks__has_field_is_xz
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_is_xz: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      logic:
        value: ks__base.logic
      target:
        value: ks__base.target
  by_self_forward_and_target_position_register:
    seq: []
    instances: {}
  by_self_forward_and_target_position:
    seq:
      - id: ks__base
        type: relational_operation_predicate
      - id: ks__bit_field
        type: u1
      - id: value
        type: aux_types::dynamic_float
        if: ks__has_field_value
      - id: is_xz
        type: u1
        if: ks__has_field_is_xz
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_is_xz: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      logic:
        value: ks__base.logic
      target:
        value: ks__base.target
  by_energy_ratio_register:
    seq: []
    instances: {}
  by_energy_ratio:
    seq:
      - id: ks__base
        type: relational_operation_predicate
      - id: ks__bit_field
        type: u1
      - id: ratio
        type: aux_types::dynamic_float
        if: ks__has_field_ratio
    instances:
      ks__has_field_ratio: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      logic:
        value: ks__base.logic
      target:
        value: ks__base.target
  by_energy_register:
    seq: []
    instances: {}
  by_energy:
    seq:
      - id: ks__base
        type: relational_operation_predicate
      - id: ks__bit_field
        type: u1
      - id: value
        type: aux_types::dynamic_float
        if: ks__has_field_value
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      logic:
        value: ks__base.logic
      target:
        value: ks__base.target
  by_summon_tag_value_register:
    seq: []
    instances: {}
  by_summon_tag_value:
    seq:
      - id: ks__base
        type: relational_operation_predicate
      - id: ks__bit_field
        type: u1
      - id: summon_tag
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_summon_tag
      - id: value
        type: aux_types::dynamic_int
        if: ks__has_field_value
    instances:
      ks__has_field_summon_tag: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_value: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      logic:
        value: ks__base.logic
      target:
        value: ks__base.target
  by_attack_not_hit_scene_register:
    seq: []
    instances: {}
  by_attack_not_hit_scene:
    seq:
      - id: ks__base
        type: relational_operation_predicate
      - id: ks__bit_field
        type: u1
      - id: attack_pattern
        type: ks__disp__config_base_attack_pattern
        if: ks__has_field_attack_pattern
      - id: check_water_layer
        type: u1
        if: ks__has_field_check_water_layer
    instances:
      ks__has_field_attack_pattern: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_check_water_layer: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      logic:
        value: ks__base.logic
      target:
        value: ks__base.target
  by_is_combat_register:
    seq: []
    instances: {}
  by_is_combat:
    seq:
      - id: ks__base
        type: config_ability_predicate
    instances:
      # Base class fields
      target:
        value: ks__base.target
  by_vehicle_is_combat_register:
    seq: []
    instances: {}
  by_vehicle_is_combat:
    seq:
      - id: ks__base
        type: config_ability_predicate
    instances:
      # Base class fields
      target:
        value: ks__base.target
  ks__enum__target_altitude_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: target_altitude_type
  target_altitude_type_comparer:
    seq: []
    instances: {}
  by_target_altitude_register:
    seq: []
    instances: {}
  by_target_altitude:
    seq:
      - id: ks__base
        type: relational_operation_predicate
      - id: ks__bit_field
        type: u1
      - id: value
        type: aux_types::dynamic_float
        if: ks__has_field_value
      - id: target_altitude_type
        type: ks__enum__target_altitude_type
        if: ks__has_field_target_altitude_type
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_target_altitude_type: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      logic:
        value: ks__base.logic
      target:
        value: ks__base.target
  by_stage_is_ready_temp_register:
    seq: []
    instances: {}
  by_stage_is_ready_temp:
    seq:
      - id: ks__base
        type: config_ability_predicate
    instances:
      # Base class fields
      target:
        value: ks__base.target
  by_item_number_register:
    seq: []
    instances: {}
  by_item_number:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: item_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_item_id
      - id: item_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_item_num
    instances:
      ks__has_field_item_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_item_num: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_has_component_tag_register:
    seq: []
    instances: {}
  ks__enum__component_tag:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: component_tag
  ks__array_of__ks__enum__component_tag__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__enum__component_tag
        repeat: expr
        repeat-expr: length.value
  by_has_component_tag:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: tags
        type: ks__array_of__ks__enum__component_tag__length_u
        if: ks__has_field_tags
    instances:
      ks__has_field_tags: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_has_feature_tag_register:
    seq: []
    instances: {}
  by_has_feature_tag:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: feature_tag_i_ds
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_feature_tag_i_ds
    instances:
      ks__has_field_feature_tag_i_ds: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_avatar_element_type_register:
    seq: []
    instances: {}
  by_avatar_element_type:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: element_type
        type: ks__enum__element_type
        if: ks__has_field_element_type
    instances:
      ks__has_field_element_type: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_avatar_weapon_type_register:
    seq: []
    instances: {}
  by_avatar_weapon_type:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: weapon_types
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_weapon_types
    instances:
      ks__has_field_weapon_types: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_avatar_body_type_register:
    seq: []
    instances: {}
  by_avatar_body_type:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: body_type
        type: aux_types::string
        if: ks__has_field_body_type
    instances:
      ks__has_field_body_type: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_cur_team_has_feature_tag_register:
    seq: []
    instances: {}
  by_cur_team_has_feature_tag:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: feature_tag_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_feature_tag_id
      - id: number
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_number
      - id: logic
        type: ks__enum__relational_operator
        if: ks__has_field_logic
    instances:
      ks__has_field_feature_tag_id: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_number: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_logic: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_cur_team_has_element_type_register:
    seq: []
    instances: {}
  by_cur_team_has_element_type:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: element_type
        type: ks__enum__element_type
        if: ks__has_field_element_type
      - id: number
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_number
      - id: logic
        type: ks__enum__relational_operator
        if: ks__has_field_logic
    instances:
      ks__has_field_element_type: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_number: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_logic: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_cur_team_element_type_sort_register:
    seq: []
    instances: {}
  by_cur_team_element_type_sort:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: number
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_number
      - id: logic
        type: ks__enum__relational_operator
        if: ks__has_field_logic
    instances:
      ks__has_field_number: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_logic: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_cur_team_has_weapon_type_register:
    seq: []
    instances: {}
  by_cur_team_has_weapon_type:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: weapon_type
        type: aux_types::string
        if: ks__has_field_weapon_type
      - id: number
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_number
      - id: logic
        type: ks__enum__relational_operator
        if: ks__has_field_logic
    instances:
      ks__has_field_weapon_type: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_number: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_logic: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_cur_team_weapon_type_sort_register:
    seq: []
    instances: {}
  by_cur_team_weapon_type_sort:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: number
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_number
      - id: logic
        type: ks__enum__relational_operator
        if: ks__has_field_logic
    instances:
      ks__has_field_number: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_logic: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_cur_team_has_body_type_register:
    seq: []
    instances: {}
  by_cur_team_has_body_type:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: body_type
        type: aux_types::string
        if: ks__has_field_body_type
      - id: number
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_number
      - id: logic
        type: ks__enum__relational_operator
        if: ks__has_field_logic
    instances:
      ks__has_field_body_type: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_number: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_logic: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_cur_team_body_type_sort_register:
    seq: []
    instances: {}
  by_cur_team_body_type_sort:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: number
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_number
      - id: logic
        type: ks__enum__relational_operator
        if: ks__has_field_logic
    instances:
      ks__has_field_number: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_logic: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_big_team_has_feature_tag_register:
    seq: []
    instances: {}
  by_big_team_has_feature_tag:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: feature_tag_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_feature_tag_id
      - id: number
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_number
      - id: logic
        type: ks__enum__relational_operator
        if: ks__has_field_logic
    instances:
      ks__has_field_feature_tag_id: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_number: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_logic: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_big_team_has_element_type_register:
    seq: []
    instances: {}
  by_big_team_has_element_type:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: element_type
        type: ks__enum__element_type
        if: ks__has_field_element_type
      - id: number
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_number
      - id: logic
        type: ks__enum__relational_operator
        if: ks__has_field_logic
    instances:
      ks__has_field_element_type: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_number: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_logic: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_big_team_element_type_sort_register:
    seq: []
    instances: {}
  by_big_team_element_type_sort:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: number
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_number
      - id: logic
        type: ks__enum__relational_operator
        if: ks__has_field_logic
    instances:
      ks__has_field_number: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_logic: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_big_team_has_weapon_type_register:
    seq: []
    instances: {}
  by_big_team_has_weapon_type:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: weapon_type
        type: aux_types::string
        if: ks__has_field_weapon_type
      - id: number
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_number
      - id: logic
        type: ks__enum__relational_operator
        if: ks__has_field_logic
    instances:
      ks__has_field_weapon_type: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_number: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_logic: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_big_team_weapon_type_sort_register:
    seq: []
    instances: {}
  by_big_team_weapon_type_sort:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: number
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_number
      - id: logic
        type: ks__enum__relational_operator
        if: ks__has_field_logic
    instances:
      ks__has_field_number: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_logic: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_big_team_has_body_type_register:
    seq: []
    instances: {}
  by_big_team_has_body_type:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: body_type
        type: aux_types::string
        if: ks__has_field_body_type
      - id: number
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_number
      - id: logic
        type: ks__enum__relational_operator
        if: ks__has_field_logic
    instances:
      ks__has_field_body_type: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_number: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_logic: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_big_team_body_type_sort_register:
    seq: []
    instances: {}
  by_big_team_body_type_sort:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: number
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_number
      - id: logic
        type: ks__enum__relational_operator
        if: ks__has_field_logic
    instances:
      ks__has_field_number: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_logic: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_attack_type_register:
    seq: []
    instances: {}
  by_attack_type:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: attack_type
        type: ks__enum__attack_type
        if: ks__has_field_attack_type
    instances:
      ks__has_field_attack_type: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      target:
        value: ks__base.target
  ks__enum__compare_property:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: compare_property
  compare_property_comparer:
    seq: []
    instances: {}
  by_compare_with_target_register:
    seq: []
    instances: {}
  by_compare_with_target:
    seq:
      - id: ks__base
        type: relational_operation_predicate
      - id: ks__bit_field
        type: u1
      - id: use_owner
        type: u1
        if: ks__has_field_use_owner
      - id: property
        type: ks__enum__compare_property
        if: ks__has_field_property
    instances:
      ks__has_field_use_owner: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_property: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      logic:
        value: ks__base.logic
      target:
        value: ks__base.target
  by_entity_appear_vision_type_register:
    seq: []
    instances: {}
  ks__enum__entity_appear_vision_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: entity_appear_vision_type
  by_entity_appear_vision_type:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: vision_type
        type: ks__enum__entity_appear_vision_type
        if: ks__has_field_vision_type
    instances:
      ks__has_field_vision_type: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_element_trigger_entity_type_register:
    seq: []
    instances: {}
  by_element_trigger_entity_type:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: entity_types
        type: ks__array_of__ks__enum__entity_type__length_u
        if: ks__has_field_entity_types
      - id: forceby_origin_owner
        type: u1
        if: ks__has_field_forceby_origin_owner
    instances:
      ks__has_field_entity_types: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_forceby_origin_owner: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_element_reaction_source_type_register:
    seq: []
    instances: {}
  ks__enum__element_reaction_source_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: element_reaction_source_type
  by_element_reaction_source_type:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: source_type
        type: ks__enum__element_reaction_source_type
        if: ks__has_field_source_type
    instances:
      ks__has_field_source_type: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_element_reaction_type_register:
    seq: []
    instances: {}
  by_element_reaction_type:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: reaction_type
        type: ks__enum__element_reaction_type
        if: ks__has_field_reaction_type
    instances:
      ks__has_field_reaction_type: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_target_config_id_register:
    seq: []
    instances: {}
  by_target_config_id:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: config_id_array
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_config_id_array
    instances:
      ks__has_field_config_id_array: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_is_local_avatar_register:
    seq: []
    instances: {}
  by_is_local_avatar:
    seq:
      - id: ks__base
        type: config_ability_predicate
    instances:
      # Base class fields
      target:
        value: ks__base.target
  by_target_gadget_state_register:
    seq: []
    instances: {}
  by_target_gadget_state:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: gadget_state
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gadget_state
    instances:
      ks__has_field_gadget_state: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_die_state_flag_register:
    seq: []
    instances: {}
  by_die_state_flag:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: die_state_flag
        type: ks__enum__die_state_flag
        if: ks__has_field_die_state_flag
    instances:
      ks__has_field_die_state_flag: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      target:
        value: ks__base.target
  ks__enum__has_shield_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: has_shield_type
  has_shield_type_comparer:
    seq: []
    instances: {}
  by_has_shield_register:
    seq: []
    instances: {}
  by_has_shield:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: type
        type: ks__enum__has_shield_type
        if: ks__has_field_type
      - id: use_potent_shield
        type: u1
        if: ks__has_field_use_potent_shield
      - id: potent_shield_type
        type: ks__enum__element_type
        if: ks__has_field_potent_shield_type
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_use_potent_shield: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_potent_shield_type: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_global_pos_to_ground_register:
    seq: []
    instances: {}
  by_global_pos_to_ground:
    seq:
      - id: ks__base
        type: relational_operation_predicate
      - id: ks__bit_field
        type: u1
      - id: global_pos
        type: aux_types::string
        if: ks__has_field_global_pos
      - id: to_ground_height
        type: aux_types::dynamic_float
        if: ks__has_field_to_ground_height
      - id: to_water
        type: u1
        if: ks__has_field_to_water
    instances:
      ks__has_field_global_pos: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_to_ground_height: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_to_water: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      logic:
        value: ks__base.logic
      target:
        value: ks__base.target
  by_equip_affix_ready_register:
    seq: []
    instances: {}
  by_equip_affix_ready:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: equip_affix_data_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_equip_affix_data_id
    instances:
      ks__has_field_equip_affix_data_id: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      target:
        value: ks__base.target
  ks__enum__target_position_area_level:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: target_position_area_level
  target_position_area_level_comparer:
    seq: []
    instances: {}
  by_target_in_area_register:
    seq: []
    instances: {}
  by_target_in_area:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: area_level
        type: ks__enum__target_position_area_level
        if: ks__has_field_area_level
      - id: areas
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_areas
    instances:
      ks__has_field_area_level: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_areas: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_is_target_camp_register:
    seq: []
    instances: {}
  by_is_target_camp:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: camp_base_on
        type: ks__enum__ability_targetting
        if: ks__has_field_camp_base_on
      - id: camp_target_type
        type: ks__enum__target_type
        if: ks__has_field_camp_target_type
    instances:
      ks__has_field_camp_base_on: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_camp_target_type: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_has_child_gadget_register:
    seq: []
    instances: {}
  by_has_child_gadget:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: config_id_array
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_config_id_array
      - id: value
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_value
      - id: compare_type
        type: ks__enum__relation_type
        if: ks__has_field_compare_type
      - id: force_by_caster
        type: u1
        if: ks__has_field_force_by_caster
      - id: check_entity_alive
        type: u1
        if: ks__has_field_check_entity_alive
    instances:
      ks__has_field_config_id_array: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_value: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_compare_type: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_force_by_caster: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_check_entity_alive: # Field №4
        value: (ks__bit_field & 0b10000) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_target_layout_area_register:
    seq: []
    instances: {}
  by_target_layout_area:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: area_type
        type: ks__enum__json_climate_type
        if: ks__has_field_area_type
      - id: climate_type
        type: ks__enum__json_climate_type
        if: ks__has_field_climate_type
      - id: area_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_area_id
    instances:
      ks__has_field_area_type: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_climate_type: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_area_id: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_player_climate_type_register:
    seq: []
    instances: {}
  by_player_climate_type:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: climate_type
        type: ks__enum__json_climate_type
        if: ks__has_field_climate_type
    instances:
      ks__has_field_climate_type: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_target_weather_name_register:
    seq: []
    instances: {}
  by_target_weather_name:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: weather_name
        type: aux_types::string
        if: ks__has_field_weather_name
    instances:
      ks__has_field_weather_name: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_is_gadget_exist_around_register:
    seq: []
    instances: {}
  by_is_gadget_exist_around:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: gadget_id_array
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_gadget_id_array
      - id: trun_to_target
        type: u1
        if: ks__has_field_trun_to_target
    instances:
      ks__has_field_gadget_id_array: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_trun_to_target: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_entity_is_alive_register:
    seq: []
    instances: {}
  by_entity_is_alive:
    seq:
      - id: ks__base
        type: config_ability_predicate
    instances:
      # Base class fields
      target:
        value: ks__base.target
  by_monster_air_state_register:
    seq: []
    instances: {}
  by_monster_air_state:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: is_air_move
        type: u1
        if: ks__has_field_is_air_move
    instances:
      ks__has_field_is_air_move: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_game_time_is_locked_register:
    seq: []
    instances: {}
  by_game_time_is_locked:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: is_locked
        type: u1
        if: ks__has_field_is_locked
    instances:
      ks__has_field_is_locked: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_target_is_caster_register:
    seq: []
    instances: {}
  by_target_is_caster:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: is_caster
        type: u1
        if: ks__has_field_is_caster
    instances:
      ks__has_field_is_caster: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_hit_element_durability_register:
    seq: []
    instances: {}
  by_hit_element_durability:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: element
        type: ks__enum__element_type
        if: ks__has_field_element
      - id: durability
        type: f4
        if: ks__has_field_durability
      - id: compare_type
        type: ks__enum__relation_type
        if: ks__has_field_compare_type
      - id: apply_attenuation
        type: u1
        if: ks__has_field_apply_attenuation
    instances:
      ks__has_field_element: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_durability: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_compare_type: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_apply_attenuation: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_has_tag_register:
    seq: []
    instances: {}
  by_has_tag:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: tag
        type: aux_types::string
        if: ks__has_field_tag
    instances:
      ks__has_field_tag: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_current_scene_types_register:
    seq: []
    instances: {}
  ks__array_of__ks__enum__scene_type__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__enum__scene_type
        repeat: expr
        repeat-expr: length.value
  by_current_scene_types:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: scene_types
        type: ks__array_of__ks__enum__scene_type__length_u
        if: ks__has_field_scene_types
    instances:
      ks__has_field_scene_types: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_target_type_register:
    seq: []
    instances: {}
  by_target_type:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: target_type
        type: ks__enum__ability_targetting
        if: ks__has_field_target_type
      - id: is_target
        type: u1
        if: ks__has_field_is_target
    instances:
      ks__has_field_target_type: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_is_target: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_current_scene_id_register:
    seq: []
    instances: {}
  by_current_scene_id:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: scene_ids
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_scene_ids
    instances:
      ks__has_field_scene_ids: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_target_charge_value_register:
    seq: []
    instances: {}
  by_target_charge_value:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: element
        type: ks__enum__element_type
        if: ks__has_field_element
      - id: global_value_key
        type: aux_types::string
        if: ks__has_field_global_value_key
      - id: value
        type: aux_types::dynamic_float
        if: ks__has_field_value
      - id: compare_type
        type: ks__enum__relation_type
        if: ks__has_field_compare_type
    instances:
      ks__has_field_element: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_global_value_key: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_value: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_compare_type: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_has_modifier_register:
    seq: []
    instances: {}
  by_has_modifier:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: modifier_name
        type: aux_types::string
        if: ks__has_field_modifier_name
    instances:
      ks__has_field_modifier_name: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      target:
        value: ks__base.target
  by_find_blink_point_success_register:
    seq: []
    instances: {}
  by_find_blink_point_success:
    seq:
      - id: ks__base
        type: config_ability_predicate
      - id: ks__bit_field
        type: u1
      - id: find_point_success
        type: u1
        if: ks__has_field_find_point_success
    instances:
      ks__has_field_find_point_success: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      target:
        value: ks__base.target
  ks__enum__logic_operation:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: logic_operation
  logic_operation_comparer:
    seq: []
    instances: {}
  ks__enum__trigger_mode:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: trigger_mode
  trigger_mode_comparer:
    seq: []
    instances: {}
  ks__array_of__token_json_path__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: token_json_path
        repeat: expr
        repeat-expr: length.value
  token_json_path:
    seq:
      - id: ks__bit_field
        type: u1
      - id: op
        type: ks__enum__logic_operation
        if: ks__has_field_op
      - id: inherit_from
        type: aux_types::string
        if: ks__has_field_inherit_from
      - id: has_properties
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_has_properties
      - id: paths
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_paths
      - id: children
        type: ks__array_of__token_json_path__length_u
        if: ks__has_field_children
    instances:
      ks__has_field_op: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_inherit_from: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_has_properties: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_paths: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_children: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  score_entry:
    seq:
      - id: ks__bit_field
        type: u1
      - id: json_path
        type: token_json_path
        if: ks__has_field_json_path
      - id: prefix_root_name
        type: aux_types::string
        if: ks__has_field_prefix_root_name
      - id: root_name_key
        type: aux_types::string
        if: ks__has_field_root_name_key
    instances:
      ks__has_field_json_path: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_prefix_root_name: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_root_name_key: # Field №2
        value: (ks__bit_field & 0b100) != 0
  score_rule:
    seq:
      - id: ks__bit_field
        type: u1
      - id: rule_name
        type: aux_types::string
        if: ks__has_field_rule_name
      - id: trigger_mode
        type: ks__enum__trigger_mode
        if: ks__has_field_trigger_mode
      - id: property_names
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_property_names
      - id: min_select_count
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_min_select_count
      - id: max_select_count
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_max_select_count
      - id: add_to_score_view
        type: u1
        if: ks__has_field_add_to_score_view
    instances:
      ks__has_field_rule_name: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_trigger_mode: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_property_names: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_min_select_count: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_max_select_count: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_add_to_score_view: # Field №5
        value: (ks__bit_field & 0b100000) != 0
  ks__array_of__score_rule__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: score_rule
        repeat: expr
        repeat-expr: length.value
  score_strategy:
    seq:
      - id: ks__bit_field
        type: u1
      - id: json_path
        type: token_json_path
        if: ks__has_field_json_path
      - id: score_rules
        type: ks__array_of__score_rule__length_u
        if: ks__has_field_score_rules
    instances:
      ks__has_field_json_path: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_score_rules: # Field №1
        value: (ks__bit_field & 0b10) != 0
  modifier_ref_jump:
    seq:
      - id: ks__bit_field
        type: u1
      - id: json_path
        type: token_json_path
        if: ks__has_field_json_path
      - id: event_to_jump
        type: aux_types::string
        if: ks__has_field_event_to_jump
    instances:
      ks__has_field_json_path: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_event_to_jump: # Field №1
        value: (ks__bit_field & 0b10) != 0
  modifier_event_ref_jump:
    seq:
      - id: ks__bit_field
        type: u1
      - id: json_path
        type: token_json_path
        if: ks__has_field_json_path
      - id: event_jump_dict
        type: ks__dict_of__aux_types__string_aux_types__string
        if: ks__has_field_event_jump_dict
    instances:
      ks__has_field_json_path: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_event_jump_dict: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ability_ref_jump:
    seq:
      - id: ks__bit_field
        type: u1
      - id: json_path
        type: token_json_path
        if: ks__has_field_json_path
      - id: event_to_jump
        type: aux_types::string
        if: ks__has_field_event_to_jump
    instances:
      ks__has_field_json_path: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_event_to_jump: # Field №1
        value: (ks__bit_field & 0b10) != 0
  sub_token_pre_process:
    seq:
      - id: ks__bit_field
        type: u1
      - id: json_path
        type: token_json_path
        if: ks__has_field_json_path
      - id: sub_tokens_to_pre_process
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_sub_tokens_to_pre_process
    instances:
      ks__has_field_json_path: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_sub_tokens_to_pre_process: # Field №1
        value: (ks__bit_field & 0b10) != 0
  base_ability_logic:
    seq:
      - id: ks__bit_field
        type: u1
      - id: local_id
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_local_id
    instances:
      ks__has_field_local_id: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_dummy_ability_task_register:
    seq: []
    instances: {}
  config_dummy_ability_task:
    seq:
      - id: ks__base
        type: config_ability_task
      - id: ks__bit_field
        type: u1
      - id: dummy_number
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_dummy_number
    instances:
      ks__has_field_dummy_number: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      is_async:
        value: ks__base.is_async
      duration:
        value: ks__base.duration
      delay:
        value: ks__base.delay
  config_massive_entity_element:
    seq:
      - id: ks__bit_field
        type: u1
      - id: entity_type
        type: ks__enum__entity_type
        if: ks__has_field_entity_type
      - id: element_type
        type: ks__enum__element_type
        if: ks__has_field_element_type
      - id: element_durability
        type: f4
        if: ks__has_field_element_durability
      - id: is_element_durability_mutable
        type: u1
        if: ks__has_field_is_element_durability_mutable
    instances:
      ks__has_field_entity_type: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_element_type: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_element_durability: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_is_element_durability_mutable: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  massive_element_trigger_type_comparer:
    seq: []
    instances: {}
  config_trigger_massive_element_task_register:
    seq: []
    instances: {}
  ks__array_of__config_massive_entity_element__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_massive_entity_element
        repeat: expr
        repeat-expr: length.value
  ks__array_of__config_massive_element_trigger_action__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_massive_element_trigger_action
        repeat: expr
        repeat-expr: length.value
  config_trigger_massive_element_task:
    seq:
      - id: ks__base
        type: config_ability_task
      - id: ks__bit_field
        type: u1
      - id: entity_elements
        type: ks__array_of__config_massive_entity_element__length_u
        if: ks__has_field_entity_elements
      - id: element_trigger_actions
        type: ks__array_of__config_massive_element_trigger_action__length_u
        if: ks__has_field_element_trigger_actions
    instances:
      ks__has_field_entity_elements: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_element_trigger_actions: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      is_async:
        value: ks__base.is_async
      duration:
        value: ks__base.duration
      delay:
        value: ks__base.delay
  tile_special_type_comparer:
    seq: []
    instances: {}
  config_ability_data:
    seq:
      - id: ks__bit_field
        type: u1
      - id: color_tag
        type: aux_types::string
        if: ks__has_field_color_tag
      - id: name
        type: aux_types::string
        if: ks__has_field_name
      - id: msg
        type: aux_types::string
        if: ks__has_field_msg
    instances:
      ks__has_field_color_tag: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_name: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_msg: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__array_of__config_ability_data__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_ability_data
        repeat: expr
        repeat-expr: length.value
  ks__array_of__config_ability_node__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_ability_node
        repeat: expr
        repeat-expr: length.value
  config_ability_node:
    seq:
      - id: ks__bit_field
        type: u1
      - id: config
        type: aux_types::string
        if: ks__has_field_config
      - id: order_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_order_id
      - id: related_order_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_related_order_id
      - id: color_tag
        type: aux_types::string
        if: ks__has_field_color_tag
      - id: tags
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_tags
      - id: name
        type: aux_types::string
        if: ks__has_field_name
      - id: data
        type: ks__array_of__config_ability_data__length_u
        if: ks__has_field_data
      - id: children
        type: ks__array_of__config_ability_node__length_u
        if: ks__has_field_children
    instances:
      ks__has_field_config: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_order_id: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_related_order_id: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_color_tag: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_tags: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_name: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_data: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_children: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
  config_ability_frame_data:
    seq:
      - id: ks__bit_field
        type: u1
      - id: frame
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_frame
      - id: time
        type: f4
        if: ks__has_field_time
      - id: data
        type: ks__array_of__config_ability_node__length_u
        if: ks__has_field_data
    instances:
      ks__has_field_frame: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_time: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_data: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__array_of__config_ability_frame_data__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_ability_frame_data
        repeat: expr
        repeat-expr: length.value
  config_ability_record_data:
    seq:
      - id: ks__bit_field
        type: u1
      - id: code_version
        type: aux_types::string
        if: ks__has_field_code_version
      - id: digit_version
        type: aux_types::string
        if: ks__has_field_digit_version
      - id: date_time
        type: aux_types::string
        if: ks__has_field_date_time
      - id: data
        type: ks__array_of__config_ability_frame_data__length_u
        if: ks__has_field_data
    instances:
      ks__has_field_code_version: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_digit_version: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_date_time: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_data: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  config_ability_node_filter_data:
    seq:
      - id: ks__bit_field
        type: u1
      - id: runtime_i_ds
        type: ks__array_of__aux_types__vlq_base128_le_s__length_u
        if: ks__has_field_runtime_i_ds
      - id: entity_types
        type: ks__array_of__ks__enum__entity_type__length_u
        if: ks__has_field_entity_types
      - id: distance
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_distance
      - id: config_i_ds
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_config_i_ds
      - id: ability_names
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_ability_names
      - id: modifier_names
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_modifier_names
    instances:
      ks__has_field_runtime_i_ds: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_entity_types: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_distance: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_config_i_ds: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_ability_names: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_modifier_names: # Field №5
        value: (ks__bit_field & 0b100000) != 0
  ks__enum__ai_target_system_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: ai_target_system_type
  ai_target_system_type_comparer:
    seq: []
    instances: {}
  ks__array_of__ks__enum__ai_target_system_type__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__enum__ai_target_system_type
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__aux_types__vlq_base128_le_s_ks__array_of__ks__enum__ai_target_system_type__length_u:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_s
      - id: value
        type: ks__array_of__ks__enum__ai_target_system_type__length_u
  ks__dict_of__aux_types__vlq_base128_le_s_ks__array_of__ks__enum__ai_target_system_type__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_s_ks__array_of__ks__enum__ai_target_system_type__length_u
        repeat: expr
        repeat-expr: length.value
  config_ai_target:
    seq:
      - id: ks__bit_field
        type: u1
      - id: default_target_prioritys
        type: ks__array_of__ks__enum__ai_target_system_type__length_u
        if: ks__has_field_default_target_prioritys
      - id: specification_target_prioritys
        type: ks__dict_of__aux_types__vlq_base128_le_s_ks__array_of__ks__enum__ai_target_system_type__length_u
        if: ks__has_field_specification_target_prioritys
    instances:
      ks__has_field_default_target_prioritys: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_specification_target_prioritys: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ai_point:
    seq:
      - id: ks__bit_field
        type: u1
      - id: x
        type: f4
        if: ks__has_field_x
      - id: y
        type: f4
        if: ks__has_field_y
    instances:
      ks__has_field_x: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_y: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_ai_sensing_setting:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: sensitivity
        type: f4
        if: ks__has_field_sensitivity
      - id: enable_vision
        type: u1
        if: ks__has_field_enable_vision
      - id: view_range
        type: f4
        if: ks__has_field_view_range
      - id: view_panoramic
        type: u1
        if: ks__has_field_view_panoramic
      - id: horizontal_fov
        type: f4
        if: ks__has_field_horizontal_fov
      - id: vertical_fov
        type: f4
        if: ks__has_field_vertical_fov
      - id: hear_attraction_range
        type: f4
        if: ks__has_field_hear_attraction_range
      - id: hear_footstep_range
        type: f4
        if: ks__has_field_hear_footstep_range
      - id: feel_range
        type: f4
        if: ks__has_field_feel_range
      - id: sourceless_hit_attraction_range
        type: f4
        if: ks__has_field_sourceless_hit_attraction_range
    instances:
      ks__has_field_sensitivity: # Field №0
        value: (ks__bit_field.value & 0b0000000001) != 0
      ks__has_field_enable_vision: # Field №1
        value: (ks__bit_field.value & 0b0000000010) != 0
      ks__has_field_view_range: # Field №2
        value: (ks__bit_field.value & 0b0000000100) != 0
      ks__has_field_view_panoramic: # Field №3
        value: (ks__bit_field.value & 0b0000001000) != 0
      ks__has_field_horizontal_fov: # Field №4
        value: (ks__bit_field.value & 0b0000010000) != 0
      ks__has_field_vertical_fov: # Field №5
        value: (ks__bit_field.value & 0b0000100000) != 0
      ks__has_field_hear_attraction_range: # Field №6
        value: (ks__bit_field.value & 0b0001000000) != 0
      ks__has_field_hear_footstep_range: # Field №7
        value: (ks__bit_field.value & 0b0010000000) != 0
      ks__has_field_feel_range: # Field №8
        value: (ks__bit_field.value & 0b0100000000) != 0
      ks__has_field_sourceless_hit_attraction_range: # Field №9
        value: (ks__bit_field.value & 0b1000000000) != 0
  ks__kvp_of_dict__aux_types__string_config_ai_sensing_setting:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: config_ai_sensing_setting
  ks__dict_of__aux_types__string_config_ai_sensing_setting:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_config_ai_sensing_setting
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__aux_types__string_ks__dict_of__aux_types__string_aux_types__string:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: ks__dict_of__aux_types__string_aux_types__string
  ks__dict_of__aux_types__string_ks__dict_of__aux_types__string_aux_types__string:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_ks__dict_of__aux_types__string_aux_types__string
        repeat: expr
        repeat-expr: length.value
  config_ai_sensing:
    seq:
      - id: ks__bit_field
        type: u1
      - id: enable
        type: u1
        if: ks__has_field_enable
      - id: settings
        type: ks__dict_of__aux_types__string_config_ai_sensing_setting
        if: ks__has_field_settings
      - id: templates
        type: ks__dict_of__aux_types__string_ks__dict_of__aux_types__string_aux_types__string
        if: ks__has_field_templates
    instances:
      ks__has_field_enable: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_settings: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_templates: # Field №2
        value: (ks__bit_field & 0b100) != 0
  neuron_name_comparer:
    seq: []
    instances: {}
  ks__enum__config_weather_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: config_weather_type
  ks__kvp_of_dict__ks__enum__config_weather_type_ks__array_of__ks__enum__neuron_name__length_u:
    seq:
      - id: key
        type: ks__enum__config_weather_type
      - id: value
        type: ks__array_of__ks__enum__neuron_name__length_u
  ks__dict_of__ks__enum__config_weather_type_ks__array_of__ks__enum__neuron_name__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__ks__enum__config_weather_type_ks__array_of__ks__enum__neuron_name__length_u
        repeat: expr
        repeat-expr: length.value
  config_ai_precombat_setting:
    seq:
      - id: ks__bit_field
        type: u1
      - id: bio_clock_sleep_from
        type: f4
        if: ks__has_field_bio_clock_sleep_from
      - id: bio_clock_sleep_to
        type: f4
        if: ks__has_field_bio_clock_sleep_to
      - id: satiety_time
        type: f4
        if: ks__has_field_satiety_time
      - id: override_weather_neuron_mapping
        type: ks__dict_of__ks__enum__config_weather_type_ks__array_of__ks__enum__neuron_name__length_u
        if: ks__has_field_override_weather_neuron_mapping
    instances:
      ks__has_field_bio_clock_sleep_from: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_bio_clock_sleep_to: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_satiety_time: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_override_weather_neuron_mapping: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  config_ai_threat_score_base_setting:
    seq:
      - id: ks__bit_field
        type: u1
      - id: enable
        type: u1
        if: ks__has_field_enable
      - id: weight
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_weight
      - id: value
        type: f4
        if: ks__has_field_value
      - id: min
        type: f4
        if: ks__has_field_min
      - id: max
        type: f4
        if: ks__has_field_max
      - id: compare_operation
        type: ks__enum__ordering_type
        if: ks__has_field_compare_operation
    instances:
      ks__has_field_enable: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_weight: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_value: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_min: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_max: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_compare_operation: # Field №5
        value: (ks__bit_field & 0b100000) != 0
  config_aits_ability_global_value_setting_register:
    seq: []
    instances: {}
  config_aits_ability_global_value_setting:
    seq:
      - id: ks__base
        type: config_ai_threat_score_base_setting
      - id: ks__bit_field
        type: u1
      - id: cared_global_value_name
        type: aux_types::string
        if: ks__has_field_cared_global_value_name
    instances:
      ks__has_field_cared_global_value_name: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      enable:
        value: ks__base.enable
      weight:
        value: ks__base.weight
      value:
        value: ks__base.value
      min:
        value: ks__base.min
      max:
        value: ks__base.max
      compare_operation:
        value: ks__base.compare_operation
  config_aits_target_distance_setting_register:
    seq: []
    instances: {}
  config_aits_target_distance_setting:
    seq:
      - id: ks__base
        type: config_ai_threat_score_base_setting
    instances:
      # Base class fields
      enable:
        value: ks__base.enable
      weight:
        value: ks__base.weight
      value:
        value: ks__base.value
      min:
        value: ks__base.min
      max:
        value: ks__base.max
      compare_operation:
        value: ks__base.compare_operation
  config_aits_target_bearing_setting_register:
    seq: []
    instances: {}
  config_aits_target_bearing_setting:
    seq:
      - id: ks__base
        type: config_ai_threat_score_base_setting
    instances:
      # Base class fields
      enable:
        value: ks__base.enable
      weight:
        value: ks__base.weight
      value:
        value: ks__base.value
      min:
        value: ks__base.min
      max:
        value: ks__base.max
      compare_operation:
        value: ks__base.compare_operation
  ks__array_of__ai_point__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ai_point
        repeat: expr
        repeat-expr: length.value
  config_ai_threat_setting:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: enable
        type: u1
        if: ks__has_field_enable
      - id: clear_threat_target_distance
        type: f4
        if: ks__has_field_clear_threat_target_distance
      - id: clear_threat_edge_distance
        type: f4
        if: ks__has_field_clear_threat_edge_distance
      - id: clear_threat_by_lost_path
        type: u1
        if: ks__has_field_clear_threat_by_lost_path
      - id: clear_threat_by_target_out_of_zone
        type: u1
        if: ks__has_field_clear_threat_by_target_out_of_zone
      - id: clear_threat_timer_by_distance
        type: f4
        if: ks__has_field_clear_threat_timer_by_distance
      - id: clear_threat_timer_by_lost_path
        type: f4
        if: ks__has_field_clear_threat_timer_by_lost_path
      - id: clear_threat_timer_by_target_out_of_zone
        type: f4
        if: ks__has_field_clear_threat_timer_by_target_out_of_zone
      - id: view_threat_grow
        type: f4
        if: ks__has_field_view_threat_grow
      - id: hear_threat_grow
        type: f4
        if: ks__has_field_hear_threat_grow
      - id: feel_threat_grow
        type: f4
        if: ks__has_field_feel_threat_grow
      - id: threat_decrease_speed
        type: f4
        if: ks__has_field_threat_decrease_speed
      - id: threat_broadcast_range
        type: f4
        if: ks__has_field_threat_broadcast_range
      - id: view_attenuation
        type: ks__array_of__ai_point__length_u
        if: ks__has_field_view_attenuation
      - id: hear_attenuation
        type: ks__array_of__ai_point__length_u
        if: ks__has_field_hear_attenuation
      - id: resist_taunt_level
        type: ks__enum__taunt_level
        if: ks__has_field_resist_taunt_level
      - id: aux_score_change_target_cd
        type: f4
        if: ks__has_field_aux_score_change_target_cd
      - id: ability_global_value_score_system
        type: config_aits_ability_global_value_setting
        if: ks__has_field_ability_global_value_score_system
      - id: target_distance_score_system
        type: config_aits_target_distance_setting
        if: ks__has_field_target_distance_score_system
      - id: target_bearing_score_system
        type: config_aits_target_bearing_setting
        if: ks__has_field_target_bearing_score_system
    instances:
      ks__has_field_enable: # Field №0
        value: (ks__bit_field.value & 0b00000000000000000001) != 0
      ks__has_field_clear_threat_target_distance: # Field №1
        value: (ks__bit_field.value & 0b00000000000000000010) != 0
      ks__has_field_clear_threat_edge_distance: # Field №2
        value: (ks__bit_field.value & 0b00000000000000000100) != 0
      ks__has_field_clear_threat_by_lost_path: # Field №3
        value: (ks__bit_field.value & 0b00000000000000001000) != 0
      ks__has_field_clear_threat_by_target_out_of_zone: # Field №4
        value: (ks__bit_field.value & 0b00000000000000010000) != 0
      ks__has_field_clear_threat_timer_by_distance: # Field №5
        value: (ks__bit_field.value & 0b00000000000000100000) != 0
      ks__has_field_clear_threat_timer_by_lost_path: # Field №6
        value: (ks__bit_field.value & 0b00000000000001000000) != 0
      ks__has_field_clear_threat_timer_by_target_out_of_zone: # Field №7
        value: (ks__bit_field.value & 0b00000000000010000000) != 0
      ks__has_field_view_threat_grow: # Field №8
        value: (ks__bit_field.value & 0b00000000000100000000) != 0
      ks__has_field_hear_threat_grow: # Field №9
        value: (ks__bit_field.value & 0b00000000001000000000) != 0
      ks__has_field_feel_threat_grow: # Field №10
        value: (ks__bit_field.value & 0b00000000010000000000) != 0
      ks__has_field_threat_decrease_speed: # Field №11
        value: (ks__bit_field.value & 0b00000000100000000000) != 0
      ks__has_field_threat_broadcast_range: # Field №12
        value: (ks__bit_field.value & 0b00000001000000000000) != 0
      ks__has_field_view_attenuation: # Field №13
        value: (ks__bit_field.value & 0b00000010000000000000) != 0
      ks__has_field_hear_attenuation: # Field №14
        value: (ks__bit_field.value & 0b00000100000000000000) != 0
      ks__has_field_resist_taunt_level: # Field №15
        value: (ks__bit_field.value & 0b00001000000000000000) != 0
      ks__has_field_aux_score_change_target_cd: # Field №16
        value: (ks__bit_field.value & 0b00010000000000000000) != 0
      ks__has_field_ability_global_value_score_system: # Field №17
        value: (ks__bit_field.value & 0b00100000000000000000) != 0
      ks__has_field_target_distance_score_system: # Field №18
        value: (ks__bit_field.value & 0b01000000000000000000) != 0
      ks__has_field_target_bearing_score_system: # Field №19
        value: (ks__bit_field.value & 0b10000000000000000000) != 0
  config_ai_order_master_setting:
    seq:
      - id: ks__bit_field
        type: u1
      - id: enable
        type: u1
        if: ks__has_field_enable
      - id: servant_slot_amount
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_servant_slot_amount
    instances:
      ks__has_field_enable: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_servant_slot_amount: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_ai_order_servant_setting:
    seq:
      - id: ks__bit_field
        type: u1
      - id: enable
        type: u1
        if: ks__has_field_enable
    instances:
      ks__has_field_enable: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_ai_command_setting:
    seq:
      - id: ks__bit_field
        type: u1
      - id: accept_command_i_ds
        type: ks__array_of__aux_types__vlq_base128_le_s__length_u
        if: ks__has_field_accept_command_i_ds
    instances:
      ks__has_field_accept_command_i_ds: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_ai_order_setting:
    seq:
      - id: ks__bit_field
        type: u1
      - id: master
        type: config_ai_order_master_setting
        if: ks__has_field_master
      - id: servant
        type: config_ai_order_servant_setting
        if: ks__has_field_servant
      - id: command_setting
        type: config_ai_command_setting
        if: ks__has_field_command_setting
    instances:
      ks__has_field_master: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_servant: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_command_setting: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_ai_buddy_setting:
    seq:
      - id: ks__bit_field
        type: u1
      - id: enable
        type: u1
        if: ks__has_field_enable
      - id: buddy_config_i_ds
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_buddy_config_i_ds
    instances:
      ks__has_field_enable: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_buddy_config_i_ds: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_ai_defend_area:
    seq:
      - id: ks__bit_field
        type: u1
      - id: enable
        type: u1
        if: ks__has_field_enable
      - id: defend_range
        type: f4
        if: ks__has_field_defend_range
    instances:
      ks__has_field_enable: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_defend_range: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_ai_pose_control_item:
    seq:
      - id: ks__bit_field
        type: u1
      - id: min_time
        type: f4
        if: ks__has_field_min_time
      - id: max_time
        type: f4
        if: ks__has_field_max_time
      - id: pose_id
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_pose_id
      - id: random_pose
        type: ks__array_of__aux_types__vlq_base128_le_s__length_u
        if: ks__has_field_random_pose
      - id: switch_only_in_can_do_skill_state
        type: u1
        if: ks__has_field_switch_only_in_can_do_skill_state
    instances:
      ks__has_field_min_time: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_max_time: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_pose_id: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_random_pose: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_switch_only_in_can_do_skill_state: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  ks__array_of__config_ai_pose_control_item__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_ai_pose_control_item
        repeat: expr
        repeat-expr: length.value
  config_ai_pose_control:
    seq:
      - id: ks__bit_field
        type: u1
      - id: items
        type: ks__array_of__config_ai_pose_control_item__length_u
        if: ks__has_field_items
    instances:
      ks__has_field_items: # Field №0
        value: (ks__bit_field & 0b1) != 0
  ks__enum__move_category_ai:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: move_category_ai
  move_category_ai_comparer:
    seq: []
    instances: {}
  ks__enum__ai_basic_move_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: ai_basic_move_type
  ai_basic_move_type_comparer:
    seq: []
    instances: {}
  config_ai_snakelike_move:
    seq:
      - id: ks__bit_field
        type: u1
      - id: min_curvature
        type: f4
        if: ks__has_field_min_curvature
      - id: max_curvatrue
        type: f4
        if: ks__has_field_max_curvatrue
      - id: min_segment_distance
        type: f4
        if: ks__has_field_min_segment_distance
      - id: segment_distance
        type: f4
        if: ks__has_field_segment_distance
      - id: segment_count
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_segment_count
    instances:
      ks__has_field_min_curvature: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_max_curvatrue: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_min_segment_distance: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_segment_distance: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_segment_count: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  config_ai_move:
    seq:
      - id: ks__bit_field
        type: u1
      - id: enable
        type: u1
        if: ks__has_field_enable
      - id: move_category
        type: ks__enum__move_category_ai
        if: ks__has_field_move_category
      - id: use_nav_mesh
        type: u1
        if: ks__has_field_use_nav_mesh
      - id: nav_mesh_agent_name
        type: aux_types::string
        if: ks__has_field_nav_mesh_agent_name
      - id: almost_reached_distance_walk
        type: f4
        if: ks__has_field_almost_reached_distance_walk
      - id: almost_reached_distance_run
        type: f4
        if: ks__has_field_almost_reached_distance_run
      - id: snakelike_move_setting
        type: config_ai_snakelike_move
        if: ks__has_field_snakelike_move_setting
    instances:
      ks__has_field_enable: # Field №0
        value: (ks__bit_field & 0b0000001) != 0
      ks__has_field_move_category: # Field №1
        value: (ks__bit_field & 0b0000010) != 0
      ks__has_field_use_nav_mesh: # Field №2
        value: (ks__bit_field & 0b0000100) != 0
      ks__has_field_nav_mesh_agent_name: # Field №3
        value: (ks__bit_field & 0b0001000) != 0
      ks__has_field_almost_reached_distance_walk: # Field №4
        value: (ks__bit_field & 0b0010000) != 0
      ks__has_field_almost_reached_distance_run: # Field №5
        value: (ks__bit_field & 0b0100000) != 0
      ks__has_field_snakelike_move_setting: # Field №6
        value: (ks__bit_field & 0b1000000) != 0
  config_ai_fly_setting:
    seq:
      - id: ks__bit_field
        type: u1
      - id: enable
        type: u1
        if: ks__has_field_enable
      - id: floating_poses
        type: ks__array_of__aux_types__vlq_base128_le_s__length_u
        if: ks__has_field_floating_poses
    instances:
      ks__has_field_enable: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_floating_poses: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__enum__decision_archetype:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: decision_archetype
  decision_archetype_comparer:
    seq: []
    instances: {}
  config_ai_tactic_condition:
    seq:
      - id: ks__bit_field
        type: u1
      - id: pose
        type: ks__array_of__aux_types__vlq_base128_le_s__length_u
        if: ks__has_field_pose
    instances:
      ks__has_field_pose: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_ai_tactic_base_setting:
    seq:
      - id: ks__bit_field
        type: u1
      - id: enable
        type: u1
        if: ks__has_field_enable
      - id: condition
        type: config_ai_tactic_condition
        if: ks__has_field_condition
      - id: nerve_trigger
        type: ks__array_of__ks__enum__neuron_name__length_u
        if: ks__has_field_nerve_trigger
    instances:
      ks__has_field_enable: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_condition: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_nerve_trigger: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_ai_return_to_born_pos_data:
    seq:
      - id: ks__bit_field
        type: u1
      - id: speed_level
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_speed_level
      - id: fadeout_begin_time
        type: f4
        if: ks__has_field_fadeout_begin_time
      - id: fadeout_end_time
        type: f4
        if: ks__has_field_fadeout_end_time
      - id: spacial
        type: u1
        if: ks__has_field_spacial
      - id: perform_time
        type: f4
        if: ks__has_field_perform_time
    instances:
      ks__has_field_speed_level: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_fadeout_begin_time: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_fadeout_end_time: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_spacial: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_perform_time: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  config_ai_return_to_born_pos_setting_register:
    seq: []
    instances: {}
  ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_return_to_born_pos_data:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_s
      - id: value
        type: config_ai_return_to_born_pos_data
  ks__dict_of__aux_types__vlq_base128_le_s_config_ai_return_to_born_pos_data:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_return_to_born_pos_data
        repeat: expr
        repeat-expr: length.value
  config_ai_return_to_born_pos_setting:
    seq:
      - id: ks__base
        type: config_ai_tactic_base_setting
      - id: ks__bit_field
        type: u1
      - id: default_setting
        type: config_ai_return_to_born_pos_data
        if: ks__has_field_default_setting
      - id: specification
        type: ks__dict_of__aux_types__vlq_base128_le_s_config_ai_return_to_born_pos_data
        if: ks__has_field_specification
    instances:
      ks__has_field_default_setting: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_specification: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      enable:
        value: ks__base.enable
      condition:
        value: ks__base.condition
      nerve_trigger:
        value: ks__base.nerve_trigger
  config_ai_wander_data:
    seq:
      - id: ks__bit_field
        type: u1
      - id: speed_level
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_speed_level
      - id: turn_speed_override
        type: f4
        if: ks__has_field_turn_speed_override
      - id: cd_max
        type: f4
        if: ks__has_field_cd_max
      - id: cd_min
        type: f4
        if: ks__has_field_cd_min
      - id: distance_from_born
        type: f4
        if: ks__has_field_distance_from_born
      - id: distance_from_current_min
        type: f4
        if: ks__has_field_distance_from_current_min
      - id: distance_from_current_max
        type: f4
        if: ks__has_field_distance_from_current_max
      - id: move_type
        type: ks__enum__ai_basic_move_type
        if: ks__has_field_move_type
    instances:
      ks__has_field_speed_level: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_turn_speed_override: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_cd_max: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_cd_min: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_distance_from_born: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_distance_from_current_min: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_distance_from_current_max: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_move_type: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
  config_ai_wander_setting_register:
    seq: []
    instances: {}
  ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_wander_data:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_s
      - id: value
        type: config_ai_wander_data
  ks__dict_of__aux_types__vlq_base128_le_s_config_ai_wander_data:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_wander_data
        repeat: expr
        repeat-expr: length.value
  config_ai_wander_setting:
    seq:
      - id: ks__base
        type: config_ai_tactic_base_setting
      - id: ks__bit_field
        type: u1
      - id: threat_level_limit
        type: ks__array_of__aux_types__vlq_base128_le_s__length_u
        if: ks__has_field_threat_level_limit
      - id: default_setting
        type: config_ai_wander_data
        if: ks__has_field_default_setting
      - id: specification
        type: ks__dict_of__aux_types__vlq_base128_le_s_config_ai_wander_data
        if: ks__has_field_specification
    instances:
      ks__has_field_threat_level_limit: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_default_setting: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_specification: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      enable:
        value: ks__base.enable
      condition:
        value: ks__base.condition
      nerve_trigger:
        value: ks__base.nerve_trigger
  config_ai_follow_scripted_path_data:
    seq:
      - id: ks__bit_field
        type: u1
      - id: turn_speed_override_walk
        type: f4
        if: ks__has_field_turn_speed_override_walk
      - id: turn_speed_override_run
        type: f4
        if: ks__has_field_turn_speed_override_run
      - id: spacial
        type: u1
        if: ks__has_field_spacial
      - id: spacial_roll
        type: u1
        if: ks__has_field_spacial_roll
    instances:
      ks__has_field_turn_speed_override_walk: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_turn_speed_override_run: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_spacial: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_spacial_roll: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  config_ai_follow_scripted_path_setting_register:
    seq: []
    instances: {}
  ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_follow_scripted_path_data:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_s
      - id: value
        type: config_ai_follow_scripted_path_data
  ks__dict_of__aux_types__vlq_base128_le_s_config_ai_follow_scripted_path_data:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_follow_scripted_path_data
        repeat: expr
        repeat-expr: length.value
  config_ai_follow_scripted_path_setting:
    seq:
      - id: ks__base
        type: config_ai_tactic_base_setting
      - id: ks__bit_field
        type: u1
      - id: default_setting
        type: config_ai_follow_scripted_path_data
        if: ks__has_field_default_setting
      - id: specification
        type: ks__dict_of__aux_types__vlq_base128_le_s_config_ai_follow_scripted_path_data
        if: ks__has_field_specification
    instances:
      ks__has_field_default_setting: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_specification: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      enable:
        value: ks__base.enable
      condition:
        value: ks__base.condition
      nerve_trigger:
        value: ks__base.nerve_trigger
  config_ai_follow_server_route_data:
    seq:
      - id: ks__bit_field
        type: u1
      - id: speed_level
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_speed_level
      - id: turn_speed_override_walk
        type: f4
        if: ks__has_field_turn_speed_override_walk
      - id: turn_speed_override_run
        type: f4
        if: ks__has_field_turn_speed_override_run
      - id: check_range
        type: f4
        if: ks__has_field_check_range
      - id: special
        type: u1
        if: ks__has_field_special
    instances:
      ks__has_field_speed_level: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_turn_speed_override_walk: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_turn_speed_override_run: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_check_range: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_special: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  config_ai_follow_server_route_setting_register:
    seq: []
    instances: {}
  ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_follow_server_route_data:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_s
      - id: value
        type: config_ai_follow_server_route_data
  ks__dict_of__aux_types__vlq_base128_le_s_config_ai_follow_server_route_data:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_follow_server_route_data
        repeat: expr
        repeat-expr: length.value
  config_ai_follow_server_route_setting:
    seq:
      - id: ks__base
        type: config_ai_tactic_base_setting
      - id: ks__bit_field
        type: u1
      - id: default_setting
        type: config_ai_follow_server_route_data
        if: ks__has_field_default_setting
      - id: specification
        type: ks__dict_of__aux_types__vlq_base128_le_s_config_ai_follow_server_route_data
        if: ks__has_field_specification
    instances:
      ks__has_field_default_setting: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_specification: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      enable:
        value: ks__base.enable
      condition:
        value: ks__base.condition
      nerve_trigger:
        value: ks__base.nerve_trigger
  config_ai_investigate_data:
    seq:
      - id: ks__bit_field
        type: u1
      - id: speed_level
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_speed_level
      - id: look_around_time
        type: f4
        if: ks__has_field_look_around_time
      - id: spacial
        type: u1
        if: ks__has_field_spacial
    instances:
      ks__has_field_speed_level: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_look_around_time: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_spacial: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_ai_investigate_setting_register:
    seq: []
    instances: {}
  ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_investigate_data:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_s
      - id: value
        type: config_ai_investigate_data
  ks__dict_of__aux_types__vlq_base128_le_s_config_ai_investigate_data:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_investigate_data
        repeat: expr
        repeat-expr: length.value
  config_ai_investigate_setting:
    seq:
      - id: ks__base
        type: config_ai_tactic_base_setting
      - id: ks__bit_field
        type: u1
      - id: default_setting
        type: config_ai_investigate_data
        if: ks__has_field_default_setting
      - id: specification
        type: ks__dict_of__aux_types__vlq_base128_le_s_config_ai_investigate_data
        if: ks__has_field_specification
    instances:
      ks__has_field_default_setting: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_specification: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      enable:
        value: ks__base.enable
      condition:
        value: ks__base.condition
      nerve_trigger:
        value: ks__base.nerve_trigger
  config_ai_pick_action_point_criteria:
    seq:
      - id: ks__bit_field
        type: u1
      - id: point_type
        type: ks__enum__action_point_type
        if: ks__has_field_point_type
      - id: detect_distance
        type: f4
        if: ks__has_field_detect_distance
      - id: speed_level
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_speed_level
      - id: pose
        type: ks__array_of__aux_types__vlq_base128_le_s__length_u
        if: ks__has_field_pose
      - id: nerve_trigger
        type: ks__array_of__ks__enum__neuron_name__length_u
        if: ks__has_field_nerve_trigger
      - id: skill_id
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_skill_id
    instances:
      ks__has_field_point_type: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_detect_distance: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_speed_level: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_pose: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_nerve_trigger: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_skill_id: # Field №5
        value: (ks__bit_field & 0b100000) != 0
  ks__array_of__config_ai_pick_action_point_criteria__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_ai_pick_action_point_criteria
        repeat: expr
        repeat-expr: length.value
  config_ai_react_action_point_data:
    seq:
      - id: ks__bit_field
        type: u1
      - id: react_list
        type: ks__array_of__config_ai_pick_action_point_criteria__length_u
        if: ks__has_field_react_list
    instances:
      ks__has_field_react_list: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_ai_react_action_point_setting_register:
    seq: []
    instances: {}
  ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_react_action_point_data:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_s
      - id: value
        type: config_ai_react_action_point_data
  ks__dict_of__aux_types__vlq_base128_le_s_config_ai_react_action_point_data:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_react_action_point_data
        repeat: expr
        repeat-expr: length.value
  config_ai_react_action_point_setting:
    seq:
      - id: ks__base
        type: config_ai_tactic_base_setting
      - id: ks__bit_field
        type: u1
      - id: default_setting
        type: config_ai_react_action_point_data
        if: ks__has_field_default_setting
      - id: specification
        type: ks__dict_of__aux_types__vlq_base128_le_s_config_ai_react_action_point_data
        if: ks__has_field_specification
    instances:
      ks__has_field_default_setting: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_specification: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      enable:
        value: ks__base.enable
      condition:
        value: ks__base.condition
      nerve_trigger:
        value: ks__base.nerve_trigger
  config_ai_patrol_follow_data:
    seq:
      - id: ks__bit_field
        type: u1
      - id: speed_level
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_speed_level
      - id: inner_distance
        type: f4
        if: ks__has_field_inner_distance
      - id: speed_level_inner
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_speed_level_inner
      - id: out_distance
        type: f4
        if: ks__has_field_out_distance
      - id: stop_distance
        type: f4
        if: ks__has_field_stop_distance
    instances:
      ks__has_field_speed_level: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_inner_distance: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_speed_level_inner: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_out_distance: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_stop_distance: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  config_ai_patrol_follow_setting_register:
    seq: []
    instances: {}
  ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_patrol_follow_data:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_s
      - id: value
        type: config_ai_patrol_follow_data
  ks__dict_of__aux_types__vlq_base128_le_s_config_ai_patrol_follow_data:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_patrol_follow_data
        repeat: expr
        repeat-expr: length.value
  config_ai_patrol_follow_setting:
    seq:
      - id: ks__base
        type: config_ai_tactic_base_setting
      - id: ks__bit_field
        type: u1
      - id: default_setting
        type: config_ai_patrol_follow_data
        if: ks__has_field_default_setting
      - id: specification
        type: ks__dict_of__aux_types__vlq_base128_le_s_config_ai_patrol_follow_data
        if: ks__has_field_specification
    instances:
      ks__has_field_default_setting: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_specification: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      enable:
        value: ks__base.enable
      condition:
        value: ks__base.condition
      nerve_trigger:
        value: ks__base.nerve_trigger
  config_ai_combat_follow_move_data:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: start_distance
        type: f4
        if: ks__has_field_start_distance
      - id: stop_distance
        type: f4
        if: ks__has_field_stop_distance
      - id: middle_distance
        type: f4
        if: ks__has_field_middle_distance
      - id: inner_distance
        type: f4
        if: ks__has_field_inner_distance
      - id: speed_level_outer
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_speed_level_outer
      - id: speed_level_middle
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_speed_level_middle
      - id: speed_level_inner
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_speed_level_inner
      - id: start_angle
        type: f4
        if: ks__has_field_start_angle
      - id: outer_angle
        type: f4
        if: ks__has_field_outer_angle
      - id: turn_speed_override
        type: f4
        if: ks__has_field_turn_speed_override
      - id: turn_speed_override_outer
        type: f4
        if: ks__has_field_turn_speed_override_outer
      - id: use_melee_slot
        type: u1
        if: ks__has_field_use_melee_slot
      - id: move_out_damp_range
        type: f4
        if: ks__has_field_move_out_damp_range
    instances:
      ks__has_field_start_distance: # Field №0
        value: (ks__bit_field.value & 0b0000000000001) != 0
      ks__has_field_stop_distance: # Field №1
        value: (ks__bit_field.value & 0b0000000000010) != 0
      ks__has_field_middle_distance: # Field №2
        value: (ks__bit_field.value & 0b0000000000100) != 0
      ks__has_field_inner_distance: # Field №3
        value: (ks__bit_field.value & 0b0000000001000) != 0
      ks__has_field_speed_level_outer: # Field №4
        value: (ks__bit_field.value & 0b0000000010000) != 0
      ks__has_field_speed_level_middle: # Field №5
        value: (ks__bit_field.value & 0b0000000100000) != 0
      ks__has_field_speed_level_inner: # Field №6
        value: (ks__bit_field.value & 0b0000001000000) != 0
      ks__has_field_start_angle: # Field №7
        value: (ks__bit_field.value & 0b0000010000000) != 0
      ks__has_field_outer_angle: # Field №8
        value: (ks__bit_field.value & 0b0000100000000) != 0
      ks__has_field_turn_speed_override: # Field №9
        value: (ks__bit_field.value & 0b0001000000000) != 0
      ks__has_field_turn_speed_override_outer: # Field №10
        value: (ks__bit_field.value & 0b0010000000000) != 0
      ks__has_field_use_melee_slot: # Field №11
        value: (ks__bit_field.value & 0b0100000000000) != 0
      ks__has_field_move_out_damp_range: # Field №12
        value: (ks__bit_field.value & 0b1000000000000) != 0
  config_ai_combat_follow_move_setting_register:
    seq: []
    instances: {}
  ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_combat_follow_move_data:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_s
      - id: value
        type: config_ai_combat_follow_move_data
  ks__dict_of__aux_types__vlq_base128_le_s_config_ai_combat_follow_move_data:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_combat_follow_move_data
        repeat: expr
        repeat-expr: length.value
  config_ai_combat_follow_move_setting:
    seq:
      - id: ks__base
        type: config_ai_tactic_base_setting
      - id: ks__bit_field
        type: u1
      - id: default_setting
        type: config_ai_combat_follow_move_data
        if: ks__has_field_default_setting
      - id: specification
        type: ks__dict_of__aux_types__vlq_base128_le_s_config_ai_combat_follow_move_data
        if: ks__has_field_specification
    instances:
      ks__has_field_default_setting: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_specification: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      enable:
        value: ks__base.enable
      condition:
        value: ks__base.condition
      nerve_trigger:
        value: ks__base.nerve_trigger
  config_ai_melee_charge_data:
    seq:
      - id: ks__bit_field
        type: u1
      - id: speed_level
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_speed_level
      - id: turn_speed_override
        type: f4
        if: ks__has_field_turn_speed_override
      - id: start_distance_min
        type: f4
        if: ks__has_field_start_distance_min
      - id: start_distance_max
        type: f4
        if: ks__has_field_start_distance_max
      - id: stop_distance
        type: f4
        if: ks__has_field_stop_distance
      - id: inner_distance
        type: f4
        if: ks__has_field_inner_distance
      - id: speed_level_inner
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_speed_level_inner
      - id: use_melee_slot
        type: u1
        if: ks__has_field_use_melee_slot
    instances:
      ks__has_field_speed_level: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_turn_speed_override: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_start_distance_min: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_start_distance_max: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_stop_distance: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_inner_distance: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_speed_level_inner: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_use_melee_slot: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
  config_ai_melee_charge_setting_register:
    seq: []
    instances: {}
  ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_melee_charge_data:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_s
      - id: value
        type: config_ai_melee_charge_data
  ks__dict_of__aux_types__vlq_base128_le_s_config_ai_melee_charge_data:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_melee_charge_data
        repeat: expr
        repeat-expr: length.value
  config_ai_melee_charge_setting:
    seq:
      - id: ks__base
        type: config_ai_tactic_base_setting
      - id: ks__bit_field
        type: u1
      - id: default_setting
        type: config_ai_melee_charge_data
        if: ks__has_field_default_setting
      - id: specification
        type: ks__dict_of__aux_types__vlq_base128_le_s_config_ai_melee_charge_data
        if: ks__has_field_specification
    instances:
      ks__has_field_default_setting: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_specification: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      enable:
        value: ks__base.enable
      condition:
        value: ks__base.condition
      nerve_trigger:
        value: ks__base.nerve_trigger
  config_ai_facing_move_weight:
    seq:
      - id: ks__bit_field
        type: u1
      - id: stop
        type: f4
        if: ks__has_field_stop
      - id: forward
        type: f4
        if: ks__has_field_forward
      - id: back
        type: f4
        if: ks__has_field_back
      - id: left
        type: f4
        if: ks__has_field_left
      - id: right
        type: f4
        if: ks__has_field_right
    instances:
      ks__has_field_stop: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_forward: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_back: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_left: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_right: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  config_ai_facing_move_data:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: speed_level
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_speed_level
      - id: range_min
        type: f4
        if: ks__has_field_range_min
      - id: range_max
        type: f4
        if: ks__has_field_range_max
      - id: rest_time_min
        type: f4
        if: ks__has_field_rest_time_min
      - id: rest_time_max
        type: f4
        if: ks__has_field_rest_time_max
      - id: facing_move_turn_interval
        type: f4
        if: ks__has_field_facing_move_turn_interval
      - id: facing_move_min_avoidance_velecity
        type: f4
        if: ks__has_field_facing_move_min_avoidance_velecity
      - id: obstacle_detect_range
        type: f4
        if: ks__has_field_obstacle_detect_range
      - id: facing_move_weight
        type: config_ai_facing_move_weight
        if: ks__has_field_facing_move_weight
    instances:
      ks__has_field_speed_level: # Field №0
        value: (ks__bit_field.value & 0b000000001) != 0
      ks__has_field_range_min: # Field №1
        value: (ks__bit_field.value & 0b000000010) != 0
      ks__has_field_range_max: # Field №2
        value: (ks__bit_field.value & 0b000000100) != 0
      ks__has_field_rest_time_min: # Field №3
        value: (ks__bit_field.value & 0b000001000) != 0
      ks__has_field_rest_time_max: # Field №4
        value: (ks__bit_field.value & 0b000010000) != 0
      ks__has_field_facing_move_turn_interval: # Field №5
        value: (ks__bit_field.value & 0b000100000) != 0
      ks__has_field_facing_move_min_avoidance_velecity: # Field №6
        value: (ks__bit_field.value & 0b001000000) != 0
      ks__has_field_obstacle_detect_range: # Field №7
        value: (ks__bit_field.value & 0b010000000) != 0
      ks__has_field_facing_move_weight: # Field №8
        value: (ks__bit_field.value & 0b100000000) != 0
  config_ai_facing_move_setting_register:
    seq: []
    instances: {}
  ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_facing_move_data:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_s
      - id: value
        type: config_ai_facing_move_data
  ks__dict_of__aux_types__vlq_base128_le_s_config_ai_facing_move_data:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_facing_move_data
        repeat: expr
        repeat-expr: length.value
  config_ai_facing_move_setting:
    seq:
      - id: ks__base
        type: config_ai_tactic_base_setting
      - id: ks__bit_field
        type: u1
      - id: default_setting
        type: config_ai_facing_move_data
        if: ks__has_field_default_setting
      - id: specification
        type: ks__dict_of__aux_types__vlq_base128_le_s_config_ai_facing_move_data
        if: ks__has_field_specification
    instances:
      ks__has_field_default_setting: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_specification: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      enable:
        value: ks__base.enable
      condition:
        value: ks__base.condition
      nerve_trigger:
        value: ks__base.nerve_trigger
  config_ai_surround_data:
    seq:
      - id: ks__bit_field
        type: u1
      - id: speed_level
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_speed_level
      - id: turn_speed_override
        type: f4
        if: ks__has_field_turn_speed_override
      - id: start_distance
        type: f4
        if: ks__has_field_start_distance
      - id: surround_radius
        type: f4
        if: ks__has_field_surround_radius
      - id: turning_states
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_turning_states
      - id: detect_front_distance
        type: f4
        if: ks__has_field_detect_front_distance
      - id: detect_front_offset_up
        type: f4
        if: ks__has_field_detect_front_offset_up
      - id: detect_front_offset_forward
        type: f4
        if: ks__has_field_detect_front_offset_forward
    instances:
      ks__has_field_speed_level: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_turn_speed_override: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_start_distance: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_surround_radius: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_turning_states: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_detect_front_distance: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_detect_front_offset_up: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_detect_front_offset_forward: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
  config_ai_surround_setting_register:
    seq: []
    instances: {}
  ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_surround_data:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_s
      - id: value
        type: config_ai_surround_data
  ks__dict_of__aux_types__vlq_base128_le_s_config_ai_surround_data:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_surround_data
        repeat: expr
        repeat-expr: length.value
  config_ai_surround_setting:
    seq:
      - id: ks__base
        type: config_ai_tactic_base_setting
      - id: ks__bit_field
        type: u1
      - id: default_setting
        type: config_ai_surround_data
        if: ks__has_field_default_setting
      - id: specification
        type: ks__dict_of__aux_types__vlq_base128_le_s_config_ai_surround_data
        if: ks__has_field_specification
    instances:
      ks__has_field_default_setting: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_specification: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      enable:
        value: ks__base.enable
      condition:
        value: ks__base.condition
      nerve_trigger:
        value: ks__base.nerve_trigger
  config_ai_group_surround_data:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: speed_level
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_speed_level
      - id: turn_speed_override
        type: f4
        if: ks__has_field_turn_speed_override
      - id: start_distance
        type: f4
        if: ks__has_field_start_distance
      - id: surround_radius
        type: f4
        if: ks__has_field_surround_radius
      - id: turning_states
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_turning_states
      - id: detect_front_distance
        type: f4
        if: ks__has_field_detect_front_distance
      - id: detect_front_offset_up
        type: f4
        if: ks__has_field_detect_front_offset_up
      - id: cd
        type: f4
        if: ks__has_field_cd
      - id: exit_distance_max
        type: f4
        if: ks__has_field_exit_distance_max
      - id: exit_distance_min
        type: f4
        if: ks__has_field_exit_distance_min
      - id: clock_wise_weight
        type: f4
        if: ks__has_field_clock_wise_weight
      - id: detect_collision_radius
        type: f4
        if: ks__has_field_detect_collision_radius
      - id: detect_collision_distance
        type: f4
        if: ks__has_field_detect_collision_distance
    instances:
      ks__has_field_speed_level: # Field №0
        value: (ks__bit_field.value & 0b0000000000001) != 0
      ks__has_field_turn_speed_override: # Field №1
        value: (ks__bit_field.value & 0b0000000000010) != 0
      ks__has_field_start_distance: # Field №2
        value: (ks__bit_field.value & 0b0000000000100) != 0
      ks__has_field_surround_radius: # Field №3
        value: (ks__bit_field.value & 0b0000000001000) != 0
      ks__has_field_turning_states: # Field №4
        value: (ks__bit_field.value & 0b0000000010000) != 0
      ks__has_field_detect_front_distance: # Field №5
        value: (ks__bit_field.value & 0b0000000100000) != 0
      ks__has_field_detect_front_offset_up: # Field №6
        value: (ks__bit_field.value & 0b0000001000000) != 0
      ks__has_field_cd: # Field №7
        value: (ks__bit_field.value & 0b0000010000000) != 0
      ks__has_field_exit_distance_max: # Field №8
        value: (ks__bit_field.value & 0b0000100000000) != 0
      ks__has_field_exit_distance_min: # Field №9
        value: (ks__bit_field.value & 0b0001000000000) != 0
      ks__has_field_clock_wise_weight: # Field №10
        value: (ks__bit_field.value & 0b0010000000000) != 0
      ks__has_field_detect_collision_radius: # Field №11
        value: (ks__bit_field.value & 0b0100000000000) != 0
      ks__has_field_detect_collision_distance: # Field №12
        value: (ks__bit_field.value & 0b1000000000000) != 0
  config_ai_group_surround_setting_register:
    seq: []
    instances: {}
  ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_group_surround_data:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_s
      - id: value
        type: config_ai_group_surround_data
  ks__dict_of__aux_types__vlq_base128_le_s_config_ai_group_surround_data:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_group_surround_data
        repeat: expr
        repeat-expr: length.value
  config_ai_group_surround_setting:
    seq:
      - id: ks__base
        type: config_ai_tactic_base_setting
      - id: ks__bit_field
        type: u1
      - id: default_setting
        type: config_ai_group_surround_data
        if: ks__has_field_default_setting
      - id: specification
        type: ks__dict_of__aux_types__vlq_base128_le_s_config_ai_group_surround_data
        if: ks__has_field_specification
    instances:
      ks__has_field_default_setting: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_specification: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      enable:
        value: ks__base.enable
      condition:
        value: ks__base.condition
      nerve_trigger:
        value: ks__base.nerve_trigger
  config_ai_find_back_data:
    seq:
      - id: ks__bit_field
        type: u1
      - id: speed_level
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_speed_level
      - id: turn_speed_override
        type: f4
        if: ks__has_field_turn_speed_override
      - id: cd
        type: f4
        if: ks__has_field_cd
      - id: overtime
        type: f4
        if: ks__has_field_overtime
      - id: target_lr_space
        type: f4
        if: ks__has_field_target_lr_space
      - id: target_back_space
        type: f4
        if: ks__has_field_target_back_space
    instances:
      ks__has_field_speed_level: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_turn_speed_override: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_cd: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_overtime: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_target_lr_space: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_target_back_space: # Field №5
        value: (ks__bit_field & 0b100000) != 0
  config_ai_find_back_setting_register:
    seq: []
    instances: {}
  ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_find_back_data:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_s
      - id: value
        type: config_ai_find_back_data
  ks__dict_of__aux_types__vlq_base128_le_s_config_ai_find_back_data:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_find_back_data
        repeat: expr
        repeat-expr: length.value
  config_ai_find_back_setting:
    seq:
      - id: ks__base
        type: config_ai_tactic_base_setting
      - id: ks__bit_field
        type: u1
      - id: default_setting
        type: config_ai_find_back_data
        if: ks__has_field_default_setting
      - id: specification
        type: ks__dict_of__aux_types__vlq_base128_le_s_config_ai_find_back_data
        if: ks__has_field_specification
    instances:
      ks__has_field_default_setting: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_specification: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      enable:
        value: ks__base.enable
      condition:
        value: ks__base.condition
      nerve_trigger:
        value: ks__base.nerve_trigger
  config_ai_combat_fixed_move_data:
    seq:
      - id: ks__bit_field
        type: u1
      - id: point_type
        type: ks__enum__action_point_type
        if: ks__has_field_point_type
      - id: cd_action_point
        type: f4
        if: ks__has_field_cd_action_point
      - id: speed_level
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_speed_level
      - id: turn_speed_override
        type: f4
        if: ks__has_field_turn_speed_override
      - id: detect_distance
        type: f4
        if: ks__has_field_detect_distance
      - id: overtime
        type: f4
        if: ks__has_field_overtime
      - id: skill_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_skill_id
    instances:
      ks__has_field_point_type: # Field №0
        value: (ks__bit_field & 0b0000001) != 0
      ks__has_field_cd_action_point: # Field №1
        value: (ks__bit_field & 0b0000010) != 0
      ks__has_field_speed_level: # Field №2
        value: (ks__bit_field & 0b0000100) != 0
      ks__has_field_turn_speed_override: # Field №3
        value: (ks__bit_field & 0b0001000) != 0
      ks__has_field_detect_distance: # Field №4
        value: (ks__bit_field & 0b0010000) != 0
      ks__has_field_overtime: # Field №5
        value: (ks__bit_field & 0b0100000) != 0
      ks__has_field_skill_id: # Field №6
        value: (ks__bit_field & 0b1000000) != 0
  config_ai_combat_fixed_move_setting_register:
    seq: []
    instances: {}
  ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_combat_fixed_move_data:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_s
      - id: value
        type: config_ai_combat_fixed_move_data
  ks__dict_of__aux_types__vlq_base128_le_s_config_ai_combat_fixed_move_data:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_combat_fixed_move_data
        repeat: expr
        repeat-expr: length.value
  config_ai_combat_fixed_move_setting:
    seq:
      - id: ks__base
        type: config_ai_tactic_base_setting
      - id: ks__bit_field
        type: u1
      - id: default_setting
        type: config_ai_combat_fixed_move_data
        if: ks__has_field_default_setting
      - id: specification
        type: ks__dict_of__aux_types__vlq_base128_le_s_config_ai_combat_fixed_move_data
        if: ks__has_field_specification
    instances:
      ks__has_field_default_setting: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_specification: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      enable:
        value: ks__base.enable
      condition:
        value: ks__base.condition
      nerve_trigger:
        value: ks__base.nerve_trigger
  config_ai_crab_move_data:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: speed_level
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_speed_level
      - id: turn_speed_override
        type: f4
        if: ks__has_field_turn_speed_override
      - id: radius_min
        type: f4
        if: ks__has_field_radius_min
      - id: radius_max
        type: f4
        if: ks__has_field_radius_max
      - id: move_time_min
        type: f4
        if: ks__has_field_move_time_min
      - id: move_time_max
        type: f4
        if: ks__has_field_move_time_max
      - id: rest_time_min
        type: f4
        if: ks__has_field_rest_time_min
      - id: rest_time_max
        type: f4
        if: ks__has_field_rest_time_max
      - id: detect_front_distance
        type: f4
        if: ks__has_field_detect_front_distance
    instances:
      ks__has_field_speed_level: # Field №0
        value: (ks__bit_field.value & 0b000000001) != 0
      ks__has_field_turn_speed_override: # Field №1
        value: (ks__bit_field.value & 0b000000010) != 0
      ks__has_field_radius_min: # Field №2
        value: (ks__bit_field.value & 0b000000100) != 0
      ks__has_field_radius_max: # Field №3
        value: (ks__bit_field.value & 0b000001000) != 0
      ks__has_field_move_time_min: # Field №4
        value: (ks__bit_field.value & 0b000010000) != 0
      ks__has_field_move_time_max: # Field №5
        value: (ks__bit_field.value & 0b000100000) != 0
      ks__has_field_rest_time_min: # Field №6
        value: (ks__bit_field.value & 0b001000000) != 0
      ks__has_field_rest_time_max: # Field №7
        value: (ks__bit_field.value & 0b010000000) != 0
      ks__has_field_detect_front_distance: # Field №8
        value: (ks__bit_field.value & 0b100000000) != 0
  config_ai_crab_move_setting_register:
    seq: []
    instances: {}
  ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_crab_move_data:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_s
      - id: value
        type: config_ai_crab_move_data
  ks__dict_of__aux_types__vlq_base128_le_s_config_ai_crab_move_data:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_crab_move_data
        repeat: expr
        repeat-expr: length.value
  config_ai_crab_move_setting:
    seq:
      - id: ks__base
        type: config_ai_tactic_base_setting
      - id: ks__bit_field
        type: u1
      - id: default_setting
        type: config_ai_crab_move_data
        if: ks__has_field_default_setting
      - id: specification
        type: ks__dict_of__aux_types__vlq_base128_le_s_config_ai_crab_move_data
        if: ks__has_field_specification
    instances:
      ks__has_field_default_setting: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_specification: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      enable:
        value: ks__base.enable
      condition:
        value: ks__base.condition
      nerve_trigger:
        value: ks__base.nerve_trigger
  config_ai_flee_data:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: speed_level
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_speed_level
      - id: turn_speed_override
        type: f4
        if: ks__has_field_turn_speed_override
      - id: cd
        type: f4
        if: ks__has_field_cd
      - id: trigger_distance
        type: f4
        if: ks__has_field_trigger_distance
      - id: flee_angle
        type: f4
        if: ks__has_field_flee_angle
      - id: flee_number_min
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_flee_number_min
      - id: flee_number_max
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_flee_number_max
      - id: flee_distance_min
        type: f4
        if: ks__has_field_flee_distance_min
      - id: flee_distance_max
        type: f4
        if: ks__has_field_flee_distance_max
      - id: turn_to_target
        type: u1
        if: ks__has_field_turn_to_target
      - id: restricted_by_defend_area
        type: u1
        if: ks__has_field_restricted_by_defend_area
      - id: expand_flee_angle_when_blocked
        type: u1
        if: ks__has_field_expand_flee_angle_when_blocked
      - id: kill_self_time
        type: f4
        if: ks__has_field_kill_self_time
    instances:
      ks__has_field_speed_level: # Field №0
        value: (ks__bit_field.value & 0b0000000000001) != 0
      ks__has_field_turn_speed_override: # Field №1
        value: (ks__bit_field.value & 0b0000000000010) != 0
      ks__has_field_cd: # Field №2
        value: (ks__bit_field.value & 0b0000000000100) != 0
      ks__has_field_trigger_distance: # Field №3
        value: (ks__bit_field.value & 0b0000000001000) != 0
      ks__has_field_flee_angle: # Field №4
        value: (ks__bit_field.value & 0b0000000010000) != 0
      ks__has_field_flee_number_min: # Field №5
        value: (ks__bit_field.value & 0b0000000100000) != 0
      ks__has_field_flee_number_max: # Field №6
        value: (ks__bit_field.value & 0b0000001000000) != 0
      ks__has_field_flee_distance_min: # Field №7
        value: (ks__bit_field.value & 0b0000010000000) != 0
      ks__has_field_flee_distance_max: # Field №8
        value: (ks__bit_field.value & 0b0000100000000) != 0
      ks__has_field_turn_to_target: # Field №9
        value: (ks__bit_field.value & 0b0001000000000) != 0
      ks__has_field_restricted_by_defend_area: # Field №10
        value: (ks__bit_field.value & 0b0010000000000) != 0
      ks__has_field_expand_flee_angle_when_blocked: # Field №11
        value: (ks__bit_field.value & 0b0100000000000) != 0
      ks__has_field_kill_self_time: # Field №12
        value: (ks__bit_field.value & 0b1000000000000) != 0
  config_ai_flee_setting_register:
    seq: []
    instances: {}
  ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_flee_data:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_s
      - id: value
        type: config_ai_flee_data
  ks__dict_of__aux_types__vlq_base128_le_s_config_ai_flee_data:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_flee_data
        repeat: expr
        repeat-expr: length.value
  config_ai_flee_setting:
    seq:
      - id: ks__base
        type: config_ai_tactic_base_setting
      - id: ks__bit_field
        type: u1
      - id: default_setting
        type: config_ai_flee_data
        if: ks__has_field_default_setting
      - id: specification
        type: ks__dict_of__aux_types__vlq_base128_le_s_config_ai_flee_data
        if: ks__has_field_specification
    instances:
      ks__has_field_default_setting: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_specification: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      enable:
        value: ks__base.enable
      condition:
        value: ks__base.condition
      nerve_trigger:
        value: ks__base.nerve_trigger
  config_ai_flee_on_block_avatar_landing_data:
    seq:
      - id: ks__bit_field
        type: u1
      - id: speed_level
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_speed_level
      - id: turn_speed_override
        type: f4
        if: ks__has_field_turn_speed_override
      - id: trigger_distance
        type: f4
        if: ks__has_field_trigger_distance
      - id: flee_angle
        type: f4
        if: ks__has_field_flee_angle
      - id: flee_distance_min
        type: f4
        if: ks__has_field_flee_distance_min
      - id: flee_distance_max
        type: f4
        if: ks__has_field_flee_distance_max
      - id: neuron_trigger_cd
        type: f4
        if: ks__has_field_neuron_trigger_cd
    instances:
      ks__has_field_speed_level: # Field №0
        value: (ks__bit_field & 0b0000001) != 0
      ks__has_field_turn_speed_override: # Field №1
        value: (ks__bit_field & 0b0000010) != 0
      ks__has_field_trigger_distance: # Field №2
        value: (ks__bit_field & 0b0000100) != 0
      ks__has_field_flee_angle: # Field №3
        value: (ks__bit_field & 0b0001000) != 0
      ks__has_field_flee_distance_min: # Field №4
        value: (ks__bit_field & 0b0010000) != 0
      ks__has_field_flee_distance_max: # Field №5
        value: (ks__bit_field & 0b0100000) != 0
      ks__has_field_neuron_trigger_cd: # Field №6
        value: (ks__bit_field & 0b1000000) != 0
  config_ai_flee_on_block_avatar_landing_setting_register:
    seq: []
    instances: {}
  ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_flee_on_block_avatar_landing_data:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_s
      - id: value
        type: config_ai_flee_on_block_avatar_landing_data
  ks__dict_of__aux_types__vlq_base128_le_s_config_ai_flee_on_block_avatar_landing_data:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_flee_on_block_avatar_landing_data
        repeat: expr
        repeat-expr: length.value
  config_ai_flee_on_block_avatar_landing_setting:
    seq:
      - id: ks__base
        type: config_ai_tactic_base_setting
      - id: ks__bit_field
        type: u1
      - id: default_setting
        type: config_ai_flee_on_block_avatar_landing_data
        if: ks__has_field_default_setting
      - id: specification
        type: ks__dict_of__aux_types__vlq_base128_le_s_config_ai_flee_on_block_avatar_landing_data
        if: ks__has_field_specification
    instances:
      ks__has_field_default_setting: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_specification: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      enable:
        value: ks__base.enable
      condition:
        value: ks__base.condition
      nerve_trigger:
        value: ks__base.nerve_trigger
  config_ai_spacial_chase_data:
    seq:
      - id: ks__bit_field
        type: u1
      - id: speed_level
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_speed_level
      - id: chase_start_distance
        type: f4
        if: ks__has_field_chase_start_distance
      - id: chase_stop_distance
        type: f4
        if: ks__has_field_chase_stop_distance
      - id: y_offset_min
        type: f4
        if: ks__has_field_y_offset_min
      - id: y_offset_max
        type: f4
        if: ks__has_field_y_offset_max
      - id: segment_distance
        type: f4
        if: ks__has_field_segment_distance
    instances:
      ks__has_field_speed_level: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_chase_start_distance: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_chase_stop_distance: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_y_offset_min: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_y_offset_max: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_segment_distance: # Field №5
        value: (ks__bit_field & 0b100000) != 0
  config_ai_spacial_chase_setting_register:
    seq: []
    instances: {}
  ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_spacial_chase_data:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_s
      - id: value
        type: config_ai_spacial_chase_data
  ks__dict_of__aux_types__vlq_base128_le_s_config_ai_spacial_chase_data:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_spacial_chase_data
        repeat: expr
        repeat-expr: length.value
  config_ai_spacial_chase_setting:
    seq:
      - id: ks__base
        type: config_ai_tactic_base_setting
      - id: ks__bit_field
        type: u1
      - id: default_setting
        type: config_ai_spacial_chase_data
        if: ks__has_field_default_setting
      - id: specification
        type: ks__dict_of__aux_types__vlq_base128_le_s_config_ai_spacial_chase_data
        if: ks__has_field_specification
    instances:
      ks__has_field_default_setting: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_specification: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      enable:
        value: ks__base.enable
      condition:
        value: ks__base.condition
      nerve_trigger:
        value: ks__base.nerve_trigger
  config_ai_spacial_probe_data:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: speed_level
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_speed_level
      - id: turn_speed_override
        type: f4
        if: ks__has_field_turn_speed_override
      - id: cd_max
        type: f4
        if: ks__has_field_cd_max
      - id: cd_min
        type: f4
        if: ks__has_field_cd_min
      - id: terrain_offset_min
        type: f4
        if: ks__has_field_terrain_offset_min
      - id: terrain_offset_max
        type: f4
        if: ks__has_field_terrain_offset_max
      - id: distance_from_born
        type: f4
        if: ks__has_field_distance_from_born
      - id: distance_from_current_min
        type: f4
        if: ks__has_field_distance_from_current_min
      - id: distance_from_current_max
        type: f4
        if: ks__has_field_distance_from_current_max
      - id: probe_number_min
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_probe_number_min
      - id: probe_number_max
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_probe_number_max
    instances:
      ks__has_field_speed_level: # Field №0
        value: (ks__bit_field.value & 0b00000000001) != 0
      ks__has_field_turn_speed_override: # Field №1
        value: (ks__bit_field.value & 0b00000000010) != 0
      ks__has_field_cd_max: # Field №2
        value: (ks__bit_field.value & 0b00000000100) != 0
      ks__has_field_cd_min: # Field №3
        value: (ks__bit_field.value & 0b00000001000) != 0
      ks__has_field_terrain_offset_min: # Field №4
        value: (ks__bit_field.value & 0b00000010000) != 0
      ks__has_field_terrain_offset_max: # Field №5
        value: (ks__bit_field.value & 0b00000100000) != 0
      ks__has_field_distance_from_born: # Field №6
        value: (ks__bit_field.value & 0b00001000000) != 0
      ks__has_field_distance_from_current_min: # Field №7
        value: (ks__bit_field.value & 0b00010000000) != 0
      ks__has_field_distance_from_current_max: # Field №8
        value: (ks__bit_field.value & 0b00100000000) != 0
      ks__has_field_probe_number_min: # Field №9
        value: (ks__bit_field.value & 0b01000000000) != 0
      ks__has_field_probe_number_max: # Field №10
        value: (ks__bit_field.value & 0b10000000000) != 0
  config_ai_spacial_probe_setting_register:
    seq: []
    instances: {}
  ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_spacial_probe_data:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_s
      - id: value
        type: config_ai_spacial_probe_data
  ks__dict_of__aux_types__vlq_base128_le_s_config_ai_spacial_probe_data:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_spacial_probe_data
        repeat: expr
        repeat-expr: length.value
  config_ai_spacial_probe_setting:
    seq:
      - id: ks__base
        type: config_ai_tactic_base_setting
      - id: ks__bit_field
        type: u1
      - id: default_setting
        type: config_ai_spacial_probe_data
        if: ks__has_field_default_setting
      - id: specification
        type: ks__dict_of__aux_types__vlq_base128_le_s_config_ai_spacial_probe_data
        if: ks__has_field_specification
    instances:
      ks__has_field_default_setting: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_specification: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      enable:
        value: ks__base.enable
      condition:
        value: ks__base.condition
      nerve_trigger:
        value: ks__base.nerve_trigger
  config_ai_spacial_adjust_data:
    seq:
      - id: ks__bit_field
        type: u1
      - id: speed_level
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_speed_level
      - id: y_low
        type: f4
        if: ks__has_field_y_low
      - id: y_high
        type: f4
        if: ks__has_field_y_high
    instances:
      ks__has_field_speed_level: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_y_low: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_y_high: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_ai_spacial_adjust_setting_register:
    seq: []
    instances: {}
  ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_spacial_adjust_data:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_s
      - id: value
        type: config_ai_spacial_adjust_data
  ks__dict_of__aux_types__vlq_base128_le_s_config_ai_spacial_adjust_data:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_spacial_adjust_data
        repeat: expr
        repeat-expr: length.value
  config_ai_spacial_adjust_setting:
    seq:
      - id: ks__base
        type: config_ai_tactic_base_setting
      - id: ks__bit_field
        type: u1
      - id: default_setting
        type: config_ai_spacial_adjust_data
        if: ks__has_field_default_setting
      - id: specification
        type: ks__dict_of__aux_types__vlq_base128_le_s_config_ai_spacial_adjust_data
        if: ks__has_field_specification
    instances:
      ks__has_field_default_setting: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_specification: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      enable:
        value: ks__base.enable
      condition:
        value: ks__base.condition
      nerve_trigger:
        value: ks__base.nerve_trigger
  config_ai_bird_circling_data:
    seq:
      - id: ks__bit_field
        type: u1
      - id: speed_level
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_speed_level
      - id: radius
        type: f4
        if: ks__has_field_radius
    instances:
      ks__has_field_speed_level: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_radius: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_ai_bird_circling_setting_register:
    seq: []
    instances: {}
  ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_bird_circling_data:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_s
      - id: value
        type: config_ai_bird_circling_data
  ks__dict_of__aux_types__vlq_base128_le_s_config_ai_bird_circling_data:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_bird_circling_data
        repeat: expr
        repeat-expr: length.value
  config_ai_bird_circling_setting:
    seq:
      - id: ks__base
        type: config_ai_tactic_base_setting
      - id: ks__bit_field
        type: u1
      - id: default_setting
        type: config_ai_bird_circling_data
        if: ks__has_field_default_setting
      - id: specification
        type: ks__dict_of__aux_types__vlq_base128_le_s_config_ai_bird_circling_data
        if: ks__has_field_specification
    instances:
      ks__has_field_default_setting: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_specification: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      enable:
        value: ks__base.enable
      condition:
        value: ks__base.condition
      nerve_trigger:
        value: ks__base.nerve_trigger
  config_ai_scripted_move_to_data:
    seq:
      - id: ks__bit_field
        type: u1
      - id: speed_level
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_speed_level
      - id: is3d
        type: u1
        if: ks__has_field_is3d
      - id: stop_by_obstacle
        type: u1
        if: ks__has_field_stop_by_obstacle
    instances:
      ks__has_field_speed_level: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_is3d: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_stop_by_obstacle: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_ai_scripted_move_to_setting_register:
    seq: []
    instances: {}
  ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_scripted_move_to_data:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_s
      - id: value
        type: config_ai_scripted_move_to_data
  ks__dict_of__aux_types__vlq_base128_le_s_config_ai_scripted_move_to_data:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_scripted_move_to_data
        repeat: expr
        repeat-expr: length.value
  config_ai_scripted_move_to_setting:
    seq:
      - id: ks__base
        type: config_ai_tactic_base_setting
      - id: ks__bit_field
        type: u1
      - id: default_setting
        type: config_ai_scripted_move_to_data
        if: ks__has_field_default_setting
      - id: specification
        type: ks__dict_of__aux_types__vlq_base128_le_s_config_ai_scripted_move_to_data
        if: ks__has_field_specification
    instances:
      ks__has_field_default_setting: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_specification: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      enable:
        value: ks__base.enable
      condition:
        value: ks__base.condition
      nerve_trigger:
        value: ks__base.nerve_trigger
  config_ai_landing_data:
    seq:
      - id: ks__bit_field
        type: u1
      - id: speed_level
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_speed_level
      - id: landing_angle_max
        type: f4
        if: ks__has_field_landing_angle_max
      - id: landing_angle_min
        type: f4
        if: ks__has_field_landing_angle_min
      - id: landing_terrain_altitude
        type: f4
        if: ks__has_field_landing_terrain_altitude
    instances:
      ks__has_field_speed_level: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_landing_angle_max: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_landing_angle_min: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_landing_terrain_altitude: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  config_ai_landing_setting_register:
    seq: []
    instances: {}
  ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_landing_data:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_s
      - id: value
        type: config_ai_landing_data
  ks__dict_of__aux_types__vlq_base128_le_s_config_ai_landing_data:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_landing_data
        repeat: expr
        repeat-expr: length.value
  config_ai_landing_setting:
    seq:
      - id: ks__base
        type: config_ai_tactic_base_setting
      - id: ks__bit_field
        type: u1
      - id: default_setting
        type: config_ai_landing_data
        if: ks__has_field_default_setting
      - id: specification
        type: ks__dict_of__aux_types__vlq_base128_le_s_config_ai_landing_data
        if: ks__has_field_specification
    instances:
      ks__has_field_default_setting: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_specification: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      enable:
        value: ks__base.enable
      condition:
        value: ks__base.condition
      nerve_trigger:
        value: ks__base.nerve_trigger
  config_ai_extraction_data:
    seq:
      - id: ks__bit_field
        type: u1
      - id: speed_level
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_speed_level
      - id: extraction_distance
        type: f4
        if: ks__has_field_extraction_distance
      - id: extraction_angle_max
        type: f4
        if: ks__has_field_extraction_angle_max
      - id: extraction_angle_min
        type: f4
        if: ks__has_field_extraction_angle_min
      - id: trigger_distance
        type: f4
        if: ks__has_field_trigger_distance
      - id: kill_self_time
        type: f4
        if: ks__has_field_kill_self_time
    instances:
      ks__has_field_speed_level: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_extraction_distance: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_extraction_angle_max: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_extraction_angle_min: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_trigger_distance: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_kill_self_time: # Field №5
        value: (ks__bit_field & 0b100000) != 0
  config_ai_extraction_setting_register:
    seq: []
    instances: {}
  ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_extraction_data:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_s
      - id: value
        type: config_ai_extraction_data
  ks__dict_of__aux_types__vlq_base128_le_s_config_ai_extraction_data:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_extraction_data
        repeat: expr
        repeat-expr: length.value
  config_ai_extraction_setting:
    seq:
      - id: ks__base
        type: config_ai_tactic_base_setting
      - id: ks__bit_field
        type: u1
      - id: default_setting
        type: config_ai_extraction_data
        if: ks__has_field_default_setting
      - id: specification
        type: ks__dict_of__aux_types__vlq_base128_le_s_config_ai_extraction_data
        if: ks__has_field_specification
    instances:
      ks__has_field_default_setting: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_specification: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      enable:
        value: ks__base.enable
      condition:
        value: ks__base.condition
      nerve_trigger:
        value: ks__base.nerve_trigger
  config_ai_brownian_motion_data:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: speed_level
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_speed_level
      - id: turn_speed_override
        type: f4
        if: ks__has_field_turn_speed_override
      - id: move_cd_min
        type: f4
        if: ks__has_field_move_cd_min
      - id: move_cd_max
        type: f4
        if: ks__has_field_move_cd_max
      - id: terrain_offset_min
        type: f4
        if: ks__has_field_terrain_offset_min
      - id: terrain_offset_max
        type: f4
        if: ks__has_field_terrain_offset_max
      - id: motion_radius
        type: f4
        if: ks__has_field_motion_radius
      - id: recalc_center_on_leave_current_zone
        type: u1
        if: ks__has_field_recalc_center_on_leave_current_zone
      - id: recalc_center_on_attach_pos_change
        type: u1
        if: ks__has_field_recalc_center_on_attach_pos_change
    instances:
      ks__has_field_speed_level: # Field №0
        value: (ks__bit_field.value & 0b000000001) != 0
      ks__has_field_turn_speed_override: # Field №1
        value: (ks__bit_field.value & 0b000000010) != 0
      ks__has_field_move_cd_min: # Field №2
        value: (ks__bit_field.value & 0b000000100) != 0
      ks__has_field_move_cd_max: # Field №3
        value: (ks__bit_field.value & 0b000001000) != 0
      ks__has_field_terrain_offset_min: # Field №4
        value: (ks__bit_field.value & 0b000010000) != 0
      ks__has_field_terrain_offset_max: # Field №5
        value: (ks__bit_field.value & 0b000100000) != 0
      ks__has_field_motion_radius: # Field №6
        value: (ks__bit_field.value & 0b001000000) != 0
      ks__has_field_recalc_center_on_leave_current_zone: # Field №7
        value: (ks__bit_field.value & 0b010000000) != 0
      ks__has_field_recalc_center_on_attach_pos_change: # Field №8
        value: (ks__bit_field.value & 0b100000000) != 0
  config_ai_brownian_motion_setting_register:
    seq: []
    instances: {}
  ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_brownian_motion_data:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_s
      - id: value
        type: config_ai_brownian_motion_data
  ks__dict_of__aux_types__vlq_base128_le_s_config_ai_brownian_motion_data:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_brownian_motion_data
        repeat: expr
        repeat-expr: length.value
  config_ai_brownian_motion_setting:
    seq:
      - id: ks__base
        type: config_ai_tactic_base_setting
      - id: ks__bit_field
        type: u1
      - id: default_setting
        type: config_ai_brownian_motion_data
        if: ks__has_field_default_setting
      - id: specification
        type: ks__dict_of__aux_types__vlq_base128_le_s_config_ai_brownian_motion_data
        if: ks__has_field_specification
    instances:
      ks__has_field_default_setting: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_specification: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      enable:
        value: ks__base.enable
      condition:
        value: ks__base.condition
      nerve_trigger:
        value: ks__base.nerve_trigger
  config_ai_fishing_bites_bait_data:
    seq:
      - id: ks__bit_field
        type: u1
      - id: speed_level
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_speed_level
      - id: turn_speed_override
        type: f4
        if: ks__has_field_turn_speed_override
    instances:
      ks__has_field_speed_level: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_turn_speed_override: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_ai_fishing_bites_bait_setting_register:
    seq: []
    instances: {}
  ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_fishing_bites_bait_data:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_s
      - id: value
        type: config_ai_fishing_bites_bait_data
  ks__dict_of__aux_types__vlq_base128_le_s_config_ai_fishing_bites_bait_data:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_fishing_bites_bait_data
        repeat: expr
        repeat-expr: length.value
  config_ai_fishing_bites_bait_setting:
    seq:
      - id: ks__base
        type: config_ai_tactic_base_setting
      - id: ks__bit_field
        type: u1
      - id: default_setting
        type: config_ai_fishing_bites_bait_data
        if: ks__has_field_default_setting
      - id: specification
        type: ks__dict_of__aux_types__vlq_base128_le_s_config_ai_fishing_bites_bait_data
        if: ks__has_field_specification
    instances:
      ks__has_field_default_setting: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_specification: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      enable:
        value: ks__base.enable
      condition:
        value: ks__base.condition
      nerve_trigger:
        value: ks__base.nerve_trigger
  config_ai_fishing_pretend_bites_data:
    seq:
      - id: ks__bit_field
        type: u1
      - id: speed_level
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_speed_level
      - id: turn_speed_override
        type: f4
        if: ks__has_field_turn_speed_override
      - id: min_pretend_distance
        type: f4
        if: ks__has_field_min_pretend_distance
      - id: max_pretend_distance
        type: f4
        if: ks__has_field_max_pretend_distance
      - id: cd
        type: f4
        if: ks__has_field_cd
    instances:
      ks__has_field_speed_level: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_turn_speed_override: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_min_pretend_distance: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_max_pretend_distance: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_cd: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  config_ai_fishing_pretend_bites_setting_register:
    seq: []
    instances: {}
  ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_fishing_pretend_bites_data:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_s
      - id: value
        type: config_ai_fishing_pretend_bites_data
  ks__dict_of__aux_types__vlq_base128_le_s_config_ai_fishing_pretend_bites_data:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_fishing_pretend_bites_data
        repeat: expr
        repeat-expr: length.value
  config_ai_fishing_pretend_bites_setting:
    seq:
      - id: ks__base
        type: config_ai_tactic_base_setting
      - id: ks__bit_field
        type: u1
      - id: default_setting
        type: config_ai_fishing_pretend_bites_data
        if: ks__has_field_default_setting
      - id: specification
        type: ks__dict_of__aux_types__vlq_base128_le_s_config_ai_fishing_pretend_bites_data
        if: ks__has_field_specification
    instances:
      ks__has_field_default_setting: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_specification: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      enable:
        value: ks__base.enable
      condition:
        value: ks__base.condition
      nerve_trigger:
        value: ks__base.nerve_trigger
  config_ai_fishing_flee_data:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: speed_level
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_speed_level
      - id: turn_speed_override
        type: f4
        if: ks__has_field_turn_speed_override
      - id: flee_angle
        type: f4
        if: ks__has_field_flee_angle
      - id: flee_duration
        type: f4
        if: ks__has_field_flee_duration
      - id: flee_distance_min
        type: f4
        if: ks__has_field_flee_distance_min
      - id: flee_distance_max
        type: f4
        if: ks__has_field_flee_distance_max
      - id: turn_to_target
        type: u1
        if: ks__has_field_turn_to_target
      - id: restricted_by_defend_area
        type: u1
        if: ks__has_field_restricted_by_defend_area
      - id: expand_flee_angle_when_blocked
        type: u1
        if: ks__has_field_expand_flee_angle_when_blocked
    instances:
      ks__has_field_speed_level: # Field №0
        value: (ks__bit_field.value & 0b000000001) != 0
      ks__has_field_turn_speed_override: # Field №1
        value: (ks__bit_field.value & 0b000000010) != 0
      ks__has_field_flee_angle: # Field №2
        value: (ks__bit_field.value & 0b000000100) != 0
      ks__has_field_flee_duration: # Field №3
        value: (ks__bit_field.value & 0b000001000) != 0
      ks__has_field_flee_distance_min: # Field №4
        value: (ks__bit_field.value & 0b000010000) != 0
      ks__has_field_flee_distance_max: # Field №5
        value: (ks__bit_field.value & 0b000100000) != 0
      ks__has_field_turn_to_target: # Field №6
        value: (ks__bit_field.value & 0b001000000) != 0
      ks__has_field_restricted_by_defend_area: # Field №7
        value: (ks__bit_field.value & 0b010000000) != 0
      ks__has_field_expand_flee_angle_when_blocked: # Field №8
        value: (ks__bit_field.value & 0b100000000) != 0
  config_ai_fishing_flee_setting_register:
    seq: []
    instances: {}
  ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_fishing_flee_data:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_s
      - id: value
        type: config_ai_fishing_flee_data
  ks__dict_of__aux_types__vlq_base128_le_s_config_ai_fishing_flee_data:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_fishing_flee_data
        repeat: expr
        repeat-expr: length.value
  config_ai_fishing_flee_setting:
    seq:
      - id: ks__base
        type: config_ai_tactic_base_setting
      - id: ks__bit_field
        type: u1
      - id: default_setting
        type: config_ai_fishing_flee_data
        if: ks__has_field_default_setting
      - id: specification
        type: ks__dict_of__aux_types__vlq_base128_le_s_config_ai_fishing_flee_data
        if: ks__has_field_specification
    instances:
      ks__has_field_default_setting: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_specification: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      enable:
        value: ks__base.enable
      condition:
        value: ks__base.condition
      nerve_trigger:
        value: ks__base.nerve_trigger
  config_ai_spacial_facing_move_probability:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: stop
        type: f4
        if: ks__has_field_stop
      - id: forward
        type: f4
        if: ks__has_field_forward
      - id: right
        type: f4
        if: ks__has_field_right
      - id: up
        type: f4
        if: ks__has_field_up
      - id: forward_min
        type: f4
        if: ks__has_field_forward_min
      - id: forward_max
        type: f4
        if: ks__has_field_forward_max
      - id: back_min
        type: f4
        if: ks__has_field_back_min
      - id: back_max
        type: f4
        if: ks__has_field_back_max
      - id: right_min
        type: f4
        if: ks__has_field_right_min
      - id: right_max
        type: f4
        if: ks__has_field_right_max
      - id: left_min
        type: f4
        if: ks__has_field_left_min
      - id: left_max
        type: f4
        if: ks__has_field_left_max
      - id: up_min
        type: f4
        if: ks__has_field_up_min
      - id: up_max
        type: f4
        if: ks__has_field_up_max
      - id: down_min
        type: f4
        if: ks__has_field_down_min
      - id: down_max
        type: f4
        if: ks__has_field_down_max
      - id: best_height
        type: f4
        if: ks__has_field_best_height
      - id: min_height
        type: f4
        if: ks__has_field_min_height
      - id: max_height
        type: f4
        if: ks__has_field_max_height
    instances:
      ks__has_field_stop: # Field №0
        value: (ks__bit_field.value & 0b0000000000000000001) != 0
      ks__has_field_forward: # Field №1
        value: (ks__bit_field.value & 0b0000000000000000010) != 0
      ks__has_field_right: # Field №2
        value: (ks__bit_field.value & 0b0000000000000000100) != 0
      ks__has_field_up: # Field №3
        value: (ks__bit_field.value & 0b0000000000000001000) != 0
      ks__has_field_forward_min: # Field №4
        value: (ks__bit_field.value & 0b0000000000000010000) != 0
      ks__has_field_forward_max: # Field №5
        value: (ks__bit_field.value & 0b0000000000000100000) != 0
      ks__has_field_back_min: # Field №6
        value: (ks__bit_field.value & 0b0000000000001000000) != 0
      ks__has_field_back_max: # Field №7
        value: (ks__bit_field.value & 0b0000000000010000000) != 0
      ks__has_field_right_min: # Field №8
        value: (ks__bit_field.value & 0b0000000000100000000) != 0
      ks__has_field_right_max: # Field №9
        value: (ks__bit_field.value & 0b0000000001000000000) != 0
      ks__has_field_left_min: # Field №10
        value: (ks__bit_field.value & 0b0000000010000000000) != 0
      ks__has_field_left_max: # Field №11
        value: (ks__bit_field.value & 0b0000000100000000000) != 0
      ks__has_field_up_min: # Field №12
        value: (ks__bit_field.value & 0b0000001000000000000) != 0
      ks__has_field_up_max: # Field №13
        value: (ks__bit_field.value & 0b0000010000000000000) != 0
      ks__has_field_down_min: # Field №14
        value: (ks__bit_field.value & 0b0000100000000000000) != 0
      ks__has_field_down_max: # Field №15
        value: (ks__bit_field.value & 0b0001000000000000000) != 0
      ks__has_field_best_height: # Field №16
        value: (ks__bit_field.value & 0b0010000000000000000) != 0
      ks__has_field_min_height: # Field №17
        value: (ks__bit_field.value & 0b0100000000000000000) != 0
      ks__has_field_max_height: # Field №18
        value: (ks__bit_field.value & 0b1000000000000000000) != 0
  config_ai_spacial_facing_move_data:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: speed_level
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_speed_level
      - id: range_radius_min
        type: f4
        if: ks__has_field_range_radius_min
      - id: range_radius_max
        type: f4
        if: ks__has_field_range_radius_max
      - id: rest_time_min
        type: f4
        if: ks__has_field_rest_time_min
      - id: rest_time_max
        type: f4
        if: ks__has_field_rest_time_max
      - id: facing_move_turn_interval
        type: f4
        if: ks__has_field_facing_move_turn_interval
      - id: facing_move_min_avoidance_velecity
        type: f4
        if: ks__has_field_facing_move_min_avoidance_velecity
      - id: obstacle_detect_range
        type: f4
        if: ks__has_field_obstacle_detect_range
      - id: obstacle_up_range
        type: f4
        if: ks__has_field_obstacle_up_range
      - id: obstacle_max_angle
        type: f4
        if: ks__has_field_obstacle_max_angle
      - id: spacial_facing_move_probability
        type: config_ai_spacial_facing_move_probability
        if: ks__has_field_spacial_facing_move_probability
    instances:
      ks__has_field_speed_level: # Field №0
        value: (ks__bit_field.value & 0b00000000001) != 0
      ks__has_field_range_radius_min: # Field №1
        value: (ks__bit_field.value & 0b00000000010) != 0
      ks__has_field_range_radius_max: # Field №2
        value: (ks__bit_field.value & 0b00000000100) != 0
      ks__has_field_rest_time_min: # Field №3
        value: (ks__bit_field.value & 0b00000001000) != 0
      ks__has_field_rest_time_max: # Field №4
        value: (ks__bit_field.value & 0b00000010000) != 0
      ks__has_field_facing_move_turn_interval: # Field №5
        value: (ks__bit_field.value & 0b00000100000) != 0
      ks__has_field_facing_move_min_avoidance_velecity: # Field №6
        value: (ks__bit_field.value & 0b00001000000) != 0
      ks__has_field_obstacle_detect_range: # Field №7
        value: (ks__bit_field.value & 0b00010000000) != 0
      ks__has_field_obstacle_up_range: # Field №8
        value: (ks__bit_field.value & 0b00100000000) != 0
      ks__has_field_obstacle_max_angle: # Field №9
        value: (ks__bit_field.value & 0b01000000000) != 0
      ks__has_field_spacial_facing_move_probability: # Field №10
        value: (ks__bit_field.value & 0b10000000000) != 0
  config_ai_spacial_facing_move_setting_register:
    seq: []
    instances: {}
  ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_spacial_facing_move_data:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_s
      - id: value
        type: config_ai_spacial_facing_move_data
  ks__dict_of__aux_types__vlq_base128_le_s_config_ai_spacial_facing_move_data:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_ai_spacial_facing_move_data
        repeat: expr
        repeat-expr: length.value
  config_ai_spacial_facing_move_setting:
    seq:
      - id: ks__base
        type: config_ai_tactic_base_setting
      - id: ks__bit_field
        type: u1
      - id: default_setting
        type: config_ai_spacial_facing_move_data
        if: ks__has_field_default_setting
      - id: specification
        type: ks__dict_of__aux_types__vlq_base128_le_s_config_ai_spacial_facing_move_data
        if: ks__has_field_specification
    instances:
      ks__has_field_default_setting: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_specification: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      enable:
        value: ks__base.enable
      condition:
        value: ks__base.condition
      nerve_trigger:
        value: ks__base.nerve_trigger
  ks__enum__config_ai_combat_phase:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: config_ai_combat_phase
  config_ai_combat_phase_comparer:
    seq: []
    instances: {}
  ks__enum__config_ai_combat_role:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: config_ai_combat_role
  config_ai_combat_role_comparer:
    seq: []
    instances: {}
  ks__kvp_of_dict__ks__enum__config_ai_combat_phase_ks__array_of__aux_types__vlq_base128_le_s__length_u:
    seq:
      - id: key
        type: ks__enum__config_ai_combat_phase
      - id: value
        type: ks__array_of__aux_types__vlq_base128_le_s__length_u
  ks__dict_of__ks__enum__config_ai_combat_phase_ks__array_of__aux_types__vlq_base128_le_s__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__ks__enum__config_ai_combat_phase_ks__array_of__aux_types__vlq_base128_le_s__length_u
        repeat: expr
        repeat-expr: length.value
  config_ai_combat_setting:
    seq:
      - id: ks__bit_field
        type: u1
      - id: combat_phases
        type: ks__dict_of__ks__enum__config_ai_combat_phase_ks__array_of__aux_types__vlq_base128_le_s__length_u
        if: ks__has_field_combat_phases
      - id: combat_role
        type: ks__enum__config_ai_combat_role
        if: ks__has_field_combat_role
      - id: broadcast_fear_on_death
        type: u1
        if: ks__has_field_broadcast_fear_on_death
    instances:
      ks__has_field_combat_phases: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_combat_role: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_broadcast_fear_on_death: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__enum__config_ai_skill_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: config_ai_skill_type
  config_ai_skill_type_comparer:
    seq: []
    instances: {}
  ks__enum__config_ai_combat_skill_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: config_ai_combat_skill_type
  config_ai_combat_skill_type_comparer:
    seq: []
    instances: {}
  config_ai_skill_cast_condition:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: pose
        type: ks__array_of__aux_types__vlq_base128_le_s__length_u
        if: ks__has_field_pose
      - id: need_re_init_cd
        type: u1
        if: ks__has_field_need_re_init_cd
      - id: min_target_angle_xz
        type: f4
        if: ks__has_field_min_target_angle_xz
      - id: max_target_angle_xz
        type: f4
        if: ks__has_field_max_target_angle_xz
      - id: max_target_angle_y
        type: f4
        if: ks__has_field_max_target_angle_y
      - id: min_target_angle_y
        type: f4
        if: ks__has_field_min_target_angle_y
      - id: pick_range_min
        type: f4
        if: ks__has_field_pick_range_min
      - id: pick_range_max
        type: f4
        if: ks__has_field_pick_range_max
      - id: pick_range_y_max
        type: f4
        if: ks__has_field_pick_range_y_max
      - id: pick_range_y_min
        type: f4
        if: ks__has_field_pick_range_y_min
      - id: skill_anchor_range_min
        type: f4
        if: ks__has_field_skill_anchor_range_min
      - id: skill_anchor_range_max
        type: f4
        if: ks__has_field_skill_anchor_range_max
      - id: cast_range_min
        type: f4
        if: ks__has_field_cast_range_min
      - id: cast_range_max
        type: f4
        if: ks__has_field_cast_range_max
      - id: global_values
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_global_values
      - id: global_values_logic_and
        type: u1
        if: ks__has_field_global_values_logic_and
    instances:
      ks__has_field_pose: # Field №0
        value: (ks__bit_field.value & 0b0000000000000001) != 0
      ks__has_field_need_re_init_cd: # Field №1
        value: (ks__bit_field.value & 0b0000000000000010) != 0
      ks__has_field_min_target_angle_xz: # Field №2
        value: (ks__bit_field.value & 0b0000000000000100) != 0
      ks__has_field_max_target_angle_xz: # Field №3
        value: (ks__bit_field.value & 0b0000000000001000) != 0
      ks__has_field_max_target_angle_y: # Field №4
        value: (ks__bit_field.value & 0b0000000000010000) != 0
      ks__has_field_min_target_angle_y: # Field №5
        value: (ks__bit_field.value & 0b0000000000100000) != 0
      ks__has_field_pick_range_min: # Field №6
        value: (ks__bit_field.value & 0b0000000001000000) != 0
      ks__has_field_pick_range_max: # Field №7
        value: (ks__bit_field.value & 0b0000000010000000) != 0
      ks__has_field_pick_range_y_max: # Field №8
        value: (ks__bit_field.value & 0b0000000100000000) != 0
      ks__has_field_pick_range_y_min: # Field №9
        value: (ks__bit_field.value & 0b0000001000000000) != 0
      ks__has_field_skill_anchor_range_min: # Field №10
        value: (ks__bit_field.value & 0b0000010000000000) != 0
      ks__has_field_skill_anchor_range_max: # Field №11
        value: (ks__bit_field.value & 0b0000100000000000) != 0
      ks__has_field_cast_range_min: # Field №12
        value: (ks__bit_field.value & 0b0001000000000000) != 0
      ks__has_field_cast_range_max: # Field №13
        value: (ks__bit_field.value & 0b0010000000000000) != 0
      ks__has_field_global_values: # Field №14
        value: (ks__bit_field.value & 0b0100000000000000) != 0
      ks__has_field_global_values_logic_and: # Field №15
        value: (ks__bit_field.value & 0b1000000000000000) != 0
  config_ai_buddy_scoring:
    seq:
      - id: ks__bit_field
        type: u1
      - id: hp_factor
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_hp_factor
      - id: hp_weight
        type: f4
        if: ks__has_field_hp_weight
      - id: dist_factor
        type: f4
        if: ks__has_field_dist_factor
      - id: dist_weight
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_dist_weight
      - id: role_scores
        type: ks__array_of__f4__length_u
        if: ks__has_field_role_scores
    instances:
      ks__has_field_hp_factor: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_hp_weight: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_dist_factor: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_dist_weight: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_role_scores: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  config_ai_buddy_skill_condition:
    seq:
      - id: ks__bit_field
        type: u1
      - id: select_range
        type: f4
        if: ks__has_field_select_range
      - id: buddy_scoring
        type: config_ai_buddy_scoring
        if: ks__has_field_buddy_scoring
    instances:
      ks__has_field_select_range: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_buddy_scoring: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__kvp_of_dict__u1_ks__array_of__aux_types__vlq_base128_le_u__length_u:
    seq:
      - id: key
        type: u1
      - id: value
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
  ks__dict_of__u1_ks__array_of__aux_types__vlq_base128_le_u__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__u1_ks__array_of__aux_types__vlq_base128_le_u__length_u
        repeat: expr
        repeat-expr: length.value
  config_ai_skill_setting:
    seq:
      - id: ks__bit_field
        type: u1
      - id: skill_elite_set
        type: ks__dict_of__u1_ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_skill_elite_set
    instances:
      ks__has_field_skill_elite_set: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_ai_skill_group_cd:
    seq:
      - id: ks__bit_field
        type: u1
      - id: skill_group_cdid
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_skill_group_cdid
      - id: skill_group_cd_time
        type: f4
        if: ks__has_field_skill_group_cd_time
    instances:
      ks__has_field_skill_group_cdid: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_skill_group_cd_time: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_ai_skill:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: name
        type: aux_types::string
        if: ks__has_field_name
      - id: skill_type
        type: ks__enum__config_ai_skill_type
        if: ks__has_field_skill_type
      - id: combat_skill_type
        type: ks__enum__config_ai_combat_skill_type
        if: ks__has_field_combat_skill_type
      - id: priority
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_priority
      - id: need_line_of_sight
        type: u1
        if: ks__has_field_need_line_of_sight
      - id: face_target
        type: u1
        if: ks__has_field_face_target
      - id: can_use_if_target_inactive
        type: u1
        if: ks__has_field_can_use_if_target_inactive
      - id: enable_skill_prepare
        type: u1
        if: ks__has_field_enable_skill_prepare
      - id: skill_prepare_timeout
        type: f4
        if: ks__has_field_skill_prepare_timeout
      - id: skill_prepare_speed_level
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_skill_prepare_speed_level
      - id: cast_condition
        type: config_ai_skill_cast_condition
        if: ks__has_field_cast_condition
      - id: cd
        type: f4
        if: ks__has_field_cd
      - id: cd_upper_range
        type: f4
        if: ks__has_field_cd_upper_range
      - id: initial_cd
        type: f4
        if: ks__has_field_initial_cd
      - id: initial_cd_upper_range
        type: f4
        if: ks__has_field_initial_cd_upper_range
      - id: public_cd_group
        type: aux_types::string
        if: ks__has_field_public_cd_group
      - id: ignore_gcd
        type: u1
        if: ks__has_field_ignore_gcd
      - id: trigger_gcd
        type: u1
        if: ks__has_field_trigger_gcd
      - id: trigger_cd_on_start
        type: u1
        if: ks__has_field_trigger_cd_on_start
      - id: trigger_cd_on_fail
        type: u1
        if: ks__has_field_trigger_cd_on_fail
      - id: skill_group_cdid
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_skill_group_cdid
      - id: state_i_ds
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_state_i_ds
      - id: skill_querying_time
        type: f4
        if: ks__has_field_skill_querying_time
      - id: command_id
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_command_id
      - id: flag_target_reachable
        type: aux_types::string
        if: ks__has_field_flag_target_reachable
      - id: flag_self_on_template_collider
        type: aux_types::string
        if: ks__has_field_flag_self_on_template_collider
      - id: flag_self_in_zone
        type: aux_types::string
        if: ks__has_field_flag_self_in_zone
      - id: flag_target_in_zone
        type: aux_types::string
        if: ks__has_field_flag_target_in_zone
      - id: buddy_skill_condition
        type: config_ai_buddy_skill_condition
        if: ks__has_field_buddy_skill_condition
      - id: nerve_trigger
        type: ks__array_of__ks__enum__neuron_name__length_u
        if: ks__has_field_nerve_trigger
    instances:
      ks__has_field_name: # Field №0
        value: (ks__bit_field.value & 0b000000000000000000000000000001) != 0
      ks__has_field_skill_type: # Field №1
        value: (ks__bit_field.value & 0b000000000000000000000000000010) != 0
      ks__has_field_combat_skill_type: # Field №2
        value: (ks__bit_field.value & 0b000000000000000000000000000100) != 0
      ks__has_field_priority: # Field №3
        value: (ks__bit_field.value & 0b000000000000000000000000001000) != 0
      ks__has_field_need_line_of_sight: # Field №4
        value: (ks__bit_field.value & 0b000000000000000000000000010000) != 0
      ks__has_field_face_target: # Field №5
        value: (ks__bit_field.value & 0b000000000000000000000000100000) != 0
      ks__has_field_can_use_if_target_inactive: # Field №6
        value: (ks__bit_field.value & 0b000000000000000000000001000000) != 0
      ks__has_field_enable_skill_prepare: # Field №7
        value: (ks__bit_field.value & 0b000000000000000000000010000000) != 0
      ks__has_field_skill_prepare_timeout: # Field №8
        value: (ks__bit_field.value & 0b000000000000000000000100000000) != 0
      ks__has_field_skill_prepare_speed_level: # Field №9
        value: (ks__bit_field.value & 0b000000000000000000001000000000) != 0
      ks__has_field_cast_condition: # Field №10
        value: (ks__bit_field.value & 0b000000000000000000010000000000) != 0
      ks__has_field_cd: # Field №11
        value: (ks__bit_field.value & 0b000000000000000000100000000000) != 0
      ks__has_field_cd_upper_range: # Field №12
        value: (ks__bit_field.value & 0b000000000000000001000000000000) != 0
      ks__has_field_initial_cd: # Field №13
        value: (ks__bit_field.value & 0b000000000000000010000000000000) != 0
      ks__has_field_initial_cd_upper_range: # Field №14
        value: (ks__bit_field.value & 0b000000000000000100000000000000) != 0
      ks__has_field_public_cd_group: # Field №15
        value: (ks__bit_field.value & 0b000000000000001000000000000000) != 0
      ks__has_field_ignore_gcd: # Field №16
        value: (ks__bit_field.value & 0b000000000000010000000000000000) != 0
      ks__has_field_trigger_gcd: # Field №17
        value: (ks__bit_field.value & 0b000000000000100000000000000000) != 0
      ks__has_field_trigger_cd_on_start: # Field №18
        value: (ks__bit_field.value & 0b000000000001000000000000000000) != 0
      ks__has_field_trigger_cd_on_fail: # Field №19
        value: (ks__bit_field.value & 0b000000000010000000000000000000) != 0
      ks__has_field_skill_group_cdid: # Field №20
        value: (ks__bit_field.value & 0b000000000100000000000000000000) != 0
      ks__has_field_state_i_ds: # Field №21
        value: (ks__bit_field.value & 0b000000001000000000000000000000) != 0
      ks__has_field_skill_querying_time: # Field №22
        value: (ks__bit_field.value & 0b000000010000000000000000000000) != 0
      ks__has_field_command_id: # Field №23
        value: (ks__bit_field.value & 0b000000100000000000000000000000) != 0
      ks__has_field_flag_target_reachable: # Field №24
        value: (ks__bit_field.value & 0b000001000000000000000000000000) != 0
      ks__has_field_flag_self_on_template_collider: # Field №25
        value: (ks__bit_field.value & 0b000010000000000000000000000000) != 0
      ks__has_field_flag_self_in_zone: # Field №26
        value: (ks__bit_field.value & 0b000100000000000000000000000000) != 0
      ks__has_field_flag_target_in_zone: # Field №27
        value: (ks__bit_field.value & 0b001000000000000000000000000000) != 0
      ks__has_field_buddy_skill_condition: # Field №28
        value: (ks__bit_field.value & 0b010000000000000000000000000000) != 0
      ks__has_field_nerve_trigger: # Field №29
        value: (ks__bit_field.value & 0b100000000000000000000000000000) != 0
  config_aiui_setting:
    seq:
      - id: ks__bit_field
        type: u1
      - id: has_direction_indicator
        type: u1
        if: ks__has_field_has_direction_indicator
    instances:
      ks__has_field_has_direction_indicator: # Field №0
        value: (ks__bit_field & 0b1) != 0
  ks__enum__ai_lod_strategy_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: ai_lod_strategy_type
  ai_lod_strategy_type_comparer:
    seq: []
    instances: {}
  config_ai_profiling_setting:
    seq:
      - id: ks__bit_field
        type: u1
      - id: lod_strategy
        type: ks__enum__ai_lod_strategy_type
        if: ks__has_field_lod_strategy
      - id: static_poses
        type: ks__array_of__aux_types__vlq_base128_le_s__length_u
        if: ks__has_field_static_poses
      - id: move_culling_level
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_move_culling_level
    instances:
      ks__has_field_lod_strategy: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_static_poses: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_move_culling_level: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_ai_network_setting:
    seq:
      - id: ks__bit_field
        type: u1
      - id: sync_skill
        type: u1
        if: ks__has_field_sync_skill
      - id: reset_hp_on_spawn
        type: u1
        if: ks__has_field_reset_hp_on_spawn
    instances:
      ks__has_field_sync_skill: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_reset_hp_on_spawn: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_ai_mixin_set_bool:
    seq:
      - id: ks__bit_field
        type: u1
      - id: bool_id
        type: aux_types::string
        if: ks__has_field_bool_id
      - id: value
        type: u1
        if: ks__has_field_value
    instances:
      ks__has_field_bool_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_value: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_ai_mixin_set_int:
    seq:
      - id: ks__bit_field
        type: u1
      - id: int_id
        type: aux_types::string
        if: ks__has_field_int_id
      - id: value
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_value
    instances:
      ks__has_field_int_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_value: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_ai_mixin_set_float:
    seq:
      - id: ks__bit_field
        type: u1
      - id: float_id
        type: aux_types::string
        if: ks__has_field_float_id
      - id: value
        type: f4
        if: ks__has_field_value
    instances:
      ks__has_field_float_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_value: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_ai_mixin_set_animator_trigger:
    seq:
      - id: ks__bit_field
        type: u1
      - id: trigger_id
        type: aux_types::string
        if: ks__has_field_trigger_id
    instances:
      ks__has_field_trigger_id: # Field №0
        value: (ks__bit_field & 0b1) != 0
  ks__array_of__config_ai_mixin_set_bool__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_ai_mixin_set_bool
        repeat: expr
        repeat-expr: length.value
  ks__array_of__config_ai_mixin_set_int__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_ai_mixin_set_int
        repeat: expr
        repeat-expr: length.value
  ks__array_of__config_ai_mixin_set_float__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_ai_mixin_set_float
        repeat: expr
        repeat-expr: length.value
  ks__array_of__config_ai_mixin_set_animator_trigger__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_ai_mixin_set_animator_trigger
        repeat: expr
        repeat-expr: length.value
  config_ai_mixin_actions:
    seq:
      - id: ks__bit_field
        type: u1
      - id: set_pose_bool
        type: ks__array_of__config_ai_mixin_set_bool__length_u
        if: ks__has_field_set_pose_bool
      - id: set_pose_int
        type: ks__array_of__config_ai_mixin_set_int__length_u
        if: ks__has_field_set_pose_int
      - id: set_pose_float
        type: ks__array_of__config_ai_mixin_set_float__length_u
        if: ks__has_field_set_pose_float
      - id: set_animator_trigger
        type: ks__array_of__config_ai_mixin_set_animator_trigger__length_u
        if: ks__has_field_set_animator_trigger
      - id: set_animator_bool
        type: ks__array_of__config_ai_mixin_set_bool__length_u
        if: ks__has_field_set_animator_bool
      - id: set_animator_int
        type: ks__array_of__config_ai_mixin_set_int__length_u
        if: ks__has_field_set_animator_int
      - id: set_animator_float
        type: ks__array_of__config_ai_mixin_set_float__length_u
        if: ks__has_field_set_animator_float
    instances:
      ks__has_field_set_pose_bool: # Field №0
        value: (ks__bit_field & 0b0000001) != 0
      ks__has_field_set_pose_int: # Field №1
        value: (ks__bit_field & 0b0000010) != 0
      ks__has_field_set_pose_float: # Field №2
        value: (ks__bit_field & 0b0000100) != 0
      ks__has_field_set_animator_trigger: # Field №3
        value: (ks__bit_field & 0b0001000) != 0
      ks__has_field_set_animator_bool: # Field №4
        value: (ks__bit_field & 0b0010000) != 0
      ks__has_field_set_animator_int: # Field №5
        value: (ks__bit_field & 0b0100000) != 0
      ks__has_field_set_animator_float: # Field №6
        value: (ks__bit_field & 0b1000000) != 0
  config_ai_mixin_set_controller_parameter:
    seq:
      - id: ks__bit_field
        type: u1
      - id: entity_types
        type: ks__array_of__ks__enum__entity_type__length_u
        if: ks__has_field_entity_types
      - id: on_success
        type: config_ai_mixin_actions
        if: ks__has_field_on_success
      - id: on_fail
        type: config_ai_mixin_actions
        if: ks__has_field_on_fail
    instances:
      ks__has_field_entity_types: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_on_success: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_on_fail: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__array_of__config_ai_mixin_set_controller_parameter__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_ai_mixin_set_controller_parameter
        repeat: expr
        repeat-expr: length.value
  config_ai_mixin_set_controller_condition:
    seq:
      - id: ks__bit_field
        type: u1
      - id: pose_i_ds
        type: ks__array_of__aux_types__vlq_base128_le_s__length_u
        if: ks__has_field_pose_i_ds
      - id: settings
        type: ks__array_of__config_ai_mixin_set_controller_parameter__length_u
        if: ks__has_field_settings
    instances:
      ks__has_field_pose_i_ds: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_settings: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__array_of__config_ai_mixin_set_controller_condition__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_ai_mixin_set_controller_condition
        repeat: expr
        repeat-expr: length.value
  config_ai_mixin_setting:
    seq:
      - id: ks__bit_field
        type: u1
      - id: set_controller_parameter_on_be_hit_by_entity_type
        type: ks__array_of__config_ai_mixin_set_controller_condition__length_u
        if: ks__has_field_set_controller_parameter_on_be_hit_by_entity_type
    instances:
      ks__has_field_set_controller_parameter_on_be_hit_by_entity_type: # Field №0
        value: (ks__bit_field & 0b1) != 0
  ks__kvp_of_dict__aux_types__string_ks__array_of__ks__enum__neuron_name__length_u:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: ks__array_of__ks__enum__neuron_name__length_u
  ks__dict_of__aux_types__string_ks__array_of__ks__enum__neuron_name__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_ks__array_of__ks__enum__neuron_name__length_u
        repeat: expr
        repeat-expr: length.value
  ks__array_of__config_ai_skill_group_cd__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_ai_skill_group_cd
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__aux_types__string_config_ai_skill:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: config_ai_skill
  ks__dict_of__aux_types__string_config_ai_skill:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_config_ai_skill
        repeat: expr
        repeat-expr: length.value
  config_ai_beta:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: enable
        type: u1
        if: ks__has_field_enable
      - id: friendliness
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_friendliness
      - id: decision_archetype
        type: ks__enum__decision_archetype
        if: ks__has_field_decision_archetype
      - id: move_setting
        type: config_ai_move
        if: ks__has_field_move_setting
      - id: precombat
        type: config_ai_precombat_setting
        if: ks__has_field_precombat
      - id: ai_combat
        type: config_ai_combat_setting
        if: ks__has_field_ai_combat
      - id: buddy_setting
        type: config_ai_buddy_setting
        if: ks__has_field_buddy_setting
      - id: sensing
        type: config_ai_sensing
        if: ks__has_field_sensing
      - id: neurons
        type: ks__dict_of__aux_types__string_ks__array_of__ks__enum__neuron_name__length_u
        if: ks__has_field_neurons
      - id: threat
        type: config_ai_threat_setting
        if: ks__has_field_threat
      - id: order
        type: config_ai_order_setting
        if: ks__has_field_order
      - id: defend_area
        type: config_ai_defend_area
        if: ks__has_field_defend_area
      - id: fly
        type: config_ai_fly_setting
        if: ks__has_field_fly
      - id: pose_control
        type: config_ai_pose_control
        if: ks__has_field_pose_control
      - id: ui
        type: config_aiui_setting
        if: ks__has_field_ui
      - id: profiling
        type: config_ai_profiling_setting
        if: ks__has_field_profiling
      - id: network
        type: config_ai_network_setting
        if: ks__has_field_network
      - id: skill_group_cd_configs
        type: ks__array_of__config_ai_skill_group_cd__length_u
        if: ks__has_field_skill_group_cd_configs
      - id: skill_setting
        type: config_ai_skill_setting
        if: ks__has_field_skill_setting
      - id: skills
        type: ks__dict_of__aux_types__string_config_ai_skill
        if: ks__has_field_skills
      - id: skill_gcd
        type: f4
        if: ks__has_field_skill_gcd
      - id: target
        type: config_ai_target
        if: ks__has_field_target
      - id: return_to_born_tactic
        type: config_ai_return_to_born_pos_setting
        if: ks__has_field_return_to_born_tactic
      - id: wander_tactic
        type: config_ai_wander_setting
        if: ks__has_field_wander_tactic
      - id: follow_scripted_path_tactic
        type: config_ai_follow_scripted_path_setting
        if: ks__has_field_follow_scripted_path_tactic
      - id: follow_server_route_tactic
        type: config_ai_follow_server_route_setting
        if: ks__has_field_follow_server_route_tactic
      - id: investigate_tactic
        type: config_ai_investigate_setting
        if: ks__has_field_investigate_tactic
      - id: react_action_point_tactic
        type: config_ai_react_action_point_setting
        if: ks__has_field_react_action_point_tactic
      - id: patrol_follow_tactic
        type: config_ai_patrol_follow_setting
        if: ks__has_field_patrol_follow_tactic
      - id: combat_follow_move_tactic
        type: config_ai_combat_follow_move_setting
        if: ks__has_field_combat_follow_move_tactic
      - id: melee_charge_tactic
        type: config_ai_melee_charge_setting
        if: ks__has_field_melee_charge_tactic
      - id: facing_move_tactic
        type: config_ai_facing_move_setting
        if: ks__has_field_facing_move_tactic
      - id: surround_tactic
        type: config_ai_surround_setting
        if: ks__has_field_surround_tactic
      - id: group_surround_tactic
        type: config_ai_group_surround_setting
        if: ks__has_field_group_surround_tactic
      - id: find_back_tactic
        type: config_ai_find_back_setting
        if: ks__has_field_find_back_tactic
      - id: combat_fixed_move_tactic
        type: config_ai_combat_fixed_move_setting
        if: ks__has_field_combat_fixed_move_tactic
      - id: crab_move_tactic
        type: config_ai_crab_move_setting
        if: ks__has_field_crab_move_tactic
      - id: flee_tactic
        type: config_ai_flee_setting
        if: ks__has_field_flee_tactic
      - id: flee_on_block_avatar_landing_tactic
        type: config_ai_flee_on_block_avatar_landing_setting
        if: ks__has_field_flee_on_block_avatar_landing_tactic
      - id: spacial_chase_tactic
        type: config_ai_spacial_chase_setting
        if: ks__has_field_spacial_chase_tactic
      - id: spacial_probe_tactic
        type: config_ai_spacial_probe_setting
        if: ks__has_field_spacial_probe_tactic
      - id: spacial_adjust_tactic
        type: config_ai_spacial_adjust_setting
        if: ks__has_field_spacial_adjust_tactic
      - id: bird_circling_tactic
        type: config_ai_bird_circling_setting
        if: ks__has_field_bird_circling_tactic
      - id: scripted_move_to_tactic
        type: config_ai_scripted_move_to_setting
        if: ks__has_field_scripted_move_to_tactic
      - id: landing_tactic
        type: config_ai_landing_setting
        if: ks__has_field_landing_tactic
      - id: extraction_tactic
        type: config_ai_extraction_setting
        if: ks__has_field_extraction_tactic
      - id: brownian_motion_tactic
        type: config_ai_brownian_motion_setting
        if: ks__has_field_brownian_motion_tactic
      - id: spacial_facing_move_tactic
        type: config_ai_spacial_facing_move_setting
        if: ks__has_field_spacial_facing_move_tactic
      - id: mixin
        type: config_ai_mixin_setting
        if: ks__has_field_mixin
      - id: fishing_bites_bait_tactic
        type: config_ai_fishing_bites_bait_setting
        if: ks__has_field_fishing_bites_bait_tactic
      - id: fishing_pretend_bites_tactic
        type: config_ai_fishing_pretend_bites_setting
        if: ks__has_field_fishing_pretend_bites_tactic
      - id: fishing_flee_tactic
        type: config_ai_fishing_flee_setting
        if: ks__has_field_fishing_flee_tactic
    instances:
      ks__has_field_enable: # Field №0
        value: (ks__bit_field.value & 0b0000000000000000000000000000000000000000000000000001) != 0
      ks__has_field_friendliness: # Field №1
        value: (ks__bit_field.value & 0b0000000000000000000000000000000000000000000000000010) != 0
      ks__has_field_decision_archetype: # Field №2
        value: (ks__bit_field.value & 0b0000000000000000000000000000000000000000000000000100) != 0
      ks__has_field_move_setting: # Field №3
        value: (ks__bit_field.value & 0b0000000000000000000000000000000000000000000000001000) != 0
      ks__has_field_precombat: # Field №4
        value: (ks__bit_field.value & 0b0000000000000000000000000000000000000000000000010000) != 0
      ks__has_field_ai_combat: # Field №5
        value: (ks__bit_field.value & 0b0000000000000000000000000000000000000000000000100000) != 0
      ks__has_field_buddy_setting: # Field №6
        value: (ks__bit_field.value & 0b0000000000000000000000000000000000000000000001000000) != 0
      ks__has_field_sensing: # Field №7
        value: (ks__bit_field.value & 0b0000000000000000000000000000000000000000000010000000) != 0
      ks__has_field_neurons: # Field №8
        value: (ks__bit_field.value & 0b0000000000000000000000000000000000000000000100000000) != 0
      ks__has_field_threat: # Field №9
        value: (ks__bit_field.value & 0b0000000000000000000000000000000000000000001000000000) != 0
      ks__has_field_order: # Field №10
        value: (ks__bit_field.value & 0b0000000000000000000000000000000000000000010000000000) != 0
      ks__has_field_defend_area: # Field №11
        value: (ks__bit_field.value & 0b0000000000000000000000000000000000000000100000000000) != 0
      ks__has_field_fly: # Field №12
        value: (ks__bit_field.value & 0b0000000000000000000000000000000000000001000000000000) != 0
      ks__has_field_pose_control: # Field №13
        value: (ks__bit_field.value & 0b0000000000000000000000000000000000000010000000000000) != 0
      ks__has_field_ui: # Field №14
        value: (ks__bit_field.value & 0b0000000000000000000000000000000000000100000000000000) != 0
      ks__has_field_profiling: # Field №15
        value: (ks__bit_field.value & 0b0000000000000000000000000000000000001000000000000000) != 0
      ks__has_field_network: # Field №16
        value: (ks__bit_field.value & 0b0000000000000000000000000000000000010000000000000000) != 0
      ks__has_field_skill_group_cd_configs: # Field №17
        value: (ks__bit_field.value & 0b0000000000000000000000000000000000100000000000000000) != 0
      ks__has_field_skill_setting: # Field №18
        value: (ks__bit_field.value & 0b0000000000000000000000000000000001000000000000000000) != 0
      ks__has_field_skills: # Field №19
        value: (ks__bit_field.value & 0b0000000000000000000000000000000010000000000000000000) != 0
      ks__has_field_skill_gcd: # Field №20
        value: (ks__bit_field.value & 0b0000000000000000000000000000000100000000000000000000) != 0
      ks__has_field_target: # Field №21
        value: (ks__bit_field.value & 0b0000000000000000000000000000001000000000000000000000) != 0
      ks__has_field_return_to_born_tactic: # Field №22
        value: (ks__bit_field.value & 0b0000000000000000000000000000010000000000000000000000) != 0
      ks__has_field_wander_tactic: # Field №23
        value: (ks__bit_field.value & 0b0000000000000000000000000000100000000000000000000000) != 0
      ks__has_field_follow_scripted_path_tactic: # Field №24
        value: (ks__bit_field.value & 0b0000000000000000000000000001000000000000000000000000) != 0
      ks__has_field_follow_server_route_tactic: # Field №25
        value: (ks__bit_field.value & 0b0000000000000000000000000010000000000000000000000000) != 0
      ks__has_field_investigate_tactic: # Field №26
        value: (ks__bit_field.value & 0b0000000000000000000000000100000000000000000000000000) != 0
      ks__has_field_react_action_point_tactic: # Field №27
        value: (ks__bit_field.value & 0b0000000000000000000000001000000000000000000000000000) != 0
      ks__has_field_patrol_follow_tactic: # Field №28
        value: (ks__bit_field.value & 0b0000000000000000000000010000000000000000000000000000) != 0
      ks__has_field_combat_follow_move_tactic: # Field №29
        value: (ks__bit_field.value & 0b0000000000000000000000100000000000000000000000000000) != 0
      ks__has_field_melee_charge_tactic: # Field №30
        value: (ks__bit_field.value & 0b0000000000000000000001000000000000000000000000000000) != 0
      ks__has_field_facing_move_tactic: # Field №31
        value: (ks__bit_field.value & 0b0000000000000000000010000000000000000000000000000000) != 0
      ks__has_field_surround_tactic: # Field №32
        value: (ks__bit_field.value & 0b0000000000000000000100000000000000000000000000000000) != 0
      ks__has_field_group_surround_tactic: # Field №33
        value: (ks__bit_field.value & 0b0000000000000000001000000000000000000000000000000000) != 0
      ks__has_field_find_back_tactic: # Field №34
        value: (ks__bit_field.value & 0b0000000000000000010000000000000000000000000000000000) != 0
      ks__has_field_combat_fixed_move_tactic: # Field №35
        value: (ks__bit_field.value & 0b0000000000000000100000000000000000000000000000000000) != 0
      ks__has_field_crab_move_tactic: # Field №36
        value: (ks__bit_field.value & 0b0000000000000001000000000000000000000000000000000000) != 0
      ks__has_field_flee_tactic: # Field №37
        value: (ks__bit_field.value & 0b0000000000000010000000000000000000000000000000000000) != 0
      ks__has_field_flee_on_block_avatar_landing_tactic: # Field №38
        value: (ks__bit_field.value & 0b0000000000000100000000000000000000000000000000000000) != 0
      ks__has_field_spacial_chase_tactic: # Field №39
        value: (ks__bit_field.value & 0b0000000000001000000000000000000000000000000000000000) != 0
      ks__has_field_spacial_probe_tactic: # Field №40
        value: (ks__bit_field.value & 0b0000000000010000000000000000000000000000000000000000) != 0
      ks__has_field_spacial_adjust_tactic: # Field №41
        value: (ks__bit_field.value & 0b0000000000100000000000000000000000000000000000000000) != 0
      ks__has_field_bird_circling_tactic: # Field №42
        value: (ks__bit_field.value & 0b0000000001000000000000000000000000000000000000000000) != 0
      ks__has_field_scripted_move_to_tactic: # Field №43
        value: (ks__bit_field.value & 0b0000000010000000000000000000000000000000000000000000) != 0
      ks__has_field_landing_tactic: # Field №44
        value: (ks__bit_field.value & 0b0000000100000000000000000000000000000000000000000000) != 0
      ks__has_field_extraction_tactic: # Field №45
        value: (ks__bit_field.value & 0b0000001000000000000000000000000000000000000000000000) != 0
      ks__has_field_brownian_motion_tactic: # Field №46
        value: (ks__bit_field.value & 0b0000010000000000000000000000000000000000000000000000) != 0
      ks__has_field_spacial_facing_move_tactic: # Field №47
        value: (ks__bit_field.value & 0b0000100000000000000000000000000000000000000000000000) != 0
      ks__has_field_mixin: # Field №48
        value: (ks__bit_field.value & 0b0001000000000000000000000000000000000000000000000000) != 0
      ks__has_field_fishing_bites_bait_tactic: # Field №49
        value: (ks__bit_field.value & 0b0010000000000000000000000000000000000000000000000000) != 0
      ks__has_field_fishing_pretend_bites_tactic: # Field №50
        value: (ks__bit_field.value & 0b0100000000000000000000000000000000000000000000000000) != 0
      ks__has_field_fishing_flee_tactic: # Field №51
        value: (ks__bit_field.value & 0b1000000000000000000000000000000000000000000000000000) != 0
  config_fluctuated_value:
    seq:
      - id: ks__bit_field
        type: u1
      - id: upper
        type: f4
        if: ks__has_field_upper
      - id: lower
        type: f4
        if: ks__has_field_lower
    instances:
      ks__has_field_upper: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_lower: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_animation_recurrent_speech:
    seq:
      - id: ks__bit_field
        type: u1
      - id: start
        type: config_fluctuated_value
        if: ks__has_field_start
      - id: interval
        type: config_fluctuated_value
        if: ks__has_field_interval
      - id: event_name
        type: config_wwise_string
        if: ks__has_field_event_name
    instances:
      ks__has_field_start: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_interval: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_event_name: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__enum__state_audio_event_usage:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: state_audio_event_usage
  config_state_audio_event:
    seq:
      - id: ks__bit_field
        type: u1
      - id: current_state_name
        type: aux_types::string
        if: ks__has_field_current_state_name
      - id: audio_event
        type: config_wwise_string
        if: ks__has_field_audio_event
      - id: other_state_names
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_other_state_names
      - id: usage
        type: ks__enum__state_audio_event_usage
        if: ks__has_field_usage
    instances:
      ks__has_field_current_state_name: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_audio_event: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_other_state_names: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_usage: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  ks__array_of__config_state_audio_event__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_state_audio_event
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__aux_types__string_config_animation_recurrent_speech:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: config_animation_recurrent_speech
  ks__dict_of__aux_types__string_config_animation_recurrent_speech:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_config_animation_recurrent_speech
        repeat: expr
        repeat-expr: length.value
  config_animation_audio:
    seq:
      - id: ks__bit_field
        type: u1
      - id: on_transition_in
        type: ks__array_of__config_state_audio_event__length_u
        if: ks__has_field_on_transition_in
      - id: on_transition_out
        type: ks__array_of__config_state_audio_event__length_u
        if: ks__has_field_on_transition_out
      - id: recurrent_speeches
        type: ks__dict_of__aux_types__string_config_animation_recurrent_speech
        if: ks__has_field_recurrent_speeches
    instances:
      ks__has_field_on_transition_in: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_on_transition_out: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_recurrent_speeches: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__kvp_of_dict__aux_types__vlq_base128_le_s_ks__array_of__aux_types__string__length_u:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_s
      - id: value
        type: ks__array_of__aux_types__string__length_u
  ks__dict_of__aux_types__vlq_base128_le_s_ks__array_of__aux_types__string__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_s_ks__array_of__aux_types__string__length_u
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__aux_types__string_aux_types__vlq_base128_le_u:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: aux_types::vlq_base128_le_u
  ks__dict_of__aux_types__string_aux_types__vlq_base128_le_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_aux_types__vlq_base128_le_u
        repeat: expr
        repeat-expr: length.value
  config_animator:
    seq:
      - id: ks__bit_field
        type: u1
      - id: free_style_state_map
        type: ks__dict_of__aux_types__vlq_base128_le_s_ks__array_of__aux_types__string__length_u
        if: ks__has_field_free_style_state_map
      - id: state_anime_map
        type: ks__dict_of__aux_types__string_aux_types__vlq_base128_le_u
        if: ks__has_field_state_anime_map
    instances:
      ks__has_field_free_style_state_map: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_state_anime_map: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_anim_pattern_path:
    seq:
      - id: ks__bit_field
        type: u1
      - id: anim_pattern_paths
        type: ks__dict_of__aux_types__string_ks__array_of__aux_types__string__length_u
        if: ks__has_field_anim_pattern_paths
    instances:
      ks__has_field_anim_pattern_paths: # Field №0
        value: (ks__bit_field & 0b1) != 0
  ks__enum__reference_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: reference_type
  reference_type_comparer:
    seq: []
    instances: {}
  check_hit_layer_type_comparer:
    seq: []
    instances: {}
  ks__enum__circle_detect_direction:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: circle_detect_direction
  circle_detect_direction_comparer:
    seq: []
    instances: {}
  ks__enum__sphere_detect_direction:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: sphere_detect_direction
  sphere_detect_direction_comparer:
    seq: []
    instances: {}
  entity_attack_filter_comparer:
    seq: []
    instances: {}
  config_simple_attack_pattern_register:
    seq: []
    instances: {}
  config_simple_attack_pattern:
    seq:
      - id: ks__base
        type: config_base_attack_pattern
      - id: ks__bit_field
        type: u1
      - id: use_custom_shape
        type: u1
        if: ks__has_field_use_custom_shape
    instances:
      ks__has_field_use_custom_shape: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      trigger_type:
        value: ks__base.trigger_type
      check_hit_layer_type:
        value: ks__base.check_hit_layer_type
      hit_scene:
        value: ks__base.hit_scene
      trigger_cd:
        value: ks__base.trigger_cd
      filter_by_frame:
        value: ks__base.filter_by_frame
      ignore_massive:
        value: ks__base.ignore_massive
      entity_attack_filter:
        value: ks__base.entity_attack_filter
      massive_attack_ratio:
        value: ks__base.massive_attack_ratio
      born:
        value: ks__base.born
  config_attack_use_prefab_register:
    seq: []
    instances: {}
  config_attack_use_prefab:
    seq:
      - id: ks__base
        type: config_base_attack_pattern
      - id: ks__bit_field
        type: u1
      - id: prefab_path_name
        type: aux_types::string
        if: ks__has_field_prefab_path_name
      - id: is_connect
        type: u1
        if: ks__has_field_is_connect
      - id: duration
        type: f4
        if: ks__has_field_duration
    instances:
      ks__has_field_prefab_path_name: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_is_connect: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_duration: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      trigger_type:
        value: ks__base.trigger_type
      check_hit_layer_type:
        value: ks__base.check_hit_layer_type
      hit_scene:
        value: ks__base.hit_scene
      trigger_cd:
        value: ks__base.trigger_cd
      filter_by_frame:
        value: ks__base.filter_by_frame
      ignore_massive:
        value: ks__base.ignore_massive
      entity_attack_filter:
        value: ks__base.entity_attack_filter
      massive_attack_ratio:
        value: ks__base.massive_attack_ratio
      born:
        value: ks__base.born
  config_attack_trail_register:
    seq: []
    instances: {}
  config_attack_trail:
    seq:
      - id: ks__base
        type: config_simple_attack_pattern
      - id: ks__bit_field
        type: u1
      - id: trail_name
        type: aux_types::string
        if: ks__has_field_trail_name
      - id: trail_start_name
        type: aux_types::string
        if: ks__has_field_trail_start_name
    instances:
      ks__has_field_trail_name: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_trail_start_name: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      use_custom_shape:
        value: ks__base.use_custom_shape
      trigger_type:
        value: ks__base.trigger_type
      check_hit_layer_type:
        value: ks__base.check_hit_layer_type
      hit_scene:
        value: ks__base.hit_scene
      trigger_cd:
        value: ks__base.trigger_cd
      filter_by_frame:
        value: ks__base.filter_by_frame
      ignore_massive:
        value: ks__base.ignore_massive
      entity_attack_filter:
        value: ks__base.entity_attack_filter
      massive_attack_ratio:
        value: ks__base.massive_attack_ratio
      born:
        value: ks__base.born
  config_attack_double_trail_register:
    seq: []
    instances: {}
  config_attack_double_trail:
    seq:
      - id: ks__base
        type: config_attack_trail
      - id: ks__bit_field
        type: u1
      - id: trail2name
        type: aux_types::string
        if: ks__has_field_trail2name
      - id: trail_start2name
        type: aux_types::string
        if: ks__has_field_trail_start2name
    instances:
      ks__has_field_trail2name: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_trail_start2name: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      trail_name:
        value: ks__base.trail_name
      trail_start_name:
        value: ks__base.trail_start_name
      use_custom_shape:
        value: ks__base.use_custom_shape
      trigger_type:
        value: ks__base.trigger_type
      check_hit_layer_type:
        value: ks__base.check_hit_layer_type
      hit_scene:
        value: ks__base.hit_scene
      trigger_cd:
        value: ks__base.trigger_cd
      filter_by_frame:
        value: ks__base.filter_by_frame
      ignore_massive:
        value: ks__base.ignore_massive
      entity_attack_filter:
        value: ks__base.entity_attack_filter
      massive_attack_ratio:
        value: ks__base.massive_attack_ratio
      born:
        value: ks__base.born
  config_attack_box_register:
    seq: []
    instances: {}
  config_attack_box:
    seq:
      - id: ks__base
        type: config_simple_attack_pattern
      - id: ks__bit_field
        type: u1
      - id: size
        type: dynamic_float_vector
        if: ks__has_field_size
      - id: mute_hit_behind_scene
        type: u1
        if: ks__has_field_mute_hit_behind_scene
    instances:
      ks__has_field_size: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_mute_hit_behind_scene: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      use_custom_shape:
        value: ks__base.use_custom_shape
      trigger_type:
        value: ks__base.trigger_type
      check_hit_layer_type:
        value: ks__base.check_hit_layer_type
      hit_scene:
        value: ks__base.hit_scene
      trigger_cd:
        value: ks__base.trigger_cd
      filter_by_frame:
        value: ks__base.filter_by_frame
      ignore_massive:
        value: ks__base.ignore_massive
      entity_attack_filter:
        value: ks__base.entity_attack_filter
      massive_attack_ratio:
        value: ks__base.massive_attack_ratio
      born:
        value: ks__base.born
  config_attack_circle_register:
    seq: []
    instances: {}
  config_attack_circle:
    seq:
      - id: ks__base
        type: config_simple_attack_pattern
      - id: ks__bit_field
        type: u1
      - id: height
        type: f4
        if: ks__has_field_height
      - id: fan_angle
        type: f4
        if: ks__has_field_fan_angle
      - id: radius
        type: aux_types::dynamic_float
        if: ks__has_field_radius
      - id: inner_radius
        type: aux_types::dynamic_float
        if: ks__has_field_inner_radius
      - id: detect_direction
        type: ks__enum__circle_detect_direction
        if: ks__has_field_detect_direction
    instances:
      ks__has_field_height: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_fan_angle: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_radius: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_inner_radius: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_detect_direction: # Field №4
        value: (ks__bit_field & 0b10000) != 0
      # Base class fields
      use_custom_shape:
        value: ks__base.use_custom_shape
      trigger_type:
        value: ks__base.trigger_type
      check_hit_layer_type:
        value: ks__base.check_hit_layer_type
      hit_scene:
        value: ks__base.hit_scene
      trigger_cd:
        value: ks__base.trigger_cd
      filter_by_frame:
        value: ks__base.filter_by_frame
      ignore_massive:
        value: ks__base.ignore_massive
      entity_attack_filter:
        value: ks__base.entity_attack_filter
      massive_attack_ratio:
        value: ks__base.massive_attack_ratio
      born:
        value: ks__base.born
  config_attack_sphere_register:
    seq: []
    instances: {}
  config_attack_sphere:
    seq:
      - id: ks__base
        type: config_simple_attack_pattern
      - id: ks__bit_field
        type: u1
      - id: radius
        type: aux_types::dynamic_float
        if: ks__has_field_radius
      - id: detect_direction
        type: ks__enum__sphere_detect_direction
        if: ks__has_field_detect_direction
    instances:
      ks__has_field_radius: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_detect_direction: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      use_custom_shape:
        value: ks__base.use_custom_shape
      trigger_type:
        value: ks__base.trigger_type
      check_hit_layer_type:
        value: ks__base.check_hit_layer_type
      hit_scene:
        value: ks__base.hit_scene
      trigger_cd:
        value: ks__base.trigger_cd
      filter_by_frame:
        value: ks__base.filter_by_frame
      ignore_massive:
        value: ks__base.ignore_massive
      entity_attack_filter:
        value: ks__base.entity_attack_filter
      massive_attack_ratio:
        value: ks__base.massive_attack_ratio
      born:
        value: ks__base.born
  audio_ambience_positioned_event:
    seq:
      - id: ks__bit_field
        type: u1
      - id: event_name
        type: config_wwise_string
        if: ks__has_field_event_name
      - id: min_init_delay
        type: f4
        if: ks__has_field_min_init_delay
      - id: max_init_delay
        type: f4
        if: ks__has_field_max_init_delay
      - id: min_interval
        type: f4
        if: ks__has_field_min_interval
      - id: max_interval
        type: f4
        if: ks__has_field_max_interval
    instances:
      ks__has_field_event_name: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_min_init_delay: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_max_init_delay: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_min_interval: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_max_interval: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  ks__enum__multi_position_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: multi_position_type
  multi_position_type_comparer:
    seq: []
    instances: {}
  audio_tree_data_asset_name_pattern:
    seq:
      - id: ks__bit_field
        type: u1
      - id: scene_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scene_id
      - id: pattern
        type: aux_types::string
        if: ks__has_field_pattern
    instances:
      ks__has_field_scene_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_pattern: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__array_of__audio_tree_data_asset_name_pattern__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: audio_tree_data_asset_name_pattern
        repeat: expr
        repeat-expr: length.value
  config_audio_tree_info:
    seq:
      - id: ks__bit_field
        type: u1
      - id: detect_radius
        type: f4
        if: ks__has_field_detect_radius
      - id: data_asset_folder
        type: aux_types::string
        if: ks__has_field_data_asset_folder
      - id: tree_sound_event_name
        type: config_wwise_string
        if: ks__has_field_tree_sound_event_name
      - id: tree_num_rtpc_name
        type: config_wwise_string
        if: ks__has_field_tree_num_rtpc_name
      - id: multi_position_type
        type: ks__enum__multi_position_type
        if: ks__has_field_multi_position_type
      - id: data_asset_name_patterns
        type: ks__array_of__audio_tree_data_asset_name_pattern__length_u
        if: ks__has_field_data_asset_name_patterns
    instances:
      ks__has_field_detect_radius: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_data_asset_folder: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_tree_sound_event_name: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_tree_num_rtpc_name: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_multi_position_type: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_data_asset_name_patterns: # Field №5
        value: (ks__bit_field & 0b100000) != 0
  config_audio_dynamic_ray_info:
    seq:
      - id: ks__bit_field
        type: u1
      - id: ray_per_frame
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_ray_per_frame
      - id: moving_lerp_ratio
        type: f4
        if: ks__has_field_moving_lerp_ratio
      - id: stand_lerp_ratio
        type: f4
        if: ks__has_field_stand_lerp_ratio
      - id: ray_max_distance
        type: f4
        if: ks__has_field_ray_max_distance
      - id: is_debug
        type: u1
        if: ks__has_field_is_debug
      - id: rtpc_param
        type: config_wwise_string
        if: ks__has_field_rtpc_param
      - id: grass_count_rtpc
        type: config_wwise_string
        if: ks__has_field_grass_count_rtpc
    instances:
      ks__has_field_ray_per_frame: # Field №0
        value: (ks__bit_field & 0b0000001) != 0
      ks__has_field_moving_lerp_ratio: # Field №1
        value: (ks__bit_field & 0b0000010) != 0
      ks__has_field_stand_lerp_ratio: # Field №2
        value: (ks__bit_field & 0b0000100) != 0
      ks__has_field_ray_max_distance: # Field №3
        value: (ks__bit_field & 0b0001000) != 0
      ks__has_field_is_debug: # Field №4
        value: (ks__bit_field & 0b0010000) != 0
      ks__has_field_rtpc_param: # Field №5
        value: (ks__bit_field & 0b0100000) != 0
      ks__has_field_grass_count_rtpc: # Field №6
        value: (ks__bit_field & 0b1000000) != 0
  ks__array_of__audio_state_op__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: audio_state_op
        repeat: expr
        repeat-expr: length.value
  config_audio_area2d_info:
    seq:
      - id: ks__bit_field
        type: u1
      - id: leave_reverb_delay
        type: f4
        if: ks__has_field_leave_reverb_delay
      - id: enter_reverb_states
        type: ks__array_of__audio_state_op__length_u
        if: ks__has_field_enter_reverb_states
      - id: leave_reverb_states
        type: ks__array_of__audio_state_op__length_u
        if: ks__has_field_leave_reverb_states
    instances:
      ks__has_field_leave_reverb_delay: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_enter_reverb_states: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_leave_reverb_states: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__array_of__audio_ambience_positioned_event__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: audio_ambience_positioned_event
        repeat: expr
        repeat-expr: length.value
  config_audio_ambience:
    seq:
      - id: ks__bit_field
        type: u1
      - id: effective_scene_ids
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_effective_scene_ids
      - id: relative_positions
        type: ks__array_of__vector__length_u
        if: ks__has_field_relative_positions
      - id: positioned_events
        type: ks__array_of__audio_ambience_positioned_event__length_u
        if: ks__has_field_positioned_events
      - id: tree_info
        type: config_audio_tree_info
        if: ks__has_field_tree_info
      - id: dynamic_ray_info
        type: config_audio_dynamic_ray_info
        if: ks__has_field_dynamic_ray_info
      - id: area2d_info
        type: config_audio_area2d_info
        if: ks__has_field_area2d_info
    instances:
      ks__has_field_effective_scene_ids: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_relative_positions: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_positioned_events: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_tree_info: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_dynamic_ray_info: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_area2d_info: # Field №5
        value: (ks__bit_field & 0b100000) != 0
  ks__array_of__config_wwise_string__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_wwise_string
        repeat: expr
        repeat-expr: length.value
  config_audio_area2d_ambience:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: area_name
        type: aux_types::string
        if: ks__has_field_area_name
      - id: area_points
        type: ks__array_of__vector__length_u
        if: ks__has_field_area_points
      - id: y_zero_anchor
        type: f4
        if: ks__has_field_y_zero_anchor
      - id: area_group_name
        type: config_wwise_string
        if: ks__has_field_area_group_name
      - id: enable_height_check
        type: u1
        if: ks__has_field_enable_height_check
      - id: top
        type: f4
        if: ks__has_field_top
      - id: bottom
        type: f4
        if: ks__has_field_bottom
      - id: is_ambience
        type: u1
        if: ks__has_field_is_ambience
      - id: enter_events
        type: ks__array_of__config_wwise_string__length_u
        if: ks__has_field_enter_events
      - id: leave_events
        type: ks__array_of__config_wwise_string__length_u
        if: ks__has_field_leave_events
      - id: is_reverb
        type: u1
        if: ks__has_field_is_reverb
      - id: aux_bus_name
        type: config_wwise_string
        if: ks__has_field_aux_bus_name
      - id: priority
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_priority
      - id: exclude_other
        type: u1
        if: ks__has_field_exclude_other
      - id: enable_change_states
        type: u1
        if: ks__has_field_enable_change_states
      - id: enter_states
        type: ks__array_of__audio_state_op__length_u
        if: ks__has_field_enter_states
      - id: leave_states
        type: ks__array_of__audio_state_op__length_u
        if: ks__has_field_leave_states
    instances:
      ks__has_field_area_name: # Field №0
        value: (ks__bit_field.value & 0b00000000000000001) != 0
      ks__has_field_area_points: # Field №1
        value: (ks__bit_field.value & 0b00000000000000010) != 0
      ks__has_field_y_zero_anchor: # Field №2
        value: (ks__bit_field.value & 0b00000000000000100) != 0
      ks__has_field_area_group_name: # Field №3
        value: (ks__bit_field.value & 0b00000000000001000) != 0
      ks__has_field_enable_height_check: # Field №4
        value: (ks__bit_field.value & 0b00000000000010000) != 0
      ks__has_field_top: # Field №5
        value: (ks__bit_field.value & 0b00000000000100000) != 0
      ks__has_field_bottom: # Field №6
        value: (ks__bit_field.value & 0b00000000001000000) != 0
      ks__has_field_is_ambience: # Field №7
        value: (ks__bit_field.value & 0b00000000010000000) != 0
      ks__has_field_enter_events: # Field №8
        value: (ks__bit_field.value & 0b00000000100000000) != 0
      ks__has_field_leave_events: # Field №9
        value: (ks__bit_field.value & 0b00000001000000000) != 0
      ks__has_field_is_reverb: # Field №10
        value: (ks__bit_field.value & 0b00000010000000000) != 0
      ks__has_field_aux_bus_name: # Field №11
        value: (ks__bit_field.value & 0b00000100000000000) != 0
      ks__has_field_priority: # Field №12
        value: (ks__bit_field.value & 0b00001000000000000) != 0
      ks__has_field_exclude_other: # Field №13
        value: (ks__bit_field.value & 0b00010000000000000) != 0
      ks__has_field_enable_change_states: # Field №14
        value: (ks__bit_field.value & 0b00100000000000000) != 0
      ks__has_field_enter_states: # Field №15
        value: (ks__bit_field.value & 0b01000000000000000) != 0
      ks__has_field_leave_states: # Field №16
        value: (ks__bit_field.value & 0b10000000000000000) != 0
  config_audio_avatar:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: voice_switch_key
        type: config_wwise_string
        if: ks__has_field_voice_switch_key
      - id: body_type_switch_key
        type: config_wwise_string
        if: ks__has_field_body_type_switch_key
      - id: weapon_put_away_anim_state_whitelist
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_weapon_put_away_anim_state_whitelist
      - id: energy_ratio_rtpc
        type: config_wwise_string
        if: ks__has_field_energy_ratio_rtpc
      - id: team_hp_rtpc
        type: config_wwise_string
        if: ks__has_field_team_hp_rtpc
      - id: team_hp_alive_ratio
        type: f4
        if: ks__has_field_team_hp_alive_ratio
      - id: avatar_access_type_switch_group
        type: config_wwise_string
        if: ks__has_field_avatar_access_type_switch_group
      - id: local_avatar_switch_value
        type: config_wwise_string
        if: ks__has_field_local_avatar_switch_value
      - id: remote_avatar_switch_value
        type: config_wwise_string
        if: ks__has_field_remote_avatar_switch_value
    instances:
      ks__has_field_voice_switch_key: # Field №0
        value: (ks__bit_field.value & 0b000000001) != 0
      ks__has_field_body_type_switch_key: # Field №1
        value: (ks__bit_field.value & 0b000000010) != 0
      ks__has_field_weapon_put_away_anim_state_whitelist: # Field №2
        value: (ks__bit_field.value & 0b000000100) != 0
      ks__has_field_energy_ratio_rtpc: # Field №3
        value: (ks__bit_field.value & 0b000001000) != 0
      ks__has_field_team_hp_rtpc: # Field №4
        value: (ks__bit_field.value & 0b000010000) != 0
      ks__has_field_team_hp_alive_ratio: # Field №5
        value: (ks__bit_field.value & 0b000100000) != 0
      ks__has_field_avatar_access_type_switch_group: # Field №6
        value: (ks__bit_field.value & 0b001000000) != 0
      ks__has_field_local_avatar_switch_value: # Field №7
        value: (ks__bit_field.value & 0b010000000) != 0
      ks__has_field_remote_avatar_switch_value: # Field №8
        value: (ks__bit_field.value & 0b100000000) != 0
  config_audio_avatar_move:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: fly_direction_rtpc_key
        type: config_wwise_string
        if: ks__has_field_fly_direction_rtpc_key
      - id: fly_direction_rtpc_front
        type: f4
        if: ks__has_field_fly_direction_rtpc_front
      - id: fly_direction_rtpc_side
        type: f4
        if: ks__has_field_fly_direction_rtpc_side
      - id: fly_direction_rtpc_back
        type: f4
        if: ks__has_field_fly_direction_rtpc_back
      - id: fly_direction_rtpc_drop
        type: f4
        if: ks__has_field_fly_direction_rtpc_drop
      - id: last_frame_speed_in_air_rtpc_key
        type: config_wwise_string
        if: ks__has_field_last_frame_speed_in_air_rtpc_key
      - id: event_fall_in_water
        type: config_wwise_string
        if: ks__has_field_event_fall_in_water
      - id: altitude_rtpc_key
        type: config_wwise_string
        if: ks__has_field_altitude_rtpc_key
      - id: slope_rtpc_key
        type: config_wwise_string
        if: ks__has_field_slope_rtpc_key
      - id: fly_turn_event
        type: config_wwise_string
        if: ks__has_field_fly_turn_event
      - id: fly_turn_event_interval
        type: f4
        if: ks__has_field_fly_turn_event_interval
      - id: fly_speed_rtpc_key
        type: config_wwise_string
        if: ks__has_field_fly_speed_rtpc_key
      - id: airflow_speed_gain
        type: f4
        if: ks__has_field_airflow_speed_gain
      - id: airflow_gain_fade_length
        type: f4
        if: ks__has_field_airflow_gain_fade_length
      - id: climb_vertical_scaler_rtpc_key
        type: config_wwise_string
        if: ks__has_field_climb_vertical_scaler_rtpc_key
      - id: climb_vertical_scaler_animator_key
        type: config_wwise_string
        if: ks__has_field_climb_vertical_scaler_animator_key
      - id: camera_angle_x_rtpc_key
        type: config_wwise_string
        if: ks__has_field_camera_angle_x_rtpc_key
      - id: camera_angle_y_rtpc_key
        type: config_wwise_string
        if: ks__has_field_camera_angle_y_rtpc_key
      - id: enter_speedup_field_event
        type: config_wwise_string
        if: ks__has_field_enter_speedup_field_event
      - id: fall_on_water_rtpc_key
        type: config_wwise_string
        if: ks__has_field_fall_on_water_rtpc_key
    instances:
      ks__has_field_fly_direction_rtpc_key: # Field №0
        value: (ks__bit_field.value & 0b00000000000000000001) != 0
      ks__has_field_fly_direction_rtpc_front: # Field №1
        value: (ks__bit_field.value & 0b00000000000000000010) != 0
      ks__has_field_fly_direction_rtpc_side: # Field №2
        value: (ks__bit_field.value & 0b00000000000000000100) != 0
      ks__has_field_fly_direction_rtpc_back: # Field №3
        value: (ks__bit_field.value & 0b00000000000000001000) != 0
      ks__has_field_fly_direction_rtpc_drop: # Field №4
        value: (ks__bit_field.value & 0b00000000000000010000) != 0
      ks__has_field_last_frame_speed_in_air_rtpc_key: # Field №5
        value: (ks__bit_field.value & 0b00000000000000100000) != 0
      ks__has_field_event_fall_in_water: # Field №6
        value: (ks__bit_field.value & 0b00000000000001000000) != 0
      ks__has_field_altitude_rtpc_key: # Field №7
        value: (ks__bit_field.value & 0b00000000000010000000) != 0
      ks__has_field_slope_rtpc_key: # Field №8
        value: (ks__bit_field.value & 0b00000000000100000000) != 0
      ks__has_field_fly_turn_event: # Field №9
        value: (ks__bit_field.value & 0b00000000001000000000) != 0
      ks__has_field_fly_turn_event_interval: # Field №10
        value: (ks__bit_field.value & 0b00000000010000000000) != 0
      ks__has_field_fly_speed_rtpc_key: # Field №11
        value: (ks__bit_field.value & 0b00000000100000000000) != 0
      ks__has_field_airflow_speed_gain: # Field №12
        value: (ks__bit_field.value & 0b00000001000000000000) != 0
      ks__has_field_airflow_gain_fade_length: # Field №13
        value: (ks__bit_field.value & 0b00000010000000000000) != 0
      ks__has_field_climb_vertical_scaler_rtpc_key: # Field №14
        value: (ks__bit_field.value & 0b00000100000000000000) != 0
      ks__has_field_climb_vertical_scaler_animator_key: # Field №15
        value: (ks__bit_field.value & 0b00001000000000000000) != 0
      ks__has_field_camera_angle_x_rtpc_key: # Field №16
        value: (ks__bit_field.value & 0b00010000000000000000) != 0
      ks__has_field_camera_angle_y_rtpc_key: # Field №17
        value: (ks__bit_field.value & 0b00100000000000000000) != 0
      ks__has_field_enter_speedup_field_event: # Field №18
        value: (ks__bit_field.value & 0b01000000000000000000) != 0
      ks__has_field_fall_on_water_rtpc_key: # Field №19
        value: (ks__bit_field.value & 0b10000000000000000000) != 0
  ks__enum__audio_platform_move_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: audio_platform_move_type
  audio_platform_move_type_comparer:
    seq: []
    instances: {}
  audio_platform_move_settings:
    seq:
      - id: ks__bit_field
        type: u1
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: move_type
        type: ks__enum__audio_platform_move_type
        if: ks__has_field_move_type
      - id: move_start_event
        type: config_wwise_string
        if: ks__has_field_move_start_event
      - id: move_stop_event
        type: config_wwise_string
        if: ks__has_field_move_stop_event
      - id: rotate_start_event
        type: config_wwise_string
        if: ks__has_field_rotate_start_event
      - id: rotate_stop_event
        type: config_wwise_string
        if: ks__has_field_rotate_stop_event
      - id: linear_velocity_threshold
        type: f4
        if: ks__has_field_linear_velocity_threshold
      - id: angular_velocity_threshold
        type: f4
        if: ks__has_field_angular_velocity_threshold
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_move_type: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_move_start_event: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_move_stop_event: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_rotate_start_event: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_rotate_stop_event: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_linear_velocity_threshold: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_angular_velocity_threshold: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
  audio_platform_move_settings_usage_pair:
    seq:
      - id: ks__bit_field
        type: u1
      - id: entity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_entity_id
      - id: settings_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_settings_id
    instances:
      ks__has_field_entity_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_settings_id: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__array_of__audio_platform_move_settings__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: audio_platform_move_settings
        repeat: expr
        repeat-expr: length.value
  ks__array_of__audio_platform_move_settings_usage_pair__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: audio_platform_move_settings_usage_pair
        repeat: expr
        repeat-expr: length.value
  config_audio_base_move:
    seq:
      - id: ks__bit_field
        type: u1
      - id: move_rtpc_key
        type: config_wwise_string
        if: ks__has_field_move_rtpc_key
      - id: platform_settings
        type: ks__array_of__audio_platform_move_settings__length_u
        if: ks__has_field_platform_settings
      - id: platform_setting_usage_mapping
        type: ks__array_of__audio_platform_move_settings_usage_pair__length_u
        if: ks__has_field_platform_setting_usage_mapping
    instances:
      ks__has_field_move_rtpc_key: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_platform_settings: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_platform_setting_usage_mapping: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_audio_camera:
    seq:
      - id: ks__bit_field
        type: u1
      - id: camera_pitch_rtpc_key
        type: config_wwise_string
        if: ks__has_field_camera_pitch_rtpc_key
    instances:
      ks__has_field_camera_pitch_rtpc_key: # Field №0
        value: (ks__bit_field & 0b1) != 0
  ks__kvp_of_dict__aux_types__string_config_wwise_string:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: config_wwise_string
  ks__dict_of__aux_types__string_config_wwise_string:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_config_wwise_string
        repeat: expr
        repeat-expr: length.value
  config_audio_city_blocks:
    seq:
      - id: ks__bit_field
        type: u1
      - id: music_sub_states
        type: ks__dict_of__aux_types__string_config_wwise_string
        if: ks__has_field_music_sub_states
    instances:
      ks__has_field_music_sub_states: # Field №0
        value: (ks__bit_field & 0b1) != 0
  audio_impact_override_event:
    seq:
      - id: ks__bit_field
        type: u1
      - id: entity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_entity_id
      - id: impact_event
        type: audio_one_time_event
        if: ks__has_field_impact_event
    instances:
      ks__has_field_entity_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_impact_event: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__kvp_of_dict__ks__enum__strike_type_config_wwise_string:
    seq:
      - id: key
        type: ks__enum__strike_type
      - id: value
        type: config_wwise_string
  ks__dict_of__ks__enum__strike_type_config_wwise_string:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__ks__enum__strike_type_config_wwise_string
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__ks__enum__element_type_config_wwise_string:
    seq:
      - id: key
        type: ks__enum__element_type
      - id: value
        type: config_wwise_string
  ks__dict_of__ks__enum__element_type_config_wwise_string:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__ks__enum__element_type_config_wwise_string
        repeat: expr
        repeat-expr: length.value
  ks__array_of__audio_impact_override_event__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: audio_impact_override_event
        repeat: expr
        repeat-expr: length.value
  config_audio_combat:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: impact_event
        type: audio_one_time_event
        if: ks__has_field_impact_event
      - id: arrow_impact_head_event
        type: audio_one_time_event
        if: ks__has_field_arrow_impact_head_event
      - id: bush_impact_event
        type: audio_one_time_event
        if: ks__has_field_bush_impact_event
      - id: tree_impact_event
        type: audio_one_time_event
        if: ks__has_field_tree_impact_event
      - id: put_away_weapon_event
        type: config_wwise_string
        if: ks__has_field_put_away_weapon_event
      - id: strike_type_switch_key
        type: config_wwise_string
        if: ks__has_field_strike_type_switch_key
      - id: strike_type_switch_map
        type: ks__dict_of__ks__enum__strike_type_config_wwise_string
        if: ks__has_field_strike_type_switch_map
      - id: strike_type_switch_default
        type: config_wwise_string
        if: ks__has_field_strike_type_switch_default
      - id: element_type_switch_key
        type: config_wwise_string
        if: ks__has_field_element_type_switch_key
      - id: element_type_switch_map
        type: ks__dict_of__ks__enum__element_type_config_wwise_string
        if: ks__has_field_element_type_switch_map
      - id: element_type_switch_default
        type: config_wwise_string
        if: ks__has_field_element_type_switch_default
      - id: hit_scene_event
        type: audio_one_time_event
        if: ks__has_field_hit_scene_event
      - id: whether_recurring_switch_key
        type: config_wwise_string
        if: ks__has_field_whether_recurring_switch_key
      - id: hit_oneshot_switch_value
        type: config_wwise_string
        if: ks__has_field_hit_oneshot_switch_value
      - id: hit_recurring_switch_value
        type: config_wwise_string
        if: ks__has_field_hit_recurring_switch_value
      - id: entity_fade_out_event
        type: config_wwise_string
        if: ks__has_field_entity_fade_out_event
      - id: patroller_temperature_rtpc
        type: config_wwise_string
        if: ks__has_field_patroller_temperature_rtpc
      - id: patroller_aware_event
        type: config_wwise_string
        if: ks__has_field_patroller_aware_event
      - id: patroller_alert_event
        type: config_wwise_string
        if: ks__has_field_patroller_alert_event
      - id: patroller_calm_event
        type: config_wwise_string
        if: ks__has_field_patroller_calm_event
      - id: impact_override_events
        type: ks__array_of__audio_impact_override_event__length_u
        if: ks__has_field_impact_override_events
      - id: arrow_impact_override_events
        type: ks__array_of__audio_impact_override_event__length_u
        if: ks__has_field_arrow_impact_override_events
      - id: hitting_scene_ignore_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_hitting_scene_ignore_list
    instances:
      ks__has_field_impact_event: # Field №0
        value: (ks__bit_field.value & 0b00000000000000000000001) != 0
      ks__has_field_arrow_impact_head_event: # Field №1
        value: (ks__bit_field.value & 0b00000000000000000000010) != 0
      ks__has_field_bush_impact_event: # Field №2
        value: (ks__bit_field.value & 0b00000000000000000000100) != 0
      ks__has_field_tree_impact_event: # Field №3
        value: (ks__bit_field.value & 0b00000000000000000001000) != 0
      ks__has_field_put_away_weapon_event: # Field №4
        value: (ks__bit_field.value & 0b00000000000000000010000) != 0
      ks__has_field_strike_type_switch_key: # Field №5
        value: (ks__bit_field.value & 0b00000000000000000100000) != 0
      ks__has_field_strike_type_switch_map: # Field №6
        value: (ks__bit_field.value & 0b00000000000000001000000) != 0
      ks__has_field_strike_type_switch_default: # Field №7
        value: (ks__bit_field.value & 0b00000000000000010000000) != 0
      ks__has_field_element_type_switch_key: # Field №8
        value: (ks__bit_field.value & 0b00000000000000100000000) != 0
      ks__has_field_element_type_switch_map: # Field №9
        value: (ks__bit_field.value & 0b00000000000001000000000) != 0
      ks__has_field_element_type_switch_default: # Field №10
        value: (ks__bit_field.value & 0b00000000000010000000000) != 0
      ks__has_field_hit_scene_event: # Field №11
        value: (ks__bit_field.value & 0b00000000000100000000000) != 0
      ks__has_field_whether_recurring_switch_key: # Field №12
        value: (ks__bit_field.value & 0b00000000001000000000000) != 0
      ks__has_field_hit_oneshot_switch_value: # Field №13
        value: (ks__bit_field.value & 0b00000000010000000000000) != 0
      ks__has_field_hit_recurring_switch_value: # Field №14
        value: (ks__bit_field.value & 0b00000000100000000000000) != 0
      ks__has_field_entity_fade_out_event: # Field №15
        value: (ks__bit_field.value & 0b00000001000000000000000) != 0
      ks__has_field_patroller_temperature_rtpc: # Field №16
        value: (ks__bit_field.value & 0b00000010000000000000000) != 0
      ks__has_field_patroller_aware_event: # Field №17
        value: (ks__bit_field.value & 0b00000100000000000000000) != 0
      ks__has_field_patroller_alert_event: # Field №18
        value: (ks__bit_field.value & 0b00001000000000000000000) != 0
      ks__has_field_patroller_calm_event: # Field №19
        value: (ks__bit_field.value & 0b00010000000000000000000) != 0
      ks__has_field_impact_override_events: # Field №20
        value: (ks__bit_field.value & 0b00100000000000000000000) != 0
      ks__has_field_arrow_impact_override_events: # Field №21
        value: (ks__bit_field.value & 0b01000000000000000000000) != 0
      ks__has_field_hitting_scene_ignore_list: # Field №22
        value: (ks__bit_field.value & 0b10000000000000000000000) != 0
  audio_dialog_reaction:
    seq:
      - id: ks__bit_field
        type: u1
      - id: dialog_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_dialog_id
      - id: state_ops_on_start
        type: ks__array_of__audio_state_op__length_u
        if: ks__has_field_state_ops_on_start
      - id: state_ops_on_finish
        type: ks__array_of__audio_state_op__length_u
        if: ks__has_field_state_ops_on_finish
      - id: event_on_start
        type: config_wwise_string
        if: ks__has_field_event_on_start
      - id: event_on_finish
        type: config_wwise_string
        if: ks__has_field_event_on_finish
    instances:
      ks__has_field_dialog_id: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_state_ops_on_start: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_state_ops_on_finish: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_event_on_start: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_event_on_finish: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  ks__array_of__audio_dialog_reaction__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: audio_dialog_reaction
        repeat: expr
        repeat-expr: length.value
  config_audio_dialog:
    seq:
      - id: ks__bit_field
        type: u1
      - id: reactions
        type: ks__array_of__audio_dialog_reaction__length_u
        if: ks__has_field_reactions
    instances:
      ks__has_field_reactions: # Field №0
        value: (ks__bit_field & 0b1) != 0
  ks__enum__audio_emitter_multi_position_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: audio_emitter_multi_position_type
  audio_emitter_multi_position_type_comparer:
    seq: []
    instances: {}
  config_audio_emitter:
    seq:
      - id: ks__bit_field
        type: u1
      - id: emitter_lifetime
        type: f4
        if: ks__has_field_emitter_lifetime
      - id: emit_interval
        type: f4
        if: ks__has_field_emit_interval
      - id: inst_lifetime
        type: f4
        if: ks__has_field_inst_lifetime
      - id: ending_duration
        type: f4
        if: ks__has_field_ending_duration
      - id: emit_event_name
        type: config_wwise_string
        if: ks__has_field_emit_event_name
      - id: end_event_name
        type: config_wwise_string
        if: ks__has_field_end_event_name
      - id: multi_position_type
        type: ks__enum__audio_emitter_multi_position_type
        if: ks__has_field_multi_position_type
    instances:
      ks__has_field_emitter_lifetime: # Field №0
        value: (ks__bit_field & 0b0000001) != 0
      ks__has_field_emit_interval: # Field №1
        value: (ks__bit_field & 0b0000010) != 0
      ks__has_field_inst_lifetime: # Field №2
        value: (ks__bit_field & 0b0000100) != 0
      ks__has_field_ending_duration: # Field №3
        value: (ks__bit_field & 0b0001000) != 0
      ks__has_field_emit_event_name: # Field №4
        value: (ks__bit_field & 0b0010000) != 0
      ks__has_field_end_event_name: # Field №5
        value: (ks__bit_field & 0b0100000) != 0
      ks__has_field_multi_position_type: # Field №6
        value: (ks__bit_field & 0b1000000) != 0
  config_audio_event_culling_rule_base:
    seq: []
    instances: {}
  config_rule_culling_distance_register:
    seq: []
    instances: {}
  config_rule_culling_distance:
    seq:
      - id: ks__base
        type: config_audio_event_culling_rule_base
      - id: ks__bit_field
        type: u1
      - id: distance
        type: f4
        if: ks__has_field_distance
    instances:
      ks__has_field_distance: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_rule_wait_distance_register:
    seq: []
    instances: {}
  config_rule_wait_distance:
    seq:
      - id: ks__base
        type: config_audio_event_culling_rule_base
      - id: ks__bit_field
        type: u1
      - id: distance
        type: f4
        if: ks__has_field_distance
      - id: recheck_frame
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_recheck_frame
    instances:
      ks__has_field_distance: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_recheck_frame: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_rule_limit_frame_global_register:
    seq: []
    instances: {}
  config_rule_limit_frame_global:
    seq:
      - id: ks__base
        type: config_audio_event_culling_rule_base
      - id: ks__bit_field
        type: u1
      - id: limit_frame
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_limit_frame
    instances:
      ks__has_field_limit_frame: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_rule_limit_frame_register:
    seq: []
    instances: {}
  config_rule_limit_frame:
    seq:
      - id: ks__base
        type: config_audio_event_culling_rule_base
      - id: ks__bit_field
        type: u1
      - id: limit_frame
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_limit_frame
    instances:
      ks__has_field_limit_frame: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_rule_culling_event_name_contain_register:
    seq: []
    instances: {}
  config_rule_culling_event_name_contain:
    seq:
      - id: ks__base
        type: config_audio_event_culling_rule_base
      - id: ks__bit_field
        type: u1
      - id: pattern
        type: aux_types::string
        if: ks__has_field_pattern
    instances:
      ks__has_field_pattern: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_rule_culling_event_register:
    seq: []
    instances: {}
  config_rule_culling_event:
    seq:
      - id: ks__base
        type: config_audio_event_culling_rule_base
    instances: {}
  ks__array_of__ks__disp__config_audio_event_culling_rule_base__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__disp__config_audio_event_culling_rule_base
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__aux_types__string_ks__array_of__ks__disp__config_audio_event_culling_rule_base__length_u:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: ks__array_of__ks__disp__config_audio_event_culling_rule_base__length_u
  ks__dict_of__aux_types__string_ks__array_of__ks__disp__config_audio_event_culling_rule_base__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_ks__array_of__ks__disp__config_audio_event_culling_rule_base__length_u
        repeat: expr
        repeat-expr: length.value
  config_audio_event_culling:
    seq:
      - id: ks__bit_field
        type: u1
      - id: rule_map
        type: ks__dict_of__aux_types__string_ks__array_of__ks__disp__config_audio_event_culling_rule_base__length_u
        if: ks__has_field_rule_map
      - id: global_rules
        type: ks__array_of__ks__disp__config_audio_event_culling_rule_base__length_u
        if: ks__has_field_global_rules
    instances:
      ks__has_field_rule_map: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_global_rules: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_audio_gadget:
    seq:
      - id: ks__bit_field
        type: u1
      - id: paimon_speed_rtpc_key
        type: config_wwise_string
        if: ks__has_field_paimon_speed_rtpc_key
      - id: vehicle_collision_rtpc
        type: config_wwise_string
        if: ks__has_field_vehicle_collision_rtpc
    instances:
      ks__has_field_paimon_speed_rtpc_key: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_vehicle_collision_rtpc: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_audio_game_view_state:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: state_group_name
        type: config_wwise_string
        if: ks__has_field_state_group_name
      - id: normal_state_value
        type: config_wwise_string
        if: ks__has_field_normal_state_value
      - id: focused_state_value
        type: config_wwise_string
        if: ks__has_field_focused_state_value
      - id: sneak_in_state_value
        type: config_wwise_string
        if: ks__has_field_sneak_in_state_value
      - id: menu_state_value
        type: config_wwise_string
        if: ks__has_field_menu_state_value
      - id: pause_menu_state_value
        type: config_wwise_string
        if: ks__has_field_pause_menu_state_value
      - id: dialog_state_value
        type: config_wwise_string
        if: ks__has_field_dialog_state_value
      - id: video_state_value
        type: config_wwise_string
        if: ks__has_field_video_state_value
      - id: element_view_state_value
        type: config_wwise_string
        if: ks__has_field_element_view_state_value
      - id: music_game_solo_state_value
        type: config_wwise_string
        if: ks__has_field_music_game_solo_state_value
      - id: music_game_free_play_state_value
        type: config_wwise_string
        if: ks__has_field_music_game_free_play_state_value
      - id: ui_page_ignore_list
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_ui_page_ignore_list
    instances:
      ks__has_field_state_group_name: # Field №0
        value: (ks__bit_field.value & 0b000000000001) != 0
      ks__has_field_normal_state_value: # Field №1
        value: (ks__bit_field.value & 0b000000000010) != 0
      ks__has_field_focused_state_value: # Field №2
        value: (ks__bit_field.value & 0b000000000100) != 0
      ks__has_field_sneak_in_state_value: # Field №3
        value: (ks__bit_field.value & 0b000000001000) != 0
      ks__has_field_menu_state_value: # Field №4
        value: (ks__bit_field.value & 0b000000010000) != 0
      ks__has_field_pause_menu_state_value: # Field №5
        value: (ks__bit_field.value & 0b000000100000) != 0
      ks__has_field_dialog_state_value: # Field №6
        value: (ks__bit_field.value & 0b000001000000) != 0
      ks__has_field_video_state_value: # Field №7
        value: (ks__bit_field.value & 0b000010000000) != 0
      ks__has_field_element_view_state_value: # Field №8
        value: (ks__bit_field.value & 0b000100000000) != 0
      ks__has_field_music_game_solo_state_value: # Field №9
        value: (ks__bit_field.value & 0b001000000000) != 0
      ks__has_field_music_game_free_play_state_value: # Field №10
        value: (ks__bit_field.value & 0b010000000000) != 0
      ks__has_field_ui_page_ignore_list: # Field №11
        value: (ks__bit_field.value & 0b100000000000) != 0
  config_audio_general:
    seq:
      - id: ks__bit_field
        type: u1
      - id: pause_game_object_event
        type: config_wwise_string
        if: ks__has_field_pause_game_object_event
      - id: resume_game_object_event
        type: config_wwise_string
        if: ks__has_field_resume_game_object_event
      - id: pause_bus_event
        type: config_wwise_string
        if: ks__has_field_pause_bus_event
      - id: resume_bus_event
        type: config_wwise_string
        if: ks__has_field_resume_bus_event
      - id: stop_all_event
        type: config_wwise_string
        if: ks__has_field_stop_all_event
    instances:
      ks__has_field_pause_game_object_event: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_resume_game_object_event: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_pause_bus_event: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_resume_bus_event: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_stop_all_event: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  config_audio_index:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: ambience
        type: aux_types::string
        if: ks__has_field_ambience
      - id: avatar
        type: aux_types::string
        if: ks__has_field_avatar
      - id: avatar_move
        type: aux_types::string
        if: ks__has_field_avatar_move
      - id: base_move
        type: aux_types::string
        if: ks__has_field_base_move
      - id: city_blocks
        type: aux_types::string
        if: ks__has_field_city_blocks
      - id: camera
        type: aux_types::string
        if: ks__has_field_camera
      - id: combat
        type: aux_types::string
        if: ks__has_field_combat
      - id: dialog
        type: aux_types::string
        if: ks__has_field_dialog
      - id: element_reactions
        type: aux_types::string
        if: ks__has_field_element_reactions
      - id: gadget
        type: aux_types::string
        if: ks__has_field_gadget
      - id: view_state
        type: aux_types::string
        if: ks__has_field_view_state
      - id: level
        type: aux_types::string
        if: ks__has_field_level
      - id: listener
        type: aux_types::string
        if: ks__has_field_listener
      - id: map_info
        type: aux_types::string
        if: ks__has_field_map_info
      - id: music
        type: aux_types::string
        if: ks__has_field_music
      - id: mutual_exclusions
        type: aux_types::string
        if: ks__has_field_mutual_exclusions
      - id: npc
        type: aux_types::string
        if: ks__has_field_npc
      - id: quest
        type: aux_types::string
        if: ks__has_field_quest
      - id: resource
        type: aux_types::string
        if: ks__has_field_resource
      - id: surface_type
        type: aux_types::string
        if: ks__has_field_surface_type
      - id: ui
        type: aux_types::string
        if: ks__has_field_ui
      - id: weather
        type: aux_types::string
        if: ks__has_field_weather
      - id: speech
        type: aux_types::string
        if: ks__has_field_speech
    instances:
      ks__has_field_ambience: # Field №0
        value: (ks__bit_field.value & 0b00000000000000000000001) != 0
      ks__has_field_avatar: # Field №1
        value: (ks__bit_field.value & 0b00000000000000000000010) != 0
      ks__has_field_avatar_move: # Field №2
        value: (ks__bit_field.value & 0b00000000000000000000100) != 0
      ks__has_field_base_move: # Field №3
        value: (ks__bit_field.value & 0b00000000000000000001000) != 0
      ks__has_field_city_blocks: # Field №4
        value: (ks__bit_field.value & 0b00000000000000000010000) != 0
      ks__has_field_camera: # Field №5
        value: (ks__bit_field.value & 0b00000000000000000100000) != 0
      ks__has_field_combat: # Field №6
        value: (ks__bit_field.value & 0b00000000000000001000000) != 0
      ks__has_field_dialog: # Field №7
        value: (ks__bit_field.value & 0b00000000000000010000000) != 0
      ks__has_field_element_reactions: # Field №8
        value: (ks__bit_field.value & 0b00000000000000100000000) != 0
      ks__has_field_gadget: # Field №9
        value: (ks__bit_field.value & 0b00000000000001000000000) != 0
      ks__has_field_view_state: # Field №10
        value: (ks__bit_field.value & 0b00000000000010000000000) != 0
      ks__has_field_level: # Field №11
        value: (ks__bit_field.value & 0b00000000000100000000000) != 0
      ks__has_field_listener: # Field №12
        value: (ks__bit_field.value & 0b00000000001000000000000) != 0
      ks__has_field_map_info: # Field №13
        value: (ks__bit_field.value & 0b00000000010000000000000) != 0
      ks__has_field_music: # Field №14
        value: (ks__bit_field.value & 0b00000000100000000000000) != 0
      ks__has_field_mutual_exclusions: # Field №15
        value: (ks__bit_field.value & 0b00000001000000000000000) != 0
      ks__has_field_npc: # Field №16
        value: (ks__bit_field.value & 0b00000010000000000000000) != 0
      ks__has_field_quest: # Field №17
        value: (ks__bit_field.value & 0b00000100000000000000000) != 0
      ks__has_field_resource: # Field №18
        value: (ks__bit_field.value & 0b00001000000000000000000) != 0
      ks__has_field_surface_type: # Field №19
        value: (ks__bit_field.value & 0b00010000000000000000000) != 0
      ks__has_field_ui: # Field №20
        value: (ks__bit_field.value & 0b00100000000000000000000) != 0
      ks__has_field_weather: # Field №21
        value: (ks__bit_field.value & 0b01000000000000000000000) != 0
      ks__has_field_speech: # Field №22
        value: (ks__bit_field.value & 0b10000000000000000000000) != 0
  config_audio_level:
    seq:
      - id: ks__bit_field
        type: u1
      - id: teleport_events
        type: ks__array_of__config_wwise_string__length_u
        if: ks__has_field_teleport_events
      - id: state_group
        type: config_wwise_string
        if: ks__has_field_state_group
      - id: dungeon_event_map
        type: ks__dict_of__aux_types__string_config_wwise_string
        if: ks__has_field_dungeon_event_map
    instances:
      ks__has_field_teleport_events: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_state_group: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_dungeon_event_map: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_audio_listener_outreach_cast:
    seq:
      - id: ks__bit_field
        type: u1
      - id: range
        type: f4
        if: ks__has_field_range
      - id: start_angle
        type: f4
        if: ks__has_field_start_angle
      - id: ray_count
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_ray_count
      - id: rtpc_names
        type: ks__array_of__config_wwise_string__length_u
        if: ks__has_field_rtpc_names
      - id: offset
        type: vector
        if: ks__has_field_offset
    instances:
      ks__has_field_range: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_start_angle: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_ray_count: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_rtpc_names: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_offset: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  config_audio_listener:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: fake_avatar_distance
        type: f4
        if: ks__has_field_fake_avatar_distance
      - id: ak_listener_height
        type: f4
        if: ks__has_field_ak_listener_height
      - id: obstruction_rtpc
        type: config_wwise_string
        if: ks__has_field_obstruction_rtpc
      - id: focus_angle_rtpc
        type: config_wwise_string
        if: ks__has_field_focus_angle_rtpc
      - id: obstruction_detect_radius
        type: f4
        if: ks__has_field_obstruction_detect_radius
      - id: outreach_cast
        type: config_audio_listener_outreach_cast
        if: ks__has_field_outreach_cast
      - id: first_person_listener_volume_offset
        type: f4
        if: ks__has_field_first_person_listener_volume_offset
      - id: third_person_listener_volume_offset
        type: f4
        if: ks__has_field_third_person_listener_volume_offset
      - id: default_listener_volume_offset
        type: f4
        if: ks__has_field_default_listener_volume_offset
    instances:
      ks__has_field_fake_avatar_distance: # Field №0
        value: (ks__bit_field.value & 0b000000001) != 0
      ks__has_field_ak_listener_height: # Field №1
        value: (ks__bit_field.value & 0b000000010) != 0
      ks__has_field_obstruction_rtpc: # Field №2
        value: (ks__bit_field.value & 0b000000100) != 0
      ks__has_field_focus_angle_rtpc: # Field №3
        value: (ks__bit_field.value & 0b000001000) != 0
      ks__has_field_obstruction_detect_radius: # Field №4
        value: (ks__bit_field.value & 0b000010000) != 0
      ks__has_field_outreach_cast: # Field №5
        value: (ks__bit_field.value & 0b000100000) != 0
      ks__has_field_first_person_listener_volume_offset: # Field №6
        value: (ks__bit_field.value & 0b001000000) != 0
      ks__has_field_third_person_listener_volume_offset: # Field №7
        value: (ks__bit_field.value & 0b010000000) != 0
      ks__has_field_default_listener_volume_offset: # Field №8
        value: (ks__bit_field.value & 0b100000000) != 0
  config_audio_map_area:
    seq:
      - id: ks__bit_field
        type: u1
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: state_value
        type: config_wwise_string
        if: ks__has_field_state_value
      - id: sub_state_group
        type: config_wwise_string
        if: ks__has_field_sub_state_group
      - id: default_sub_state_value
        type: config_wwise_string
        if: ks__has_field_default_sub_state_value
      - id: events_on_enter
        type: ks__array_of__config_wwise_string__length_u
        if: ks__has_field_events_on_enter
      - id: events_on_exit
        type: ks__array_of__config_wwise_string__length_u
        if: ks__has_field_events_on_exit
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_state_value: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_sub_state_group: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_default_sub_state_value: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_events_on_enter: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_events_on_exit: # Field №5
        value: (ks__bit_field & 0b100000) != 0
  ks__array_of__config_audio_map_area__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_audio_map_area
        repeat: expr
        repeat-expr: length.value
  config_audio_map_info:
    seq:
      - id: ks__bit_field
        type: u1
      - id: area_state_key
        type: config_wwise_string
        if: ks__has_field_area_state_key
      - id: areas
        type: ks__array_of__config_audio_map_area__length_u
        if: ks__has_field_areas
    instances:
      ks__has_field_area_state_key: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_areas: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_wwise_string:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_s
      - id: value
        type: config_wwise_string
  ks__dict_of__aux_types__vlq_base128_le_s_config_wwise_string:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_wwise_string
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__aux_types__vlq_base128_le_s_ks__dict_of__aux_types__vlq_base128_le_s_config_wwise_string:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_s
      - id: value
        type: ks__dict_of__aux_types__vlq_base128_le_s_config_wwise_string
  ks__dict_of__aux_types__vlq_base128_le_s_ks__dict_of__aux_types__vlq_base128_le_s_config_wwise_string:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_s_ks__dict_of__aux_types__vlq_base128_le_s_config_wwise_string
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__aux_types__vlq_base128_le_s_aux_types__vlq_base128_le_s:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_s
      - id: value
        type: aux_types::vlq_base128_le_s
  ks__dict_of__aux_types__vlq_base128_le_s_aux_types__vlq_base128_le_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_s_aux_types__vlq_base128_le_s
        repeat: expr
        repeat-expr: length.value
  config_audio_midi:
    seq:
      - id: ks__bit_field
        type: u1
      - id: instruments
        type: ks__dict_of__aux_types__vlq_base128_le_s_ks__dict_of__aux_types__vlq_base128_le_s_config_wwise_string
        if: ks__has_field_instruments
      - id: freeplay_buttons
        type: ks__dict_of__aux_types__vlq_base128_le_s_aux_types__vlq_base128_le_s
        if: ks__has_field_freeplay_buttons
      - id: freeplay_timeout
        type: f4
        if: ks__has_field_freeplay_timeout
      - id: freeplay_max_distance
        type: f4
        if: ks__has_field_freeplay_max_distance
    instances:
      ks__has_field_instruments: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_freeplay_buttons: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_freeplay_timeout: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_freeplay_max_distance: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  music_enemy_combat_phase_state:
    seq:
      - id: ks__bit_field
        type: u1
      - id: combat_phase
        type: ks__enum__config_ai_combat_phase
        if: ks__has_field_combat_phase
      - id: state_value
        type: config_wwise_string
        if: ks__has_field_state_value
    instances:
      ks__has_field_combat_phase: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_state_value: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__array_of__music_enemy_combat_phase_state__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: music_enemy_combat_phase_state
        repeat: expr
        repeat-expr: length.value
  music_enemy_settings:
    seq:
      - id: ks__bit_field
        type: u1
      - id: entity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_entity_id
      - id: main_state_value
        type: config_wwise_string
        if: ks__has_field_main_state_value
      - id: aux_state_group
        type: config_wwise_string
        if: ks__has_field_aux_state_group
      - id: default_aux_state_value
        type: config_wwise_string
        if: ks__has_field_default_aux_state_value
      - id: combat_phase_states
        type: ks__array_of__music_enemy_combat_phase_state__length_u
        if: ks__has_field_combat_phase_states
    instances:
      ks__has_field_entity_id: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_main_state_value: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_aux_state_group: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_default_aux_state_value: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_combat_phase_states: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  ks__array_of__music_enemy_settings__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: music_enemy_settings
        repeat: expr
        repeat-expr: length.value
  config_audio_music:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: state_group_name
        type: config_wwise_string
        if: ks__has_field_state_group_name
      - id: casual_state_value
        type: config_wwise_string
        if: ks__has_field_casual_state_value
      - id: combat_prep_state_value
        type: config_wwise_string
        if: ks__has_field_combat_prep_state_value
      - id: combat_state_value
        type: config_wwise_string
        if: ks__has_field_combat_state_value
      - id: peace_state_value
        type: config_wwise_string
        if: ks__has_field_peace_state_value
      - id: city_approach_trigger
        type: config_wwise_string
        if: ks__has_field_city_approach_trigger
      - id: combat_trigger
        type: config_wwise_string
        if: ks__has_field_combat_trigger
      - id: combat_music_rtpc
        type: config_wwise_string
        if: ks__has_field_combat_music_rtpc
      - id: outer_enemy_concern_range
        type: f4
        if: ks__has_field_outer_enemy_concern_range
      - id: inner_enemy_concern_range
        type: f4
        if: ks__has_field_inner_enemy_concern_range
      - id: attack_from_behind_enter_distance
        type: f4
        if: ks__has_field_attack_from_behind_enter_distance
      - id: attack_from_behind_exit_distance
        type: f4
        if: ks__has_field_attack_from_behind_exit_distance
      - id: intention_in_front_product_threshold
        type: f4
        if: ks__has_field_intention_in_front_product_threshold
      - id: intention_from_behind_product_threshold
        type: f4
        if: ks__has_field_intention_from_behind_product_threshold
      - id: combat_rtpc_lower_bound
        type: f4
        if: ks__has_field_combat_rtpc_lower_bound
      - id: combat_rtpc_upper_bound
        type: f4
        if: ks__has_field_combat_rtpc_upper_bound
      - id: wait_frames_till_stage_mature
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_wait_frames_till_stage_mature
      - id: enemy_main_state_group
        type: config_wwise_string
        if: ks__has_field_enemy_main_state_group
      - id: default_enemy_main_state_value
        type: config_wwise_string
        if: ks__has_field_default_enemy_main_state_value
      - id: enemy_settings
        type: ks__array_of__music_enemy_settings__length_u
        if: ks__has_field_enemy_settings
      - id: skiff_state_op
        type: audio_state_op
        if: ks__has_field_skiff_state_op
    instances:
      ks__has_field_state_group_name: # Field №0
        value: (ks__bit_field.value & 0b000000000000000000001) != 0
      ks__has_field_casual_state_value: # Field №1
        value: (ks__bit_field.value & 0b000000000000000000010) != 0
      ks__has_field_combat_prep_state_value: # Field №2
        value: (ks__bit_field.value & 0b000000000000000000100) != 0
      ks__has_field_combat_state_value: # Field №3
        value: (ks__bit_field.value & 0b000000000000000001000) != 0
      ks__has_field_peace_state_value: # Field №4
        value: (ks__bit_field.value & 0b000000000000000010000) != 0
      ks__has_field_city_approach_trigger: # Field №5
        value: (ks__bit_field.value & 0b000000000000000100000) != 0
      ks__has_field_combat_trigger: # Field №6
        value: (ks__bit_field.value & 0b000000000000001000000) != 0
      ks__has_field_combat_music_rtpc: # Field №7
        value: (ks__bit_field.value & 0b000000000000010000000) != 0
      ks__has_field_outer_enemy_concern_range: # Field №8
        value: (ks__bit_field.value & 0b000000000000100000000) != 0
      ks__has_field_inner_enemy_concern_range: # Field №9
        value: (ks__bit_field.value & 0b000000000001000000000) != 0
      ks__has_field_attack_from_behind_enter_distance: # Field №10
        value: (ks__bit_field.value & 0b000000000010000000000) != 0
      ks__has_field_attack_from_behind_exit_distance: # Field №11
        value: (ks__bit_field.value & 0b000000000100000000000) != 0
      ks__has_field_intention_in_front_product_threshold: # Field №12
        value: (ks__bit_field.value & 0b000000001000000000000) != 0
      ks__has_field_intention_from_behind_product_threshold: # Field №13
        value: (ks__bit_field.value & 0b000000010000000000000) != 0
      ks__has_field_combat_rtpc_lower_bound: # Field №14
        value: (ks__bit_field.value & 0b000000100000000000000) != 0
      ks__has_field_combat_rtpc_upper_bound: # Field №15
        value: (ks__bit_field.value & 0b000001000000000000000) != 0
      ks__has_field_wait_frames_till_stage_mature: # Field №16
        value: (ks__bit_field.value & 0b000010000000000000000) != 0
      ks__has_field_enemy_main_state_group: # Field №17
        value: (ks__bit_field.value & 0b000100000000000000000) != 0
      ks__has_field_default_enemy_main_state_value: # Field №18
        value: (ks__bit_field.value & 0b001000000000000000000) != 0
      ks__has_field_enemy_settings: # Field №19
        value: (ks__bit_field.value & 0b010000000000000000000) != 0
      ks__has_field_skiff_state_op: # Field №20
        value: (ks__bit_field.value & 0b100000000000000000000) != 0
  ks__enum__audio_scope:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: audio_scope
  audio_scope_comparer:
    seq: []
    instances: {}
  audio_mutual_exclusion:
    seq:
      - id: ks__bit_field
        type: u1
      - id: event_name_a
        type: aux_types::string
        if: ks__has_field_event_name_a
      - id: event_name_b
        type: aux_types::string
        if: ks__has_field_event_name_b
      - id: scope
        type: ks__enum__audio_scope
        if: ks__has_field_scope
    instances:
      ks__has_field_event_name_a: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_event_name_b: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_scope: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__array_of__audio_mutual_exclusion__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: audio_mutual_exclusion
        repeat: expr
        repeat-expr: length.value
  config_audio_mutual_exclusion:
    seq:
      - id: ks__bit_field
        type: u1
      - id: exclusion_pairs
        type: ks__array_of__audio_mutual_exclusion__length_u
        if: ks__has_field_exclusion_pairs
    instances:
      ks__has_field_exclusion_pairs: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_audio_npc:
    seq:
      - id: ks__bit_field
        type: u1
      - id: default_vocal_bone_name
        type: aux_types::string
        if: ks__has_field_default_vocal_bone_name
    instances:
      ks__has_field_default_vocal_bone_name: # Field №0
        value: (ks__bit_field & 0b1) != 0
  op_responder_comparer:
    seq: []
    instances: {}
  config_audio_event_op_register:
    seq: []
    instances: {}
  config_audio_event_op:
    seq:
      - id: ks__base
        type: config_audio_operation
    instances:
      # Base class fields
      operation:
        value: ks__base.operation
  config_audio_emitter_op_register:
    seq: []
    instances: {}
  config_audio_emitter_op:
    seq:
      - id: ks__base
        type: config_audio_operation
    instances:
      # Base class fields
      operation:
        value: ks__base.operation
  config_audio_positioned_op_register:
    seq: []
    instances: {}
  config_audio_positioned_op:
    seq:
      - id: ks__base
        type: config_audio_operation
      - id: ks__bit_field
        type: u1
      - id: positioning
        type: f4
        if: ks__has_field_positioning
    instances:
      ks__has_field_positioning: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      operation:
        value: ks__base.operation
  config_audio_positioned_event_op_register:
    seq: []
    instances: {}
  config_audio_positioned_event_op:
    seq:
      - id: ks__base
        type: config_audio_positioned_op
      - id: ks__bit_field
        type: u1
      - id: duration
        type: f4
        if: ks__has_field_duration
    instances:
      ks__has_field_duration: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      positioning:
        value: ks__base.positioning
      operation:
        value: ks__base.operation
  config_audio_positioned_emitter_op_register:
    seq: []
    instances: {}
  config_audio_positioned_emitter_op:
    seq:
      - id: ks__base
        type: config_audio_positioned_op
    instances:
      # Base class fields
      positioning:
        value: ks__base.positioning
      operation:
        value: ks__base.operation
  config_audio_quest_ops:
    seq:
      - id: ks__bit_field
        type: u1
      - id: quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_quest_id
      - id: events_on_start
        type: ks__array_of__config_wwise_string__length_u
        if: ks__has_field_events_on_start
      - id: states_on_start
        type: ks__array_of__audio_state_op__length_u
        if: ks__has_field_states_on_start
      - id: events_on_finish
        type: ks__array_of__config_wwise_string__length_u
        if: ks__has_field_events_on_finish
      - id: states_on_finish
        type: ks__array_of__audio_state_op__length_u
        if: ks__has_field_states_on_finish
    instances:
      ks__has_field_quest_id: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_events_on_start: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_states_on_start: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_events_on_finish: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_states_on_finish: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  ks__array_of__config_audio_quest_ops__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_audio_quest_ops
        repeat: expr
        repeat-expr: length.value
  config_audio_quest:
    seq:
      - id: ks__bit_field
        type: u1
      - id: quests
        type: ks__array_of__config_audio_quest_ops__length_u
        if: ks__has_field_quests
    instances:
      ks__has_field_quests: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_audio_incremental_resources:
    seq:
      - id: ks__bit_field
        type: u1
      - id: sfx_files
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_sfx_files
      - id: music_files
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_music_files
      - id: vo_files
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_vo_files
    instances:
      ks__has_field_sfx_files: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_music_files: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_vo_files: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__kvp_of_dict__aux_types__string_config_audio_incremental_resources:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: config_audio_incremental_resources
  ks__dict_of__aux_types__string_config_audio_incremental_resources:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_config_audio_incremental_resources
        repeat: expr
        repeat-expr: length.value
  config_audio_resource:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: sound_bank_package_name
        type: aux_types::string
        if: ks__has_field_sound_bank_package_name
      - id: external_source_package_name
        type: aux_types::string
        if: ks__has_field_external_source_package_name
      - id: streamed_music_package_name
        type: aux_types::string
        if: ks__has_field_streamed_music_package_name
      - id: streamed_file_package_name
        type: aux_types::string
        if: ks__has_field_streamed_file_package_name
      - id: n_sound_bank_split_bits
        type: u1
        if: ks__has_field_n_sound_bank_split_bits
      - id: n_external_source_split_bits
        type: u1
        if: ks__has_field_n_external_source_split_bits
      - id: n_streamed_music_split_bits
        type: u1
        if: ks__has_field_n_streamed_music_split_bits
      - id: n_streamed_file_split_bits
        type: u1
        if: ks__has_field_n_streamed_file_split_bits
      - id: package_file_extension
        type: aux_types::string
        if: ks__has_field_package_file_extension
      - id: incrementals
        type: ks__dict_of__aux_types__string_config_audio_incremental_resources
        if: ks__has_field_incrementals
    instances:
      ks__has_field_sound_bank_package_name: # Field №0
        value: (ks__bit_field.value & 0b0000000001) != 0
      ks__has_field_external_source_package_name: # Field №1
        value: (ks__bit_field.value & 0b0000000010) != 0
      ks__has_field_streamed_music_package_name: # Field №2
        value: (ks__bit_field.value & 0b0000000100) != 0
      ks__has_field_streamed_file_package_name: # Field №3
        value: (ks__bit_field.value & 0b0000001000) != 0
      ks__has_field_n_sound_bank_split_bits: # Field №4
        value: (ks__bit_field.value & 0b0000010000) != 0
      ks__has_field_n_external_source_split_bits: # Field №5
        value: (ks__bit_field.value & 0b0000100000) != 0
      ks__has_field_n_streamed_music_split_bits: # Field №6
        value: (ks__bit_field.value & 0b0001000000) != 0
      ks__has_field_n_streamed_file_split_bits: # Field №7
        value: (ks__bit_field.value & 0b0010000000) != 0
      ks__has_field_package_file_extension: # Field №8
        value: (ks__bit_field.value & 0b0100000000) != 0
      ks__has_field_incrementals: # Field №9
        value: (ks__bit_field.value & 0b1000000000) != 0
  audio_setting_slider:
    seq:
      - id: ks__bit_field
        type: u1
      - id: rtpc
        type: config_wwise_string
        if: ks__has_field_rtpc
      - id: text_map
        type: aux_types::string
        if: ks__has_field_text_map
      - id: min_value
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_min_value
      - id: max_value
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_value
      - id: each_values
        type: ks__array_of__f4__length_u
        if: ks__has_field_each_values
    instances:
      ks__has_field_rtpc: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_text_map: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_min_value: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_max_value: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_each_values: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  ks__enum__audio_voice_trigger:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: audio_voice_trigger
  voice_trigger_identity:
    seq:
      - id: ks__bit_field
        type: u1
      - id: game_trigger
        type: ks__enum__audio_voice_trigger
        if: ks__has_field_game_trigger
      - id: game_trigger_args
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_game_trigger_args
    instances:
      ks__has_field_game_trigger: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_game_trigger_args: # Field №1
        value: (ks__bit_field & 0b10) != 0
  audio_setting_slider_post_voice_item:
    seq:
      - id: ks__bit_field
        type: u1
      - id: voice_trigger_identity
        type: voice_trigger_identity
        if: ks__has_field_voice_trigger_identity
      - id: repeat_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_repeat_count
    instances:
      ks__has_field_voice_trigger_identity: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_repeat_count: # Field №1
        value: (ks__bit_field & 0b10) != 0
  audio_setting_slider_post_event_register:
    seq: []
    instances: {}
  audio_setting_slider_post_event:
    seq:
      - id: ks__base
        type: audio_setting_slider
      - id: ks__bit_field
        type: u1
      - id: change_event
        type: config_wwise_string
        if: ks__has_field_change_event
    instances:
      ks__has_field_change_event: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      rtpc:
        value: ks__base.rtpc
      text_map:
        value: ks__base.text_map
      min_value:
        value: ks__base.min_value
      max_value:
        value: ks__base.max_value
      each_values:
        value: ks__base.each_values
  audio_setting_slider_post_voice_register:
    seq: []
    instances: {}
  ks__array_of__audio_setting_slider_post_voice_item__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: audio_setting_slider_post_voice_item
        repeat: expr
        repeat-expr: length.value
  audio_setting_slider_post_voice:
    seq:
      - id: ks__base
        type: audio_setting_slider
      - id: ks__bit_field
        type: u1
      - id: change_voice_array
        type: ks__array_of__audio_setting_slider_post_voice_item__length_u
        if: ks__has_field_change_voice_array
    instances:
      ks__has_field_change_voice_array: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      rtpc:
        value: ks__base.rtpc
      text_map:
        value: ks__base.text_map
      min_value:
        value: ks__base.min_value
      max_value:
        value: ks__base.max_value
      each_values:
        value: ks__base.each_values
  vibration_setting:
    seq:
      - id: ks__bit_field
        type: u1
      - id: rtpc
        type: config_wwise_string
        if: ks__has_field_rtpc
      - id: open_value
        type: f4
        if: ks__has_field_open_value
      - id: close_value
        type: f4
        if: ks__has_field_close_value
    instances:
      ks__has_field_rtpc: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_open_value: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_close_value: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_audio_setting:
    seq:
      - id: ks__bit_field
        type: u1
      - id: global_volume
        type: audio_setting_slider_post_event
        if: ks__has_field_global_volume
      - id: sfx_volume
        type: audio_setting_slider_post_event
        if: ks__has_field_sfx_volume
      - id: music_volume
        type: audio_setting_slider_post_event
        if: ks__has_field_music_volume
      - id: voice_volume
        type: audio_setting_slider_post_voice
        if: ks__has_field_voice_volume
      - id: vibration
        type: vibration_setting
        if: ks__has_field_vibration
      - id: dual_sense_rtpc
        type: config_wwise_string
        if: ks__has_field_dual_sense_rtpc
    instances:
      ks__has_field_global_volume: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_sfx_volume: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_music_volume: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_voice_volume: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_vibration: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_dual_sense_rtpc: # Field №5
        value: (ks__bit_field & 0b100000) != 0
  config_audio_stage_progress_event:
    seq:
      - id: ks__bit_field
        type: u1
      - id: progress
        type: f4
        if: ks__has_field_progress
      - id: events
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_events
    instances:
      ks__has_field_progress: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_events: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__array_of__config_audio_stage_progress_event__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_audio_stage_progress_event
        repeat: expr
        repeat-expr: length.value
  config_audio_stage_events:
    seq:
      - id: ks__bit_field
        type: u1
      - id: id
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_id
      - id: stage_create_events
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_stage_create_events
      - id: stage_progress_events
        type: ks__array_of__config_audio_stage_progress_event__length_u
        if: ks__has_field_stage_progress_events
      - id: stage_start_events
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_stage_start_events
      - id: stage_mature_events
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_stage_mature_events
      - id: stage_teleport_events
        type: ks__array_of__config_audio_stage_progress_event__length_u
        if: ks__has_field_stage_teleport_events
      - id: stage_exit_events
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_stage_exit_events
      - id: state_value
        type: aux_types::string
        if: ks__has_field_state_value
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_stage_create_events: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_stage_progress_events: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_stage_start_events: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_stage_mature_events: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_stage_teleport_events: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_stage_exit_events: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_state_value: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
  config_audio_surface_type:
    seq:
      - id: ks__bit_field
        type: u1
      - id: switch_key
        type: config_wwise_string
        if: ks__has_field_switch_key
      - id: tall_grass_rtpc_id
        type: config_wwise_string
        if: ks__has_field_tall_grass_rtpc_id
      - id: water_depth_rtpc_id
        type: config_wwise_string
        if: ks__has_field_water_depth_rtpc_id
      - id: switch_map
        type: ks__dict_of__aux_types__string_aux_types__string
        if: ks__has_field_switch_map
      - id: rtpc_map
        type: ks__dict_of__aux_types__string_aux_types__string
        if: ks__has_field_rtpc_map
    instances:
      ks__has_field_switch_key: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_tall_grass_rtpc_id: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_water_depth_rtpc_id: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_switch_map: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_rtpc_map: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  audio_ui_support:
    seq:
      - id: ks__bit_field
        type: u1
      - id: combo_rtpc_key
        type: config_wwise_string
        if: ks__has_field_combo_rtpc_key
      - id: countdown
        type: f4
        if: ks__has_field_countdown
    instances:
      ks__has_field_combo_rtpc_key: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_countdown: # Field №1
        value: (ks__bit_field & 0b10) != 0
  audio_ui_equip:
    seq:
      - id: ks__bit_field
        type: u1
      - id: equip_on_event
        type: config_wwise_string
        if: ks__has_field_equip_on_event
    instances:
      ks__has_field_equip_on_event: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_audio_ui:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: support
        type: audio_ui_support
        if: ks__has_field_support
      - id: equip
        type: audio_ui_equip
        if: ks__has_field_equip
      - id: open_chest_event
        type: config_wwise_string
        if: ks__has_field_open_chest_event
      - id: join_team_event
        type: audio_one_time_event
        if: ks__has_field_join_team_event
      - id: element_state_key
        type: config_wwise_string
        if: ks__has_field_element_state_key
      - id: element_state_default_value
        type: config_wwise_string
        if: ks__has_field_element_state_default_value
      - id: element_state_value_map
        type: ks__dict_of__aux_types__string_aux_types__string
        if: ks__has_field_element_state_value_map
      - id: character_appear_event
        type: config_wwise_string
        if: ks__has_field_character_appear_event
      - id: add_map_pin_event
        type: config_wwise_string
        if: ks__has_field_add_map_pin_event
      - id: remove_map_pin_event
        type: config_wwise_string
        if: ks__has_field_remove_map_pin_event
      - id: enable_element_view_event
        type: config_wwise_string
        if: ks__has_field_enable_element_view_event
      - id: disable_element_view_event
        type: config_wwise_string
        if: ks__has_field_disable_element_view_event
      - id: dungeon_victory_event
        type: config_wwise_string
        if: ks__has_field_dungeon_victory_event
      - id: dungeon_defeat_event
        type: config_wwise_string
        if: ks__has_field_dungeon_defeat_event
      - id: change_weapon_event
        type: config_wwise_string
        if: ks__has_field_change_weapon_event
      - id: wear_relic_event
        type: config_wwise_string
        if: ks__has_field_wear_relic_event
      - id: takeoff_relic_event
        type: config_wwise_string
        if: ks__has_field_takeoff_relic_event
      - id: select_avatar_relic_event
        type: config_wwise_string
        if: ks__has_field_select_avatar_relic_event
      - id: add_equip_material_event
        type: config_wwise_string
        if: ks__has_field_add_equip_material_event
      - id: talent_unlock_event
        type: config_wwise_string
        if: ks__has_field_talent_unlock_event
      - id: change_avatar_success_event
        type: config_wwise_string
        if: ks__has_field_change_avatar_success_event
      - id: change_avatar_failed_event
        type: config_wwise_string
        if: ks__has_field_change_avatar_failed_event
      - id: select_main_quest_event
        type: config_wwise_string
        if: ks__has_field_select_main_quest_event
      - id: team_avatar_hold_up
        type: config_wwise_string
        if: ks__has_field_team_avatar_hold_up
      - id: team_avatar_hold_down
        type: config_wwise_string
        if: ks__has_field_team_avatar_hold_down
      - id: team_avatar_click
        type: config_wwise_string
        if: ks__has_field_team_avatar_click
      - id: bag_drop_item
        type: config_wwise_string
        if: ks__has_field_bag_drop_item
      - id: mail_delete_event
        type: config_wwise_string
        if: ks__has_field_mail_delete_event
      - id: item_in_cd_event
        type: config_wwise_string
        if: ks__has_field_item_in_cd_event
      - id: pick_up_event
        type: config_wwise_string
        if: ks__has_field_pick_up_event
      - id: player_level_btn_event
        type: config_wwise_string
        if: ks__has_field_player_level_btn_event
      - id: chest_pickup_fail_event
        type: config_wwise_string
        if: ks__has_field_chest_pickup_fail_event
      - id: enter_dungeon_success_event
        type: config_wwise_string
        if: ks__has_field_enter_dungeon_success_event
      - id: open_page_default_event
        type: config_wwise_string
        if: ks__has_field_open_page_default_event
      - id: close_page_default_event
        type: config_wwise_string
        if: ks__has_field_close_page_default_event
      - id: open_page_custom_events
        type: ks__dict_of__aux_types__string_config_wwise_string
        if: ks__has_field_open_page_custom_events
      - id: close_page_custom_events
        type: ks__dict_of__aux_types__string_config_wwise_string
        if: ks__has_field_close_page_custom_events
      - id: video_start_default_event
        type: config_wwise_string
        if: ks__has_field_video_start_default_event
      - id: video_end_default_event
        type: config_wwise_string
        if: ks__has_field_video_end_default_event
      - id: video_start_custom_events
        type: ks__dict_of__aux_types__string_config_wwise_string
        if: ks__has_field_video_start_custom_events
      - id: video_end_custom_events
        type: ks__dict_of__aux_types__string_config_wwise_string
        if: ks__has_field_video_end_custom_events
      - id: default_enable_delay_count
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_default_enable_delay_count
      - id: character_select_music_end_event
        type: config_wwise_string
        if: ks__has_field_character_select_music_end_event
      - id: loading_events_map
        type: ks__dict_of__aux_types__vlq_base128_le_s_config_wwise_string
        if: ks__has_field_loading_events_map
    instances:
      ks__has_field_support: # Field №0
        value: (ks__bit_field.value & 0b00000000000000000000000000000000000000000001) != 0
      ks__has_field_equip: # Field №1
        value: (ks__bit_field.value & 0b00000000000000000000000000000000000000000010) != 0
      ks__has_field_open_chest_event: # Field №2
        value: (ks__bit_field.value & 0b00000000000000000000000000000000000000000100) != 0
      ks__has_field_join_team_event: # Field №3
        value: (ks__bit_field.value & 0b00000000000000000000000000000000000000001000) != 0
      ks__has_field_element_state_key: # Field №4
        value: (ks__bit_field.value & 0b00000000000000000000000000000000000000010000) != 0
      ks__has_field_element_state_default_value: # Field №5
        value: (ks__bit_field.value & 0b00000000000000000000000000000000000000100000) != 0
      ks__has_field_element_state_value_map: # Field №6
        value: (ks__bit_field.value & 0b00000000000000000000000000000000000001000000) != 0
      ks__has_field_character_appear_event: # Field №7
        value: (ks__bit_field.value & 0b00000000000000000000000000000000000010000000) != 0
      ks__has_field_add_map_pin_event: # Field №8
        value: (ks__bit_field.value & 0b00000000000000000000000000000000000100000000) != 0
      ks__has_field_remove_map_pin_event: # Field №9
        value: (ks__bit_field.value & 0b00000000000000000000000000000000001000000000) != 0
      ks__has_field_enable_element_view_event: # Field №10
        value: (ks__bit_field.value & 0b00000000000000000000000000000000010000000000) != 0
      ks__has_field_disable_element_view_event: # Field №11
        value: (ks__bit_field.value & 0b00000000000000000000000000000000100000000000) != 0
      ks__has_field_dungeon_victory_event: # Field №12
        value: (ks__bit_field.value & 0b00000000000000000000000000000001000000000000) != 0
      ks__has_field_dungeon_defeat_event: # Field №13
        value: (ks__bit_field.value & 0b00000000000000000000000000000010000000000000) != 0
      ks__has_field_change_weapon_event: # Field №14
        value: (ks__bit_field.value & 0b00000000000000000000000000000100000000000000) != 0
      ks__has_field_wear_relic_event: # Field №15
        value: (ks__bit_field.value & 0b00000000000000000000000000001000000000000000) != 0
      ks__has_field_takeoff_relic_event: # Field №16
        value: (ks__bit_field.value & 0b00000000000000000000000000010000000000000000) != 0
      ks__has_field_select_avatar_relic_event: # Field №17
        value: (ks__bit_field.value & 0b00000000000000000000000000100000000000000000) != 0
      ks__has_field_add_equip_material_event: # Field №18
        value: (ks__bit_field.value & 0b00000000000000000000000001000000000000000000) != 0
      ks__has_field_talent_unlock_event: # Field №19
        value: (ks__bit_field.value & 0b00000000000000000000000010000000000000000000) != 0
      ks__has_field_change_avatar_success_event: # Field №20
        value: (ks__bit_field.value & 0b00000000000000000000000100000000000000000000) != 0
      ks__has_field_change_avatar_failed_event: # Field №21
        value: (ks__bit_field.value & 0b00000000000000000000001000000000000000000000) != 0
      ks__has_field_select_main_quest_event: # Field №22
        value: (ks__bit_field.value & 0b00000000000000000000010000000000000000000000) != 0
      ks__has_field_team_avatar_hold_up: # Field №23
        value: (ks__bit_field.value & 0b00000000000000000000100000000000000000000000) != 0
      ks__has_field_team_avatar_hold_down: # Field №24
        value: (ks__bit_field.value & 0b00000000000000000001000000000000000000000000) != 0
      ks__has_field_team_avatar_click: # Field №25
        value: (ks__bit_field.value & 0b00000000000000000010000000000000000000000000) != 0
      ks__has_field_bag_drop_item: # Field №26
        value: (ks__bit_field.value & 0b00000000000000000100000000000000000000000000) != 0
      ks__has_field_mail_delete_event: # Field №27
        value: (ks__bit_field.value & 0b00000000000000001000000000000000000000000000) != 0
      ks__has_field_item_in_cd_event: # Field №28
        value: (ks__bit_field.value & 0b00000000000000010000000000000000000000000000) != 0
      ks__has_field_pick_up_event: # Field №29
        value: (ks__bit_field.value & 0b00000000000000100000000000000000000000000000) != 0
      ks__has_field_player_level_btn_event: # Field №30
        value: (ks__bit_field.value & 0b00000000000001000000000000000000000000000000) != 0
      ks__has_field_chest_pickup_fail_event: # Field №31
        value: (ks__bit_field.value & 0b00000000000010000000000000000000000000000000) != 0
      ks__has_field_enter_dungeon_success_event: # Field №32
        value: (ks__bit_field.value & 0b00000000000100000000000000000000000000000000) != 0
      ks__has_field_open_page_default_event: # Field №33
        value: (ks__bit_field.value & 0b00000000001000000000000000000000000000000000) != 0
      ks__has_field_close_page_default_event: # Field №34
        value: (ks__bit_field.value & 0b00000000010000000000000000000000000000000000) != 0
      ks__has_field_open_page_custom_events: # Field №35
        value: (ks__bit_field.value & 0b00000000100000000000000000000000000000000000) != 0
      ks__has_field_close_page_custom_events: # Field №36
        value: (ks__bit_field.value & 0b00000001000000000000000000000000000000000000) != 0
      ks__has_field_video_start_default_event: # Field №37
        value: (ks__bit_field.value & 0b00000010000000000000000000000000000000000000) != 0
      ks__has_field_video_end_default_event: # Field №38
        value: (ks__bit_field.value & 0b00000100000000000000000000000000000000000000) != 0
      ks__has_field_video_start_custom_events: # Field №39
        value: (ks__bit_field.value & 0b00001000000000000000000000000000000000000000) != 0
      ks__has_field_video_end_custom_events: # Field №40
        value: (ks__bit_field.value & 0b00010000000000000000000000000000000000000000) != 0
      ks__has_field_default_enable_delay_count: # Field №41
        value: (ks__bit_field.value & 0b00100000000000000000000000000000000000000000) != 0
      ks__has_field_character_select_music_end_event: # Field №42
        value: (ks__bit_field.value & 0b01000000000000000000000000000000000000000000) != 0
      ks__has_field_loading_events_map: # Field №43
        value: (ks__bit_field.value & 0b10000000000000000000000000000000000000000000) != 0
  audio_weather_properties:
    seq:
      - id: ks__bit_field
        type: u1
      - id: state_value
        type: config_wwise_string
        if: ks__has_field_state_value
      - id: music_state_value
        type: config_wwise_string
        if: ks__has_field_music_state_value
      - id: switch_value
        type: config_wwise_string
        if: ks__has_field_switch_value
      - id: rtpc_value
        type: f4
        if: ks__has_field_rtpc_value
      - id: surface_override
        type: aux_types::string
        if: ks__has_field_surface_override
    instances:
      ks__has_field_state_value: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_music_state_value: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_switch_value: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_rtpc_value: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_surface_override: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  audio_weather_work_set:
    seq:
      - id: ks__bit_field
        type: u1
      - id: state_group_name
        type: config_wwise_string
        if: ks__has_field_state_group_name
      - id: activeness_rtpc_name
        type: config_wwise_string
        if: ks__has_field_activeness_rtpc_name
      - id: workset_switch_value
        type: config_wwise_string
        if: ks__has_field_workset_switch_value
    instances:
      ks__has_field_state_group_name: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_activeness_rtpc_name: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_workset_switch_value: # Field №2
        value: (ks__bit_field & 0b100) != 0
  audio_weather_vo_trigger_time_rule:
    seq:
      - id: ks__bit_field
        type: u1
      - id: from_
        type: f4
        if: ks__has_field_from_
      - id: to
        type: f4
        if: ks__has_field_to
    instances:
      ks__has_field_from_: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_to: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__array_of__ks__enum__config_weather_type__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__enum__config_weather_type
        repeat: expr
        repeat-expr: length.value
  ks__array_of__audio_weather_vo_trigger_time_rule__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: audio_weather_vo_trigger_time_rule
        repeat: expr
        repeat-expr: length.value
  audio_weather_vo_trigger:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: weather_type_list
        type: ks__array_of__ks__enum__config_weather_type__length_u
        if: ks__has_field_weather_type_list
      - id: weather_type_is_include
        type: u1
        if: ks__has_field_weather_type_is_include
      - id: weather_list
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_weather_list
      - id: weather_is_include
        type: u1
        if: ks__has_field_weather_is_include
      - id: previous_weather_type_list
        type: ks__array_of__ks__enum__config_weather_type__length_u
        if: ks__has_field_previous_weather_type_list
      - id: previous_weather_type_is_include
        type: u1
        if: ks__has_field_previous_weather_type_is_include
      - id: previous_weather_list
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_previous_weather_list
      - id: previous_weather_is_include
        type: u1
        if: ks__has_field_previous_weather_is_include
      - id: vo_trigger
        type: voice_trigger_identity
        if: ks__has_field_vo_trigger
      - id: time_limit
        type: ks__array_of__audio_weather_vo_trigger_time_rule__length_u
        if: ks__has_field_time_limit
    instances:
      ks__has_field_weather_type_list: # Field №0
        value: (ks__bit_field.value & 0b0000000001) != 0
      ks__has_field_weather_type_is_include: # Field №1
        value: (ks__bit_field.value & 0b0000000010) != 0
      ks__has_field_weather_list: # Field №2
        value: (ks__bit_field.value & 0b0000000100) != 0
      ks__has_field_weather_is_include: # Field №3
        value: (ks__bit_field.value & 0b0000001000) != 0
      ks__has_field_previous_weather_type_list: # Field №4
        value: (ks__bit_field.value & 0b0000010000) != 0
      ks__has_field_previous_weather_type_is_include: # Field №5
        value: (ks__bit_field.value & 0b0000100000) != 0
      ks__has_field_previous_weather_list: # Field №6
        value: (ks__bit_field.value & 0b0001000000) != 0
      ks__has_field_previous_weather_is_include: # Field №7
        value: (ks__bit_field.value & 0b0010000000) != 0
      ks__has_field_vo_trigger: # Field №8
        value: (ks__bit_field.value & 0b0100000000) != 0
      ks__has_field_time_limit: # Field №9
        value: (ks__bit_field.value & 0b1000000000) != 0
  ks__kvp_of_dict__aux_types__string_audio_weather_properties:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: audio_weather_properties
  ks__dict_of__aux_types__string_audio_weather_properties:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_audio_weather_properties
        repeat: expr
        repeat-expr: length.value
  ks__array_of__audio_weather_vo_trigger__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: audio_weather_vo_trigger
        repeat: expr
        repeat-expr: length.value
  config_audio_weather:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: transition_rtpc_key
        type: config_wwise_string
        if: ks__has_field_transition_rtpc_key
      - id: dominant_state_name
        type: config_wwise_string
        if: ks__has_field_dominant_state_name
      - id: dominant_switch_name
        type: config_wwise_string
        if: ks__has_field_dominant_switch_name
      - id: dominant_rtpc_key
        type: config_wwise_string
        if: ks__has_field_dominant_rtpc_key
      - id: dominant_state_name_without_delay
        type: config_wwise_string
        if: ks__has_field_dominant_state_name_without_delay
      - id: dominant_rtpc_key_without_delay
        type: config_wwise_string
        if: ks__has_field_dominant_rtpc_key_without_delay
      - id: time_of_day_rtpc_key
        type: config_wwise_string
        if: ks__has_field_time_of_day_rtpc_key
      - id: avatar_speech_event
        type: config_wwise_string
        if: ks__has_field_avatar_speech_event
      - id: weather_state_map
        type: ks__dict_of__aux_types__string_audio_weather_properties
        if: ks__has_field_weather_state_map
      - id: workset1
        type: audio_weather_work_set
        if: ks__has_field_workset1
      - id: workset2
        type: audio_weather_work_set
        if: ks__has_field_workset2
      - id: near_thunder_start
        type: audio_one_time_event
        if: ks__has_field_near_thunder_start
      - id: near_thunder_end
        type: audio_one_time_event
        if: ks__has_field_near_thunder_end
      - id: distant_thunder_start
        type: audio_one_time_event
        if: ks__has_field_distant_thunder_start
      - id: distant_thunder_end
        type: audio_one_time_event
        if: ks__has_field_distant_thunder_end
      - id: sky_thunder
        type: audio_one_time_event
        if: ks__has_field_sky_thunder
      - id: workset_switch_key
        type: config_wwise_string
        if: ks__has_field_workset_switch_key
      - id: wind_speed_rtpc_key
        type: config_wwise_string
        if: ks__has_field_wind_speed_rtpc_key
      - id: climate_rtpc_key
        type: config_wwise_string
        if: ks__has_field_climate_rtpc_key
      - id: climate_rtpc_map
        type: ks__dict_of__aux_types__string_aux_types__string
        if: ks__has_field_climate_rtpc_map
      - id: weather_voice_triggers
        type: ks__array_of__audio_weather_vo_trigger__length_u
        if: ks__has_field_weather_voice_triggers
      - id: thunder_voice_trigger
        type: voice_trigger_identity
        if: ks__has_field_thunder_voice_trigger
      - id: thunder_voice_cooldown
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_thunder_voice_cooldown
    instances:
      ks__has_field_transition_rtpc_key: # Field №0
        value: (ks__bit_field.value & 0b00000000000000000000001) != 0
      ks__has_field_dominant_state_name: # Field №1
        value: (ks__bit_field.value & 0b00000000000000000000010) != 0
      ks__has_field_dominant_switch_name: # Field №2
        value: (ks__bit_field.value & 0b00000000000000000000100) != 0
      ks__has_field_dominant_rtpc_key: # Field №3
        value: (ks__bit_field.value & 0b00000000000000000001000) != 0
      ks__has_field_dominant_state_name_without_delay: # Field №4
        value: (ks__bit_field.value & 0b00000000000000000010000) != 0
      ks__has_field_dominant_rtpc_key_without_delay: # Field №5
        value: (ks__bit_field.value & 0b00000000000000000100000) != 0
      ks__has_field_time_of_day_rtpc_key: # Field №6
        value: (ks__bit_field.value & 0b00000000000000001000000) != 0
      ks__has_field_avatar_speech_event: # Field №7
        value: (ks__bit_field.value & 0b00000000000000010000000) != 0
      ks__has_field_weather_state_map: # Field №8
        value: (ks__bit_field.value & 0b00000000000000100000000) != 0
      ks__has_field_workset1: # Field №9
        value: (ks__bit_field.value & 0b00000000000001000000000) != 0
      ks__has_field_workset2: # Field №10
        value: (ks__bit_field.value & 0b00000000000010000000000) != 0
      ks__has_field_near_thunder_start: # Field №11
        value: (ks__bit_field.value & 0b00000000000100000000000) != 0
      ks__has_field_near_thunder_end: # Field №12
        value: (ks__bit_field.value & 0b00000000001000000000000) != 0
      ks__has_field_distant_thunder_start: # Field №13
        value: (ks__bit_field.value & 0b00000000010000000000000) != 0
      ks__has_field_distant_thunder_end: # Field №14
        value: (ks__bit_field.value & 0b00000000100000000000000) != 0
      ks__has_field_sky_thunder: # Field №15
        value: (ks__bit_field.value & 0b00000001000000000000000) != 0
      ks__has_field_workset_switch_key: # Field №16
        value: (ks__bit_field.value & 0b00000010000000000000000) != 0
      ks__has_field_wind_speed_rtpc_key: # Field №17
        value: (ks__bit_field.value & 0b00000100000000000000000) != 0
      ks__has_field_climate_rtpc_key: # Field №18
        value: (ks__bit_field.value & 0b00001000000000000000000) != 0
      ks__has_field_climate_rtpc_map: # Field №19
        value: (ks__bit_field.value & 0b00010000000000000000000) != 0
      ks__has_field_weather_voice_triggers: # Field №20
        value: (ks__bit_field.value & 0b00100000000000000000000) != 0
      ks__has_field_thunder_voice_trigger: # Field №21
        value: (ks__bit_field.value & 0b01000000000000000000000) != 0
      ks__has_field_thunder_voice_cooldown: # Field №22
        value: (ks__bit_field.value & 0b10000000000000000000000) != 0
  avatar_speech_equip_obtain:
    seq:
      - id: ks__bit_field
        type: u1
      - id: quality
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_quality
      - id: event_name
        type: config_wwise_string
        if: ks__has_field_event_name
    instances:
      ks__has_field_quality: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_event_name: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__enum__voice_personality:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: voice_personality
  voice_personality_comparer:
    seq: []
    instances: {}
  ks__enum__voice_positioning:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: voice_positioning
  voice_positioning_comparer:
    seq: []
    instances: {}
  voice_sound:
    seq:
      - id: ks__bit_field
        type: u1
      - id: personality
        type: ks__enum__voice_personality
        if: ks__has_field_personality
      - id: positioning
        type: ks__enum__voice_positioning
        if: ks__has_field_positioning
      - id: sound_name
        type: config_wwise_string
        if: ks__has_field_sound_name
    instances:
      ks__has_field_personality: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_positioning: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_sound_name: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__array_of__avatar_speech_equip_obtain__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: avatar_speech_equip_obtain
        repeat: expr
        repeat-expr: length.value
  ks__array_of__voice_sound__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: voice_sound
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__aux_types__vlq_base128_le_u_voice_trigger_identity:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_u
      - id: value
        type: voice_trigger_identity
  ks__dict_of__aux_types__vlq_base128_le_u_voice_trigger_identity:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_u_voice_trigger_identity
        repeat: expr
        repeat-expr: length.value
  config_avatar_speech:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: suitable_equip_obtain
        type: ks__array_of__avatar_speech_equip_obtain__length_u
        if: ks__has_field_suitable_equip_obtain
      - id: unsuitable_equip_obtain
        type: ks__array_of__avatar_speech_equip_obtain__length_u
        if: ks__has_field_unsuitable_equip_obtain
      - id: event_common_prefix
        type: aux_types::string
        if: ks__has_field_event_common_prefix
      - id: external_voice_event
        type: config_wwise_string
        if: ks__has_field_external_voice_event
      - id: person_switch_key
        type: config_wwise_string
        if: ks__has_field_person_switch_key
      - id: positioning_switch_key
        type: config_wwise_string
        if: ks__has_field_positioning_switch_key
      - id: initial_delay_rtpc
        type: config_wwise_string
        if: ks__has_field_initial_delay_rtpc
      - id: person_switch_value_map
        type: ks__dict_of__aux_types__string_aux_types__string
        if: ks__has_field_person_switch_value_map
      - id: positioning_switch_value_map
        type: ks__dict_of__aux_types__string_aux_types__string
        if: ks__has_field_positioning_switch_value_map
      - id: external_sound_names
        type: ks__array_of__voice_sound__length_u
        if: ks__has_field_external_sound_names
      - id: default_narration_interval
        type: f4
        if: ks__has_field_default_narration_interval
      - id: default_narration_duration
        type: f4
        if: ks__has_field_default_narration_duration
      - id: gacha_voice_trigger_param
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gacha_voice_trigger_param
      - id: join_team_voice_trigger_param
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_join_team_voice_trigger_param
      - id: fetter_voice_trigger_map
        type: ks__dict_of__aux_types__vlq_base128_le_u_voice_trigger_identity
        if: ks__has_field_fetter_voice_trigger_map
      - id: teammate_low_hp_vo_hp_ratio
        type: f4
        if: ks__has_field_teammate_low_hp_vo_hp_ratio
      - id: teammate_low_hp_vo_cooldown
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_teammate_low_hp_vo_cooldown
      - id: teammate_low_hp_vo_vo_trigger
        type: voice_trigger_identity
        if: ks__has_field_teammate_low_hp_vo_vo_trigger
      - id: local_player_low_hp_vo_hp_ratio
        type: f4
        if: ks__has_field_local_player_low_hp_vo_hp_ratio
      - id: local_player_low_hp_vo_cooldown
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_local_player_low_hp_vo_cooldown
      - id: local_player_low_hp_vo_vo_trigger
        type: voice_trigger_identity
        if: ks__has_field_local_player_low_hp_vo_vo_trigger
      - id: promotion_voice_trigger_map
        type: ks__dict_of__aux_types__vlq_base128_le_u_voice_trigger_identity
        if: ks__has_field_promotion_voice_trigger_map
      - id: open_chest_vo_trigger
        type: voice_trigger_identity
        if: ks__has_field_open_chest_vo_trigger
    instances:
      ks__has_field_suitable_equip_obtain: # Field №0
        value: (ks__bit_field.value & 0b00000000000000000000001) != 0
      ks__has_field_unsuitable_equip_obtain: # Field №1
        value: (ks__bit_field.value & 0b00000000000000000000010) != 0
      ks__has_field_event_common_prefix: # Field №2
        value: (ks__bit_field.value & 0b00000000000000000000100) != 0
      ks__has_field_external_voice_event: # Field №3
        value: (ks__bit_field.value & 0b00000000000000000001000) != 0
      ks__has_field_person_switch_key: # Field №4
        value: (ks__bit_field.value & 0b00000000000000000010000) != 0
      ks__has_field_positioning_switch_key: # Field №5
        value: (ks__bit_field.value & 0b00000000000000000100000) != 0
      ks__has_field_initial_delay_rtpc: # Field №6
        value: (ks__bit_field.value & 0b00000000000000001000000) != 0
      ks__has_field_person_switch_value_map: # Field №7
        value: (ks__bit_field.value & 0b00000000000000010000000) != 0
      ks__has_field_positioning_switch_value_map: # Field №8
        value: (ks__bit_field.value & 0b00000000000000100000000) != 0
      ks__has_field_external_sound_names: # Field №9
        value: (ks__bit_field.value & 0b00000000000001000000000) != 0
      ks__has_field_default_narration_interval: # Field №10
        value: (ks__bit_field.value & 0b00000000000010000000000) != 0
      ks__has_field_default_narration_duration: # Field №11
        value: (ks__bit_field.value & 0b00000000000100000000000) != 0
      ks__has_field_gacha_voice_trigger_param: # Field №12
        value: (ks__bit_field.value & 0b00000000001000000000000) != 0
      ks__has_field_join_team_voice_trigger_param: # Field №13
        value: (ks__bit_field.value & 0b00000000010000000000000) != 0
      ks__has_field_fetter_voice_trigger_map: # Field №14
        value: (ks__bit_field.value & 0b00000000100000000000000) != 0
      ks__has_field_teammate_low_hp_vo_hp_ratio: # Field №15
        value: (ks__bit_field.value & 0b00000001000000000000000) != 0
      ks__has_field_teammate_low_hp_vo_cooldown: # Field №16
        value: (ks__bit_field.value & 0b00000010000000000000000) != 0
      ks__has_field_teammate_low_hp_vo_vo_trigger: # Field №17
        value: (ks__bit_field.value & 0b00000100000000000000000) != 0
      ks__has_field_local_player_low_hp_vo_hp_ratio: # Field №18
        value: (ks__bit_field.value & 0b00001000000000000000000) != 0
      ks__has_field_local_player_low_hp_vo_cooldown: # Field №19
        value: (ks__bit_field.value & 0b00010000000000000000000) != 0
      ks__has_field_local_player_low_hp_vo_vo_trigger: # Field №20
        value: (ks__bit_field.value & 0b00100000000000000000000) != 0
      ks__has_field_promotion_voice_trigger_map: # Field №21
        value: (ks__bit_field.value & 0b01000000000000000000000) != 0
      ks__has_field_open_chest_vo_trigger: # Field №22
        value: (ks__bit_field.value & 0b10000000000000000000000) != 0
  config_boundary:
    seq:
      - id: ks__bit_field
        type: u1
      - id: name
        type: aux_types::string
        if: ks__has_field_name
      - id: priority
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_priority
      - id: shape
        type: aux_types::string
        if: ks__has_field_shape
      - id: offset
        type: vector
        if: ks__has_field_offset
      - id: euler
        type: vector
        if: ks__has_field_euler
      - id: height
        type: f4
        if: ks__has_field_height
    instances:
      ks__has_field_name: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_priority: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_shape: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_offset: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_euler: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_height: # Field №5
        value: (ks__bit_field & 0b100000) != 0
  json_climate_type_comparer:
    seq: []
    instances: {}
  config_climate_misc:
    seq:
      - id: ks__bit_field
        type: u1
      - id: damping_time
        type: f4
        if: ks__has_field_damping_time
      - id: fade_speed
        type: f4
        if: ks__has_field_fade_speed
    instances:
      ks__has_field_damping_time: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_fade_speed: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__kvp_of_dict__ks__enum__json_climate_type_aux_types__string:
    seq:
      - id: key
        type: ks__enum__json_climate_type
      - id: value
        type: aux_types::string
  ks__dict_of__ks__enum__json_climate_type_aux_types__string:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__ks__enum__json_climate_type_aux_types__string
        repeat: expr
        repeat-expr: length.value
  config_climate_perform:
    seq:
      - id: ks__bit_field
        type: u1
      - id: chance
        type: f4
        if: ks__has_field_chance
      - id: perform_triggers
        type: ks__dict_of__ks__enum__json_climate_type_aux_types__string
        if: ks__has_field_perform_triggers
    instances:
      ks__has_field_chance: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_perform_triggers: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__kvp_of_dict__ks__enum__json_climate_type_ks__array_of__aux_types__vlq_base128_le_u__length_u:
    seq:
      - id: key
        type: ks__enum__json_climate_type
      - id: value
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
  ks__dict_of__ks__enum__json_climate_type_ks__array_of__aux_types__vlq_base128_le_u__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__ks__enum__json_climate_type_ks__array_of__aux_types__vlq_base128_le_u__length_u
        repeat: expr
        repeat-expr: length.value
  config_climate_common:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: length
        type: f4
        if: ks__has_field_length
      - id: threshold_ratio
        type: f4
        if: ks__has_field_threshold_ratio
      - id: debuffs
        type: ks__dict_of__ks__enum__json_climate_type_ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_debuffs
      - id: area_buffs
        type: ks__dict_of__ks__enum__json_climate_type_ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_area_buffs
      - id: miscs
        type: config_climate_misc
        if: ks__has_field_miscs
      - id: perform
        type: config_climate_perform
        if: ks__has_field_perform
      - id: ui_warning_ratio
        type: f4
        if: ks__has_field_ui_warning_ratio
      - id: ui_len_weak_intensity
        type: f4
        if: ks__has_field_ui_len_weak_intensity
      - id: ui_len_lerp_speed
        type: f4
        if: ks__has_field_ui_len_lerp_speed
    instances:
      ks__has_field_length: # Field №0
        value: (ks__bit_field.value & 0b000000001) != 0
      ks__has_field_threshold_ratio: # Field №1
        value: (ks__bit_field.value & 0b000000010) != 0
      ks__has_field_debuffs: # Field №2
        value: (ks__bit_field.value & 0b000000100) != 0
      ks__has_field_area_buffs: # Field №3
        value: (ks__bit_field.value & 0b000001000) != 0
      ks__has_field_miscs: # Field №4
        value: (ks__bit_field.value & 0b000010000) != 0
      ks__has_field_perform: # Field №5
        value: (ks__bit_field.value & 0b000100000) != 0
      ks__has_field_ui_warning_ratio: # Field №6
        value: (ks__bit_field.value & 0b001000000) != 0
      ks__has_field_ui_len_weak_intensity: # Field №7
        value: (ks__bit_field.value & 0b010000000) != 0
      ks__has_field_ui_len_lerp_speed: # Field №8
        value: (ks__bit_field.value & 0b100000000) != 0
  config_climate_info_base:
    seq: []
    instances: {}
  config_climate_temperature_options:
    seq:
      - id: ks__bit_field
        type: u1
      - id: speed
        type: f4
        if: ks__has_field_speed
    instances:
      ks__has_field_speed: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_climate_ui:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: climate_info_btn_icon
        type: aux_types::string
        if: ks__has_field_climate_info_btn_icon
      - id: climate_dialog_title
        type: aux_types::string
        if: ks__has_field_climate_dialog_title
      - id: climate_dialog_desc
        type: aux_types::string
        if: ks__has_field_climate_dialog_desc
      - id: climate_dialog_left_icon
        type: aux_types::string
        if: ks__has_field_climate_dialog_left_icon
      - id: climate_dialog_left_bg
        type: aux_types::string
        if: ks__has_field_climate_dialog_left_bg
      - id: show_climate_meter
        type: u1
        if: ks__has_field_show_climate_meter
      - id: climate_meter_color_index
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_climate_meter_color_index
      - id: climate_meter_bg_color_index
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_climate_meter_bg_color_index
      - id: screen_effect_index
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_screen_effect_index
      - id: climate_info_show_with_meter_type
        type: u1
        if: ks__has_field_climate_info_show_with_meter_type
      - id: ui_low_warning_ratio
        type: f4
        if: ks__has_field_ui_low_warning_ratio
      - id: ui_len_low_intensity
        type: f4
        if: ks__has_field_ui_len_low_intensity
      - id: ui_middle_warning_ratio
        type: f4
        if: ks__has_field_ui_middle_warning_ratio
      - id: ui_len_middle_intensity
        type: f4
        if: ks__has_field_ui_len_middle_intensity
    instances:
      ks__has_field_climate_info_btn_icon: # Field №0
        value: (ks__bit_field.value & 0b00000000000001) != 0
      ks__has_field_climate_dialog_title: # Field №1
        value: (ks__bit_field.value & 0b00000000000010) != 0
      ks__has_field_climate_dialog_desc: # Field №2
        value: (ks__bit_field.value & 0b00000000000100) != 0
      ks__has_field_climate_dialog_left_icon: # Field №3
        value: (ks__bit_field.value & 0b00000000001000) != 0
      ks__has_field_climate_dialog_left_bg: # Field №4
        value: (ks__bit_field.value & 0b00000000010000) != 0
      ks__has_field_show_climate_meter: # Field №5
        value: (ks__bit_field.value & 0b00000000100000) != 0
      ks__has_field_climate_meter_color_index: # Field №6
        value: (ks__bit_field.value & 0b00000001000000) != 0
      ks__has_field_climate_meter_bg_color_index: # Field №7
        value: (ks__bit_field.value & 0b00000010000000) != 0
      ks__has_field_screen_effect_index: # Field №8
        value: (ks__bit_field.value & 0b00000100000000) != 0
      ks__has_field_climate_info_show_with_meter_type: # Field №9
        value: (ks__bit_field.value & 0b00001000000000) != 0
      ks__has_field_ui_low_warning_ratio: # Field №10
        value: (ks__bit_field.value & 0b00010000000000) != 0
      ks__has_field_ui_len_low_intensity: # Field №11
        value: (ks__bit_field.value & 0b00100000000000) != 0
      ks__has_field_ui_middle_warning_ratio: # Field №12
        value: (ks__bit_field.value & 0b01000000000000) != 0
      ks__has_field_ui_len_middle_intensity: # Field №13
        value: (ks__bit_field.value & 0b10000000000000) != 0
  config_climate_audio:
    seq:
      - id: ks__bit_field
        type: u1
      - id: ui_len_stop_audio
        type: aux_types::string
        if: ks__has_field_ui_len_stop_audio
      - id: ui_len_low_audio
        type: aux_types::string
        if: ks__has_field_ui_len_low_audio
      - id: ui_len_middle_audio
        type: aux_types::string
        if: ks__has_field_ui_len_middle_audio
      - id: ui_len_max_audio
        type: aux_types::string
        if: ks__has_field_ui_len_max_audio
    instances:
      ks__has_field_ui_len_stop_audio: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_ui_len_low_audio: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_ui_len_middle_audio: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_ui_len_max_audio: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  config_climate_info_register:
    seq: []
    instances: {}
  config_climate_info:
    seq:
      - id: ks__base
        type: config_climate_info_base
      - id: ks__bit_field
        type: u1
      - id: climate_type
        type: ks__enum__json_climate_type
        if: ks__has_field_climate_type
      - id: temperature_options
        type: config_climate_temperature_options
        if: ks__has_field_temperature_options
      - id: climate_ui_info
        type: config_climate_ui
        if: ks__has_field_climate_ui_info
      - id: climate_screen_eff_audio
        type: config_climate_audio
        if: ks__has_field_climate_screen_eff_audio
    instances:
      ks__has_field_climate_type: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_temperature_options: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_climate_ui_info: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_climate_screen_eff_audio: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  ks__kvp_of_dict__aux_types__string_ks__disp__config_climate_info_base:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: ks__disp__config_climate_info_base
  ks__dict_of__aux_types__string_ks__disp__config_climate_info_base:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_ks__disp__config_climate_info_base
        repeat: expr
        repeat-expr: length.value
  config_climate:
    seq:
      - id: ks__bit_field
        type: u1
      - id: common
        type: config_climate_common
        if: ks__has_field_common
      - id: templates
        type: ks__dict_of__aux_types__string_ks__disp__config_climate_info_base
        if: ks__has_field_templates
    instances:
      ks__has_field_common: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_templates: # Field №1
        value: (ks__bit_field & 0b10) != 0
  point2d:
    seq:
      - id: ks__bit_field
        type: u1
      - id: x
        type: f4
        if: ks__has_field_x
      - id: y
        type: f4
        if: ks__has_field_y
    instances:
      ks__has_field_x: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_y: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__array_of__point2d__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: point2d
        repeat: expr
        repeat-expr: length.value
  config_climate_area:
    seq:
      - id: ks__bit_field
        type: u1
      - id: area_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_area_id
      - id: climate_type
        type: ks__enum__json_climate_type
        if: ks__has_field_climate_type
      - id: bottom
        type: f4
        if: ks__has_field_bottom
      - id: top
        type: f4
        if: ks__has_field_top
      - id: points
        type: ks__array_of__point2d__length_u
        if: ks__has_field_points
      - id: is_force_clear_different_climate_meter
        type: u1
        if: ks__has_field_is_force_clear_different_climate_meter
      - id: trans_points
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_trans_points
    instances:
      ks__has_field_area_id: # Field №0
        value: (ks__bit_field & 0b0000001) != 0
      ks__has_field_climate_type: # Field №1
        value: (ks__bit_field & 0b0000010) != 0
      ks__has_field_bottom: # Field №2
        value: (ks__bit_field & 0b0000100) != 0
      ks__has_field_top: # Field №3
        value: (ks__bit_field & 0b0001000) != 0
      ks__has_field_points: # Field №4
        value: (ks__bit_field & 0b0010000) != 0
      ks__has_field_is_force_clear_different_climate_meter: # Field №5
        value: (ks__bit_field & 0b0100000) != 0
      ks__has_field_trans_points: # Field №6
        value: (ks__bit_field & 0b1000000) != 0
  ks__enum__codex_quest_item_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: codex_quest_item_type
  codex_quest_item_type_comparer:
    seq: []
    instances: {}
  ks__enum__codex_quest_text_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: codex_quest_text_type
  codex_quest_text_type_comparer:
    seq: []
    instances: {}
  config_codex_quest_text:
    seq:
      - id: ks__bit_field
        type: u1
      - id: text_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_text_id
      - id: text_type
        type: ks__enum__codex_quest_text_type
        if: ks__has_field_text_type
    instances:
      ks__has_field_text_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_text_type: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_codex_quest_dialog_single:
    seq:
      - id: ks__bit_field
        type: u1
      - id: text
        type: config_codex_quest_text
        if: ks__has_field_text
      - id: sound_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sound_id
      - id: next_item_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_next_item_id
    instances:
      ks__has_field_text: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_sound_id: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_next_item_id: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__array_of__config_codex_quest_text__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_codex_quest_text
        repeat: expr
        repeat-expr: length.value
  ks__array_of__config_codex_quest_dialog_single__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_codex_quest_dialog_single
        repeat: expr
        repeat-expr: length.value
  config_codex_quest_item:
    seq:
      - id: ks__bit_field
        type: u1
      - id: item_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_item_id
      - id: item_type
        type: ks__enum__codex_quest_item_type
        if: ks__has_field_item_type
      - id: next_item_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_next_item_id
      - id: speaker_text
        type: config_codex_quest_text
        if: ks__has_field_speaker_text
      - id: speaker_text2
        type: config_codex_quest_text
        if: ks__has_field_speaker_text2
      - id: texts
        type: ks__array_of__config_codex_quest_text__length_u
        if: ks__has_field_texts
      - id: dialogs
        type: ks__array_of__config_codex_quest_dialog_single__length_u
        if: ks__has_field_dialogs
      - id: dialogs2
        type: ks__array_of__config_codex_quest_dialog_single__length_u
        if: ks__has_field_dialogs2
    instances:
      ks__has_field_item_id: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_item_type: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_next_item_id: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_speaker_text: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_speaker_text2: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_texts: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_dialogs: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_dialogs2: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
  ks__array_of__config_codex_quest_item__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_codex_quest_item
        repeat: expr
        repeat-expr: length.value
  config_codex_quest_sub_quest:
    seq:
      - id: ks__bit_field
        type: u1
      - id: sub_quest_title
        type: config_codex_quest_text
        if: ks__has_field_sub_quest_title
      - id: items
        type: ks__array_of__config_codex_quest_item__length_u
        if: ks__has_field_items
    instances:
      ks__has_field_sub_quest_title: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_items: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__array_of__config_codex_quest_sub_quest__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_codex_quest_sub_quest
        repeat: expr
        repeat-expr: length.value
  config_codex_quest:
    seq:
      - id: ks__bit_field
        type: u1
      - id: main_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_main_quest_id
      - id: quest_type
        type: ks__enum__quest_type
        if: ks__has_field_quest_type
      - id: main_quest_title
        type: config_codex_quest_text
        if: ks__has_field_main_quest_title
      - id: main_quest_desp
        type: config_codex_quest_text
        if: ks__has_field_main_quest_desp
      - id: chapter_title
        type: config_codex_quest_text
        if: ks__has_field_chapter_title
      - id: chapter_num
        type: config_codex_quest_text
        if: ks__has_field_chapter_num
      - id: sub_quests
        type: ks__array_of__config_codex_quest_sub_quest__length_u
        if: ks__has_field_sub_quests
    instances:
      ks__has_field_main_quest_id: # Field №0
        value: (ks__bit_field & 0b0000001) != 0
      ks__has_field_quest_type: # Field №1
        value: (ks__bit_field & 0b0000010) != 0
      ks__has_field_main_quest_title: # Field №2
        value: (ks__bit_field & 0b0000100) != 0
      ks__has_field_main_quest_desp: # Field №3
        value: (ks__bit_field & 0b0001000) != 0
      ks__has_field_chapter_title: # Field №4
        value: (ks__bit_field & 0b0010000) != 0
      ks__has_field_chapter_num: # Field №5
        value: (ks__bit_field & 0b0100000) != 0
      ks__has_field_sub_quests: # Field №6
        value: (ks__bit_field & 0b1000000) != 0
  strike_type_comparer:
    seq: []
    instances: {}
  attack_type_comparer:
    seq: []
    instances: {}
  hit_level_comparer:
    seq: []
    instances: {}
  retreat_type_comparer:
    seq: []
    instances: {}
  can_be_modified_by_comparer:
    seq: []
    instances: {}
  ks__enum__combat_property_index:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: combat_property_index
  combat_property_index_comparer:
    seq: []
    instances: {}
  ks__enum__level_option:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: level_option
  level_option_comparer:
    seq: []
    instances: {}
  ks__array_of__ks__enum__combat_property_index__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__enum__combat_property_index
        repeat: expr
        repeat-expr: length.value
  config_combat_property:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: endure_type
        type: ks__enum__endure_type
        if: ks__has_field_endure_type
      - id: use_creator_property
        type: u1
        if: ks__has_field_use_creator_property
      - id: use_creator_property_partly
        type: ks__array_of__ks__enum__combat_property_index__length_u
        if: ks__has_field_use_creator_property_partly
      - id: use_creator_buffed_property
        type: u1
        if: ks__has_field_use_creator_buffed_property
      - id: use_ability_property
        type: u1
        if: ks__has_field_use_ability_property
      - id: hp
        type: f4
        if: ks__has_field_hp
      - id: attack
        type: f4
        if: ks__has_field_attack
      - id: defense
        type: f4
        if: ks__has_field_defense
      - id: level
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_level
      - id: level_option
        type: ks__enum__level_option
        if: ks__has_field_level_option
      - id: weight
        type: f4
        if: ks__has_field_weight
      - id: endure_shake
        type: f4
        if: ks__has_field_endure_shake
      - id: is_invincible
        type: u1
        if: ks__has_field_is_invincible
      - id: is_lock_hp
        type: u1
        if: ks__has_field_is_lock_hp
      - id: is_lock_hp_no_heal
        type: u1
        if: ks__has_field_is_lock_hp_no_heal
      - id: is_no_heal
        type: u1
        if: ks__has_field_is_no_heal
      - id: is_ghost_to_allied
        type: u1
        if: ks__has_field_is_ghost_to_allied
      - id: is_ghost_to_enemy
        type: u1
        if: ks__has_field_is_ghost_to_enemy
      - id: can_trigger_bullet
        type: u1
        if: ks__has_field_can_trigger_bullet
      - id: deny_element_stick
        type: u1
        if: ks__has_field_deny_element_stick
      - id: ignore_purge_rate
        type: u1
        if: ks__has_field_ignore_purge_rate
      - id: ignore_damage_to_self
        type: u1
        if: ks__has_field_ignore_damage_to_self
    instances:
      ks__has_field_endure_type: # Field №0
        value: (ks__bit_field.value & 0b0000000000000000000001) != 0
      ks__has_field_use_creator_property: # Field №1
        value: (ks__bit_field.value & 0b0000000000000000000010) != 0
      ks__has_field_use_creator_property_partly: # Field №2
        value: (ks__bit_field.value & 0b0000000000000000000100) != 0
      ks__has_field_use_creator_buffed_property: # Field №3
        value: (ks__bit_field.value & 0b0000000000000000001000) != 0
      ks__has_field_use_ability_property: # Field №4
        value: (ks__bit_field.value & 0b0000000000000000010000) != 0
      ks__has_field_hp: # Field №5
        value: (ks__bit_field.value & 0b0000000000000000100000) != 0
      ks__has_field_attack: # Field №6
        value: (ks__bit_field.value & 0b0000000000000001000000) != 0
      ks__has_field_defense: # Field №7
        value: (ks__bit_field.value & 0b0000000000000010000000) != 0
      ks__has_field_level: # Field №8
        value: (ks__bit_field.value & 0b0000000000000100000000) != 0
      ks__has_field_level_option: # Field №9
        value: (ks__bit_field.value & 0b0000000000001000000000) != 0
      ks__has_field_weight: # Field №10
        value: (ks__bit_field.value & 0b0000000000010000000000) != 0
      ks__has_field_endure_shake: # Field №11
        value: (ks__bit_field.value & 0b0000000000100000000000) != 0
      ks__has_field_is_invincible: # Field №12
        value: (ks__bit_field.value & 0b0000000001000000000000) != 0
      ks__has_field_is_lock_hp: # Field №13
        value: (ks__bit_field.value & 0b0000000010000000000000) != 0
      ks__has_field_is_lock_hp_no_heal: # Field №14
        value: (ks__bit_field.value & 0b0000000100000000000000) != 0
      ks__has_field_is_no_heal: # Field №15
        value: (ks__bit_field.value & 0b0000001000000000000000) != 0
      ks__has_field_is_ghost_to_allied: # Field №16
        value: (ks__bit_field.value & 0b0000010000000000000000) != 0
      ks__has_field_is_ghost_to_enemy: # Field №17
        value: (ks__bit_field.value & 0b0000100000000000000000) != 0
      ks__has_field_can_trigger_bullet: # Field №18
        value: (ks__bit_field.value & 0b0001000000000000000000) != 0
      ks__has_field_deny_element_stick: # Field №19
        value: (ks__bit_field.value & 0b0010000000000000000000) != 0
      ks__has_field_ignore_purge_rate: # Field №20
        value: (ks__bit_field.value & 0b0100000000000000000000) != 0
      ks__has_field_ignore_damage_to_self: # Field №21
        value: (ks__bit_field.value & 0b1000000000000000000000) != 0
  config_be_hit_blend_shake:
    seq: []
    instances: {}
  shake_by_ainmator:
    seq:
      - id: ks__bit_field
        type: u1
      - id: shake_flag
        type: f4
        if: ks__has_field_shake_flag
      - id: hit_box_names
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_hit_box_names
    instances:
      ks__has_field_shake_flag: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_hit_box_names: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_be_hit_blend_shake_by_ainmator_register:
    seq: []
    instances: {}
  ks__array_of__shake_by_ainmator__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: shake_by_ainmator
        repeat: expr
        repeat-expr: length.value
  config_be_hit_blend_shake_by_ainmator:
    seq:
      - id: ks__base
        type: config_be_hit_blend_shake
      - id: ks__bit_field
        type: u1
      - id: shake_flag_map
        type: ks__array_of__shake_by_ainmator__length_u
        if: ks__has_field_shake_flag_map
    instances:
      ks__has_field_shake_flag_map: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_combat_be_hit:
    seq:
      - id: ks__bit_field
        type: u1
      - id: hit_blood_effect
        type: aux_types::string
        if: ks__has_field_hit_blood_effect
      - id: hit_auto_redirect
        type: u1
        if: ks__has_field_hit_auto_redirect
      - id: mute_all_hit
        type: u1
        if: ks__has_field_mute_all_hit
      - id: mute_all_hit_effect
        type: u1
        if: ks__has_field_mute_all_hit_effect
      - id: mute_all_hit_text
        type: u1
        if: ks__has_field_mute_all_hit_text
      - id: ignore_min_hit_vy
        type: u1
        if: ks__has_field_ignore_min_hit_vy
      - id: blend_shake
        type: ks__disp__config_be_hit_blend_shake
        if: ks__has_field_blend_shake
    instances:
      ks__has_field_hit_blood_effect: # Field №0
        value: (ks__bit_field & 0b0000001) != 0
      ks__has_field_hit_auto_redirect: # Field №1
        value: (ks__bit_field & 0b0000010) != 0
      ks__has_field_mute_all_hit: # Field №2
        value: (ks__bit_field & 0b0000100) != 0
      ks__has_field_mute_all_hit_effect: # Field №3
        value: (ks__bit_field & 0b0001000) != 0
      ks__has_field_mute_all_hit_text: # Field №4
        value: (ks__bit_field & 0b0010000) != 0
      ks__has_field_ignore_min_hit_vy: # Field №5
        value: (ks__bit_field & 0b0100000) != 0
      ks__has_field_blend_shake: # Field №6
        value: (ks__bit_field & 0b1000000) != 0
  config_combat_lock:
    seq:
      - id: ks__bit_field
        type: u1
      - id: lock_shape
        type: aux_types::string
        if: ks__has_field_lock_shape
      - id: deny_lock_on
        type: u1
        if: ks__has_field_deny_lock_on
      - id: lock_weight_yaxis_param
        type: f4
        if: ks__has_field_lock_weight_yaxis_param
      - id: lock_weight_yaxis_threshold
        type: f4
        if: ks__has_field_lock_weight_yaxis_threshold
      - id: lock_type
        type: aux_types::string
        if: ks__has_field_lock_type
      - id: override_range
        type: f4
        if: ks__has_field_override_range
      - id: override_normal_pri
        type: f4
        if: ks__has_field_override_normal_pri
      - id: override_combat_pri
        type: f4
        if: ks__has_field_override_combat_pri
    instances:
      ks__has_field_lock_shape: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_deny_lock_on: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_lock_weight_yaxis_param: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_lock_weight_yaxis_threshold: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_lock_type: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_override_range: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_override_normal_pri: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_override_combat_pri: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
  config_die:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: has_animator_die
        type: u1
        if: ks__has_field_has_animator_die
      - id: mute_all_shader_die_eff
        type: u1
        if: ks__has_field_mute_all_shader_die_eff
      - id: fall_when_air_die
        type: u1
        if: ks__has_field_fall_when_air_die
      - id: die_end_time
        type: f4
        if: ks__has_field_die_end_time
      - id: die_force_disappear_time
        type: f4
        if: ks__has_field_die_force_disappear_time
      - id: die_disappear_effect
        type: aux_types::string
        if: ks__has_field_die_disappear_effect
      - id: die_disappear_effect_delay
        type: f4
        if: ks__has_field_die_disappear_effect_delay
      - id: die_shader_data
        type: ks__enum__e_shader_data
        if: ks__has_field_die_shader_data
      - id: die_shader_enable_duration_time
        type: f4
        if: ks__has_field_die_shader_enable_duration_time
      - id: die_shader_disable_duration_time
        type: f4
        if: ks__has_field_die_shader_disable_duration_time
      - id: die_model_fade_delay
        type: f4
        if: ks__has_field_die_model_fade_delay
      - id: use_rag_doll
        type: u1
        if: ks__has_field_use_rag_doll
      - id: rag_doll_die_end_time_delay
        type: f4
        if: ks__has_field_rag_doll_die_end_time_delay
      - id: start_die_end_at_once
        type: u1
        if: ks__has_field_start_die_end_at_once
      - id: ignore_element_die
        type: u1
        if: ks__has_field_ignore_element_die
    instances:
      ks__has_field_has_animator_die: # Field №0
        value: (ks__bit_field.value & 0b000000000000001) != 0
      ks__has_field_mute_all_shader_die_eff: # Field №1
        value: (ks__bit_field.value & 0b000000000000010) != 0
      ks__has_field_fall_when_air_die: # Field №2
        value: (ks__bit_field.value & 0b000000000000100) != 0
      ks__has_field_die_end_time: # Field №3
        value: (ks__bit_field.value & 0b000000000001000) != 0
      ks__has_field_die_force_disappear_time: # Field №4
        value: (ks__bit_field.value & 0b000000000010000) != 0
      ks__has_field_die_disappear_effect: # Field №5
        value: (ks__bit_field.value & 0b000000000100000) != 0
      ks__has_field_die_disappear_effect_delay: # Field №6
        value: (ks__bit_field.value & 0b000000001000000) != 0
      ks__has_field_die_shader_data: # Field №7
        value: (ks__bit_field.value & 0b000000010000000) != 0
      ks__has_field_die_shader_enable_duration_time: # Field №8
        value: (ks__bit_field.value & 0b000000100000000) != 0
      ks__has_field_die_shader_disable_duration_time: # Field №9
        value: (ks__bit_field.value & 0b000001000000000) != 0
      ks__has_field_die_model_fade_delay: # Field №10
        value: (ks__bit_field.value & 0b000010000000000) != 0
      ks__has_field_use_rag_doll: # Field №11
        value: (ks__bit_field.value & 0b000100000000000) != 0
      ks__has_field_rag_doll_die_end_time_delay: # Field №12
        value: (ks__bit_field.value & 0b001000000000000) != 0
      ks__has_field_start_die_end_at_once: # Field №13
        value: (ks__bit_field.value & 0b010000000000000) != 0
      ks__has_field_ignore_element_die: # Field №14
        value: (ks__bit_field.value & 0b100000000000000) != 0
  config_summon_tag:
    seq:
      - id: ks__bit_field
        type: u1
      - id: summon_tag
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_summon_tag
      - id: name
        type: aux_types::string
        if: ks__has_field_name
      - id: max_num
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_max_num
      - id: copy_owner_threat_list
        type: u1
        if: ks__has_field_copy_owner_threat_list
      - id: use_owner_defend_area
        type: u1
        if: ks__has_field_use_owner_defend_area
    instances:
      ks__has_field_summon_tag: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_name: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_max_num: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_copy_owner_threat_list: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_use_owner_defend_area: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  ks__array_of__config_summon_tag__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_summon_tag
        repeat: expr
        repeat-expr: length.value
  config_summon:
    seq:
      - id: ks__bit_field
        type: u1
      - id: summon_tags
        type: ks__array_of__config_summon_tag__length_u
        if: ks__has_field_summon_tags
    instances:
      ks__has_field_summon_tags: # Field №0
        value: (ks__bit_field & 0b1) != 0
  ks__kvp_of_dict__aux_types__string_config_attack_event:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: config_attack_event
  ks__dict_of__aux_types__string_config_attack_event:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_config_attack_event
        repeat: expr
        repeat-expr: length.value
  config_combat:
    seq:
      - id: ks__bit_field
        type: u1
      - id: property
        type: config_combat_property
        if: ks__has_field_property
      - id: be_hit
        type: config_combat_be_hit
        if: ks__has_field_be_hit
      - id: combat_lock
        type: config_combat_lock
        if: ks__has_field_combat_lock
      - id: die
        type: config_die
        if: ks__has_field_die
      - id: anim_events
        type: ks__dict_of__aux_types__string_config_attack_event
        if: ks__has_field_anim_events
      - id: summon
        type: config_summon
        if: ks__has_field_summon
    instances:
      ks__has_field_property: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_be_hit: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_combat_lock: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_die: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_anim_events: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_summon: # Field №5
        value: (ks__bit_field & 0b100000) != 0
  config_special_camera:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: priority
        type: f4
        if: ks__has_field_priority
      - id: enter_radius
        type: f4
        if: ks__has_field_enter_radius
      - id: exit_radius
        type: f4
        if: ks__has_field_exit_radius
      - id: height_adjust
        type: f4
        if: ks__has_field_height_adjust
      - id: fov
        type: f4
        if: ks__has_field_fov
      - id: zoom
        type: f4
        if: ks__has_field_zoom
      - id: spherical_y
        type: f4
        if: ks__has_field_spherical_y
      - id: lock_spherical_y
        type: u1
        if: ks__has_field_lock_spherical_y
      - id: spherical_y_up
        type: f4
        if: ks__has_field_spherical_y_up
      - id: spherical_y_down
        type: f4
        if: ks__has_field_spherical_y_down
      - id: auto_turn_start_min
        type: f4
        if: ks__has_field_auto_turn_start_min
      - id: auto_turn_start_max
        type: f4
        if: ks__has_field_auto_turn_start_max
      - id: auto_turn_end_min
        type: f4
        if: ks__has_field_auto_turn_end_min
      - id: auto_turn_end_max
        type: f4
        if: ks__has_field_auto_turn_end_max
    instances:
      ks__has_field_priority: # Field №0
        value: (ks__bit_field.value & 0b00000000000001) != 0
      ks__has_field_enter_radius: # Field №1
        value: (ks__bit_field.value & 0b00000000000010) != 0
      ks__has_field_exit_radius: # Field №2
        value: (ks__bit_field.value & 0b00000000000100) != 0
      ks__has_field_height_adjust: # Field №3
        value: (ks__bit_field.value & 0b00000000001000) != 0
      ks__has_field_fov: # Field №4
        value: (ks__bit_field.value & 0b00000000010000) != 0
      ks__has_field_zoom: # Field №5
        value: (ks__bit_field.value & 0b00000000100000) != 0
      ks__has_field_spherical_y: # Field №6
        value: (ks__bit_field.value & 0b00000001000000) != 0
      ks__has_field_lock_spherical_y: # Field №7
        value: (ks__bit_field.value & 0b00000010000000) != 0
      ks__has_field_spherical_y_up: # Field №8
        value: (ks__bit_field.value & 0b00000100000000) != 0
      ks__has_field_spherical_y_down: # Field №9
        value: (ks__bit_field.value & 0b00001000000000) != 0
      ks__has_field_auto_turn_start_min: # Field №10
        value: (ks__bit_field.value & 0b00010000000000) != 0
      ks__has_field_auto_turn_start_max: # Field №11
        value: (ks__bit_field.value & 0b00100000000000) != 0
      ks__has_field_auto_turn_end_min: # Field №12
        value: (ks__bit_field.value & 0b01000000000000) != 0
      ks__has_field_auto_turn_end_max: # Field №13
        value: (ks__bit_field.value & 0b10000000000000) != 0
  config_gadget_special_camera_register:
    seq: []
    instances: {}
  config_gadget_special_camera:
    seq:
      - id: ks__base
        type: config_special_camera
      - id: ks__bit_field
        type: u1
      - id: enter_angle
        type: f4
        if: ks__has_field_enter_angle
      - id: exit_angle
        type: f4
        if: ks__has_field_exit_angle
    instances:
      ks__has_field_enter_angle: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_exit_angle: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      priority:
        value: ks__base.priority
      enter_radius:
        value: ks__base.enter_radius
      exit_radius:
        value: ks__base.exit_radius
      height_adjust:
        value: ks__base.height_adjust
      fov:
        value: ks__base.fov
      zoom:
        value: ks__base.zoom
      spherical_y:
        value: ks__base.spherical_y
      lock_spherical_y:
        value: ks__base.lock_spherical_y
      spherical_y_up:
        value: ks__base.spherical_y_up
      spherical_y_down:
        value: ks__base.spherical_y_down
      auto_turn_start_min:
        value: ks__base.auto_turn_start_min
      auto_turn_start_max:
        value: ks__base.auto_turn_start_max
      auto_turn_end_min:
        value: ks__base.auto_turn_end_min
      auto_turn_end_max:
        value: ks__base.auto_turn_end_max
  config_gadget_camera_box:
    seq:
      - id: ks__bit_field
        type: u1
      - id: config_name
        type: aux_types::string
        if: ks__has_field_config_name
      - id: enter_radius
        type: f4
        if: ks__has_field_enter_radius
      - id: exit_radius
        type: f4
        if: ks__has_field_exit_radius
    instances:
      ks__has_field_config_name: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_enter_radius: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_exit_radius: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_combat_speech:
    seq:
      - id: ks__bit_field
        type: u1
      - id: head_shot_speech_event
        type: config_wwise_string
        if: ks__has_field_head_shot_speech_event
    instances:
      ks__has_field_head_shot_speech_event: # Field №0
        value: (ks__bit_field & 0b1) != 0
  ks__enum__particle_shape_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: particle_shape_type
  particle_shape_type_comparer:
    seq: []
    instances: {}
  config_effect_attach_shape:
    seq: []
    instances: {}
  config_effect_attach_box_register:
    seq: []
    instances: {}
  config_effect_attach_box:
    seq:
      - id: ks__base
        type: config_effect_attach_shape
      - id: ks__bit_field
        type: u1
      - id: emit_from
        type: ks__enum__particle_shape_type
        if: ks__has_field_emit_from
      - id: scale_x
        type: f4
        if: ks__has_field_scale_x
      - id: scale_y
        type: f4
        if: ks__has_field_scale_y
      - id: scale_z
        type: f4
        if: ks__has_field_scale_z
    instances:
      ks__has_field_emit_from: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_scale_x: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_scale_y: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_scale_z: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  config_effect_attach_skinned_mesh_register:
    seq: []
    instances: {}
  config_effect_attach_skinned_mesh:
    seq:
      - id: ks__base
        type: config_effect_attach_shape
      - id: ks__bit_field
        type: u1
      - id: mesh
        type: aux_types::string
        if: ks__has_field_mesh
    instances:
      ks__has_field_mesh: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_effect_attach_mesh_register:
    seq: []
    instances: {}
  config_effect_attach_mesh:
    seq:
      - id: ks__base
        type: config_effect_attach_shape
      - id: ks__bit_field
        type: u1
      - id: mesh
        type: aux_types::string
        if: ks__has_field_mesh
    instances:
      ks__has_field_mesh: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_entity_common:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: effect_attach_shape
        type: ks__disp__config_effect_attach_shape
        if: ks__has_field_effect_attach_shape
      - id: mass
        type: f4
        if: ks__has_field_mass
      - id: height
        type: f4
        if: ks__has_field_height
      - id: model_height
        type: f4
        if: ks__has_field_model_height
      - id: view_size
        type: f4
        if: ks__has_field_view_size
      - id: shadow_view_size_ratio
        type: f4
        if: ks__has_field_shadow_view_size_ratio
      - id: override_cull_bounds_radius
        type: f4
        if: ks__has_field_override_cull_bounds_radius
      - id: affected_by_world
        type: u1
        if: ks__has_field_affected_by_world
      - id: check_in_surface
        type: u1
        if: ks__has_field_check_in_surface
      - id: scale
        type: f4
        if: ks__has_field_scale
      - id: disable_tick_distance
        type: f4
        if: ks__has_field_disable_tick_distance
      - id: force_pause_tick_distance
        type: f4
        if: ks__has_field_force_pause_tick_distance
      - id: should_pause_animator_before_ready
        type: u1
        if: ks__has_field_should_pause_animator_before_ready
      - id: can_trigger_element_reaction_text
        type: u1
        if: ks__has_field_can_trigger_element_reaction_text
      - id: use_grass_displacement
        type: u1
        if: ks__has_field_use_grass_displacement
      - id: mute_element_stick_ui
        type: u1
        if: ks__has_field_mute_element_stick_ui
      - id: has_after_image
        type: u1
        if: ks__has_field_has_after_image
      - id: use_dynamic_bone
        type: u1
        if: ks__has_field_use_dynamic_bone
      - id: enable_crash_damage
        type: u1
        if: ks__has_field_enable_crash_damage
      - id: clear_animator_on_set_light_deactive
        type: u1
        if: ks__has_field_clear_animator_on_set_light_deactive
      - id: clear_ai_on_set_light_deactive
        type: u1
        if: ks__has_field_clear_ai_on_set_light_deactive
      - id: use_final_ik
        type: u1
        if: ks__has_field_use_final_ik
      - id: element_reaction_scale
        type: f4
        if: ks__has_field_element_reaction_scale
      - id: charge_bar_height_offset
        type: f4
        if: ks__has_field_charge_bar_height_offset
    instances:
      ks__has_field_effect_attach_shape: # Field №0
        value: (ks__bit_field.value & 0b000000000000000000000001) != 0
      ks__has_field_mass: # Field №1
        value: (ks__bit_field.value & 0b000000000000000000000010) != 0
      ks__has_field_height: # Field №2
        value: (ks__bit_field.value & 0b000000000000000000000100) != 0
      ks__has_field_model_height: # Field №3
        value: (ks__bit_field.value & 0b000000000000000000001000) != 0
      ks__has_field_view_size: # Field №4
        value: (ks__bit_field.value & 0b000000000000000000010000) != 0
      ks__has_field_shadow_view_size_ratio: # Field №5
        value: (ks__bit_field.value & 0b000000000000000000100000) != 0
      ks__has_field_override_cull_bounds_radius: # Field №6
        value: (ks__bit_field.value & 0b000000000000000001000000) != 0
      ks__has_field_affected_by_world: # Field №7
        value: (ks__bit_field.value & 0b000000000000000010000000) != 0
      ks__has_field_check_in_surface: # Field №8
        value: (ks__bit_field.value & 0b000000000000000100000000) != 0
      ks__has_field_scale: # Field №9
        value: (ks__bit_field.value & 0b000000000000001000000000) != 0
      ks__has_field_disable_tick_distance: # Field №10
        value: (ks__bit_field.value & 0b000000000000010000000000) != 0
      ks__has_field_force_pause_tick_distance: # Field №11
        value: (ks__bit_field.value & 0b000000000000100000000000) != 0
      ks__has_field_should_pause_animator_before_ready: # Field №12
        value: (ks__bit_field.value & 0b000000000001000000000000) != 0
      ks__has_field_can_trigger_element_reaction_text: # Field №13
        value: (ks__bit_field.value & 0b000000000010000000000000) != 0
      ks__has_field_use_grass_displacement: # Field №14
        value: (ks__bit_field.value & 0b000000000100000000000000) != 0
      ks__has_field_mute_element_stick_ui: # Field №15
        value: (ks__bit_field.value & 0b000000001000000000000000) != 0
      ks__has_field_has_after_image: # Field №16
        value: (ks__bit_field.value & 0b000000010000000000000000) != 0
      ks__has_field_use_dynamic_bone: # Field №17
        value: (ks__bit_field.value & 0b000000100000000000000000) != 0
      ks__has_field_enable_crash_damage: # Field №18
        value: (ks__bit_field.value & 0b000001000000000000000000) != 0
      ks__has_field_clear_animator_on_set_light_deactive: # Field №19
        value: (ks__bit_field.value & 0b000010000000000000000000) != 0
      ks__has_field_clear_ai_on_set_light_deactive: # Field №20
        value: (ks__bit_field.value & 0b000100000000000000000000) != 0
      ks__has_field_use_final_ik: # Field №21
        value: (ks__bit_field.value & 0b001000000000000000000000) != 0
      ks__has_field_element_reaction_scale: # Field №22
        value: (ks__bit_field.value & 0b010000000000000000000000) != 0
      ks__has_field_charge_bar_height_offset: # Field №23
        value: (ks__bit_field.value & 0b100000000000000000000000) != 0
  ks__enum__billboard_offset_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: billboard_offset_type
  billboard_offset_type_comparer:
    seq: []
    instances: {}
  config_billboard:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: attach_point
        type: aux_types::string
        if: ks__has_field_attach_point
      - id: offset
        type: vector
        if: ks__has_field_offset
      - id: offset_type
        type: ks__enum__billboard_offset_type
        if: ks__has_field_offset_type
      - id: radius_offset
        type: f4
        if: ks__has_field_radius_offset
      - id: enable_self_adapt
        type: u1
        if: ks__has_field_enable_self_adapt
      - id: show_distance
        type: f4
        if: ks__has_field_show_distance
      - id: mark_show_distance
        type: f4
        if: ks__has_field_mark_show_distance
      - id: name_show_distance
        type: f4
        if: ks__has_field_name_show_distance
      - id: kcibjnckcae
        type: u1
        if: ks__has_field_kcibjnckcae
    instances:
      ks__has_field_attach_point: # Field №0
        value: (ks__bit_field.value & 0b000000001) != 0
      ks__has_field_offset: # Field №1
        value: (ks__bit_field.value & 0b000000010) != 0
      ks__has_field_offset_type: # Field №2
        value: (ks__bit_field.value & 0b000000100) != 0
      ks__has_field_radius_offset: # Field №3
        value: (ks__bit_field.value & 0b000001000) != 0
      ks__has_field_enable_self_adapt: # Field №4
        value: (ks__bit_field.value & 0b000010000) != 0
      ks__has_field_show_distance: # Field №5
        value: (ks__bit_field.value & 0b000100000) != 0
      ks__has_field_mark_show_distance: # Field №6
        value: (ks__bit_field.value & 0b001000000) != 0
      ks__has_field_name_show_distance: # Field №7
        value: (ks__bit_field.value & 0b010000000) != 0
      ks__has_field_kcibjnckcae: # Field №8
        value: (ks__bit_field.value & 0b100000000) != 0
  ks__enum__combat_billboard_size:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: combat_billboard_size
  combat_billboard_size_comparer:
    seq: []
    instances: {}
  config_combat_billboard_register:
    seq: []
    instances: {}
  config_combat_billboard:
    seq:
      - id: ks__base
        type: config_billboard
      - id: ks__bit_field
        type: u1
      - id: show_hp_bar
        type: u1
        if: ks__has_field_show_hp_bar
      - id: force_show_distance
        type: f4
        if: ks__has_field_force_show_distance
      - id: size
        type: ks__enum__combat_billboard_size
        if: ks__has_field_size
      - id: shield_bar_only
        type: u1
        if: ks__has_field_shield_bar_only
    instances:
      ks__has_field_show_hp_bar: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_force_show_distance: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_size: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_shield_bar_only: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      attach_point:
        value: ks__base.attach_point
      offset:
        value: ks__base.offset
      offset_type:
        value: ks__base.offset_type
      radius_offset:
        value: ks__base.radius_offset
      enable_self_adapt:
        value: ks__base.enable_self_adapt
      show_distance:
        value: ks__base.show_distance
      mark_show_distance:
        value: ks__base.mark_show_distance
      name_show_distance:
        value: ks__base.name_show_distance
      kcibjnckcae:
        value: ks__base.kcibjnckcae
  ks__enum__progress_billboard_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: progress_billboard_type
  progress_billboard_type_comparer:
    seq: []
    instances: {}
  config_progress_billboard_register:
    seq: []
    instances: {}
  config_progress_billboard:
    seq:
      - id: ks__base
        type: config_billboard
      - id: ks__bit_field
        type: u1
      - id: custom_key_list
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_custom_key_list
      - id: max_value
        type: f4
        if: ks__has_field_max_value
      - id: prefab_plugin_name
        type: aux_types::string
        if: ks__has_field_prefab_plugin_name
      - id: type
        type: ks__enum__progress_billboard_type
        if: ks__has_field_type
    instances:
      ks__has_field_custom_key_list: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_max_value: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_prefab_plugin_name: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_type: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      attach_point:
        value: ks__base.attach_point
      offset:
        value: ks__base.offset
      offset_type:
        value: ks__base.offset_type
      radius_offset:
        value: ks__base.radius_offset
      enable_self_adapt:
        value: ks__base.enable_self_adapt
      show_distance:
        value: ks__base.show_distance
      mark_show_distance:
        value: ks__base.mark_show_distance
      name_show_distance:
        value: ks__base.name_show_distance
      kcibjnckcae:
        value: ks__base.kcibjnckcae
  config_gadget_icon_billboard_register:
    seq: []
    instances: {}
  config_gadget_icon_billboard:
    seq:
      - id: ks__base
        type: config_billboard
      - id: ks__bit_field
        type: u1
      - id: icon_name
        type: aux_types::string
        if: ks__has_field_icon_name
      - id: title
        type: aux_types::string
        if: ks__has_field_title
    instances:
      ks__has_field_icon_name: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_title: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      attach_point:
        value: ks__base.attach_point
      offset:
        value: ks__base.offset
      offset_type:
        value: ks__base.offset_type
      radius_offset:
        value: ks__base.radius_offset
      enable_self_adapt:
        value: ks__base.enable_self_adapt
      show_distance:
        value: ks__base.show_distance
      mark_show_distance:
        value: ks__base.mark_show_distance
      name_show_distance:
        value: ks__base.name_show_distance
      kcibjnckcae:
        value: ks__base.kcibjnckcae
  component_tag_comparer:
    seq: []
    instances: {}
  play_mode_comparer:
    seq: []
    instances: {}
  logic_type_comparer:
    seq: []
    instances: {}
  ban_group_type_comparer:
    seq: []
    instances: {}
  ks__enum__ban_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: ban_type
  ban_type_comparer:
    seq: []
    instances: {}
  ordering_type_comparer:
    seq: []
    instances: {}
  npc_body_type_comparer:
    seq: []
    instances: {}
  config_avatar_controller_assembly_skill_subs:
    seq:
      - id: ks__bit_field
        type: u1
      - id: skill01_subs
        type: aux_types::string
        if: ks__has_field_skill01_subs
      - id: skill02_subs
        type: aux_types::string
        if: ks__has_field_skill02_subs
      - id: skill03_subs
        type: aux_types::string
        if: ks__has_field_skill03_subs
      - id: skill04_subs
        type: aux_types::string
        if: ks__has_field_skill04_subs
    instances:
      ks__has_field_skill01_subs: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_skill02_subs: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_skill03_subs: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_skill04_subs: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  config_avatar_controller_assembly:
    seq:
      - id: ks__bit_field
        type: u1
      - id: controller_path
        type: aux_types::string
        if: ks__has_field_controller_path
      - id: normal_move_subs
        type: aux_types::string
        if: ks__has_field_normal_move_subs
      - id: weapon_move_subs
        type: aux_types::string
        if: ks__has_field_weapon_move_subs
      - id: skill_subs
        type: config_avatar_controller_assembly_skill_subs
        if: ks__has_field_skill_subs
    instances:
      ks__has_field_controller_path: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_normal_move_subs: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_weapon_move_subs: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_skill_subs: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  config_base_state_id_info:
    seq:
      - id: ks__bit_field
        type: u1
      - id: priority
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_priority
    instances:
      ks__has_field_priority: # Field №0
        value: (ks__bit_field & 0b1) != 0
  ks__enum__move_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: move_type
  config_animator_boolean:
    seq:
      - id: ks__bit_field
        type: u1
      - id: name
        type: aux_types::string
        if: ks__has_field_name
      - id: normalize_start
        type: f4
        if: ks__has_field_normalize_start
      - id: normalize_end
        type: f4
        if: ks__has_field_normalize_end
    instances:
      ks__has_field_name: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_normalize_start: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_normalize_end: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__array_of__config_animator_boolean__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_animator_boolean
        repeat: expr
        repeat-expr: length.value
  config_animator_float:
    seq:
      - id: ks__bit_field
        type: u1
      - id: name
        type: aux_types::string
        if: ks__has_field_name
      - id: normalize_start
        type: f4
        if: ks__has_field_normalize_start
      - id: normalize_end
        type: f4
        if: ks__has_field_normalize_end
      - id: value
        type: f4
        if: ks__has_field_value
    instances:
      ks__has_field_name: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_normalize_start: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_normalize_end: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_value: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  ks__array_of__config_animator_float__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_animator_float
        repeat: expr
        repeat-expr: length.value
  config_normal_state_id_info:
    seq:
      - id: ks__base
        type: config_base_state_id_info
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: animator_states
        type: ks__dict_of__aux_types__string_ks__array_of__aux_types__string__length_u
        if: ks__has_field_animator_states
      - id: move_type
        type: ks__enum__move_type
        if: ks__has_field_move_type
      - id: combat_move_on_water
        type: u1
        if: ks__has_field_combat_move_on_water
      - id: can_do_skill
        type: u1
        if: ks__has_field_can_do_skill
      - id: can_do_skill_start
        type: f4
        if: ks__has_field_can_do_skill_start
      - id: can_do_skill_end
        type: f4
        if: ks__has_field_can_do_skill_end
      - id: can_sync_move
        type: u1
        if: ks__has_field_can_sync_move
      - id: culling_model_always_animate
        type: u1
        if: ks__has_field_culling_model_always_animate
      - id: add_endure
        type: f4
        if: ks__has_field_add_endure
      - id: mass_ratio
        type: f4
        if: ks__has_field_mass_ratio
      - id: reset_animator_trigger_on_enter
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_reset_animator_trigger_on_enter
      - id: reset_animator_trigger_on_exit
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_reset_animator_trigger_on_exit
      - id: set_animator_boolean
        type: ks__array_of__config_animator_boolean__length_u
        if: ks__has_field_set_animator_boolean
      - id: set_animator_float
        type: ks__array_of__config_animator_float__length_u
        if: ks__has_field_set_animator_float
      - id: enable_rag_doll
        type: u1
        if: ks__has_field_enable_rag_doll
      - id: need_face_to_anim_param
        type: u1
        if: ks__has_field_need_face_to_anim_param
      - id: enable_ccd
        type: u1
        if: ks__has_field_enable_ccd
    instances:
      ks__has_field_animator_states: # Field №0
        value: (ks__bit_field.value & 0b00000000000000001) != 0
      ks__has_field_move_type: # Field №1
        value: (ks__bit_field.value & 0b00000000000000010) != 0
      ks__has_field_combat_move_on_water: # Field №2
        value: (ks__bit_field.value & 0b00000000000000100) != 0
      ks__has_field_can_do_skill: # Field №3
        value: (ks__bit_field.value & 0b00000000000001000) != 0
      ks__has_field_can_do_skill_start: # Field №4
        value: (ks__bit_field.value & 0b00000000000010000) != 0
      ks__has_field_can_do_skill_end: # Field №5
        value: (ks__bit_field.value & 0b00000000000100000) != 0
      ks__has_field_can_sync_move: # Field №6
        value: (ks__bit_field.value & 0b00000000001000000) != 0
      ks__has_field_culling_model_always_animate: # Field №7
        value: (ks__bit_field.value & 0b00000000010000000) != 0
      ks__has_field_add_endure: # Field №8
        value: (ks__bit_field.value & 0b00000000100000000) != 0
      ks__has_field_mass_ratio: # Field №9
        value: (ks__bit_field.value & 0b00000001000000000) != 0
      ks__has_field_reset_animator_trigger_on_enter: # Field №10
        value: (ks__bit_field.value & 0b00000010000000000) != 0
      ks__has_field_reset_animator_trigger_on_exit: # Field №11
        value: (ks__bit_field.value & 0b00000100000000000) != 0
      ks__has_field_set_animator_boolean: # Field №12
        value: (ks__bit_field.value & 0b00001000000000000) != 0
      ks__has_field_set_animator_float: # Field №13
        value: (ks__bit_field.value & 0b00010000000000000) != 0
      ks__has_field_enable_rag_doll: # Field №14
        value: (ks__bit_field.value & 0b00100000000000000) != 0
      ks__has_field_need_face_to_anim_param: # Field №15
        value: (ks__bit_field.value & 0b01000000000000000) != 0
      ks__has_field_enable_ccd: # Field №16
        value: (ks__bit_field.value & 0b10000000000000000) != 0
      # Base class fields
      priority:
        value: ks__base.priority
  ks__kvp_of_dict__aux_types__string_ks__disp__config_base_state_id_info:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: ks__disp__config_base_state_id_info
  ks__dict_of__aux_types__string_ks__disp__config_base_state_id_info:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_ks__disp__config_base_state_id_info
        repeat: expr
        repeat-expr: length.value
  config_controller_subs:
    seq:
      - id: ks__bit_field
        type: u1
      - id: path
        type: aux_types::string
        if: ks__has_field_path
      - id: subs_name
        type: aux_types::string
        if: ks__has_field_subs_name
      - id: state_i_ds
        type: ks__dict_of__aux_types__string_ks__disp__config_base_state_id_info
        if: ks__has_field_state_i_ds
    instances:
      ks__has_field_path: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_subs_name: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_state_i_ds: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__enum__coop_cond_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: coop_cond_type
  coop_cond_type_comparer:
    seq: []
    instances: {}
  ks__enum__coop_temperament_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: coop_temperament_type
  coop_temperament_type_comparer:
    seq: []
    instances: {}
  ks__enum__coop_action_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: coop_action_type
  coop_action_type_comparer:
    seq: []
    instances: {}
  ks__enum__coop_node_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: coop_node_type
  coop_node_type_comparer:
    seq: []
    instances: {}
  coop_cond:
    seq:
      - id: ks__bit_field
        type: u1
      - id: type
        type: ks__enum__coop_cond_type
        if: ks__has_field_type
      - id: param
        type: ks__array_of__aux_types__vlq_base128_le_s__length_u
        if: ks__has_field_param
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_param: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_coop_action:
    seq:
      - id: ks__bit_field
        type: u1
      - id: action_type
        type: ks__enum__coop_action_type
        if: ks__has_field_action_type
      - id: param
        type: ks__array_of__aux_types__vlq_base128_le_s__length_u
        if: ks__has_field_param
    instances:
      ks__has_field_action_type: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_param: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__array_of__coop_cond__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: coop_cond
        repeat: expr
        repeat-expr: length.value
  coop_cond_group:
    seq:
      - id: ks__bit_field
        type: u1
      - id: cond_comb_type
        type: ks__enum__logic_type
        if: ks__has_field_cond_comb_type
      - id: coop_cond_list
        type: ks__array_of__coop_cond__length_u
        if: ks__has_field_coop_cond_list
    instances:
      ks__has_field_cond_comb_type: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_coop_cond_list: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_coop_base_node:
    seq:
      - id: ks__bit_field
        type: u1
      - id: coop_node_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_coop_node_id
      - id: coop_node_type
        type: ks__enum__coop_node_type
        if: ks__has_field_coop_node_type
      - id: next_node_array
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_next_node_array
    instances:
      ks__has_field_coop_node_id: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_coop_node_type: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_next_node_array: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_coop_talk_node_register:
    seq: []
    instances: {}
  config_coop_talk_node:
    seq:
      - id: ks__base
        type: config_coop_base_node
      - id: ks__bit_field
        type: u1
      - id: talk_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_talk_id
      - id: talk_config
        type: config_talk_scheme
        if: ks__has_field_talk_config
    instances:
      ks__has_field_talk_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_talk_config: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      coop_node_id:
        value: ks__base.coop_node_id
      coop_node_type:
        value: ks__base.coop_node_type
      next_node_array:
        value: ks__base.next_node_array
  config_coop_cond_node_register:
    seq: []
    instances: {}
  config_coop_cond_node:
    seq:
      - id: ks__base
        type: config_coop_base_node
      - id: ks__bit_field
        type: u1
      - id: coop_cond_grp
        type: coop_cond_group
        if: ks__has_field_coop_cond_grp
    instances:
      ks__has_field_coop_cond_grp: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      coop_node_id:
        value: ks__base.coop_node_id
      coop_node_type:
        value: ks__base.coop_node_type
      next_node_array:
        value: ks__base.next_node_array
  coop_select_node_content:
    seq:
      - id: ks__bit_field
        type: u1
      - id: dialog_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_dialog_id
      - id: show_cond
        type: coop_cond_group
        if: ks__has_field_show_cond
      - id: enable_cond
        type: coop_cond_group
        if: ks__has_field_enable_cond
    instances:
      ks__has_field_dialog_id: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_show_cond: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_enable_cond: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_coop_select_node_register:
    seq: []
    instances: {}
  ks__array_of__coop_select_node_content__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: coop_select_node_content
        repeat: expr
        repeat-expr: length.value
  config_coop_select_node:
    seq:
      - id: ks__base
        type: config_coop_base_node
      - id: ks__bit_field
        type: u1
      - id: select_list
        type: ks__array_of__coop_select_node_content__length_u
        if: ks__has_field_select_list
    instances:
      ks__has_field_select_list: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      coop_node_id:
        value: ks__base.coop_node_id
      coop_node_type:
        value: ks__base.coop_node_type
      next_node_array:
        value: ks__base.next_node_array
  config_coop_action_node_register:
    seq: []
    instances: {}
  ks__array_of__config_coop_action__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_coop_action
        repeat: expr
        repeat-expr: length.value
  config_coop_action_node:
    seq:
      - id: ks__base
        type: config_coop_base_node
      - id: ks__bit_field
        type: u1
      - id: action_list
        type: ks__array_of__config_coop_action__length_u
        if: ks__has_field_action_list
    instances:
      ks__has_field_action_list: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      coop_node_id:
        value: ks__base.coop_node_id
      coop_node_type:
        value: ks__base.coop_node_type
      next_node_array:
        value: ks__base.next_node_array
  config_coop_end_node_register:
    seq: []
    instances: {}
  config_coop_end_node:
    seq:
      - id: ks__base
        type: config_coop_base_node
      - id: ks__bit_field
        type: u1
      - id: save_point_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_save_point_id
    instances:
      ks__has_field_save_point_id: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      coop_node_id:
        value: ks__base.coop_node_id
      coop_node_type:
        value: ks__base.coop_node_type
      next_node_array:
        value: ks__base.next_node_array
  coop_temperament:
    seq:
      - id: ks__bit_field
        type: u1
      - id: value
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_value
      - id: ratio
        type: f4
        if: ks__has_field_ratio
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_ratio: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__kvp_of_dict__aux_types__vlq_base128_le_u_ks__disp__config_coop_base_node:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_u
      - id: value
        type: ks__disp__config_coop_base_node
  ks__dict_of__aux_types__vlq_base128_le_u_ks__disp__config_coop_base_node:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_u_ks__disp__config_coop_base_node
        repeat: expr
        repeat-expr: length.value
  config_coop_interaction_group:
    seq:
      - id: ks__bit_field
        type: u1
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: coop_map
        type: ks__dict_of__aux_types__vlq_base128_le_u_ks__disp__config_coop_base_node
        if: ks__has_field_coop_map
      - id: start_node_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_start_node_id
      - id: fail_node_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_fail_node_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_coop_map: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_start_node_id: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_fail_node_id: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  coop_sub_start_point:
    seq:
      - id: ks__bit_field
        type: u1
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: coop_interaction_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_coop_interaction_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_coop_interaction_id: # Field №1
        value: (ks__bit_field & 0b10) != 0
  coop_save_point:
    seq:
      - id: ks__bit_field
        type: u1
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: is_end
        type: u1
        if: ks__has_field_is_end
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_is_end: # Field №1
        value: (ks__bit_field & 0b10) != 0
  coop_temp_value:
    seq:
      - id: ks__bit_field
        type: u1
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: value
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_value
      - id: is_coop_var
        type: u1
        if: ks__has_field_is_coop_var
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_value: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_is_coop_var: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__kvp_of_dict__aux_types__vlq_base128_le_u_config_coop_interaction_group:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_u
      - id: value
        type: config_coop_interaction_group
  ks__dict_of__aux_types__vlq_base128_le_u_config_coop_interaction_group:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_u_config_coop_interaction_group
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__aux_types__vlq_base128_le_u_coop_sub_start_point:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_u
      - id: value
        type: coop_sub_start_point
  ks__dict_of__aux_types__vlq_base128_le_u_coop_sub_start_point:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_u_coop_sub_start_point
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__aux_types__vlq_base128_le_u_coop_save_point:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_u
      - id: value
        type: coop_save_point
  ks__dict_of__aux_types__vlq_base128_le_u_coop_save_point:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_u_coop_save_point
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__ks__enum__coop_temperament_type_coop_temperament:
    seq:
      - id: key
        type: ks__enum__coop_temperament_type
      - id: value
        type: coop_temperament
  ks__dict_of__ks__enum__coop_temperament_type_coop_temperament:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__ks__enum__coop_temperament_type_coop_temperament
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__aux_types__vlq_base128_le_u_coop_temp_value:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_u
      - id: value
        type: coop_temp_value
  ks__dict_of__aux_types__vlq_base128_le_u_coop_temp_value:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_u_coop_temp_value
        repeat: expr
        repeat-expr: length.value
  config_main_coop_group:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: coop_interaction_map
        type: ks__dict_of__aux_types__vlq_base128_le_u_config_coop_interaction_group
        if: ks__has_field_coop_interaction_map
      - id: sub_start_point_map
        type: ks__dict_of__aux_types__vlq_base128_le_u_coop_sub_start_point
        if: ks__has_field_sub_start_point_map
      - id: save_point_map
        type: ks__dict_of__aux_types__vlq_base128_le_u_coop_save_point
        if: ks__has_field_save_point_map
      - id: confidence_value
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_confidence_value
      - id: max_confidence_value
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_confidence_value
      - id: temperament_map
        type: ks__dict_of__ks__enum__coop_temperament_type_coop_temperament
        if: ks__has_field_temperament_map
      - id: use_confidence
        type: u1
        if: ks__has_field_use_confidence
      - id: use_temperament
        type: u1
        if: ks__has_field_use_temperament
      - id: coop_temp_value_map
        type: ks__dict_of__aux_types__vlq_base128_le_u_coop_temp_value
        if: ks__has_field_coop_temp_value_map
    instances:
      ks__has_field_coop_interaction_map: # Field №0
        value: (ks__bit_field.value & 0b000000001) != 0
      ks__has_field_sub_start_point_map: # Field №1
        value: (ks__bit_field.value & 0b000000010) != 0
      ks__has_field_save_point_map: # Field №2
        value: (ks__bit_field.value & 0b000000100) != 0
      ks__has_field_confidence_value: # Field №3
        value: (ks__bit_field.value & 0b000001000) != 0
      ks__has_field_max_confidence_value: # Field №4
        value: (ks__bit_field.value & 0b000010000) != 0
      ks__has_field_temperament_map: # Field №5
        value: (ks__bit_field.value & 0b000100000) != 0
      ks__has_field_use_confidence: # Field №6
        value: (ks__bit_field.value & 0b001000000) != 0
      ks__has_field_use_temperament: # Field №7
        value: (ks__bit_field.value & 0b010000000) != 0
      ks__has_field_coop_temp_value_map: # Field №8
        value: (ks__bit_field.value & 0b100000000) != 0
  config_costume_audio:
    seq:
      - id: ks__bit_field
        type: u1
      - id: wear_voice
        type: voice_trigger_identity
        if: ks__has_field_wear_voice
    instances:
      ks__has_field_wear_voice: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_costume_info:
    seq:
      - id: ks__bit_field
        type: u1
      - id: effects
        type: ks__dict_of__aux_types__string_aux_types__string
        if: ks__has_field_effects
      - id: gadgets
        type: ks__dict_of__aux_types__string_aux_types__string
        if: ks__has_field_gadgets
      - id: audio
        type: config_costume_audio
        if: ks__has_field_audio
    instances:
      ks__has_field_effects: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_gadgets: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_audio: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__enum__quest_state:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: quest_state
  ks__array_of__ks__enum__quest_state__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__enum__quest_state
        repeat: expr
        repeat-expr: length.value
  config_crowd_quest_restriction:
    seq:
      - id: ks__bit_field
        type: u1
      - id: quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_quest_id
      - id: quest_accepted
        type: u1
        if: ks__has_field_quest_accepted
      - id: quest_states
        type: ks__array_of__ks__enum__quest_state__length_u
        if: ks__has_field_quest_states
    instances:
      ks__has_field_quest_id: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_quest_accepted: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_quest_states: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_crowd_activity_restriction:
    seq:
      - id: ks__bit_field
        type: u1
      - id: activity_type
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_type
      - id: is_active
        type: u1
        if: ks__has_field_is_active
      - id: activity_phase
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_activity_phase
      - id: cond_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cond_id
    instances:
      ks__has_field_activity_type: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_is_active: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_activity_phase: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_cond_id: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  config_crowd_time_restriction:
    seq:
      - id: ks__bit_field
        type: u1
      - id: start_time_of_day
        type: f4
        if: ks__has_field_start_time_of_day
      - id: end_time_of_day
        type: f4
        if: ks__has_field_end_time_of_day
      - id: show_crowd
        type: u1
        if: ks__has_field_show_crowd
    instances:
      ks__has_field_start_time_of_day: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_end_time_of_day: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_show_crowd: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_crowd_scene_tag_restriction:
    seq:
      - id: ks__bit_field
        type: u1
      - id: scene_tags
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_scene_tags
      - id: is_active
        type: u1
        if: ks__has_field_is_active
    instances:
      ks__has_field_scene_tags: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_is_active: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__enum__crowd_spawn_condition_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: crowd_spawn_condition_type
  crowd_spawn_condition_type_comparer:
    seq: []
    instances: {}
  ks__array_of__config_crowd_quest_restriction__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_crowd_quest_restriction
        repeat: expr
        repeat-expr: length.value
  ks__array_of__config_crowd_activity_restriction__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_crowd_activity_restriction
        repeat: expr
        repeat-expr: length.value
  ks__array_of__config_crowd_time_restriction__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_crowd_time_restriction
        repeat: expr
        repeat-expr: length.value
  ks__array_of__config_crowd_scene_tag_restriction__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_crowd_scene_tag_restriction
        repeat: expr
        repeat-expr: length.value
  config_crowd_restriction_group:
    seq:
      - id: ks__bit_field
        type: u1
      - id: spawn_condition
        type: ks__enum__crowd_spawn_condition_type
        if: ks__has_field_spawn_condition
      - id: quest_res
        type: ks__array_of__config_crowd_quest_restriction__length_u
        if: ks__has_field_quest_res
      - id: activity_res
        type: ks__array_of__config_crowd_activity_restriction__length_u
        if: ks__has_field_activity_res
      - id: time_res
        type: ks__array_of__config_crowd_time_restriction__length_u
        if: ks__has_field_time_res
      - id: scene_tags
        type: ks__array_of__config_crowd_scene_tag_restriction__length_u
        if: ks__has_field_scene_tags
    instances:
      ks__has_field_spawn_condition: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_quest_res: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_activity_res: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_time_res: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_scene_tags: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  ks__array_of__config_crowd_restriction_group__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_crowd_restriction_group
        repeat: expr
        repeat-expr: length.value
  config_crowd_group_info:
    seq:
      - id: ks__bit_field
        type: u1
      - id: crowd_group_id
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_crowd_group_id
      - id: bound_center
        type: vector
        if: ks__has_field_bound_center
      - id: bound_size
        type: vector
        if: ks__has_field_bound_size
      - id: spawn_by_default
        type: u1
        if: ks__has_field_spawn_by_default
      - id: crowd_restriction_groups
        type: ks__array_of__config_crowd_restriction_group__length_u
        if: ks__has_field_crowd_restriction_groups
      - id: cutscene_id
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_cutscene_id
      - id: ignore_low_perf_mode
        type: u1
        if: ks__has_field_ignore_low_perf_mode
      - id: joint_blocks
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_joint_blocks
    instances:
      ks__has_field_crowd_group_id: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_bound_center: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_bound_size: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_spawn_by_default: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_crowd_restriction_groups: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_cutscene_id: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_ignore_low_perf_mode: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_joint_blocks: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
  ks__array_of__config_crowd_group_info__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_crowd_group_info
        repeat: expr
        repeat-expr: length.value
  config_crowd_group_infos:
    seq:
      - id: ks__bit_field
        type: u1
      - id: crowd_group_infos
        type: ks__array_of__config_crowd_group_info__length_u
        if: ks__has_field_crowd_group_infos
    instances:
      ks__has_field_crowd_group_infos: # Field №0
        value: (ks__bit_field & 0b1) != 0
  color_vector:
    seq:
      - id: ks__bit_field
        type: u1
      - id: r
        type: f4
        if: ks__has_field_r
      - id: g
        type: f4
        if: ks__has_field_g
      - id: b
        type: f4
        if: ks__has_field_b
      - id: a
        type: f4
        if: ks__has_field_a
    instances:
      ks__has_field_r: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_g: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_b: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_a: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  ks__array_of__color_vector__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: color_vector
        repeat: expr
        repeat-expr: length.value
  config_crowd_spawn_info:
    seq:
      - id: ks__bit_field
        type: u1
      - id: crowd_type_id
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_crowd_type_id
      - id: anim_config_id
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_anim_config_id
      - id: spawn_position
        type: vector
        if: ks__has_field_spawn_position
      - id: spawn_face_fwd
        type: vector
        if: ks__has_field_spawn_face_fwd
      - id: has_collider
        type: u1
        if: ks__has_field_has_collider
      - id: sit_on_chair
        type: u1
        if: ks__has_field_sit_on_chair
      - id: hair_color
        type: color_vector
        if: ks__has_field_hair_color
      - id: body_colors
        type: ks__array_of__color_vector__length_u
        if: ks__has_field_body_colors
    instances:
      ks__has_field_crowd_type_id: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_anim_config_id: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_spawn_position: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_spawn_face_fwd: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_has_collider: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_sit_on_chair: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_hair_color: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_body_colors: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
  config_crowd_group_collider_info:
    seq:
      - id: ks__bit_field
        type: u1
      - id: spawn_position
        type: vector
        if: ks__has_field_spawn_position
      - id: spawn_face_fwd
        type: vector
        if: ks__has_field_spawn_face_fwd
      - id: height
        type: f4
        if: ks__has_field_height
      - id: radius
        type: f4
        if: ks__has_field_radius
    instances:
      ks__has_field_spawn_position: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_spawn_face_fwd: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_height: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_radius: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  ks__array_of__config_crowd_spawn_info__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_crowd_spawn_info
        repeat: expr
        repeat-expr: length.value
  ks__array_of__config_crowd_group_collider_info__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_crowd_group_collider_info
        repeat: expr
        repeat-expr: length.value
  config_crowd_spawn_infos:
    seq:
      - id: ks__bit_field
        type: u1
      - id: crowd_spawn_infos
        type: ks__array_of__config_crowd_spawn_info__length_u
        if: ks__has_field_crowd_spawn_infos
      - id: crowd_group_collider_infos
        type: ks__array_of__config_crowd_group_collider_info__length_u
        if: ks__has_field_crowd_group_collider_infos
    instances:
      ks__has_field_crowd_spawn_infos: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_crowd_group_collider_infos: # Field №1
        value: (ks__bit_field & 0b10) != 0
  cutscene_type_comparer:
    seq: []
    instances: {}
  cutscene_init_pos_type_comparer:
    seq: []
    instances: {}
  config_timeline_register:
    seq: []
    instances: {}
  ks__enum__cutscene_index_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: cutscene_index_type
  cutscene_index_type_comparer:
    seq: []
    instances: {}
  config_video:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: hero_diff
        type: u1
        if: ks__has_field_hero_diff
      - id: video_name
        type: aux_types::string
        if: ks__has_field_video_name
      - id: video_name_other
        type: aux_types::string
        if: ks__has_field_video_name_other
      - id: subtitle_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_subtitle_id
      - id: subtitle_id_other
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_subtitle_id_other
      - id: can_skip
        type: u1
        if: ks__has_field_can_skip
      - id: bg_color
        type: color_vector
        if: ks__has_field_bg_color
      - id: fade_in_duration
        type: f4
        if: ks__has_field_fade_in_duration
      - id: fade_out_duration
        type: f4
        if: ks__has_field_fade_out_duration
    instances:
      ks__has_field_hero_diff: # Field №0
        value: (ks__bit_field.value & 0b000000001) != 0
      ks__has_field_video_name: # Field №1
        value: (ks__bit_field.value & 0b000000010) != 0
      ks__has_field_video_name_other: # Field №2
        value: (ks__bit_field.value & 0b000000100) != 0
      ks__has_field_subtitle_id: # Field №3
        value: (ks__bit_field.value & 0b000001000) != 0
      ks__has_field_subtitle_id_other: # Field №4
        value: (ks__bit_field.value & 0b000010000) != 0
      ks__has_field_can_skip: # Field №5
        value: (ks__bit_field.value & 0b000100000) != 0
      ks__has_field_bg_color: # Field №6
        value: (ks__bit_field.value & 0b001000000) != 0
      ks__has_field_fade_in_duration: # Field №7
        value: (ks__bit_field.value & 0b010000000) != 0
      ks__has_field_fade_out_duration: # Field №8
        value: (ks__bit_field.value & 0b100000000) != 0
  config_cutscene_context:
    seq:
      - id: ks__bit_field
        type: u1
      - id: type
        type: ks__enum__cutscene_index_type
        if: ks__has_field_type
      - id: enable_force_streaming
        type: u1
        if: ks__has_field_enable_force_streaming
      - id: cutscene_config
        type: config_timeline
        if: ks__has_field_cutscene_config
      - id: video_config
        type: config_video
        if: ks__has_field_video_config
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_enable_force_streaming: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_cutscene_config: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_video_config: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_cutscene_context:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_s
      - id: value
        type: config_cutscene_context
  ks__dict_of__aux_types__vlq_base128_le_s_config_cutscene_context:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_cutscene_context
        repeat: expr
        repeat-expr: length.value
  config_cutscene_index:
    seq:
      - id: ks__bit_field
        type: u1
      - id: normal
        type: config_cutscene_context
        if: ks__has_field_normal
      - id: platform
        type: ks__dict_of__aux_types__vlq_base128_le_s_config_cutscene_context
        if: ks__has_field_platform
    instances:
      ks__has_field_normal: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_platform: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_polygon_zone:
    seq:
      - id: ks__bit_field
        type: u1
      - id: check_cd
        type: f4
        if: ks__has_field_check_cd
    instances:
      ks__has_field_check_cd: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_danger_zone_register:
    seq: []
    instances: {}
  config_danger_zone:
    seq:
      - id: ks__base
        type: config_polygon_zone
      - id: ks__bit_field
        type: u1
      - id: zonelist
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_zonelist
    instances:
      ks__has_field_zonelist: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      check_cd:
        value: ks__base.check_cd
  config_fishing_zone_register:
    seq: []
    instances: {}
  config_fishing_zone:
    seq:
      - id: ks__base
        type: config_polygon_zone
      - id: ks__bit_field
        type: u1
      - id: valid_radius
        type: f4
        if: ks__has_field_valid_radius
      - id: flee_radius
        type: f4
        if: ks__has_field_flee_radius
      - id: disable_in_multiplayer
        type: u1
        if: ks__has_field_disable_in_multiplayer
      - id: born_radius
        type: f4
        if: ks__has_field_born_radius
    instances:
      ks__has_field_valid_radius: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_flee_radius: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_disable_in_multiplayer: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_born_radius: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      check_cd:
        value: ks__base.check_cd
  debug_board_info_register:
    seq: []
    instances: {}
  ks__kvp_of_dict__aux_types__string_f4:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: f4
  ks__dict_of__aux_types__string_f4:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_f4
        repeat: expr
        repeat-expr: length.value
  config_specific_float_value:
    seq:
      - id: ks__bit_field
        type: u1
      - id: default_value
        type: f4
        if: ks__has_field_default_value
      - id: specific_value
        type: ks__dict_of__aux_types__string_f4
        if: ks__has_field_specific_value
    instances:
      ks__has_field_default_value: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_specific_value: # Field №1
        value: (ks__bit_field & 0b10) != 0
  trigger_type_comparer:
    seq: []
    instances: {}
  collider_trigger_type_comparer:
    seq: []
    instances: {}
  camera_shake_type_comparer:
    seq: []
    instances: {}
  config_camera_move:
    seq:
      - id: ks__bit_field
        type: u1
      - id: cfg_path
        type: aux_types::string
        if: ks__has_field_cfg_path
    instances:
      ks__has_field_cfg_path: # Field №0
        value: (ks__bit_field & 0b1) != 0
  target_type_comparer:
    seq: []
    instances: {}
  ks__enum__timer_limit_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: timer_limit_type
  timer_limit_type_comparer:
    seq: []
    instances: {}
  ability_formula_comparer:
    seq: []
    instances: {}
  action_point_type_comparer:
    seq: []
    instances: {}
  config_avatar_focus:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: camera_hor_move_speed
        type: f4
        if: ks__has_field_camera_hor_move_speed
      - id: camera_ver_move_speed
        type: f4
        if: ks__has_field_camera_ver_move_speed
      - id: camera_hor_sticky_ratio
        type: f4
        if: ks__has_field_camera_hor_sticky_ratio
      - id: camera_ver_sticky_ratio
        type: f4
        if: ks__has_field_camera_ver_sticky_ratio
      - id: auto_focus_hor_speed
        type: f4
        if: ks__has_field_auto_focus_hor_speed
      - id: auto_focus_ver_speed
        type: f4
        if: ks__has_field_auto_focus_ver_speed
      - id: auto_focus_range_coef
        type: f4
        if: ks__has_field_auto_focus_range_coef
      - id: gyro_hor_move_speed
        type: f4
        if: ks__has_field_gyro_hor_move_speed
      - id: gyro_ver_move_speed
        type: f4
        if: ks__has_field_gyro_ver_move_speed
    instances:
      ks__has_field_camera_hor_move_speed: # Field №0
        value: (ks__bit_field.value & 0b000000001) != 0
      ks__has_field_camera_ver_move_speed: # Field №1
        value: (ks__bit_field.value & 0b000000010) != 0
      ks__has_field_camera_hor_sticky_ratio: # Field №2
        value: (ks__bit_field.value & 0b000000100) != 0
      ks__has_field_camera_ver_sticky_ratio: # Field №3
        value: (ks__bit_field.value & 0b000001000) != 0
      ks__has_field_auto_focus_hor_speed: # Field №4
        value: (ks__bit_field.value & 0b000010000) != 0
      ks__has_field_auto_focus_ver_speed: # Field №5
        value: (ks__bit_field.value & 0b000100000) != 0
      ks__has_field_auto_focus_range_coef: # Field №6
        value: (ks__bit_field.value & 0b001000000) != 0
      ks__has_field_gyro_hor_move_speed: # Field №7
        value: (ks__bit_field.value & 0b010000000) != 0
      ks__has_field_gyro_ver_move_speed: # Field №8
        value: (ks__bit_field.value & 0b100000000) != 0
  config_avatar_focus_group:
    seq:
      - id: ks__bit_field
        type: u1
      - id: ps4
        type: config_avatar_focus
        if: ks__has_field_ps4
      - id: ps5
        type: config_avatar_focus
        if: ks__has_field_ps5
      - id: pc
        type: config_avatar_focus
        if: ks__has_field_pc
      - id: other
        type: config_avatar_focus
        if: ks__has_field_other
    instances:
      ks__has_field_ps4: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_ps5: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_pc: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_other: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  config_gloabl_miscs:
    seq:
      - id: ks__bit_field
        type: u1
      - id: air_flow_acc
        type: f4
        if: ks__has_field_air_flow_acc
      - id: paimon_gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_paimon_gadget_id
      - id: cure_effect
        type: aux_types::string
        if: ks__has_field_cure_effect
      - id: avatar_focus
        type: config_avatar_focus_group
        if: ks__has_field_avatar_focus
      - id: gadget_ui_cut_sence_cfg_path
        type: aux_types::string
        if: ks__has_field_gadget_ui_cut_sence_cfg_path
      - id: gadget_ui_camera_look_cfg_path
        type: aux_types::string
        if: ks__has_field_gadget_ui_camera_look_cfg_path
      - id: weapon_anim_curve_path
        type: aux_types::string
        if: ks__has_field_weapon_anim_curve_path
    instances:
      ks__has_field_air_flow_acc: # Field №0
        value: (ks__bit_field & 0b0000001) != 0
      ks__has_field_paimon_gadget_id: # Field №1
        value: (ks__bit_field & 0b0000010) != 0
      ks__has_field_cure_effect: # Field №2
        value: (ks__bit_field & 0b0000100) != 0
      ks__has_field_avatar_focus: # Field №3
        value: (ks__bit_field & 0b0001000) != 0
      ks__has_field_gadget_ui_cut_sence_cfg_path: # Field №4
        value: (ks__bit_field & 0b0010000) != 0
      ks__has_field_gadget_ui_camera_look_cfg_path: # Field №5
        value: (ks__bit_field & 0b0100000) != 0
      ks__has_field_weapon_anim_curve_path: # Field №6
        value: (ks__bit_field & 0b1000000) != 0
  e_shader_data_comparer:
    seq: []
    instances: {}
  ks__enum__e_shader_plus:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: e_shader_plus
  e_shader_plus_comparer:
    seq: []
    instances: {}
  ks__enum__shader_use_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: shader_use_type
  shader_use_type_comparer:
    seq: []
    instances: {}
  ks__enum__die_flag:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: die_flag
  die_flag_comparer:
    seq: []
    instances: {}
  die_state_flag_comparer:
    seq: []
    instances: {}
  body_material_type_comparer:
    seq: []
    instances: {}
  level_day_time_type_comparer:
    seq: []
    instances: {}
  ks__enum__attach_point_target_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: attach_point_target_type
  attach_point_target_type_comparer:
    seq: []
    instances: {}
  direction_angle_type_comparer:
    seq: []
    instances: {}
  direction_tar_distance_scatter:
    seq:
      - id: ks__bit_field
        type: u1
      - id: max_distance
        type: f4
        if: ks__has_field_max_distance
      - id: max_scatter_angle
        type: f4
        if: ks__has_field_max_scatter_angle
      - id: center_rote
        type: f4
        if: ks__has_field_center_rote
      - id: random_rote
        type: f4
        if: ks__has_field_random_rote
    instances:
      ks__has_field_max_distance: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_max_scatter_angle: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_center_rote: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_random_rote: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  config_direction_by_default_register:
    seq: []
    instances: {}
  config_direction_by_default:
    seq:
      - id: ks__base
        type: config_born_direction_type
    instances:
      # Base class fields
      angle_offset:
        value: ks__base.angle_offset
      angle_offset_correct:
        value: ks__base.angle_offset_correct
      use_correct_dir:
        value: ks__base.use_correct_dir
      random_angle_hor:
        value: ks__base.random_angle_hor
      random_angle_ver:
        value: ks__base.random_angle_ver
      max_angle_type:
        value: ks__base.max_angle_type
      max_angle:
        value: ks__base.max_angle
  config_direction_by_entity_register:
    seq: []
    instances: {}
  config_direction_by_entity:
    seq:
      - id: ks__base
        type: config_born_direction_type
    instances:
      # Base class fields
      angle_offset:
        value: ks__base.angle_offset
      angle_offset_correct:
        value: ks__base.angle_offset_correct
      use_correct_dir:
        value: ks__base.use_correct_dir
      random_angle_hor:
        value: ks__base.random_angle_hor
      random_angle_ver:
        value: ks__base.random_angle_ver
      max_angle_type:
        value: ks__base.max_angle_type
      max_angle:
        value: ks__base.max_angle
  config_direction_by_attack_target_register:
    seq: []
    instances: {}
  config_direction_by_attack_target:
    seq:
      - id: ks__base
        type: config_born_direction_type
      - id: ks__bit_field
        type: u1
      - id: speed_for_predictive
        type: f4
        if: ks__has_field_speed_for_predictive
      - id: scatter
        type: direction_tar_distance_scatter
        if: ks__has_field_scatter
    instances:
      ks__has_field_speed_for_predictive: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_scatter: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      angle_offset:
        value: ks__base.angle_offset
      angle_offset_correct:
        value: ks__base.angle_offset_correct
      use_correct_dir:
        value: ks__base.use_correct_dir
      random_angle_hor:
        value: ks__base.random_angle_hor
      random_angle_ver:
        value: ks__base.random_angle_ver
      max_angle_type:
        value: ks__base.max_angle_type
      max_angle:
        value: ks__base.max_angle
  config_direction_by_attach_point_register:
    seq: []
    instances: {}
  config_direction_by_attach_point:
    seq:
      - id: ks__base
        type: config_born_direction_type
      - id: ks__bit_field
        type: u1
      - id: attach_point_name
        type: aux_types::string
        if: ks__has_field_attach_point_name
      - id: attach_point_target_type
        type: ks__enum__attach_point_target_type
        if: ks__has_field_attach_point_target_type
    instances:
      ks__has_field_attach_point_name: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_attach_point_target_type: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      angle_offset:
        value: ks__base.angle_offset
      angle_offset_correct:
        value: ks__base.angle_offset_correct
      use_correct_dir:
        value: ks__base.use_correct_dir
      random_angle_hor:
        value: ks__base.random_angle_hor
      random_angle_ver:
        value: ks__base.random_angle_ver
      max_angle_type:
        value: ks__base.max_angle_type
      max_angle:
        value: ks__base.max_angle
  config_direction_by_back_to_hit_box_center_register:
    seq: []
    instances: {}
  config_direction_by_back_to_hit_box_center:
    seq:
      - id: ks__base
        type: config_born_direction_type
    instances:
      # Base class fields
      angle_offset:
        value: ks__base.angle_offset
      angle_offset_correct:
        value: ks__base.angle_offset_correct
      use_correct_dir:
        value: ks__base.use_correct_dir
      random_angle_hor:
        value: ks__base.random_angle_hor
      random_angle_ver:
        value: ks__base.random_angle_ver
      max_angle_type:
        value: ks__base.max_angle_type
      max_angle:
        value: ks__base.max_angle
  config_direction_by_look_at_entity_register:
    seq: []
    instances: {}
  config_direction_by_look_at_entity:
    seq:
      - id: ks__base
        type: config_born_direction_type
    instances:
      # Base class fields
      angle_offset:
        value: ks__base.angle_offset
      angle_offset_correct:
        value: ks__base.angle_offset_correct
      use_correct_dir:
        value: ks__base.use_correct_dir
      random_angle_hor:
        value: ks__base.random_angle_hor
      random_angle_ver:
        value: ks__base.random_angle_ver
      max_angle_type:
        value: ks__base.max_angle_type
      max_angle:
        value: ks__base.max_angle
  config_direction_by_ground_normal_register:
    seq: []
    instances: {}
  config_direction_by_ground_normal:
    seq:
      - id: ks__base
        type: config_born_direction_type
    instances:
      # Base class fields
      angle_offset:
        value: ks__base.angle_offset
      angle_offset_correct:
        value: ks__base.angle_offset_correct
      use_correct_dir:
        value: ks__base.use_correct_dir
      random_angle_hor:
        value: ks__base.random_angle_hor
      random_angle_ver:
        value: ks__base.random_angle_ver
      max_angle_type:
        value: ks__base.max_angle_type
      max_angle:
        value: ks__base.max_angle
  config_direction_by_global_value_register:
    seq: []
    instances: {}
  config_direction_by_global_value:
    seq:
      - id: ks__base
        type: config_born_direction_type
      - id: ks__bit_field
        type: u1
      - id: direction_key
        type: aux_types::string
        if: ks__has_field_direction_key
    instances:
      ks__has_field_direction_key: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      angle_offset:
        value: ks__base.angle_offset
      angle_offset_correct:
        value: ks__base.angle_offset_correct
      use_correct_dir:
        value: ks__base.use_correct_dir
      random_angle_hor:
        value: ks__base.random_angle_hor
      random_angle_ver:
        value: ks__base.random_angle_ver
      max_angle_type:
        value: ks__base.max_angle_type
      max_angle:
        value: ks__base.max_angle
  config_direction_by_world_register:
    seq: []
    instances: {}
  config_direction_by_world:
    seq:
      - id: ks__base
        type: config_born_direction_type
      - id: ks__bit_field
        type: u1
      - id: eular_angles
        type: vector
        if: ks__has_field_eular_angles
    instances:
      ks__has_field_eular_angles: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      angle_offset:
        value: ks__base.angle_offset
      angle_offset_correct:
        value: ks__base.angle_offset_correct
      use_correct_dir:
        value: ks__base.use_correct_dir
      random_angle_hor:
        value: ks__base.random_angle_hor
      random_angle_ver:
        value: ks__base.random_angle_ver
      max_angle_type:
        value: ks__base.max_angle_type
      max_angle:
        value: ks__base.max_angle
  config_direction_by_ground_normal_range_register:
    seq: []
    instances: {}
  config_direction_by_ground_normal_range:
    seq:
      - id: ks__base
        type: config_born_direction_type
      - id: ks__bit_field
        type: u1
      - id: range
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_range
    instances:
      ks__has_field_range: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      angle_offset:
        value: ks__base.angle_offset
      angle_offset_correct:
        value: ks__base.angle_offset_correct
      use_correct_dir:
        value: ks__base.use_correct_dir
      random_angle_hor:
        value: ks__base.random_angle_hor
      random_angle_ver:
        value: ks__base.random_angle_ver
      max_angle_type:
        value: ks__base.max_angle_type
      max_angle:
        value: ks__base.max_angle
  born_random_from_center_register:
    seq: []
    instances: {}
  born_random_from_center:
    seq:
      - id: ks__base
        type: born_random
      - id: ks__bit_field
        type: u1
      - id: min_random_range
        type: aux_types::dynamic_float
        if: ks__has_field_min_random_range
      - id: max_random_range
        type: aux_types::dynamic_float
        if: ks__has_field_max_random_range
    instances:
      ks__has_field_min_random_range: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_max_random_range: # Field №1
        value: (ks__bit_field & 0b10) != 0
  born_random_in_shape_register:
    seq: []
    instances: {}
  born_random_in_shape:
    seq:
      - id: ks__base
        type: born_random
      - id: ks__bit_field
        type: u1
      - id: shape_name
        type: aux_types::string
        if: ks__has_field_shape_name
    instances:
      ks__has_field_shape_name: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_born_by_target_register:
    seq: []
    instances: {}
  config_born_by_target:
    seq:
      - id: ks__base
        type: config_born_type
    instances:
      # Base class fields
      offset:
        value: ks__base.offset
      born_random:
        value: ks__base.born_random
      on_ground:
        value: ks__base.on_ground
      on_ground_ignore_water:
        value: ks__base.on_ground_ignore_water
      on_ground_raycast_up_dist:
        value: ks__base.on_ground_raycast_up_dist
      direction:
        value: ks__base.direction
      along_ground:
        value: ks__base.along_ground
      use_rotation:
        value: ks__base.use_rotation
  config_born_by_self_register:
    seq: []
    instances: {}
  config_born_by_self:
    seq:
      - id: ks__base
        type: config_born_type
    instances:
      # Base class fields
      offset:
        value: ks__base.offset
      born_random:
        value: ks__base.born_random
      on_ground:
        value: ks__base.on_ground
      on_ground_ignore_water:
        value: ks__base.on_ground_ignore_water
      on_ground_raycast_up_dist:
        value: ks__base.on_ground_raycast_up_dist
      direction:
        value: ks__base.direction
      along_ground:
        value: ks__base.along_ground
      use_rotation:
        value: ks__base.use_rotation
  config_born_by_self_owner_register:
    seq: []
    instances: {}
  config_born_by_self_owner:
    seq:
      - id: ks__base
        type: config_born_type
    instances:
      # Base class fields
      offset:
        value: ks__base.offset
      born_random:
        value: ks__base.born_random
      on_ground:
        value: ks__base.on_ground
      on_ground_ignore_water:
        value: ks__base.on_ground_ignore_water
      on_ground_raycast_up_dist:
        value: ks__base.on_ground_raycast_up_dist
      direction:
        value: ks__base.direction
      along_ground:
        value: ks__base.along_ground
      use_rotation:
        value: ks__base.use_rotation
  config_born_by_attach_point_register:
    seq: []
    instances: {}
  config_born_by_attach_point:
    seq:
      - id: ks__base
        type: config_born_type
      - id: ks__bit_field
        type: u1
      - id: attach_point_name
        type: aux_types::string
        if: ks__has_field_attach_point_name
      - id: attach_point_target_type
        type: ks__enum__attach_point_target_type
        if: ks__has_field_attach_point_target_type
    instances:
      ks__has_field_attach_point_name: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_attach_point_target_type: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      offset:
        value: ks__base.offset
      born_random:
        value: ks__base.born_random
      on_ground:
        value: ks__base.on_ground
      on_ground_ignore_water:
        value: ks__base.on_ground_ignore_water
      on_ground_raycast_up_dist:
        value: ks__base.on_ground_raycast_up_dist
      direction:
        value: ks__base.direction
      along_ground:
        value: ks__base.along_ground
      use_rotation:
        value: ks__base.use_rotation
  config_born_by_storm_lightning_register:
    seq: []
    instances: {}
  config_born_by_storm_lightning:
    seq:
      - id: ks__base
        type: config_born_type
      - id: ks__bit_field
        type: u1
      - id: hit_height_ratio
        type: f4
        if: ks__has_field_hit_height_ratio
      - id: select_range
        type: f4
        if: ks__has_field_select_range
      - id: max_offset_len
        type: f4
        if: ks__has_field_max_offset_len
      - id: lightning_hit_or_not_ratio
        type: f4
        if: ks__has_field_lightning_hit_or_not_ratio
    instances:
      ks__has_field_hit_height_ratio: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_select_range: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_max_offset_len: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_lightning_hit_or_not_ratio: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      offset:
        value: ks__base.offset
      born_random:
        value: ks__base.born_random
      on_ground:
        value: ks__base.on_ground
      on_ground_ignore_water:
        value: ks__base.on_ground_ignore_water
      on_ground_raycast_up_dist:
        value: ks__base.on_ground_raycast_up_dist
      direction:
        value: ks__base.direction
      along_ground:
        value: ks__base.along_ground
      use_rotation:
        value: ks__base.use_rotation
  config_born_by_world_register:
    seq: []
    instances: {}
  config_born_by_world:
    seq:
      - id: ks__base
        type: config_born_type
      - id: ks__bit_field
        type: u1
      - id: world_pos
        type: vector
        if: ks__has_field_world_pos
      - id: world_fwd
        type: vector
        if: ks__has_field_world_fwd
    instances:
      ks__has_field_world_pos: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_world_fwd: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      offset:
        value: ks__base.offset
      born_random:
        value: ks__base.born_random
      on_ground:
        value: ks__base.on_ground
      on_ground_ignore_water:
        value: ks__base.on_ground_ignore_water
      on_ground_raycast_up_dist:
        value: ks__base.on_ground_raycast_up_dist
      direction:
        value: ks__base.direction
      along_ground:
        value: ks__base.along_ground
      use_rotation:
        value: ks__base.use_rotation
  config_born_by_global_value_register:
    seq: []
    instances: {}
  config_born_by_global_value:
    seq:
      - id: ks__base
        type: config_born_type
      - id: ks__bit_field
        type: u1
      - id: position_key
        type: aux_types::string
        if: ks__has_field_position_key
      - id: direction_key
        type: aux_types::string
        if: ks__has_field_direction_key
      - id: use_global_up
        type: u1
        if: ks__has_field_use_global_up
    instances:
      ks__has_field_position_key: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_direction_key: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_use_global_up: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      offset:
        value: ks__base.offset
      born_random:
        value: ks__base.born_random
      on_ground:
        value: ks__base.on_ground
      on_ground_ignore_water:
        value: ks__base.on_ground_ignore_water
      on_ground_raycast_up_dist:
        value: ks__base.on_ground_raycast_up_dist
      direction:
        value: ks__base.direction
      along_ground:
        value: ks__base.along_ground
      use_rotation:
        value: ks__base.use_rotation
  config_born_by_collision_point_register:
    seq: []
    instances: {}
  config_born_by_collision_point:
    seq:
      - id: ks__base
        type: config_born_type
    instances:
      # Base class fields
      offset:
        value: ks__base.offset
      born_random:
        value: ks__base.born_random
      on_ground:
        value: ks__base.on_ground
      on_ground_ignore_water:
        value: ks__base.on_ground_ignore_water
      on_ground_raycast_up_dist:
        value: ks__base.on_ground_raycast_up_dist
      direction:
        value: ks__base.direction
      along_ground:
        value: ks__base.along_ground
      use_rotation:
        value: ks__base.use_rotation
  config_born_by_rush_to_point_register:
    seq: []
    instances: {}
  config_born_by_rush_to_point:
    seq:
      - id: ks__base
        type: config_born_type
    instances:
      # Base class fields
      offset:
        value: ks__base.offset
      born_random:
        value: ks__base.born_random
      on_ground:
        value: ks__base.on_ground
      on_ground_ignore_water:
        value: ks__base.on_ground_ignore_water
      on_ground_raycast_up_dist:
        value: ks__base.on_ground_raycast_up_dist
      direction:
        value: ks__base.direction
      along_ground:
        value: ks__base.along_ground
      use_rotation:
        value: ks__base.use_rotation
  config_born_by_teleport_to_point_register:
    seq: []
    instances: {}
  config_born_by_teleport_to_point:
    seq:
      - id: ks__base
        type: config_born_type
    instances:
      # Base class fields
      offset:
        value: ks__base.offset
      born_random:
        value: ks__base.born_random
      on_ground:
        value: ks__base.on_ground
      on_ground_ignore_water:
        value: ks__base.on_ground_ignore_water
      on_ground_raycast_up_dist:
        value: ks__base.on_ground_raycast_up_dist
      direction:
        value: ks__base.direction
      along_ground:
        value: ks__base.along_ground
      use_rotation:
        value: ks__base.use_rotation
  config_born_by_predicate_point_register:
    seq: []
    instances: {}
  config_born_by_predicate_point:
    seq:
      - id: ks__base
        type: config_born_type
      - id: ks__bit_field
        type: u1
      - id: time_for_predictive
        type: f4
        if: ks__has_field_time_for_predictive
    instances:
      ks__has_field_time_for_predictive: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      offset:
        value: ks__base.offset
      born_random:
        value: ks__base.born_random
      on_ground:
        value: ks__base.on_ground
      on_ground_ignore_water:
        value: ks__base.on_ground_ignore_water
      on_ground_raycast_up_dist:
        value: ks__base.on_ground_raycast_up_dist
      direction:
        value: ks__base.direction
      along_ground:
        value: ks__base.along_ground
      use_rotation:
        value: ks__base.use_rotation
  config_born_by_hit_point_register:
    seq: []
    instances: {}
  config_born_by_hit_point:
    seq:
      - id: ks__base
        type: config_born_type
    instances:
      # Base class fields
      offset:
        value: ks__base.offset
      born_random:
        value: ks__base.born_random
      on_ground:
        value: ks__base.on_ground
      on_ground_ignore_water:
        value: ks__base.on_ground_ignore_water
      on_ground_raycast_up_dist:
        value: ks__base.on_ground_raycast_up_dist
      direction:
        value: ks__base.direction
      along_ground:
        value: ks__base.along_ground
      use_rotation:
        value: ks__base.use_rotation
  config_born_by_element_pos_register:
    seq: []
    instances: {}
  config_born_by_element_pos:
    seq:
      - id: ks__base
        type: config_born_type
    instances:
      # Base class fields
      offset:
        value: ks__base.offset
      born_random:
        value: ks__base.born_random
      on_ground:
        value: ks__base.on_ground
      on_ground_ignore_water:
        value: ks__base.on_ground_ignore_water
      on_ground_raycast_up_dist:
        value: ks__base.on_ground_raycast_up_dist
      direction:
        value: ks__base.direction
      along_ground:
        value: ks__base.along_ground
      use_rotation:
        value: ks__base.use_rotation
  config_action_point_select_type:
    seq: []
    instances: {}
  select_action_point_by_id_register:
    seq: []
    instances: {}
  select_action_point_by_id:
    seq:
      - id: ks__base
        type: config_action_point_select_type
      - id: ks__bit_field
        type: u1
      - id: action_point_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_action_point_id
    instances:
      ks__has_field_action_point_id: # Field №0
        value: (ks__bit_field & 0b1) != 0
  select_action_point_by_self_pos_register:
    seq: []
    instances: {}
  select_action_point_by_self_pos:
    seq:
      - id: ks__base
        type: config_action_point_select_type
      - id: ks__bit_field
        type: u1
      - id: distance
        type: f4
        if: ks__has_field_distance
    instances:
      ks__has_field_distance: # Field №0
        value: (ks__bit_field & 0b1) != 0
  select_action_point_by_target_pos_register:
    seq: []
    instances: {}
  select_action_point_by_target_pos:
    seq:
      - id: ks__base
        type: config_action_point_select_type
      - id: ks__bit_field
        type: u1
      - id: distance
        type: f4
        if: ks__has_field_distance
    instances:
      ks__has_field_distance: # Field №0
        value: (ks__bit_field & 0b1) != 0
  select_action_point_by_away_from_avatar_register:
    seq: []
    instances: {}
  select_action_point_by_away_from_avatar:
    seq:
      - id: ks__base
        type: config_action_point_select_type
      - id: ks__bit_field
        type: u1
      - id: distance
        type: f4
        if: ks__has_field_distance
    instances:
      ks__has_field_distance: # Field №0
        value: (ks__bit_field & 0b1) != 0
  select_action_point_by_target_orientation_register:
    seq: []
    instances: {}
  select_action_point_by_target_orientation:
    seq:
      - id: ks__base
        type: config_action_point_select_type
      - id: ks__bit_field
        type: u1
      - id: action_point_i_ds
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_action_point_i_ds
      - id: angle
        type: f4
        if: ks__has_field_angle
      - id: sign_type
        type: u1
        if: ks__has_field_sign_type
    instances:
      ks__has_field_action_point_i_ds: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_angle: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_sign_type: # Field №2
        value: (ks__bit_field & 0b100) != 0
  select_action_point_by_all_avatars_orientation_register:
    seq: []
    instances: {}
  select_action_point_by_all_avatars_orientation:
    seq:
      - id: ks__base
        type: config_action_point_select_type
      - id: ks__bit_field
        type: u1
      - id: action_point_i_ds
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_action_point_i_ds
      - id: angle
        type: f4
        if: ks__has_field_angle
      - id: distance
        type: f4
        if: ks__has_field_distance
      - id: sign_type
        type: u1
        if: ks__has_field_sign_type
    instances:
      ks__has_field_action_point_i_ds: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_angle: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_distance: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_sign_type: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  config_born_by_action_point_register:
    seq: []
    instances: {}
  config_born_by_action_point:
    seq:
      - id: ks__base
        type: config_born_type
      - id: ks__bit_field
        type: u1
      - id: action_point_type
        type: ks__enum__action_point_type
        if: ks__has_field_action_point_type
      - id: select_type
        type: ks__disp__config_action_point_select_type
        if: ks__has_field_select_type
    instances:
      ks__has_field_action_point_type: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_select_type: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      offset:
        value: ks__base.offset
      born_random:
        value: ks__base.born_random
      on_ground:
        value: ks__base.on_ground
      on_ground_ignore_water:
        value: ks__base.on_ground_ignore_water
      on_ground_raycast_up_dist:
        value: ks__base.on_ground_raycast_up_dist
      direction:
        value: ks__base.direction
      along_ground:
        value: ks__base.along_ground
      use_rotation:
        value: ks__base.use_rotation
  config_born_by_target_linear_point_register:
    seq: []
    instances: {}
  config_born_by_target_linear_point:
    seq:
      - id: ks__base
        type: config_born_type
      - id: ks__bit_field
        type: u1
      - id: linear_offset
        type: aux_types::dynamic_float
        if: ks__has_field_linear_offset
      - id: base_on_target
        type: u1
        if: ks__has_field_base_on_target
      - id: linear_xz
        type: u1
        if: ks__has_field_linear_xz
      - id: linear_min
        type: aux_types::dynamic_float
        if: ks__has_field_linear_min
      - id: linear_max
        type: aux_types::dynamic_float
        if: ks__has_field_linear_max
    instances:
      ks__has_field_linear_offset: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_base_on_target: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_linear_xz: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_linear_min: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_linear_max: # Field №4
        value: (ks__bit_field & 0b10000) != 0
      # Base class fields
      offset:
        value: ks__base.offset
      born_random:
        value: ks__base.born_random
      on_ground:
        value: ks__base.on_ground
      on_ground_ignore_water:
        value: ks__base.on_ground_ignore_water
      on_ground_raycast_up_dist:
        value: ks__base.on_ground_raycast_up_dist
      direction:
        value: ks__base.direction
      along_ground:
        value: ks__base.along_ground
      use_rotation:
        value: ks__base.use_rotation
  config_frame_transition:
    seq:
      - id: ks__bit_field
        type: u1
      - id: enable
        type: u1
        if: ks__has_field_enable
      - id: duration
        type: f4
        if: ks__has_field_duration
    instances:
      ks__has_field_enable: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_duration: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__enum__target_indicator_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: target_indicator_type
  target_indicator_type_comparer:
    seq: []
    instances: {}
  ks__enum__tween_ease_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: tween_ease_type
  tween_ease_type_comparer:
    seq: []
    instances: {}
  entity_appear_vision_type_comparer:
    seq: []
    instances: {}
  ks__enum__hp_bar_style:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: hp_bar_style
  hp_bar_style_comparer:
    seq: []
    instances: {}
  ks__enum__equip_in_slot_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: equip_in_slot_type
  equip_in_slot_type_comparer:
    seq: []
    instances: {}
  ks__enum__equip_entity_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: equip_entity_type
  equip_entity_type_comparer:
    seq: []
    instances: {}
  hit_box_type_comparer:
    seq: []
    instances: {}
  td_play_tower_type_comparer:
    seq: []
    instances: {}
  int8_native_ref:
    seq:
      - id: ks__bit_field
        type: u1
      - id: value
        type: u1 # TODO: pointer types are not supported!
        if: ks__has_field_value
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b1) != 0
  uint8_native_ref:
    seq:
      - id: ks__bit_field
        type: u1
      - id: value
        type: u1 # TODO: pointer types are not supported!
        if: ks__has_field_value
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b1) != 0
  int16_native_ref:
    seq:
      - id: ks__bit_field
        type: u1
      - id: value
        type: u1 # TODO: pointer types are not supported!
        if: ks__has_field_value
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b1) != 0
  uint16_native_ref:
    seq:
      - id: ks__bit_field
        type: u1
      - id: value
        type: u1 # TODO: pointer types are not supported!
        if: ks__has_field_value
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b1) != 0
  int32_native_ref:
    seq:
      - id: ks__bit_field
        type: u1
      - id: value
        type: u1 # TODO: pointer types are not supported!
        if: ks__has_field_value
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b1) != 0
  uint32_native_ref:
    seq:
      - id: ks__bit_field
        type: u1
      - id: value
        type: u1 # TODO: pointer types are not supported!
        if: ks__has_field_value
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b1) != 0
  int64_native_ref:
    seq:
      - id: ks__bit_field
        type: u1
      - id: value
        type: u1 # TODO: pointer types are not supported!
        if: ks__has_field_value
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b1) != 0
  uint64_native_ref:
    seq:
      - id: ks__bit_field
        type: u1
      - id: value
        type: u1 # TODO: pointer types are not supported!
        if: ks__has_field_value
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b1) != 0
  float_native_ref:
    seq:
      - id: ks__bit_field
        type: u1
      - id: value
        type: u1 # TODO: pointer types are not supported!
        if: ks__has_field_value
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b1) != 0
  double_native_ref:
    seq:
      - id: ks__bit_field
        type: u1
      - id: value
        type: u1 # TODO: pointer types are not supported!
        if: ks__has_field_value
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b1) != 0
  bool_native_ref:
    seq:
      - id: ks__bit_field
        type: u1
      - id: value
        type: u1 # TODO: pointer types are not supported!
        if: ks__has_field_value
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_dynamic_ability_preload:
    seq:
      - id: ks__bit_field
        type: u1
      - id: preload_effect
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_preload_effect
      - id: preload_gadget
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_preload_gadget
      - id: preload_camera
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_preload_camera
      - id: preload_skill_icon
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_preload_skill_icon
    instances:
      ks__has_field_preload_effect: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_preload_gadget: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_preload_camera: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_preload_skill_icon: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  config_effect_pool_item:
    seq:
      - id: ks__bit_field
        type: u1
      - id: preinstantiate_num_when_preload
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_preinstantiate_num_when_preload
      - id: max_used_size
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_used_size
    instances:
      ks__has_field_preinstantiate_num_when_preload: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_max_used_size: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__kvp_of_dict__aux_types__string_config_effect_pool_item:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: config_effect_pool_item
  ks__dict_of__aux_types__string_config_effect_pool_item:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_config_effect_pool_item
        repeat: expr
        repeat-expr: length.value
  config_effect_pool:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: particle_system_budget_size
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_particle_system_budget_size
      - id: particle_system_budget_size_low_memory
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_particle_system_budget_size_low_memory
      - id: particle_system_budget_size_mid_memory
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_particle_system_budget_size_mid_memory
      - id: effectpool_budget_size
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_effectpool_budget_size
      - id: release_for_budget_time_threshold
        type: f4
        if: ks__has_field_release_for_budget_time_threshold
      - id: release_for_budget_time_threshold_low_memory
        type: f4
        if: ks__has_field_release_for_budget_time_threshold_low_memory
      - id: release_for_budget_time_threshold_mid_memory
        type: f4
        if: ks__has_field_release_for_budget_time_threshold_mid_memory
      - id: release_budget_time_threshold_per_frame
        type: f4
        if: ks__has_field_release_budget_time_threshold_per_frame
      - id: pool_items
        type: ks__dict_of__aux_types__string_config_effect_pool_item
        if: ks__has_field_pool_items
    instances:
      ks__has_field_particle_system_budget_size: # Field №0
        value: (ks__bit_field.value & 0b000000001) != 0
      ks__has_field_particle_system_budget_size_low_memory: # Field №1
        value: (ks__bit_field.value & 0b000000010) != 0
      ks__has_field_particle_system_budget_size_mid_memory: # Field №2
        value: (ks__bit_field.value & 0b000000100) != 0
      ks__has_field_effectpool_budget_size: # Field №3
        value: (ks__bit_field.value & 0b000001000) != 0
      ks__has_field_release_for_budget_time_threshold: # Field №4
        value: (ks__bit_field.value & 0b000010000) != 0
      ks__has_field_release_for_budget_time_threshold_low_memory: # Field №5
        value: (ks__bit_field.value & 0b000100000) != 0
      ks__has_field_release_for_budget_time_threshold_mid_memory: # Field №6
        value: (ks__bit_field.value & 0b001000000) != 0
      ks__has_field_release_budget_time_threshold_per_frame: # Field №7
        value: (ks__bit_field.value & 0b010000000) != 0
      ks__has_field_pool_items: # Field №8
        value: (ks__bit_field.value & 0b100000000) != 0
  config_effect_with_threshold:
    seq:
      - id: ks__bit_field
        type: u1
      - id: threshold
        type: f4
        if: ks__has_field_threshold
      - id: effect_name
        type: aux_types::string
        if: ks__has_field_effect_name
    instances:
      ks__has_field_threshold: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_effect_name: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__array_of__config_effect_with_threshold__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_effect_with_threshold
        repeat: expr
        repeat-expr: length.value
  config_recover_energy_effect:
    seq:
      - id: ks__bit_field
        type: u1
      - id: element_type
        type: ks__enum__element_type
        if: ks__has_field_element_type
      - id: effects
        type: ks__array_of__config_effect_with_threshold__length_u
        if: ks__has_field_effects
    instances:
      ks__has_field_element_type: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_effects: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_element_view:
    seq:
      - id: ks__bit_field
        type: u1
      - id: element_color_index
        type: ks__dict_of__aux_types__string_aux_types__vlq_base128_le_s
        if: ks__has_field_element_color_index
      - id: terrain_grass_color
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_terrain_grass_color
    instances:
      ks__has_field_element_color_index: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_terrain_grass_color: # Field №1
        value: (ks__bit_field & 0b10) != 0
  entity_be_hit_effect:
    seq:
      - id: ks__bit_field
        type: u1
      - id: override_by_frozen_state
        type: aux_types::string
        if: ks__has_field_override_by_frozen_state
      - id: override_by_petrifaction_state
        type: aux_types::string
        if: ks__has_field_override_by_petrifaction_state
      - id: override_by_rock_state
        type: aux_types::string
        if: ks__has_field_override_by_rock_state
      - id: override_by_rock_resist_state
        type: aux_types::string
        if: ks__has_field_override_by_rock_resist_state
    instances:
      ks__has_field_override_by_frozen_state: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_override_by_petrifaction_state: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_override_by_rock_state: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_override_by_rock_resist_state: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  scene_be_hit_effect:
    seq:
      - id: ks__bit_field
        type: u1
      - id: hit_scene_effect
        type: ks__dict_of__aux_types__string_ks__dict_of__aux_types__string_aux_types__string
        if: ks__has_field_hit_scene_effect
    instances:
      ks__has_field_hit_scene_effect: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_be_hit_effect:
    seq:
      - id: ks__bit_field
        type: u1
      - id: entity
        type: entity_be_hit_effect
        if: ks__has_field_entity
      - id: scene
        type: scene_be_hit_effect
        if: ks__has_field_scene
    instances:
      ks__has_field_entity: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_scene: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_effect_lod:
    seq:
      - id: ks__bit_field
        type: u1
      - id: use_distance_lod_entity_types
        type: ks__array_of__ks__enum__entity_type__length_u
        if: ks__has_field_use_distance_lod_entity_types
    instances:
      ks__has_field_use_distance_lod_entity_types: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_skip_unindexed_effect_creation_by_distance:
    seq:
      - id: ks__bit_field
        type: u1
      - id: distance
        type: f4
        if: ks__has_field_distance
    instances:
      ks__has_field_distance: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_skip_unindexed_effect_creation:
    seq:
      - id: ks__bit_field
        type: u1
      - id: skip_unindexed_effect_creation_by_distance
        type: config_skip_unindexed_effect_creation_by_distance
        if: ks__has_field_skip_unindexed_effect_creation_by_distance
    instances:
      ks__has_field_skip_unindexed_effect_creation_by_distance: # Field №0
        value: (ks__bit_field & 0b1) != 0
  ks__enum__token_force_enqueue_reason:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: token_force_enqueue_reason
  token_force_enqueue_reason_comparer:
    seq: []
    instances: {}
  ks__array_of__config_recover_energy_effect__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_recover_energy_effect
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__aux_types__string_config_skip_unindexed_effect_creation:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: config_skip_unindexed_effect_creation
  ks__dict_of__aux_types__string_config_skip_unindexed_effect_creation:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_config_skip_unindexed_effect_creation
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__aux_types__string_ks__enum__token_force_enqueue_reason:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: ks__enum__token_force_enqueue_reason
  ks__dict_of__aux_types__string_ks__enum__token_force_enqueue_reason:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_ks__enum__token_force_enqueue_reason
        repeat: expr
        repeat-expr: length.value
  config_effect_data:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: element_view
        type: config_element_view
        if: ks__has_field_element_view
      - id: be_hit
        type: config_be_hit_effect
        if: ks__has_field_be_hit
      - id: recover_energy
        type: ks__array_of__config_recover_energy_effect__length_u
        if: ks__has_field_recover_energy
      - id: effect_pool
        type: config_effect_pool
        if: ks__has_field_effect_pool
      - id: scene_prop_shake_anim
        type: ks__dict_of__aux_types__string_aux_types__string
        if: ks__has_field_scene_prop_shake_anim
      - id: effect_lod
        type: config_effect_lod
        if: ks__has_field_effect_lod
      - id: skip_unindexed_effect_creation
        type: ks__dict_of__aux_types__string_config_skip_unindexed_effect_creation
        if: ks__has_field_skip_unindexed_effect_creation
      - id: token_force_enqueue_map
        type: ks__dict_of__aux_types__string_ks__enum__token_force_enqueue_reason
        if: ks__has_field_token_force_enqueue_map
      - id: token_force_handle_this_frame_array
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_token_force_handle_this_frame_array
    instances:
      ks__has_field_element_view: # Field №0
        value: (ks__bit_field.value & 0b000000001) != 0
      ks__has_field_be_hit: # Field №1
        value: (ks__bit_field.value & 0b000000010) != 0
      ks__has_field_recover_energy: # Field №2
        value: (ks__bit_field.value & 0b000000100) != 0
      ks__has_field_effect_pool: # Field №3
        value: (ks__bit_field.value & 0b000001000) != 0
      ks__has_field_scene_prop_shake_anim: # Field №4
        value: (ks__bit_field.value & 0b000010000) != 0
      ks__has_field_effect_lod: # Field №5
        value: (ks__bit_field.value & 0b000100000) != 0
      ks__has_field_skip_unindexed_effect_creation: # Field №6
        value: (ks__bit_field.value & 0b001000000) != 0
      ks__has_field_token_force_enqueue_map: # Field №7
        value: (ks__bit_field.value & 0b010000000) != 0
      ks__has_field_token_force_handle_this_frame_array: # Field №8
        value: (ks__bit_field.value & 0b100000000) != 0
  config_effect_path:
    seq:
      - id: ks__bit_field
        type: u1
      - id: effect_paths
        type: ks__dict_of__aux_types__string_aux_types__vlq_base128_le_u
        if: ks__has_field_effect_paths
    instances:
      ks__has_field_effect_paths: # Field №0
        value: (ks__bit_field & 0b1) != 0
  element_reaction_type_comparer:
    seq: []
    instances: {}
  element_reaction_source_type_comparer:
    seq: []
    instances: {}
  element_type_comparer:
    seq: []
    instances: {}
  ability_state_comparer:
    seq: []
    instances: {}
  config_emoji_bubble_data:
    seq:
      - id: ks__bit_field
        type: u1
      - id: name
        type: aux_types::string
        if: ks__has_field_name
      - id: effects
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_effects
    instances:
      ks__has_field_name: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_effects: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_emoji_bubble:
    seq: []
    instances: {}
  config_custom_attack_sphere:
    seq:
      - id: ks__bit_field
        type: u1
      - id: custom_attack_sphere_radius
        type: f4
        if: ks__has_field_custom_attack_sphere_radius
    instances:
      ks__has_field_custom_attack_sphere_radius: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_custom_attack_box:
    seq:
      - id: ks__bit_field
        type: u1
      - id: custom_attack_box_size_x
        type: f4
        if: ks__has_field_custom_attack_box_size_x
      - id: custom_attack_box_size_y
        type: f4
        if: ks__has_field_custom_attack_box_size_y
      - id: custom_attack_box_size_z
        type: f4
        if: ks__has_field_custom_attack_box_size_z
    instances:
      ks__has_field_custom_attack_box_size_x: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_custom_attack_box_size_y: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_custom_attack_box_size_z: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_custom_attack_circle:
    seq:
      - id: ks__bit_field
        type: u1
      - id: custom_attack_circle_radius
        type: f4
        if: ks__has_field_custom_attack_circle_radius
      - id: custom_attack_circle_inner_radius
        type: f4
        if: ks__has_field_custom_attack_circle_inner_radius
    instances:
      ks__has_field_custom_attack_circle_radius: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_custom_attack_circle_inner_radius: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_custom_attack_shape:
    seq:
      - id: ks__bit_field
        type: u1
      - id: sphere
        type: config_custom_attack_sphere
        if: ks__has_field_sphere
      - id: box
        type: config_custom_attack_box
        if: ks__has_field_box
      - id: circle
        type: config_custom_attack_circle
        if: ks__has_field_circle
    instances:
      ks__has_field_sphere: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_box: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_circle: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_head_control:
    seq:
      - id: ks__bit_field
        type: u1
      - id: use_head_control
        type: u1
        if: ks__has_field_use_head_control
      - id: max_yaw_degree
        type: f4
        if: ks__has_field_max_yaw_degree
      - id: max_pitch_degree
        type: f4
        if: ks__has_field_max_pitch_degree
      - id: speed
        type: f4
        if: ks__has_field_speed
      - id: weight_speed
        type: f4
        if: ks__has_field_weight_speed
      - id: use_white_anim_states
        type: u1
        if: ks__has_field_use_white_anim_states
      - id: anim_states
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_anim_states
      - id: dont_anim_states
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_dont_anim_states
    instances:
      ks__has_field_use_head_control: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_max_yaw_degree: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_max_pitch_degree: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_speed: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_weight_speed: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_use_white_anim_states: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_anim_states: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_dont_anim_states: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
  config_monster_head_control_register:
    seq: []
    instances: {}
  config_monster_head_control:
    seq:
      - id: ks__base
        type: config_head_control
    instances:
      # Base class fields
      use_head_control:
        value: ks__base.use_head_control
      max_yaw_degree:
        value: ks__base.max_yaw_degree
      max_pitch_degree:
        value: ks__base.max_pitch_degree
      speed:
        value: ks__base.speed
      weight_speed:
        value: ks__base.weight_speed
      use_white_anim_states:
        value: ks__base.use_white_anim_states
      anim_states:
        value: ks__base.anim_states
      dont_anim_states:
        value: ks__base.dont_anim_states
  config_entity_point:
    seq:
      - id: ks__bit_field
        type: u1
      - id: element_absorb
        type: aux_types::string
        if: ks__has_field_element_absorb
      - id: element_pendant
        type: aux_types::string
        if: ks__has_field_element_pendant
      - id: element_drop
        type: aux_types::string
        if: ks__has_field_element_drop
      - id: bullet_aim
        type: aux_types::string
        if: ks__has_field_bullet_aim
      - id: hit_points
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_hit_points
      - id: selected_points
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_selected_points
    instances:
      ks__has_field_element_absorb: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_element_pendant: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_element_drop: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_bullet_aim: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_hit_points: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_selected_points: # Field №5
        value: (ks__bit_field & 0b100000) != 0
  config_mat_linear_changed_by_distance:
    seq:
      - id: ks__bit_field
        type: u1
      - id: transform_name
        type: aux_types::string
        if: ks__has_field_transform_name
      - id: texture_property
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_texture_property
      - id: float_property
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_float_property
      - id: min_ratio
        type: f4
        if: ks__has_field_min_ratio
      - id: max_ratio
        type: f4
        if: ks__has_field_max_ratio
      - id: min_distance
        type: f4
        if: ks__has_field_min_distance
      - id: max_distance
        type: f4
        if: ks__has_field_max_distance
    instances:
      ks__has_field_transform_name: # Field №0
        value: (ks__bit_field & 0b0000001) != 0
      ks__has_field_texture_property: # Field №1
        value: (ks__bit_field & 0b0000010) != 0
      ks__has_field_float_property: # Field №2
        value: (ks__bit_field & 0b0000100) != 0
      ks__has_field_min_ratio: # Field №3
        value: (ks__bit_field & 0b0001000) != 0
      ks__has_field_max_ratio: # Field №4
        value: (ks__bit_field & 0b0010000) != 0
      ks__has_field_min_distance: # Field №5
        value: (ks__bit_field & 0b0100000) != 0
      ks__has_field_max_distance: # Field №6
        value: (ks__bit_field & 0b1000000) != 0
  ks__array_of__config_mat_linear_changed_by_distance__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_mat_linear_changed_by_distance
        repeat: expr
        repeat-expr: length.value
  config_model:
    seq:
      - id: ks__bit_field
        type: u1
      - id: mat_linear_changed_by_distance
        type: ks__array_of__config_mat_linear_changed_by_distance__length_u
        if: ks__has_field_mat_linear_changed_by_distance
      - id: born_effect
        type: aux_types::string
        if: ks__has_field_born_effect
      - id: attach_effect
        type: aux_types::string
        if: ks__has_field_attach_effect
      - id: can_bake_mesh
        type: u1
        if: ks__has_field_can_bake_mesh
      - id: set_per_object_shadow_group_id
        type: u1
        if: ks__has_field_set_per_object_shadow_group_id
      - id: has_character_renderering
        type: u1
        if: ks__has_field_has_character_renderering
    instances:
      ks__has_field_mat_linear_changed_by_distance: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_born_effect: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_attach_effect: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_can_bake_mesh: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_set_per_object_shadow_group_id: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_has_character_renderering: # Field №5
        value: (ks__bit_field & 0b100000) != 0
  config_dither_by_start_dither_action:
    seq:
      - id: ks__bit_field
        type: u1
      - id: enable
        type: u1
        if: ks__has_field_enable
    instances:
      ks__has_field_enable: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_dither_by_between_camera_and_avatar:
    seq:
      - id: ks__bit_field
        type: u1
      - id: detect_dither_range
        type: f4
        if: ks__has_field_detect_dither_range
    instances:
      ks__has_field_detect_dither_range: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_dither_by_normal_between_camera:
    seq:
      - id: ks__bit_field
        type: u1
      - id: detect_dither_range
        type: f4
        if: ks__has_field_detect_dither_range
    instances:
      ks__has_field_detect_dither_range: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_dither:
    seq:
      - id: ks__bit_field
        type: u1
      - id: show_dither_duration
        type: f4
        if: ks__has_field_show_dither_duration
      - id: start_dither_action
        type: config_dither_by_start_dither_action
        if: ks__has_field_start_dither_action
      - id: between_camera_and_avatar
        type: config_dither_by_between_camera_and_avatar
        if: ks__has_field_between_camera_and_avatar
      - id: normal_between_camera
        type: config_dither_by_normal_between_camera
        if: ks__has_field_normal_between_camera
    instances:
      ks__has_field_show_dither_duration: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_start_dither_action: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_between_camera_and_avatar: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_normal_between_camera: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  config_global_value:
    seq:
      - id: ks__bit_field
        type: u1
      - id: server_global_values
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_server_global_values
      - id: init_server_global_values
        type: ks__dict_of__aux_types__string_f4
        if: ks__has_field_init_server_global_values
    instances:
      ks__has_field_server_global_values: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_init_server_global_values: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_entity_tags:
    seq:
      - id: ks__bit_field
        type: u1
      - id: init_tags
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_init_tags
    instances:
      ks__has_field_init_tags: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_entity:
    seq:
      - id: ks__bit_field
        type: u1
      - id: common
        type: config_entity_common
        if: ks__has_field_common
      - id: head_control
        type: ks__disp__config_head_control
        if: ks__has_field_head_control
      - id: special_point
        type: config_entity_point
        if: ks__has_field_special_point
      - id: custom_attack_shape
        type: config_custom_attack_shape
        if: ks__has_field_custom_attack_shape
      - id: model
        type: config_model
        if: ks__has_field_model
      - id: dither
        type: config_dither
        if: ks__has_field_dither
      - id: global_value
        type: config_global_value
        if: ks__has_field_global_value
      - id: entity_tags
        type: config_entity_tags
        if: ks__has_field_entity_tags
    instances:
      ks__has_field_common: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_head_control: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_special_point: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_custom_attack_shape: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_model: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_dither: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_global_value: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_entity_tags: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
  config_intee:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: use_trigger
        type: u1
        if: ks__has_field_use_trigger
      - id: use_interaction_trigger
        type: u1
        if: ks__has_field_use_interaction_trigger
      - id: use_push_collider
        type: u1
        if: ks__has_field_use_push_collider
      - id: use_head_control_trigger
        type: u1
        if: ks__has_field_use_head_control_trigger
      - id: trigger_radius
        type: f4
        if: ks__has_field_trigger_radius
      - id: trigger_height
        type: f4
        if: ks__has_field_trigger_height
      - id: interaction_trigger_radius
        type: f4
        if: ks__has_field_interaction_trigger_radius
      - id: head_ctrl_radius
        type: f4
        if: ks__has_field_head_ctrl_radius
      - id: trigger_offset
        type: vector
        if: ks__has_field_trigger_offset
    instances:
      ks__has_field_use_trigger: # Field №0
        value: (ks__bit_field.value & 0b000000001) != 0
      ks__has_field_use_interaction_trigger: # Field №1
        value: (ks__bit_field.value & 0b000000010) != 0
      ks__has_field_use_push_collider: # Field №2
        value: (ks__bit_field.value & 0b000000100) != 0
      ks__has_field_use_head_control_trigger: # Field №3
        value: (ks__bit_field.value & 0b000001000) != 0
      ks__has_field_trigger_radius: # Field №4
        value: (ks__bit_field.value & 0b000010000) != 0
      ks__has_field_trigger_height: # Field №5
        value: (ks__bit_field.value & 0b000100000) != 0
      ks__has_field_interaction_trigger_radius: # Field №6
        value: (ks__bit_field.value & 0b001000000) != 0
      ks__has_field_head_ctrl_radius: # Field №7
        value: (ks__bit_field.value & 0b010000000) != 0
      ks__has_field_trigger_offset: # Field №8
        value: (ks__bit_field.value & 0b100000000) != 0
  config_character_rendering:
    seq:
      - id: ks__bit_field
        type: u1
      - id: override_light_dir
        type: u1
        if: ks__has_field_override_light_dir
      - id: override_light_euler_angle
        type: vector
        if: ks__has_field_override_light_euler_angle
    instances:
      ks__has_field_override_light_dir: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_override_light_euler_angle: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_pose_initial_param:
    seq:
      - id: ks__bit_field
        type: u1
      - id: int_params
        type: ks__dict_of__aux_types__string_aux_types__string
        if: ks__has_field_int_params
      - id: float_params
        type: ks__dict_of__aux_types__string_aux_types__string
        if: ks__has_field_float_params
      - id: bool_params
        type: ks__dict_of__aux_types__string_aux_types__string
        if: ks__has_field_bool_params
    instances:
      ks__has_field_int_params: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_float_params: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_bool_params: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__enum__touch_interact_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: touch_interact_type
  touch_interact_type_comparer:
    seq: []
    instances: {}
  config_gadget_ui:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: gadget_ui_btn_cfg_path
        type: aux_types::string
        if: ks__has_field_gadget_ui_btn_cfg_path
      - id: ui_name
        type: aux_types::string
        if: ks__has_field_ui_name
      - id: always_interactive
        type: u1
        if: ks__has_field_always_interactive
      - id: on_touch
        type: ks__enum__touch_interact_type
        if: ks__has_field_on_touch
      - id: open_reward_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_open_reward_id
      - id: touch_params
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_touch_params
      - id: can_interact_in_combat
        type: u1
        if: ks__has_field_can_interact_in_combat
      - id: can_only_interact_in_stand_still
        type: u1
        if: ks__has_field_can_only_interact_in_stand_still
      - id: post_gadget_action_params
        type: ks__array_of__f4__length_u
        if: ks__has_field_post_gadget_action_params
    instances:
      ks__has_field_gadget_ui_btn_cfg_path: # Field №0
        value: (ks__bit_field.value & 0b000000001) != 0
      ks__has_field_ui_name: # Field №1
        value: (ks__bit_field.value & 0b000000010) != 0
      ks__has_field_always_interactive: # Field №2
        value: (ks__bit_field.value & 0b000000100) != 0
      ks__has_field_on_touch: # Field №3
        value: (ks__bit_field.value & 0b000001000) != 0
      ks__has_field_open_reward_id: # Field №4
        value: (ks__bit_field.value & 0b000010000) != 0
      ks__has_field_touch_params: # Field №5
        value: (ks__bit_field.value & 0b000100000) != 0
      ks__has_field_can_interact_in_combat: # Field №6
        value: (ks__bit_field.value & 0b001000000) != 0
      ks__has_field_can_only_interact_in_stand_still: # Field №7
        value: (ks__bit_field.value & 0b010000000) != 0
      ks__has_field_post_gadget_action_params: # Field №8
        value: (ks__bit_field.value & 0b100000000) != 0
  gadget_state_comparer:
    seq: []
    instances: {}
  config_predicate_by_time_register:
    seq: []
    instances: {}
  config_predicate_by_platform_register:
    seq: []
    instances: {}
  config_predicate_by_interact_register:
    seq: []
    instances: {}
  config_gadget_turn_state:
    seq:
      - id: ks__bit_field
        type: u1
      - id: angle_around_x
        type: f4
        if: ks__has_field_angle_around_x
      - id: angle_around_y
        type: f4
        if: ks__has_field_angle_around_y
      - id: angle_around_z
        type: f4
        if: ks__has_field_angle_around_z
      - id: lerp_curve_index
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_lerp_curve_index
      - id: lerp_time
        type: f4
        if: ks__has_field_lerp_time
    instances:
      ks__has_field_angle_around_x: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_angle_around_y: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_angle_around_z: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_lerp_curve_index: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_lerp_time: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  ks__kvp_of_dict__aux_types__vlq_base128_le_u_config_gadget_turn_state:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_u
      - id: value
        type: config_gadget_turn_state
  ks__dict_of__aux_types__vlq_base128_le_u_config_gadget_turn_state:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_u_config_gadget_turn_state
        repeat: expr
        repeat-expr: length.value
  config_gadget_turn:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: move_part_around_x
        type: aux_types::string
        if: ks__has_field_move_part_around_x
      - id: anchor_part_around_x
        type: aux_types::string
        if: ks__has_field_anchor_part_around_x
      - id: move_part_around_y
        type: aux_types::string
        if: ks__has_field_move_part_around_y
      - id: anchor_part_around_y
        type: aux_types::string
        if: ks__has_field_anchor_part_around_y
      - id: move_part_around_z
        type: aux_types::string
        if: ks__has_field_move_part_around_z
      - id: anchor_part_around_z
        type: aux_types::string
        if: ks__has_field_anchor_part_around_z
      - id: audio_begin_turning_event
        type: config_wwise_string
        if: ks__has_field_audio_begin_turning_event
      - id: audio_stop_turning_event
        type: config_wwise_string
        if: ks__has_field_audio_stop_turning_event
      - id: audio_begin_turning_event_around_x
        type: config_wwise_string
        if: ks__has_field_audio_begin_turning_event_around_x
      - id: audio_stop_turning_event_around_x
        type: config_wwise_string
        if: ks__has_field_audio_stop_turning_event_around_x
      - id: audio_begin_turning_event_around_y
        type: config_wwise_string
        if: ks__has_field_audio_begin_turning_event_around_y
      - id: audio_stop_turning_event_around_y
        type: config_wwise_string
        if: ks__has_field_audio_stop_turning_event_around_y
      - id: audio_begin_turning_event_around_z
        type: config_wwise_string
        if: ks__has_field_audio_begin_turning_event_around_z
      - id: audio_stop_turning_event_around_z
        type: config_wwise_string
        if: ks__has_field_audio_stop_turning_event_around_z
      - id: turn_state_map
        type: ks__dict_of__aux_types__vlq_base128_le_u_config_gadget_turn_state
        if: ks__has_field_turn_state_map
    instances:
      ks__has_field_move_part_around_x: # Field №0
        value: (ks__bit_field.value & 0b000000000000001) != 0
      ks__has_field_anchor_part_around_x: # Field №1
        value: (ks__bit_field.value & 0b000000000000010) != 0
      ks__has_field_move_part_around_y: # Field №2
        value: (ks__bit_field.value & 0b000000000000100) != 0
      ks__has_field_anchor_part_around_y: # Field №3
        value: (ks__bit_field.value & 0b000000000001000) != 0
      ks__has_field_move_part_around_z: # Field №4
        value: (ks__bit_field.value & 0b000000000010000) != 0
      ks__has_field_anchor_part_around_z: # Field №5
        value: (ks__bit_field.value & 0b000000000100000) != 0
      ks__has_field_audio_begin_turning_event: # Field №6
        value: (ks__bit_field.value & 0b000000001000000) != 0
      ks__has_field_audio_stop_turning_event: # Field №7
        value: (ks__bit_field.value & 0b000000010000000) != 0
      ks__has_field_audio_begin_turning_event_around_x: # Field №8
        value: (ks__bit_field.value & 0b000000100000000) != 0
      ks__has_field_audio_stop_turning_event_around_x: # Field №9
        value: (ks__bit_field.value & 0b000001000000000) != 0
      ks__has_field_audio_begin_turning_event_around_y: # Field №10
        value: (ks__bit_field.value & 0b000010000000000) != 0
      ks__has_field_audio_stop_turning_event_around_y: # Field №11
        value: (ks__bit_field.value & 0b000100000000000) != 0
      ks__has_field_audio_begin_turning_event_around_z: # Field №12
        value: (ks__bit_field.value & 0b001000000000000) != 0
      ks__has_field_audio_stop_turning_event_around_z: # Field №13
        value: (ks__bit_field.value & 0b010000000000000) != 0
      ks__has_field_turn_state_map: # Field №14
        value: (ks__bit_field.value & 0b100000000000000) != 0
  config_gadget_state_fire_effect_register:
    seq: []
    instances: {}
  config_gadget_state_set_anim_trigger_register:
    seq: []
    instances: {}
  config_gadget_state_set_anim_int_register:
    seq: []
    instances: {}
  config_gadget_state_fire_ai_sound_register:
    seq: []
    instances: {}
  config_gadget_state_enable_gadget_intee_register:
    seq: []
    instances: {}
  config_gadget_state_enable_action_register:
    seq: []
    instances: {}
  animator_param_type_comparer:
    seq: []
    instances: {}
  config_gadget_state_send_effect_trigger_register:
    seq: []
    instances: {}
  ks__array_of__ks__disp__config_gadget_state_action__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__disp__config_gadget_state_action
        repeat: expr
        repeat-expr: length.value
  config_gadget_action:
    seq:
      - id: ks__bit_field
        type: u1
      - id: trigger_enter_action_list
        type: ks__array_of__ks__disp__config_gadget_state_action__length_u
        if: ks__has_field_trigger_enter_action_list
      - id: gadget_state_action_list
        type: ks__array_of__ks__disp__config_gadget_state_action__length_u
        if: ks__has_field_gadget_state_action_list
      - id: platform_action_list
        type: ks__array_of__ks__disp__config_gadget_state_action__length_u
        if: ks__has_field_platform_action_list
      - id: interact_action_list
        type: ks__array_of__ks__disp__config_gadget_state_action__length_u
        if: ks__has_field_interact_action_list
      - id: post_ui_interact_action_list
        type: ks__array_of__ks__disp__config_gadget_state_action__length_u
        if: ks__has_field_post_ui_interact_action_list
    instances:
      ks__has_field_trigger_enter_action_list: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_gadget_state_action_list: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_platform_action_list: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_interact_action_list: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_post_ui_interact_action_list: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  ks__enum__gear_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: gear_type
  gear_type_comparer:
    seq: []
    instances: {}
  config_chest:
    seq:
      - id: ks__bit_field
        type: u1
      - id: born_locked_by_ability
        type: u1
        if: ks__has_field_born_locked_by_ability
      - id: open_effect
        type: aux_types::string
        if: ks__has_field_open_effect
      - id: trigger_open_chest_vo
        type: u1
        if: ks__has_field_trigger_open_chest_vo
    instances:
      ks__has_field_born_locked_by_ability: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_open_effect: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_trigger_open_chest_vo: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_gear:
    seq:
      - id: ks__bit_field
        type: u1
      - id: gear_type
        type: ks__enum__gear_type
        if: ks__has_field_gear_type
      - id: start_elem_type
        type: ks__enum__element_type
        if: ks__has_field_start_elem_type
      - id: start_value
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_start_value
      - id: start_last_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_start_last_time
      - id: stop_elem_type
        type: ks__enum__element_type
        if: ks__has_field_stop_elem_type
      - id: stop_value
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_stop_value
      - id: stop_last_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_stop_last_time
    instances:
      ks__has_field_gear_type: # Field №0
        value: (ks__bit_field & 0b0000001) != 0
      ks__has_field_start_elem_type: # Field №1
        value: (ks__bit_field & 0b0000010) != 0
      ks__has_field_start_value: # Field №2
        value: (ks__bit_field & 0b0000100) != 0
      ks__has_field_start_last_time: # Field №3
        value: (ks__bit_field & 0b0001000) != 0
      ks__has_field_stop_elem_type: # Field №4
        value: (ks__bit_field & 0b0010000) != 0
      ks__has_field_stop_value: # Field №5
        value: (ks__bit_field & 0b0100000) != 0
      ks__has_field_stop_last_time: # Field №6
        value: (ks__bit_field & 0b1000000) != 0
  config_crystal:
    seq:
      - id: ks__bit_field
        type: u1
      - id: element_type
        type: ks__enum__element_type
        if: ks__has_field_element_type
      - id: gain_speed
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gain_speed
      - id: drain_speed
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_drain_speed
      - id: resonate_levels
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_resonate_levels
      - id: burst_resonate
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_burst_resonate
      - id: burst_skill
        type: aux_types::string
        if: ks__has_field_burst_skill
      - id: burst_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_burst_time
      - id: respawn_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_respawn_time
    instances:
      ks__has_field_element_type: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_gain_speed: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_drain_speed: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_resonate_levels: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_burst_resonate: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_burst_skill: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_burst_time: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_respawn_time: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
  ks__enum__seal_progress_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: seal_progress_type
  seal_progress_type_comparer:
    seq: []
    instances: {}
  config_seal:
    seq:
      - id: ks__bit_field
        type: u1
      - id: progress_type
        type: ks__enum__seal_progress_type
        if: ks__has_field_progress_type
      - id: board_effect
        type: aux_types::string
        if: ks__has_field_board_effect
      - id: board_effect_start_position
        type: f4
        if: ks__has_field_board_effect_start_position
      - id: board_effect_end_position
        type: f4
        if: ks__has_field_board_effect_end_position
      - id: start_tips
        type: aux_types::string
        if: ks__has_field_start_tips
      - id: title
        type: aux_types::string
        if: ks__has_field_title
    instances:
      ks__has_field_progress_type: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_board_effect: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_board_effect_start_position: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_board_effect_end_position: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_start_tips: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_title: # Field №5
        value: (ks__bit_field & 0b100000) != 0
  ks__enum__pick_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: pick_type
  pick_type_comparer:
    seq: []
    instances: {}
  config_pickup_multi:
    seq:
      - id: ks__bit_field
        type: u1
      - id: dir_min_vec
        type: vector
        if: ks__has_field_dir_min_vec
      - id: dir_max_vec
        type: vector
        if: ks__has_field_dir_max_vec
      - id: max_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_num
      - id: min_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_min_num
      - id: attract_speed
        type: f4
        if: ks__has_field_attract_speed
      - id: use_world_trans
        type: u1
        if: ks__has_field_use_world_trans
      - id: is_auto_attract
        type: u1
        if: ks__has_field_is_auto_attract
    instances:
      ks__has_field_dir_min_vec: # Field №0
        value: (ks__bit_field & 0b0000001) != 0
      ks__has_field_dir_max_vec: # Field №1
        value: (ks__bit_field & 0b0000010) != 0
      ks__has_field_max_num: # Field №2
        value: (ks__bit_field & 0b0000100) != 0
      ks__has_field_min_num: # Field №3
        value: (ks__bit_field & 0b0001000) != 0
      ks__has_field_attract_speed: # Field №4
        value: (ks__bit_field & 0b0010000) != 0
      ks__has_field_use_world_trans: # Field №5
        value: (ks__bit_field & 0b0100000) != 0
      ks__has_field_is_auto_attract: # Field №6
        value: (ks__bit_field & 0b1000000) != 0
  config_pickup:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: pick_type
        type: ks__enum__pick_type
        if: ks__has_field_pick_type
      - id: is_static
        type: u1
        if: ks__has_field_is_static
      - id: drop_point_max_yaw
        type: f4
        if: ks__has_field_drop_point_max_yaw
      - id: drop_point_min_speed
        type: f4
        if: ks__has_field_drop_point_min_speed
      - id: drop_point_max_speed
        type: f4
        if: ks__has_field_drop_point_max_speed
      - id: born_effect
        type: aux_types::string
        if: ks__has_field_born_effect
      - id: drop_effect
        type: aux_types::string
        if: ks__has_field_drop_effect
      - id: drop_offset
        type: vector
        if: ks__has_field_drop_offset
      - id: enable_scan
        type: u1
        if: ks__has_field_enable_scan
      - id: lock_ymove
        type: u1
        if: ks__has_field_lock_ymove
      - id: suspend_height
        type: f4
        if: ks__has_field_suspend_height
      - id: suspend_speed
        type: f4
        if: ks__has_field_suspend_speed
      - id: suspend_amplitude
        type: f4
        if: ks__has_field_suspend_amplitude
      - id: rotate_speed
        type: f4
        if: ks__has_field_rotate_speed
      - id: rotate_vec
        type: vector
        if: ks__has_field_rotate_vec
      - id: attract_delay_time
        type: f4
        if: ks__has_field_attract_delay_time
      - id: multi
        type: config_pickup_multi
        if: ks__has_field_multi
      - id: dir_vec
        type: vector
        if: ks__has_field_dir_vec
      - id: gravity_ration
        type: f4
        if: ks__has_field_gravity_ration
      - id: disable_init_jump
        type: u1
        if: ks__has_field_disable_init_jump
      - id: init_back_speed
        type: f4
        if: ks__has_field_init_back_speed
      - id: back_decelerate
        type: f4
        if: ks__has_field_back_decelerate
      - id: back_fan_angle
        type: f4
        if: ks__has_field_back_fan_angle
      - id: back_fan_start_angle
        type: f4
        if: ks__has_field_back_fan_start_angle
      - id: rebound_times
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_rebound_times
      - id: rebound_ration
        type: f4
        if: ks__has_field_rebound_ration
      - id: attract_accelerate
        type: f4
        if: ks__has_field_attract_accelerate
      - id: attract_max_distance
        type: f4
        if: ks__has_field_attract_max_distance
      - id: height_offset
        type: f4
        if: ks__has_field_height_offset
      - id: rotate_decelerate
        type: vector
        if: ks__has_field_rotate_decelerate
      - id: attract_audio
        type: aux_types::string
        if: ks__has_field_attract_audio
    instances:
      ks__has_field_pick_type: # Field №0
        value: (ks__bit_field.value & 0b0000000000000000000000000000001) != 0
      ks__has_field_is_static: # Field №1
        value: (ks__bit_field.value & 0b0000000000000000000000000000010) != 0
      ks__has_field_drop_point_max_yaw: # Field №2
        value: (ks__bit_field.value & 0b0000000000000000000000000000100) != 0
      ks__has_field_drop_point_min_speed: # Field №3
        value: (ks__bit_field.value & 0b0000000000000000000000000001000) != 0
      ks__has_field_drop_point_max_speed: # Field №4
        value: (ks__bit_field.value & 0b0000000000000000000000000010000) != 0
      ks__has_field_born_effect: # Field №5
        value: (ks__bit_field.value & 0b0000000000000000000000000100000) != 0
      ks__has_field_drop_effect: # Field №6
        value: (ks__bit_field.value & 0b0000000000000000000000001000000) != 0
      ks__has_field_drop_offset: # Field №7
        value: (ks__bit_field.value & 0b0000000000000000000000010000000) != 0
      ks__has_field_enable_scan: # Field №8
        value: (ks__bit_field.value & 0b0000000000000000000000100000000) != 0
      ks__has_field_lock_ymove: # Field №9
        value: (ks__bit_field.value & 0b0000000000000000000001000000000) != 0
      ks__has_field_suspend_height: # Field №10
        value: (ks__bit_field.value & 0b0000000000000000000010000000000) != 0
      ks__has_field_suspend_speed: # Field №11
        value: (ks__bit_field.value & 0b0000000000000000000100000000000) != 0
      ks__has_field_suspend_amplitude: # Field №12
        value: (ks__bit_field.value & 0b0000000000000000001000000000000) != 0
      ks__has_field_rotate_speed: # Field №13
        value: (ks__bit_field.value & 0b0000000000000000010000000000000) != 0
      ks__has_field_rotate_vec: # Field №14
        value: (ks__bit_field.value & 0b0000000000000000100000000000000) != 0
      ks__has_field_attract_delay_time: # Field №15
        value: (ks__bit_field.value & 0b0000000000000001000000000000000) != 0
      ks__has_field_multi: # Field №16
        value: (ks__bit_field.value & 0b0000000000000010000000000000000) != 0
      ks__has_field_dir_vec: # Field №17
        value: (ks__bit_field.value & 0b0000000000000100000000000000000) != 0
      ks__has_field_gravity_ration: # Field №18
        value: (ks__bit_field.value & 0b0000000000001000000000000000000) != 0
      ks__has_field_disable_init_jump: # Field №19
        value: (ks__bit_field.value & 0b0000000000010000000000000000000) != 0
      ks__has_field_init_back_speed: # Field №20
        value: (ks__bit_field.value & 0b0000000000100000000000000000000) != 0
      ks__has_field_back_decelerate: # Field №21
        value: (ks__bit_field.value & 0b0000000001000000000000000000000) != 0
      ks__has_field_back_fan_angle: # Field №22
        value: (ks__bit_field.value & 0b0000000010000000000000000000000) != 0
      ks__has_field_back_fan_start_angle: # Field №23
        value: (ks__bit_field.value & 0b0000000100000000000000000000000) != 0
      ks__has_field_rebound_times: # Field №24
        value: (ks__bit_field.value & 0b0000001000000000000000000000000) != 0
      ks__has_field_rebound_ration: # Field №25
        value: (ks__bit_field.value & 0b0000010000000000000000000000000) != 0
      ks__has_field_attract_accelerate: # Field №26
        value: (ks__bit_field.value & 0b0000100000000000000000000000000) != 0
      ks__has_field_attract_max_distance: # Field №27
        value: (ks__bit_field.value & 0b0001000000000000000000000000000) != 0
      ks__has_field_height_offset: # Field №28
        value: (ks__bit_field.value & 0b0010000000000000000000000000000) != 0
      ks__has_field_rotate_decelerate: # Field №29
        value: (ks__bit_field.value & 0b0100000000000000000000000000000) != 0
      ks__has_field_attract_audio: # Field №30
        value: (ks__bit_field.value & 0b1000000000000000000000000000000) != 0
  config_wind_seed:
    seq:
      - id: ks__bit_field
        type: u1
      - id: athuority_radius
        type: f4
        if: ks__has_field_athuority_radius
    instances:
      ks__has_field_athuority_radius: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_cannon:
    seq:
      - id: ks__bit_field
        type: u1
      - id: close_operation_page_after_fire
        type: u1
        if: ks__has_field_close_operation_page_after_fire
      - id: close_page_delay
        type: f4
        if: ks__has_field_close_page_delay
      - id: reminder_vanish_delay
        type: f4
        if: ks__has_field_reminder_vanish_delay
      - id: fire_interval
        type: f4
        if: ks__has_field_fire_interval
      - id: turning_btn_press_block_time
        type: f4
        if: ks__has_field_turning_btn_press_block_time
    instances:
      ks__has_field_close_operation_page_after_fire: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_close_page_delay: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_reminder_vanish_delay: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_fire_interval: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_turning_btn_press_block_time: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  config_auto_dool:
    seq:
      - id: ks__bit_field
        type: u1
      - id: check_interval
        type: f4
        if: ks__has_field_check_interval
      - id: trigger_distance
        type: f4
        if: ks__has_field_trigger_distance
    instances:
      ks__has_field_check_interval: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_trigger_distance: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__enum__custom_gadget_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: custom_gadget_type
  custom_gadget_type_comparer:
    seq: []
    instances: {}
  custom_gadget_camera_settings:
    seq:
      - id: ks__bit_field
        type: u1
      - id: gadget_height
        type: f4
        if: ks__has_field_gadget_height
      - id: min_camera_radius
        type: f4
        if: ks__has_field_min_camera_radius
      - id: min_elevation
        type: f4
        if: ks__has_field_min_elevation
    instances:
      ks__has_field_gadget_height: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_min_camera_radius: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_min_elevation: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__enum__custom_gadget_node_slot_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: custom_gadget_node_slot_type
  custom_gadget_node_slot_type_comparer:
    seq: []
    instances: {}
  custom_gadget_node_slot:
    seq:
      - id: ks__bit_field
        type: u1
      - id: named_transform
        type: aux_types::string
        if: ks__has_field_named_transform
      - id: slot_type
        type: ks__enum__custom_gadget_node_slot_type
        if: ks__has_field_slot_type
      - id: slot_config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_slot_config_id
    instances:
      ks__has_field_named_transform: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_slot_type: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_slot_config_id: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__kvp_of_dict__aux_types__string_custom_gadget_node_slot:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: custom_gadget_node_slot
  ks__dict_of__aux_types__string_custom_gadget_node_slot:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_custom_gadget_node_slot
        repeat: expr
        repeat-expr: length.value
  config_custom_gadget_node:
    seq:
      - id: ks__bit_field
        type: u1
      - id: custom_gadget_type
        type: ks__enum__custom_gadget_type
        if: ks__has_field_custom_gadget_type
      - id: camera_settings
        type: custom_gadget_camera_settings
        if: ks__has_field_camera_settings
      - id: slot_map
        type: ks__dict_of__aux_types__string_custom_gadget_node_slot
        if: ks__has_field_slot_map
    instances:
      ks__has_field_custom_gadget_type: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_camera_settings: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_slot_map: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_guide_point:
    seq:
      - id: ks__bit_field
        type: u1
      - id: managed_automatically
        type: u1
        if: ks__has_field_managed_automatically
      - id: show_distance
        type: f4
        if: ks__has_field_show_distance
      - id: hide_distance
        type: f4
        if: ks__has_field_hide_distance
      - id: icon_name
        type: aux_types::string
        if: ks__has_field_icon_name
    instances:
      ks__has_field_managed_automatically: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_show_distance: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_hide_distance: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_icon_name: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  config_force_field:
    seq:
      - id: ks__base
        type: config_scene_point
    instances:
      # Base class fields
      type:
        value: ks__base.type
      gadget_id:
        value: ks__base.gadget_id
      area_id:
        value: ks__base.area_id
      pos:
        value: ks__base.pos
      rot:
        value: ks__base.rot
      tran_pos:
        value: ks__base.tran_pos
      tran_rot:
        value: ks__base.tran_rot
      unlocked:
        value: ks__base.unlocked
      alias:
        value: ks__base.alias
      group_limit:
        value: ks__base.group_limit
      is_model_hidden:
        value: ks__base.is_model_hidden
  config_const_force_field:
    seq:
      - id: ks__base
        type: config_force_field
      - id: ks__bit_field
        type: u1
      - id: velocity
        type: f4
        if: ks__has_field_velocity
    instances:
      ks__has_field_velocity: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      type:
        value: ks__base.type
      gadget_id:
        value: ks__base.gadget_id
      area_id:
        value: ks__base.area_id
      pos:
        value: ks__base.pos
      rot:
        value: ks__base.rot
      tran_pos:
        value: ks__base.tran_pos
      tran_rot:
        value: ks__base.tran_rot
      unlocked:
        value: ks__base.unlocked
      alias:
        value: ks__base.alias
      group_limit:
        value: ks__base.group_limit
      is_model_hidden:
        value: ks__base.is_model_hidden
  config_gadget_misc:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: chest
        type: config_chest
        if: ks__has_field_chest
      - id: gear
        type: config_gear
        if: ks__has_field_gear
      - id: force_field
        type: ks__disp__config_scene_point
        if: ks__has_field_force_field
      - id: crystal
        type: config_crystal
        if: ks__has_field_crystal
      - id: seal
        type: config_seal
        if: ks__has_field_seal
      - id: pickup
        type: config_pickup
        if: ks__has_field_pickup
      - id: wind_seed
        type: config_wind_seed
        if: ks__has_field_wind_seed
      - id: cannon
        type: config_cannon
        if: ks__has_field_cannon
      - id: auto_door
        type: config_auto_dool
        if: ks__has_field_auto_door
      - id: custom_gadget_node
        type: config_custom_gadget_node
        if: ks__has_field_custom_gadget_node
      - id: escape_effect
        type: aux_types::string
        if: ks__has_field_escape_effect
      - id: guide_point
        type: u1
        if: ks__has_field_guide_point
      - id: is_ui_point
        type: u1
        if: ks__has_field_is_ui_point
      - id: guide_point_managed_by_indicator
        type: u1
        if: ks__has_field_guide_point_managed_by_indicator
      - id: guide_point_type
        type: ks__enum__target_indicator_type
        if: ks__has_field_guide_point_type
      - id: target_indicator_y_offset
        type: f4
        if: ks__has_field_target_indicator_y_offset
      - id: guide_point_config
        type: config_guide_point
        if: ks__has_field_guide_point_config
    instances:
      ks__has_field_chest: # Field №0
        value: (ks__bit_field.value & 0b00000000000000001) != 0
      ks__has_field_gear: # Field №1
        value: (ks__bit_field.value & 0b00000000000000010) != 0
      ks__has_field_force_field: # Field №2
        value: (ks__bit_field.value & 0b00000000000000100) != 0
      ks__has_field_crystal: # Field №3
        value: (ks__bit_field.value & 0b00000000000001000) != 0
      ks__has_field_seal: # Field №4
        value: (ks__bit_field.value & 0b00000000000010000) != 0
      ks__has_field_pickup: # Field №5
        value: (ks__bit_field.value & 0b00000000000100000) != 0
      ks__has_field_wind_seed: # Field №6
        value: (ks__bit_field.value & 0b00000000001000000) != 0
      ks__has_field_cannon: # Field №7
        value: (ks__bit_field.value & 0b00000000010000000) != 0
      ks__has_field_auto_door: # Field №8
        value: (ks__bit_field.value & 0b00000000100000000) != 0
      ks__has_field_custom_gadget_node: # Field №9
        value: (ks__bit_field.value & 0b00000001000000000) != 0
      ks__has_field_escape_effect: # Field №10
        value: (ks__bit_field.value & 0b00000010000000000) != 0
      ks__has_field_guide_point: # Field №11
        value: (ks__bit_field.value & 0b00000100000000000) != 0
      ks__has_field_is_ui_point: # Field №12
        value: (ks__bit_field.value & 0b00001000000000000) != 0
      ks__has_field_guide_point_managed_by_indicator: # Field №13
        value: (ks__bit_field.value & 0b00010000000000000) != 0
      ks__has_field_guide_point_type: # Field №14
        value: (ks__bit_field.value & 0b00100000000000000) != 0
      ks__has_field_target_indicator_y_offset: # Field №15
        value: (ks__bit_field.value & 0b01000000000000000) != 0
      ks__has_field_guide_point_config: # Field №16
        value: (ks__bit_field.value & 0b10000000000000000) != 0
  ks__enum__control_part_forward_by:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: control_part_forward_by
  control_part_forward_by_comparer:
    seq: []
    instances: {}
  ks__enum__control_part_rotate_by:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: control_part_rotate_by
  control_part_rotate_by_comparer:
    seq: []
    instances: {}
  ks__enum__control_part_do_on_un_enabled:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: control_part_do_on_un_enabled
  control_part_do_on_un_enabled_comparer:
    seq: []
    instances: {}
  control_part_target_type_comparer:
    seq: []
    instances: {}
  config_control_part:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: angular_speed
        type: f4
        if: ks__has_field_angular_speed
      - id: part_root_name
        type: aux_types::string
        if: ks__has_field_part_root_name
      - id: forward_by
        type: ks__enum__control_part_forward_by
        if: ks__has_field_forward_by
      - id: forward_axial_fix
        type: vector
        if: ks__has_field_forward_axial_fix
      - id: rotate_by
        type: ks__enum__control_part_rotate_by
        if: ks__has_field_rotate_by
      - id: do_on_un_eabled
        type: ks__enum__control_part_do_on_un_enabled
        if: ks__has_field_do_on_un_eabled
      - id: forward_by_trans_name
        type: aux_types::string
        if: ks__has_field_forward_by_trans_name
      - id: limit_horizontal
        type: f4
        if: ks__has_field_limit_horizontal
      - id: limit_vertical
        type: f4
        if: ks__has_field_limit_vertical
      - id: target_type
        type: ks__enum__control_part_target_type
        if: ks__has_field_target_type
    instances:
      ks__has_field_angular_speed: # Field №0
        value: (ks__bit_field.value & 0b0000000001) != 0
      ks__has_field_part_root_name: # Field №1
        value: (ks__bit_field.value & 0b0000000010) != 0
      ks__has_field_forward_by: # Field №2
        value: (ks__bit_field.value & 0b0000000100) != 0
      ks__has_field_forward_axial_fix: # Field №3
        value: (ks__bit_field.value & 0b0000001000) != 0
      ks__has_field_rotate_by: # Field №4
        value: (ks__bit_field.value & 0b0000010000) != 0
      ks__has_field_do_on_un_eabled: # Field №5
        value: (ks__bit_field.value & 0b0000100000) != 0
      ks__has_field_forward_by_trans_name: # Field №6
        value: (ks__bit_field.value & 0b0001000000) != 0
      ks__has_field_limit_horizontal: # Field №7
        value: (ks__bit_field.value & 0b0010000000) != 0
      ks__has_field_limit_vertical: # Field №8
        value: (ks__bit_field.value & 0b0100000000) != 0
      ks__has_field_target_type: # Field №9
        value: (ks__bit_field.value & 0b1000000000) != 0
  config_control_part_by_ik_register:
    seq: []
    instances: {}
  config_control_part_by_ik:
    seq:
      - id: ks__base
        type: config_control_part
    instances:
      # Base class fields
      angular_speed:
        value: ks__base.angular_speed
      part_root_name:
        value: ks__base.part_root_name
      forward_by:
        value: ks__base.forward_by
      forward_axial_fix:
        value: ks__base.forward_axial_fix
      rotate_by:
        value: ks__base.rotate_by
      do_on_un_eabled:
        value: ks__base.do_on_un_eabled
      forward_by_trans_name:
        value: ks__base.forward_by_trans_name
      limit_horizontal:
        value: ks__base.limit_horizontal
      limit_vertical:
        value: ks__base.limit_vertical
      target_type:
        value: ks__base.target_type
  config_control_part_by_ikccd_register:
    seq: []
    instances: {}
  config_control_part_by_ikccd:
    seq:
      - id: ks__base
        type: config_control_part_by_ik
      - id: ks__bit_field
        type: u1
      - id: root_name
        type: aux_types::string
        if: ks__has_field_root_name
      - id: final_axial_fix
        type: vector
        if: ks__has_field_final_axial_fix
      - id: vertical_damping
        type: f4
        if: ks__has_field_vertical_damping
    instances:
      ks__has_field_root_name: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_final_axial_fix: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_vertical_damping: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      angular_speed:
        value: ks__base.angular_speed
      part_root_name:
        value: ks__base.part_root_name
      forward_by:
        value: ks__base.forward_by
      forward_axial_fix:
        value: ks__base.forward_axial_fix
      rotate_by:
        value: ks__base.rotate_by
      do_on_un_eabled:
        value: ks__base.do_on_un_eabled
      forward_by_trans_name:
        value: ks__base.forward_by_trans_name
      limit_horizontal:
        value: ks__base.limit_horizontal
      limit_vertical:
        value: ks__base.limit_vertical
      target_type:
        value: ks__base.target_type
  ks__array_of__ks__disp__config_control_part__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__disp__config_control_part
        repeat: expr
        repeat-expr: length.value
  config_part_controller:
    seq:
      - id: ks__bit_field
        type: u1
      - id: parts
        type: ks__array_of__ks__disp__config_control_part__length_u
        if: ks__has_field_parts
    instances:
      ks__has_field_parts: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_gadget_register:
    seq: []
    instances: {}
  ks__enum__trigger_flag:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: trigger_flag
  ks__enum__concern_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: concern_type
  config_trigger:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: trigger_flag
        type: ks__enum__trigger_flag
        if: ks__has_field_trigger_flag
      - id: concern_type
        type: ks__enum__concern_type
        if: ks__has_field_concern_type
      - id: shape
        type: aux_types::string
        if: ks__has_field_shape
      - id: check_infinite
        type: u1
        if: ks__has_field_check_infinite
      - id: trigger_infinite
        type: u1
        if: ks__has_field_trigger_infinite
      - id: life_infinite
        type: u1
        if: ks__has_field_life_infinite
      - id: start_check_time
        type: f4
        if: ks__has_field_start_check_time
      - id: check_interval
        type: f4
        if: ks__has_field_check_interval
      - id: check_count
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_check_count
      - id: trigger_interval
        type: f4
        if: ks__has_field_trigger_interval
      - id: trigger_count
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_trigger_count
      - id: life_time
        type: f4
        if: ks__has_field_life_time
      - id: overwrite_camp_type
        type: u1
        if: ks__has_field_overwrite_camp_type
      - id: camp_type
        type: ks__enum__target_type
        if: ks__has_field_camp_type
      - id: check_point
        type: u1
        if: ks__has_field_check_point
      - id: use_surface_height
        type: u1
        if: ks__has_field_use_surface_height
      - id: use_collider
        type: u1
        if: ks__has_field_use_collider
      - id: collider_name
        type: aux_types::string
        if: ks__has_field_collider_name
      - id: check_ghost
        type: u1
        if: ks__has_field_check_ghost
      - id: collider_check_on_init
        type: u1
        if: ks__has_field_collider_check_on_init
    instances:
      ks__has_field_trigger_flag: # Field №0
        value: (ks__bit_field.value & 0b00000000000000000001) != 0
      ks__has_field_concern_type: # Field №1
        value: (ks__bit_field.value & 0b00000000000000000010) != 0
      ks__has_field_shape: # Field №2
        value: (ks__bit_field.value & 0b00000000000000000100) != 0
      ks__has_field_check_infinite: # Field №3
        value: (ks__bit_field.value & 0b00000000000000001000) != 0
      ks__has_field_trigger_infinite: # Field №4
        value: (ks__bit_field.value & 0b00000000000000010000) != 0
      ks__has_field_life_infinite: # Field №5
        value: (ks__bit_field.value & 0b00000000000000100000) != 0
      ks__has_field_start_check_time: # Field №6
        value: (ks__bit_field.value & 0b00000000000001000000) != 0
      ks__has_field_check_interval: # Field №7
        value: (ks__bit_field.value & 0b00000000000010000000) != 0
      ks__has_field_check_count: # Field №8
        value: (ks__bit_field.value & 0b00000000000100000000) != 0
      ks__has_field_trigger_interval: # Field №9
        value: (ks__bit_field.value & 0b00000000001000000000) != 0
      ks__has_field_trigger_count: # Field №10
        value: (ks__bit_field.value & 0b00000000010000000000) != 0
      ks__has_field_life_time: # Field №11
        value: (ks__bit_field.value & 0b00000000100000000000) != 0
      ks__has_field_overwrite_camp_type: # Field №12
        value: (ks__bit_field.value & 0b00000001000000000000) != 0
      ks__has_field_camp_type: # Field №13
        value: (ks__bit_field.value & 0b00000010000000000000) != 0
      ks__has_field_check_point: # Field №14
        value: (ks__bit_field.value & 0b00000100000000000000) != 0
      ks__has_field_use_surface_height: # Field №15
        value: (ks__bit_field.value & 0b00001000000000000000) != 0
      ks__has_field_use_collider: # Field №16
        value: (ks__bit_field.value & 0b00010000000000000000) != 0
      ks__has_field_collider_name: # Field №17
        value: (ks__bit_field.value & 0b00100000000000000000) != 0
      ks__has_field_check_ghost: # Field №18
        value: (ks__bit_field.value & 0b01000000000000000000) != 0
      ks__has_field_collider_check_on_init: # Field №19
        value: (ks__bit_field.value & 0b10000000000000000000) != 0
  config_timer:
    seq:
      - id: ks__bit_field
        type: u1
      - id: life_infinite
        type: u1
        if: ks__has_field_life_infinite
      - id: start_check_time
        type: f4
        if: ks__has_field_start_check_time
      - id: check_interval
        type: f4
        if: ks__has_field_check_interval
      - id: life_time
        type: f4
        if: ks__has_field_life_time
    instances:
      ks__has_field_life_infinite: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_start_check_time: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_check_interval: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_life_time: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  config_move_velocity_force:
    seq:
      - id: ks__bit_field
        type: u1
      - id: mute_all
        type: u1
        if: ks__has_field_mute_all
      - id: use_all
        type: u1
        if: ks__has_field_use_all
      - id: include_forces
        type: ks__array_of__ks__enum__velocity_force_type__length_u
        if: ks__has_field_include_forces
      - id: exclude_forces
        type: ks__array_of__ks__enum__velocity_force_type__length_u
        if: ks__has_field_exclude_forces
    instances:
      ks__has_field_mute_all: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_use_all: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_include_forces: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_exclude_forces: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  config_move:
    seq:
      - id: ks__bit_field
        type: u1
      - id: velocity_force
        type: config_move_velocity_force
        if: ks__has_field_velocity_force
      - id: handle_combat_task_immediately
        type: u1
        if: ks__has_field_handle_combat_task_immediately
    instances:
      ks__has_field_velocity_force: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_handle_combat_task_immediately: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_gadget_pattern:
    seq:
      - id: ks__bit_field
        type: u1
      - id: collision
        type: config_collision
        if: ks__has_field_collision
    instances:
      ks__has_field_collision: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_blade_element_fx:
    seq:
      - id: ks__bit_field
        type: u1
      - id: slash
        type: aux_types::string
        if: ks__has_field_slash
      - id: color_a
        type: aux_types::string
        if: ks__has_field_color_a
      - id: color_b
        type: aux_types::string
        if: ks__has_field_color_b
    instances:
      ks__has_field_slash: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_color_a: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_color_b: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_bow_data:
    seq:
      - id: ks__bit_field
        type: u1
      - id: bow_ratio_name
        type: aux_types::string
        if: ks__has_field_bow_ratio_name
      - id: bow_string_loose_point
        type: vector
        if: ks__has_field_bow_string_loose_point
      - id: bow_string_max_len
        type: f4
        if: ks__has_field_bow_string_max_len
    instances:
      ks__has_field_bow_ratio_name: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_bow_string_loose_point: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_bow_string_max_len: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_equipment:
    seq:
      - id: ks__bit_field
        type: u1
      - id: attach_to
        type: aux_types::string
        if: ks__has_field_attach_to
      - id: sub_gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sub_gadget_id
      - id: sub_attach_to
        type: aux_types::string
        if: ks__has_field_sub_attach_to
      - id: aux_to_trans
        type: aux_types::string
        if: ks__has_field_aux_to_trans
      - id: equip_entity_type
        type: ks__enum__equip_entity_type
        if: ks__has_field_equip_entity_type
      - id: blade_fx
        type: config_blade_element_fx
        if: ks__has_field_blade_fx
      - id: bow_data
        type: config_bow_data
        if: ks__has_field_bow_data
    instances:
      ks__has_field_attach_to: # Field №0
        value: (ks__bit_field & 0b0000001) != 0
      ks__has_field_sub_gadget_id: # Field №1
        value: (ks__bit_field & 0b0000010) != 0
      ks__has_field_sub_attach_to: # Field №2
        value: (ks__bit_field & 0b0000100) != 0
      ks__has_field_aux_to_trans: # Field №3
        value: (ks__bit_field & 0b0001000) != 0
      ks__has_field_equip_entity_type: # Field №4
        value: (ks__bit_field & 0b0010000) != 0
      ks__has_field_blade_fx: # Field №5
        value: (ks__bit_field & 0b0100000) != 0
      ks__has_field_bow_data: # Field №6
        value: (ks__bit_field & 0b1000000) != 0
  ks__enum__nav_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: nav_type
  config_navigation:
    seq:
      - id: ks__bit_field
        type: u1
      - id: type
        type: ks__enum__nav_type
        if: ks__has_field_type
      - id: size_x
        type: f4
        if: ks__has_field_size_x
      - id: size_y
        type: f4
        if: ks__has_field_size_y
      - id: size_z
        type: f4
        if: ks__has_field_size_z
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_size_x: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_size_y: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_size_z: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  config_base_state_layer:
    seq:
      - id: ks__bit_field
        type: u1
      - id: layer_index
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_layer_index
      - id: layer_index_name
        type: aux_types::string
        if: ks__has_field_layer_index_name
    instances:
      ks__has_field_layer_index: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_layer_index_name: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__kvp_of_dict__aux_types__string_ks__disp__config_base_state_layer:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: ks__disp__config_base_state_layer
  ks__dict_of__aux_types__string_ks__disp__config_base_state_layer:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_ks__disp__config_base_state_layer
        repeat: expr
        repeat-expr: length.value
  config_entity_audio:
    seq:
      - id: ks__bit_field
        type: u1
      - id: anim_audio
        type: config_animation_audio
        if: ks__has_field_anim_audio
      - id: init_event
        type: config_wwise_string
        if: ks__has_field_init_event
      - id: enable_event
        type: config_wwise_string
        if: ks__has_field_enable_event
      - id: disable_event
        type: config_wwise_string
        if: ks__has_field_disable_event
      - id: destroy_event
        type: config_wwise_string
        if: ks__has_field_destroy_event
    instances:
      ks__has_field_anim_audio: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_init_event: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_enable_event: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_disable_event: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_destroy_event: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  config_gadget_audio:
    seq:
      - id: ks__base
        type: config_entity_audio
      - id: ks__bit_field
        type: u1
      - id: triggers_speech
        type: u1
        if: ks__has_field_triggers_speech
    instances:
      ks__has_field_triggers_speech: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      anim_audio:
        value: ks__base.anim_audio
      init_event:
        value: ks__base.init_event
      enable_event:
        value: ks__base.enable_event
      disable_event:
        value: ks__base.disable_event
      destroy_event:
        value: ks__base.destroy_event
  ks__enum__elem_ball_trigger_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: elem_ball_trigger_type
  config_elem_ball:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: type
        type: ks__enum__elem_ball_trigger_type
        if: ks__has_field_type
      - id: element_type
        type: ks__enum__element_type
        if: ks__has_field_element_type
      - id: cur_max_num
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_cur_max_num
      - id: interval_times
        type: ks__array_of__f4__length_u
        if: ks__has_field_interval_times
      - id: drop_items
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_drop_items
      - id: drop_counts
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_drop_counts
      - id: max_num
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_max_num
      - id: poisson_disk
        type: f4
        if: ks__has_field_poisson_disk
      - id: min_radius
        type: f4
        if: ks__has_field_min_radius
      - id: max_radius
        type: f4
        if: ks__has_field_max_radius
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field.value & 0b0000000001) != 0
      ks__has_field_element_type: # Field №1
        value: (ks__bit_field.value & 0b0000000010) != 0
      ks__has_field_cur_max_num: # Field №2
        value: (ks__bit_field.value & 0b0000000100) != 0
      ks__has_field_interval_times: # Field №3
        value: (ks__bit_field.value & 0b0000001000) != 0
      ks__has_field_drop_items: # Field №4
        value: (ks__bit_field.value & 0b0000010000) != 0
      ks__has_field_drop_counts: # Field №5
        value: (ks__bit_field.value & 0b0000100000) != 0
      ks__has_field_max_num: # Field №6
        value: (ks__bit_field.value & 0b0001000000) != 0
      ks__has_field_poisson_disk: # Field №7
        value: (ks__bit_field.value & 0b0010000000) != 0
      ks__has_field_min_radius: # Field №8
        value: (ks__bit_field.value & 0b0100000000) != 0
      ks__has_field_max_radius: # Field №9
        value: (ks__bit_field.value & 0b1000000000) != 0
  ks__array_of__config_elem_ball__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_elem_ball
        repeat: expr
        repeat-expr: length.value
  config_weather:
    seq:
      - id: ks__bit_field
        type: u1
      - id: drop_elem_balls
        type: ks__array_of__config_elem_ball__length_u
        if: ks__has_field_drop_elem_balls
      - id: shape_name
        type: aux_types::string
        if: ks__has_field_shape_name
      - id: position
        type: ks__array_of__f4__length_u
        if: ks__has_field_position
      - id: priority
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_priority
      - id: default_enviro
        type: aux_types::string
        if: ks__has_field_default_enviro
      - id: weather_list
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_weather_list
      - id: weather_weight_list
        type: ks__array_of__f4__length_u
        if: ks__has_field_weather_weight_list
      - id: refresh_time
        type: f4
        if: ks__has_field_refresh_time
    instances:
      ks__has_field_drop_elem_balls: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_shape_name: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_position: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_priority: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_default_enviro: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_weather_list: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_weather_weight_list: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_refresh_time: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
  config_wall:
    seq:
      - id: ks__bit_field
        type: u1
      - id: collision_effect_pattern
        type: aux_types::string
        if: ks__has_field_collision_effect_pattern
      - id: fade_duration
        type: f4
        if: ks__has_field_fade_duration
    instances:
      ks__has_field_collision_effect_pattern: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_fade_duration: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_face:
    seq:
      - id: ks__bit_field
        type: u1
      - id: character_name
        type: aux_types::string
        if: ks__has_field_character_name
      - id: base_face_animation
        type: aux_types::string
        if: ks__has_field_base_face_animation
      - id: interval_face_animation
        type: aux_types::string
        if: ks__has_field_interval_face_animation
      - id: min_interval
        type: f4
        if: ks__has_field_min_interval
      - id: max_interval
        type: f4
        if: ks__has_field_max_interval
    instances:
      ks__has_field_character_name: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_base_face_animation: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_interval_face_animation: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_min_interval: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_max_interval: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  config_paimon:
    seq:
      - id: ks__bit_field
        type: u1
      - id: follow_off_set
        type: vector
        if: ks__has_field_follow_off_set
      - id: slow_down_range_xz
        type: f4
        if: ks__has_field_slow_down_range_xz
      - id: slow_down_range_y
        type: f4
        if: ks__has_field_slow_down_range_y
      - id: show_random_cd_min
        type: f4
        if: ks__has_field_show_random_cd_min
      - id: show_random_cd_max
        type: f4
        if: ks__has_field_show_random_cd_max
    instances:
      ks__has_field_follow_off_set: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_slow_down_range_xz: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_slow_down_range_y: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_show_random_cd_min: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_show_random_cd_max: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  config_vehicle_seat:
    seq:
      - id: ks__bit_field
        type: u1
      - id: attach_to
        type: aux_types::string
        if: ks__has_field_attach_to
      - id: option_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_option_id
      - id: rotate
        type: vector
        if: ks__has_field_rotate
      - id: off_vehicle_up_dist
        type: f4
        if: ks__has_field_off_vehicle_up_dist
    instances:
      ks__has_field_attach_to: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_option_id: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_rotate: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_off_vehicle_up_dist: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  ks__array_of__config_vehicle_seat__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_vehicle_seat
        repeat: expr
        repeat-expr: length.value
  config_vehicle_stamina:
    seq:
      - id: ks__bit_field
        type: u1
      - id: stamina_upper_limit
        type: f4
        if: ks__has_field_stamina_upper_limit
      - id: stamina_recover_speed
        type: f4
        if: ks__has_field_stamina_recover_speed
      - id: stamina_recover_wait_time
        type: f4
        if: ks__has_field_stamina_recover_wait_time
      - id: extra_stamina_upper_limit
        type: f4
        if: ks__has_field_extra_stamina_upper_limit
      - id: sprint_stamina_cost
        type: f4
        if: ks__has_field_sprint_stamina_cost
      - id: dash_stamina_cost
        type: f4
        if: ks__has_field_dash_stamina_cost
    instances:
      ks__has_field_stamina_upper_limit: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_stamina_recover_speed: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_stamina_recover_wait_time: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_extra_stamina_upper_limit: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_sprint_stamina_cost: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_dash_stamina_cost: # Field №5
        value: (ks__bit_field & 0b100000) != 0
  config_vehicle:
    seq:
      - id: ks__bit_field
        type: u1
      - id: vehicle_type
        type: ks__enum__vehicle_type
        if: ks__has_field_vehicle_type
      - id: play_mode
        type: ks__enum__play_mode_type
        if: ks__has_field_play_mode
      - id: camera_mode
        type: aux_types::string
        if: ks__has_field_camera_mode
      - id: max_seat_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_seat_count
      - id: seats
        type: ks__array_of__config_vehicle_seat__length_u
        if: ks__has_field_seats
      - id: default_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_default_level
      - id: server_buff_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_server_buff_id
      - id: stamina
        type: config_vehicle_stamina
        if: ks__has_field_stamina
    instances:
      ks__has_field_vehicle_type: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_play_mode: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_camera_mode: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_max_seat_count: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_seats: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_default_level: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_server_buff_id: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_stamina: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
  config_vod_intee:
    seq:
      - id: ks__bit_field
        type: u1
      - id: excel_config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_excel_config_id
    instances:
      ks__has_field_excel_config_id: # Field №0
        value: (ks__bit_field & 0b1) != 0
  ks__enum__vod_player_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: vod_player_type
  config_vod_player:
    seq:
      - id: ks__bit_field
        type: u1
      - id: vod_player_type
        type: ks__enum__vod_player_type
        if: ks__has_field_vod_player_type
    instances:
      ks__has_field_vod_player_type: # Field №0
        value: (ks__bit_field & 0b1) != 0
  ks__kvp_of_dict__aux_types__vlq_base128_le_u_aux_types__string:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_u
      - id: value
        type: aux_types::string
  ks__dict_of__aux_types__vlq_base128_le_u_aux_types__string:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_u_aux_types__string
        repeat: expr
        repeat-expr: length.value
  config_live_player:
    seq:
      - id: ks__base
        type: config_vod_player
      - id: ks__bit_field
        type: u1
      - id: live_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_live_id
      - id: turn_on_radius
        type: f4
        if: ks__has_field_turn_on_radius
      - id: turn_off_radius
        type: f4
        if: ks__has_field_turn_off_radius
      - id: cue_point_ability_map
        type: ks__dict_of__aux_types__vlq_base128_le_u_aux_types__string
        if: ks__has_field_cue_point_ability_map
    instances:
      ks__has_field_live_id: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_turn_on_radius: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_turn_off_radius: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_cue_point_ability_map: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      vod_player_type:
        value: ks__base.vod_player_type
  config_gadget:
    seq:
      - id: ks__base
        type: config_entity
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: has_equip
        type: u1
        if: ks__has_field_has_equip
      - id: has_audio
        type: u1
        if: ks__has_field_has_audio
      - id: has_model
        type: u1
        if: ks__has_field_has_model
      - id: has_ability
        type: u1
        if: ks__has_field_has_ability
      - id: has_follow_wind_zone_rotation
        type: u1
        if: ks__has_field_has_follow_wind_zone_rotation
      - id: force_dont_use_update_rigidbody
        type: u1
        if: ks__has_field_force_dont_use_update_rigidbody
      - id: has_connect_trigger
        type: u1
        if: ks__has_field_has_connect_trigger
      - id: can_be_created_on_platform
        type: u1
        if: ks__has_field_can_be_created_on_platform
      - id: connect_trigger_priority
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_connect_trigger_priority
      - id: ignore_child_scene_prop
        type: u1
        if: ks__has_field_ignore_child_scene_prop
      - id: move_refresh_ground_force_up
        type: u1
        if: ks__has_field_move_refresh_ground_force_up
      - id: combat
        type: config_combat
        if: ks__has_field_combat
      - id: abilities
        type: ks__array_of__config_entity_ability_entry__length_u
        if: ks__has_field_abilities
      - id: field
        type: config_trigger
        if: ks__has_field_field
      - id: timer
        type: config_timer
        if: ks__has_field_timer
      - id: move
        type: ks__disp__config_move
        if: ks__has_field_move
      - id: gadget
        type: ks__disp__config_gadget_pattern
        if: ks__has_field_gadget
      - id: equipment
        type: config_equipment
        if: ks__has_field_equipment
      - id: navigation
        type: config_navigation
        if: ks__has_field_navigation
      - id: ui_interact
        type: config_gadget_ui
        if: ks__has_field_ui_interact
      - id: misc
        type: config_gadget_misc
        if: ks__has_field_misc
      - id: state_layers
        type: ks__dict_of__aux_types__string_ks__disp__config_base_state_layer
        if: ks__has_field_state_layers
      - id: audio
        type: ks__disp__config_entity_audio
        if: ks__has_field_audio
      - id: aibeta
        type: config_ai_beta
        if: ks__has_field_aibeta
      - id: weather
        type: config_weather
        if: ks__has_field_weather
      - id: wall
        type: config_wall
        if: ks__has_field_wall
      - id: face
        type: config_face
        if: ks__has_field_face
      - id: part_control
        type: config_part_controller
        if: ks__has_field_part_control
      - id: paimon
        type: config_paimon
        if: ks__has_field_paimon
      - id: radar_hint
        type: u1
        if: ks__has_field_radar_hint
      - id: keep_modifier_out_sight
        type: u1
        if: ks__has_field_keep_modifier_out_sight
      - id: gadget_action
        type: config_gadget_action
        if: ks__has_field_gadget_action
      - id: gadget_turn
        type: config_gadget_turn
        if: ks__has_field_gadget_turn
      - id: billboard
        type: ks__disp__config_billboard
        if: ks__has_field_billboard
      - id: intee
        type: config_intee
        if: ks__has_field_intee
      - id: bind_emotions
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_bind_emotions
      - id: projector
        type: u1
        if: ks__has_field_projector
      - id: low_priority_intee
        type: u1
        if: ks__has_field_low_priority_intee
      - id: can_remove_by_client
        type: u1
        if: ks__has_field_can_remove_by_client
      - id: tags
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_tags
      - id: can_be_triggered_by_avatar_ray
        type: u1
        if: ks__has_field_can_be_triggered_by_avatar_ray
      - id: vehicle
        type: config_vehicle
        if: ks__has_field_vehicle
      - id: dangerzone
        type: config_danger_zone
        if: ks__has_field_dangerzone
      - id: fishing_zone
        type: config_fishing_zone
        if: ks__has_field_fishing_zone
      - id: force_set_entity_type
        type: ks__enum__entity_type
        if: ks__has_field_force_set_entity_type
      - id: camera_adjust
        type: config_gadget_special_camera
        if: ks__has_field_camera_adjust
      - id: vod_intee
        type: config_vod_intee
        if: ks__has_field_vod_intee
      - id: vod_player
        type: config_live_player
        if: ks__has_field_vod_player
      - id: camera_box
        type: config_gadget_camera_box
        if: ks__has_field_camera_box
      - id: open_watcher
        type: u1
        if: ks__has_field_open_watcher
    instances:
      ks__has_field_has_equip: # Field №0
        value: (ks__bit_field.value & 0b00000000000000000000000000000000000000000000000001) != 0
      ks__has_field_has_audio: # Field №1
        value: (ks__bit_field.value & 0b00000000000000000000000000000000000000000000000010) != 0
      ks__has_field_has_model: # Field №2
        value: (ks__bit_field.value & 0b00000000000000000000000000000000000000000000000100) != 0
      ks__has_field_has_ability: # Field №3
        value: (ks__bit_field.value & 0b00000000000000000000000000000000000000000000001000) != 0
      ks__has_field_has_follow_wind_zone_rotation: # Field №4
        value: (ks__bit_field.value & 0b00000000000000000000000000000000000000000000010000) != 0
      ks__has_field_force_dont_use_update_rigidbody: # Field №5
        value: (ks__bit_field.value & 0b00000000000000000000000000000000000000000000100000) != 0
      ks__has_field_has_connect_trigger: # Field №6
        value: (ks__bit_field.value & 0b00000000000000000000000000000000000000000001000000) != 0
      ks__has_field_can_be_created_on_platform: # Field №7
        value: (ks__bit_field.value & 0b00000000000000000000000000000000000000000010000000) != 0
      ks__has_field_connect_trigger_priority: # Field №8
        value: (ks__bit_field.value & 0b00000000000000000000000000000000000000000100000000) != 0
      ks__has_field_ignore_child_scene_prop: # Field №9
        value: (ks__bit_field.value & 0b00000000000000000000000000000000000000001000000000) != 0
      ks__has_field_move_refresh_ground_force_up: # Field №10
        value: (ks__bit_field.value & 0b00000000000000000000000000000000000000010000000000) != 0
      ks__has_field_combat: # Field №11
        value: (ks__bit_field.value & 0b00000000000000000000000000000000000000100000000000) != 0
      ks__has_field_abilities: # Field №12
        value: (ks__bit_field.value & 0b00000000000000000000000000000000000001000000000000) != 0
      ks__has_field_field: # Field №13
        value: (ks__bit_field.value & 0b00000000000000000000000000000000000010000000000000) != 0
      ks__has_field_timer: # Field №14
        value: (ks__bit_field.value & 0b00000000000000000000000000000000000100000000000000) != 0
      ks__has_field_move: # Field №15
        value: (ks__bit_field.value & 0b00000000000000000000000000000000001000000000000000) != 0
      ks__has_field_gadget: # Field №16
        value: (ks__bit_field.value & 0b00000000000000000000000000000000010000000000000000) != 0
      ks__has_field_equipment: # Field №17
        value: (ks__bit_field.value & 0b00000000000000000000000000000000100000000000000000) != 0
      ks__has_field_navigation: # Field №18
        value: (ks__bit_field.value & 0b00000000000000000000000000000001000000000000000000) != 0
      ks__has_field_ui_interact: # Field №19
        value: (ks__bit_field.value & 0b00000000000000000000000000000010000000000000000000) != 0
      ks__has_field_misc: # Field №20
        value: (ks__bit_field.value & 0b00000000000000000000000000000100000000000000000000) != 0
      ks__has_field_state_layers: # Field №21
        value: (ks__bit_field.value & 0b00000000000000000000000000001000000000000000000000) != 0
      ks__has_field_audio: # Field №22
        value: (ks__bit_field.value & 0b00000000000000000000000000010000000000000000000000) != 0
      ks__has_field_aibeta: # Field №23
        value: (ks__bit_field.value & 0b00000000000000000000000000100000000000000000000000) != 0
      ks__has_field_weather: # Field №24
        value: (ks__bit_field.value & 0b00000000000000000000000001000000000000000000000000) != 0
      ks__has_field_wall: # Field №25
        value: (ks__bit_field.value & 0b00000000000000000000000010000000000000000000000000) != 0
      ks__has_field_face: # Field №26
        value: (ks__bit_field.value & 0b00000000000000000000000100000000000000000000000000) != 0
      ks__has_field_part_control: # Field №27
        value: (ks__bit_field.value & 0b00000000000000000000001000000000000000000000000000) != 0
      ks__has_field_paimon: # Field №28
        value: (ks__bit_field.value & 0b00000000000000000000010000000000000000000000000000) != 0
      ks__has_field_radar_hint: # Field №29
        value: (ks__bit_field.value & 0b00000000000000000000100000000000000000000000000000) != 0
      ks__has_field_keep_modifier_out_sight: # Field №30
        value: (ks__bit_field.value & 0b00000000000000000001000000000000000000000000000000) != 0
      ks__has_field_gadget_action: # Field №31
        value: (ks__bit_field.value & 0b00000000000000000010000000000000000000000000000000) != 0
      ks__has_field_gadget_turn: # Field №32
        value: (ks__bit_field.value & 0b00000000000000000100000000000000000000000000000000) != 0
      ks__has_field_billboard: # Field №33
        value: (ks__bit_field.value & 0b00000000000000001000000000000000000000000000000000) != 0
      ks__has_field_intee: # Field №34
        value: (ks__bit_field.value & 0b00000000000000010000000000000000000000000000000000) != 0
      ks__has_field_bind_emotions: # Field №35
        value: (ks__bit_field.value & 0b00000000000000100000000000000000000000000000000000) != 0
      ks__has_field_projector: # Field №36
        value: (ks__bit_field.value & 0b00000000000001000000000000000000000000000000000000) != 0
      ks__has_field_low_priority_intee: # Field №37
        value: (ks__bit_field.value & 0b00000000000010000000000000000000000000000000000000) != 0
      ks__has_field_can_remove_by_client: # Field №38
        value: (ks__bit_field.value & 0b00000000000100000000000000000000000000000000000000) != 0
      ks__has_field_tags: # Field №39
        value: (ks__bit_field.value & 0b00000000001000000000000000000000000000000000000000) != 0
      ks__has_field_can_be_triggered_by_avatar_ray: # Field №40
        value: (ks__bit_field.value & 0b00000000010000000000000000000000000000000000000000) != 0
      ks__has_field_vehicle: # Field №41
        value: (ks__bit_field.value & 0b00000000100000000000000000000000000000000000000000) != 0
      ks__has_field_dangerzone: # Field №42
        value: (ks__bit_field.value & 0b00000001000000000000000000000000000000000000000000) != 0
      ks__has_field_fishing_zone: # Field №43
        value: (ks__bit_field.value & 0b00000010000000000000000000000000000000000000000000) != 0
      ks__has_field_force_set_entity_type: # Field №44
        value: (ks__bit_field.value & 0b00000100000000000000000000000000000000000000000000) != 0
      ks__has_field_camera_adjust: # Field №45
        value: (ks__bit_field.value & 0b00001000000000000000000000000000000000000000000000) != 0
      ks__has_field_vod_intee: # Field №46
        value: (ks__bit_field.value & 0b00010000000000000000000000000000000000000000000000) != 0
      ks__has_field_vod_player: # Field №47
        value: (ks__bit_field.value & 0b00100000000000000000000000000000000000000000000000) != 0
      ks__has_field_camera_box: # Field №48
        value: (ks__bit_field.value & 0b01000000000000000000000000000000000000000000000000) != 0
      ks__has_field_open_watcher: # Field №49
        value: (ks__bit_field.value & 0b10000000000000000000000000000000000000000000000000) != 0
      # Base class fields
      common:
        value: ks__base.common
      head_control:
        value: ks__base.head_control
      special_point:
        value: ks__base.special_point
      custom_attack_shape:
        value: ks__base.custom_attack_shape
      model:
        value: ks__base.model
      dither:
        value: ks__base.dither
      global_value:
        value: ks__base.global_value
      entity_tags:
        value: ks__base.entity_tags
  config_key_input:
    seq:
      - id: ks__bit_field
        type: u1
      - id: key_id
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_key_id
      - id: input_key_code
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_input_key_code
      - id: ability_name
        type: aux_types::string
        if: ks__has_field_ability_name
      - id: ability_cd
        type: f4
        if: ks__has_field_ability_cd
    instances:
      ks__has_field_key_id: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_input_key_code: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_ability_name: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_ability_cd: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  config_shoot:
    seq:
      - id: ks__bit_field
        type: u1
      - id: bullet_born_attach_point
        type: aux_types::string
        if: ks__has_field_bullet_born_attach_point
      - id: detect_range_from_viewport
        type: f4
        if: ks__has_field_detect_range_from_viewport
      - id: detect_radius_from_viewport
        type: f4
        if: ks__has_field_detect_radius_from_viewport
      - id: auto_focus_min_range
        type: f4
        if: ks__has_field_auto_focus_min_range
      - id: auto_focus_max_range
        type: f4
        if: ks__has_field_auto_focus_max_range
    instances:
      ks__has_field_bullet_born_attach_point: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_detect_range_from_viewport: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_detect_radius_from_viewport: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_auto_focus_min_range: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_auto_focus_max_range: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  config_avatar_shoot:
    seq:
      - id: ks__bit_field
        type: u1
      - id: normal_shoot
        type: config_shoot
        if: ks__has_field_normal_shoot
      - id: aiming_shoot
        type: config_shoot
        if: ks__has_field_aiming_shoot
    instances:
      ks__has_field_normal_shoot: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_aiming_shoot: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_footprint_effect:
    seq:
      - id: ks__bit_field
        type: u1
      - id: effect
        type: aux_types::string
        if: ks__has_field_effect
      - id: deformation
        type: aux_types::string
        if: ks__has_field_deformation
    instances:
      ks__has_field_effect: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_deformation: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__enum__e_footprint_platform:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: e_footprint_platform
  e_footprint_platform_comparer:
    seq: []
    instances: {}
  ks__kvp_of_dict__ks__enum__e_footprint_platform_config_footprint_effect:
    seq:
      - id: key
        type: ks__enum__e_footprint_platform
      - id: value
        type: config_footprint_effect
  ks__dict_of__ks__enum__e_footprint_platform_config_footprint_effect:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__ks__enum__e_footprint_platform_config_footprint_effect
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__ks__enum__scene_surface_type_ks__dict_of__ks__enum__e_footprint_platform_config_footprint_effect:
    seq:
      - id: key
        type: ks__enum__scene_surface_type
      - id: value
        type: ks__dict_of__ks__enum__e_footprint_platform_config_footprint_effect
  ks__dict_of__ks__enum__scene_surface_type_ks__dict_of__ks__enum__e_footprint_platform_config_footprint_effect:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__ks__enum__scene_surface_type_ks__dict_of__ks__enum__e_footprint_platform_config_footprint_effect
        repeat: expr
        repeat-expr: length.value
  config_footprint:
    seq:
      - id: ks__bit_field
        type: u1
      - id: default_effect_pattern_name
        type: aux_types::string
        if: ks__has_field_default_effect_pattern_name
      - id: special_surfaces
        type: ks__dict_of__ks__enum__scene_surface_type_ks__dict_of__ks__enum__e_footprint_platform_config_footprint_effect
        if: ks__has_field_special_surfaces
    instances:
      ks__has_field_default_effect_pattern_name: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_special_surfaces: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_move_state_effect:
    seq:
      - id: ks__bit_field
        type: u1
      - id: footprint
        type: config_footprint
        if: ks__has_field_footprint
    instances:
      ks__has_field_footprint: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_standby_perform:
    seq:
      - id: ks__bit_field
        type: u1
      - id: min_time
        type: f4
        if: ks__has_field_min_time
      - id: max_time
        type: f4
        if: ks__has_field_max_time
      - id: perform_i_ds
        type: ks__array_of__aux_types__vlq_base128_le_s__length_u
        if: ks__has_field_perform_i_ds
    instances:
      ks__has_field_min_time: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_max_time: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_perform_i_ds: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_avatar_perform:
    seq:
      - id: ks__bit_field
        type: u1
      - id: standby
        type: config_standby_perform
        if: ks__has_field_standby
    instances:
      ks__has_field_standby: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_character_register:
    seq: []
    instances: {}
  bow_draw_time:
    seq:
      - id: ks__bit_field
        type: u1
      - id: bow_draw_start_norm_time
        type: f4
        if: ks__has_field_bow_draw_start_norm_time
      - id: bow_draw_end_norm_time
        type: f4
        if: ks__has_field_bow_draw_end_norm_time
      - id: bow_string_override_point
        type: aux_types::string
        if: ks__has_field_bow_string_override_point
    instances:
      ks__has_field_bow_draw_start_norm_time: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_bow_draw_end_norm_time: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_bow_string_override_point: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__array_of__bow_draw_time__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: bow_draw_time
        repeat: expr
        repeat-expr: length.value
  trigger_to_states:
    seq:
      - id: ks__bit_field
        type: u1
      - id: trigger
        type: aux_types::string
        if: ks__has_field_trigger
      - id: play_time
        type: f4
        if: ks__has_field_play_time
      - id: states
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_states
      - id: bow_draw_times
        type: ks__array_of__bow_draw_time__length_u
        if: ks__has_field_bow_draw_times
      - id: float_id
        type: aux_types::string
        if: ks__has_field_float_id
      - id: float_value
        type: f4
        if: ks__has_field_float_value
    instances:
      ks__has_field_trigger: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_play_time: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_states: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_bow_draw_times: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_float_id: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_float_value: # Field №5
        value: (ks__bit_field & 0b100000) != 0
  ks__array_of__trigger_to_states__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: trigger_to_states
        repeat: expr
        repeat-expr: length.value
  weapon_away_from_hand_state:
    seq:
      - id: ks__bit_field
        type: u1
      - id: state
        type: aux_types::string
        if: ks__has_field_state
      - id: start_norm_time
        type: f4
        if: ks__has_field_start_norm_time
      - id: end_norm_time
        type: f4
        if: ks__has_field_end_norm_time
      - id: delay_appear_time
        type: f4
        if: ks__has_field_delay_appear_time
      - id: dissolve_show_time
        type: f4
        if: ks__has_field_dissolve_show_time
      - id: dissolve_hide_time
        type: f4
        if: ks__has_field_dissolve_hide_time
    instances:
      ks__has_field_state: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_start_norm_time: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_end_norm_time: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_delay_appear_time: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_dissolve_show_time: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_dissolve_hide_time: # Field №5
        value: (ks__bit_field & 0b100000) != 0
  ks__array_of__weapon_away_from_hand_state__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: weapon_away_from_hand_state
        repeat: expr
        repeat-expr: length.value
  config_equip_controller:
    seq:
      - id: ks__bit_field
        type: u1
      - id: attach_points
        type: ks__dict_of__aux_types__string_aux_types__string
        if: ks__has_field_attach_points
      - id: sheath_point
        type: aux_types::string
        if: ks__has_field_sheath_point
      - id: dissolve_sheath_fade_delay
        type: f4
        if: ks__has_field_dissolve_sheath_fade_delay
      - id: dissolve_sheath_fade_time
        type: f4
        if: ks__has_field_dissolve_sheath_fade_time
      - id: dissolve_take_fade_time
        type: f4
        if: ks__has_field_dissolve_take_fade_time
      - id: trigger_to_states
        type: ks__array_of__trigger_to_states__length_u
        if: ks__has_field_trigger_to_states
      - id: weapon_away_from_hand_states
        type: ks__array_of__weapon_away_from_hand_state__length_u
        if: ks__has_field_weapon_away_from_hand_states
    instances:
      ks__has_field_attach_points: # Field №0
        value: (ks__bit_field & 0b0000001) != 0
      ks__has_field_sheath_point: # Field №1
        value: (ks__bit_field & 0b0000010) != 0
      ks__has_field_dissolve_sheath_fade_delay: # Field №2
        value: (ks__bit_field & 0b0000100) != 0
      ks__has_field_dissolve_sheath_fade_time: # Field №3
        value: (ks__bit_field & 0b0001000) != 0
      ks__has_field_dissolve_take_fade_time: # Field №4
        value: (ks__bit_field & 0b0010000) != 0
      ks__has_field_trigger_to_states: # Field №5
        value: (ks__bit_field & 0b0100000) != 0
      ks__has_field_weapon_away_from_hand_states: # Field №6
        value: (ks__bit_field & 0b1000000) != 0
  config_character:
    seq:
      - id: ks__base
        type: config_entity
      - id: ks__bit_field
        type: u1
      - id: combat
        type: config_combat
        if: ks__has_field_combat
      - id: equip_controller
        type: config_equip_controller
        if: ks__has_field_equip_controller
      - id: abilities
        type: ks__array_of__config_entity_ability_entry__length_u
        if: ks__has_field_abilities
      - id: state_layers
        type: ks__dict_of__aux_types__string_ks__disp__config_base_state_layer
        if: ks__has_field_state_layers
      - id: face
        type: config_face
        if: ks__has_field_face
      - id: part_control
        type: config_part_controller
        if: ks__has_field_part_control
      - id: billboard
        type: ks__disp__config_billboard
        if: ks__has_field_billboard
      - id: bind_emotions
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_bind_emotions
    instances:
      ks__has_field_combat: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_equip_controller: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_abilities: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_state_layers: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_face: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_part_control: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_billboard: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_bind_emotions: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
      # Base class fields
      common:
        value: ks__base.common
      head_control:
        value: ks__base.head_control
      special_point:
        value: ks__base.special_point
      custom_attack_shape:
        value: ks__base.custom_attack_shape
      model:
        value: ks__base.model
      dither:
        value: ks__base.dither
      global_value:
        value: ks__base.global_value
      entity_tags:
        value: ks__base.entity_tags
  config_avatar_register:
    seq: []
    instances: {}
  config_character_audio:
    seq:
      - id: ks__base
        type: config_entity_audio
    instances:
      # Base class fields
      anim_audio:
        value: ks__base.anim_audio
      init_event:
        value: ks__base.init_event
      enable_event:
        value: ks__base.enable_event
      disable_event:
        value: ks__base.disable_event
      destroy_event:
        value: ks__base.destroy_event
  config_move_state_audio:
    seq:
      - id: ks__bit_field
        type: u1
      - id: on_state_begin
        type: ks__array_of__config_state_audio_event__length_u
        if: ks__has_field_on_state_begin
      - id: on_state_end
        type: ks__array_of__config_state_audio_event__length_u
        if: ks__has_field_on_state_end
    instances:
      ks__has_field_on_state_begin: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_on_state_end: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_avatar_audio:
    seq:
      - id: ks__base
        type: config_character_audio
      - id: ks__bit_field
        type: u1
      - id: move_state_audio
        type: config_move_state_audio
        if: ks__has_field_move_state_audio
      - id: combat_speech
        type: config_combat_speech
        if: ks__has_field_combat_speech
      - id: voice_switch
        type: config_wwise_string
        if: ks__has_field_voice_switch
      - id: body_type_switch
        type: config_wwise_string
        if: ks__has_field_body_type_switch
      - id: listener_liftup
        type: f4
        if: ks__has_field_listener_liftup
      - id: surface_prober_liftup
        type: f4
        if: ks__has_field_surface_prober_liftup
    instances:
      ks__has_field_move_state_audio: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_combat_speech: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_voice_switch: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_body_type_switch: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_listener_liftup: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_surface_prober_liftup: # Field №5
        value: (ks__bit_field & 0b100000) != 0
      # Base class fields
      anim_audio:
        value: ks__base.anim_audio
      init_event:
        value: ks__base.init_event
      enable_event:
        value: ks__base.enable_event
      disable_event:
        value: ks__base.disable_event
      destroy_event:
        value: ks__base.destroy_event
  config_avatar:
    seq:
      - id: ks__base
        type: config_character
      - id: ks__bit_field
        type: u1
      - id: shoot_config
        type: config_avatar_shoot
        if: ks__has_field_shoot_config
      - id: audio
        type: config_avatar_audio
        if: ks__has_field_audio
      - id: controller_assembly
        type: config_avatar_controller_assembly
        if: ks__has_field_controller_assembly
      - id: move_state_effect
        type: config_move_state_effect
        if: ks__has_field_move_state_effect
      - id: perform
        type: config_avatar_perform
        if: ks__has_field_perform
    instances:
      ks__has_field_shoot_config: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_audio: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_controller_assembly: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_move_state_effect: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_perform: # Field №4
        value: (ks__bit_field & 0b10000) != 0
      # Base class fields
      combat:
        value: ks__base.combat
      equip_controller:
        value: ks__base.equip_controller
      abilities:
        value: ks__base.abilities
      state_layers:
        value: ks__base.state_layers
      face:
        value: ks__base.face
      part_control:
        value: ks__base.part_control
      billboard:
        value: ks__base.billboard
      bind_emotions:
        value: ks__base.bind_emotions
      common:
        value: ks__base.common
      head_control:
        value: ks__base.head_control
      special_point:
        value: ks__base.special_point
      custom_attack_shape:
        value: ks__base.custom_attack_shape
      model:
        value: ks__base.model
      dither:
        value: ks__base.dither
      global_value:
        value: ks__base.global_value
      entity_tags:
        value: ks__base.entity_tags
  config_monster_initial_pose:
    seq:
      - id: ks__bit_field
        type: u1
      - id: initial_pose_id
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_initial_pose_id
      - id: released
        type: u1
        if: ks__has_field_released
      - id: initial_pose_params
        type: config_pose_initial_param
        if: ks__has_field_initial_pose_params
    instances:
      ks__has_field_initial_pose_id: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_released: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_initial_pose_params: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_animal:
    seq:
      - id: ks__bit_field
        type: u1
      - id: has_ability
        type: u1
        if: ks__has_field_has_ability
      - id: tick_ability_element
        type: u1
        if: ks__has_field_tick_ability_element
      - id: simple_combat
        type: u1
        if: ks__has_field_simple_combat
      - id: has_character_renderering
        type: u1
        if: ks__has_field_has_character_renderering
    instances:
      ks__has_field_has_ability: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_tick_ability_element: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_simple_combat: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_has_character_renderering: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  config_monster_register:
    seq: []
    instances: {}
  ks__kvp_of_dict__aux_types__string_config_monster_initial_pose:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: config_monster_initial_pose
  ks__dict_of__aux_types__string_config_monster_initial_pose:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_config_monster_initial_pose
        repeat: expr
        repeat-expr: length.value
  ks__array_of__config_key_input__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_key_input
        repeat: expr
        repeat-expr: length.value
  config_monster_audio:
    seq:
      - id: ks__base
        type: config_character_audio
      - id: ks__bit_field
        type: u1
      - id: random_variant_switch_group
        type: config_wwise_string
        if: ks__has_field_random_variant_switch_group
      - id: random_variant_switch_values
        type: ks__array_of__config_wwise_string__length_u
        if: ks__has_field_random_variant_switch_values
    instances:
      ks__has_field_random_variant_switch_group: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_random_variant_switch_values: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      anim_audio:
        value: ks__base.anim_audio
      init_event:
        value: ks__base.init_event
      enable_event:
        value: ks__base.enable_event
      disable_event:
        value: ks__base.disable_event
      destroy_event:
        value: ks__base.destroy_event
  config_monster:
    seq:
      - id: ks__base
        type: config_character
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: initial_poses
        type: ks__dict_of__aux_types__string_config_monster_initial_pose
        if: ks__has_field_initial_poses
      - id: aibeta
        type: config_ai_beta
        if: ks__has_field_aibeta
      - id: input_keys
        type: ks__array_of__config_key_input__length_u
        if: ks__has_field_input_keys
      - id: move
        type: ks__disp__config_move
        if: ks__has_field_move
      - id: audio
        type: config_monster_audio
        if: ks__has_field_audio
      - id: emoji_bubble
        type: config_emoji_bubble
        if: ks__has_field_emoji_bubble
      - id: character_rendering
        type: config_character_rendering
        if: ks__has_field_character_rendering
      - id: animal
        type: config_animal
        if: ks__has_field_animal
      - id: camera_adjust
        type: ks__disp__config_special_camera
        if: ks__has_field_camera_adjust
      - id: field
        type: config_trigger
        if: ks__has_field_field
    instances:
      ks__has_field_initial_poses: # Field №0
        value: (ks__bit_field.value & 0b0000000001) != 0
      ks__has_field_aibeta: # Field №1
        value: (ks__bit_field.value & 0b0000000010) != 0
      ks__has_field_input_keys: # Field №2
        value: (ks__bit_field.value & 0b0000000100) != 0
      ks__has_field_move: # Field №3
        value: (ks__bit_field.value & 0b0000001000) != 0
      ks__has_field_audio: # Field №4
        value: (ks__bit_field.value & 0b0000010000) != 0
      ks__has_field_emoji_bubble: # Field №5
        value: (ks__bit_field.value & 0b0000100000) != 0
      ks__has_field_character_rendering: # Field №6
        value: (ks__bit_field.value & 0b0001000000) != 0
      ks__has_field_animal: # Field №7
        value: (ks__bit_field.value & 0b0010000000) != 0
      ks__has_field_camera_adjust: # Field №8
        value: (ks__bit_field.value & 0b0100000000) != 0
      ks__has_field_field: # Field №9
        value: (ks__bit_field.value & 0b1000000000) != 0
      # Base class fields
      combat:
        value: ks__base.combat
      equip_controller:
        value: ks__base.equip_controller
      abilities:
        value: ks__base.abilities
      state_layers:
        value: ks__base.state_layers
      face:
        value: ks__base.face
      part_control:
        value: ks__base.part_control
      billboard:
        value: ks__base.billboard
      bind_emotions:
        value: ks__base.bind_emotions
      common:
        value: ks__base.common
      head_control:
        value: ks__base.head_control
      special_point:
        value: ks__base.special_point
      custom_attack_shape:
        value: ks__base.custom_attack_shape
      model:
        value: ks__base.model
      dither:
        value: ks__base.dither
      global_value:
        value: ks__base.global_value
      entity_tags:
        value: ks__base.entity_tags
  config_npc_register:
    seq: []
    instances: {}
  config_npc:
    seq:
      - id: ks__base
        type: config_character
      - id: ks__bit_field
        type: u1
      - id: default_dither
        type: f4
        if: ks__has_field_default_dither
      - id: disappear_duration
        type: f4
        if: ks__has_field_disappear_duration
      - id: aibeta
        type: config_ai_beta
        if: ks__has_field_aibeta
      - id: move
        type: ks__disp__config_move
        if: ks__has_field_move
      - id: intee
        type: config_intee
        if: ks__has_field_intee
      - id: audio
        type: ks__disp__config_entity_audio
        if: ks__has_field_audio
      - id: emoji_bubble
        type: config_emoji_bubble
        if: ks__has_field_emoji_bubble
    instances:
      ks__has_field_default_dither: # Field №0
        value: (ks__bit_field & 0b0000001) != 0
      ks__has_field_disappear_duration: # Field №1
        value: (ks__bit_field & 0b0000010) != 0
      ks__has_field_aibeta: # Field №2
        value: (ks__bit_field & 0b0000100) != 0
      ks__has_field_move: # Field №3
        value: (ks__bit_field & 0b0001000) != 0
      ks__has_field_intee: # Field №4
        value: (ks__bit_field & 0b0010000) != 0
      ks__has_field_audio: # Field №5
        value: (ks__bit_field & 0b0100000) != 0
      ks__has_field_emoji_bubble: # Field №6
        value: (ks__bit_field & 0b1000000) != 0
      # Base class fields
      combat:
        value: ks__base.combat
      equip_controller:
        value: ks__base.equip_controller
      abilities:
        value: ks__base.abilities
      state_layers:
        value: ks__base.state_layers
      face:
        value: ks__base.face
      part_control:
        value: ks__base.part_control
      billboard:
        value: ks__base.billboard
      bind_emotions:
        value: ks__base.bind_emotions
      common:
        value: ks__base.common
      head_control:
        value: ks__base.head_control
      special_point:
        value: ks__base.special_point
      custom_attack_shape:
        value: ks__base.custom_attack_shape
      model:
        value: ks__base.model
      dither:
        value: ks__base.dither
      global_value:
        value: ks__base.global_value
      entity_tags:
        value: ks__base.entity_tags
  ks__enum__drop_elem_control_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: drop_elem_control_type
  drop_elem_control_type_comparer:
    seq: []
    instances: {}
  config_level_entity_register:
    seq: []
    instances: {}
  ks__kvp_of_dict__aux_types__string_ks__dict_of__aux_types__string_f4:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: ks__dict_of__aux_types__string_f4
  ks__dict_of__aux_types__string_ks__dict_of__aux_types__string_f4:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_ks__dict_of__aux_types__string_f4
        repeat: expr
        repeat-expr: length.value
  config_level_entity:
    seq:
      - id: ks__base
        type: config_entity
      - id: ks__bit_field
        type: u1
      - id: drop_elem_control_type
        type: ks__enum__drop_elem_control_type
        if: ks__has_field_drop_elem_control_type
      - id: abilities
        type: ks__array_of__config_entity_ability_entry__length_u
        if: ks__has_field_abilities
      - id: avatar_abilities
        type: ks__array_of__config_entity_ability_entry__length_u
        if: ks__has_field_avatar_abilities
      - id: team_abilities
        type: ks__array_of__config_entity_ability_entry__length_u
        if: ks__has_field_team_abilities
      - id: monster_abilities
        type: ks__array_of__config_entity_ability_entry__length_u
        if: ks__has_field_monster_abilities
      - id: elem_amplify_damage
        type: ks__dict_of__aux_types__string_ks__dict_of__aux_types__string_f4
        if: ks__has_field_elem_amplify_damage
      - id: preload_monster_entity_i_ds
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_preload_monster_entity_i_ds
    instances:
      ks__has_field_drop_elem_control_type: # Field №0
        value: (ks__bit_field & 0b0000001) != 0
      ks__has_field_abilities: # Field №1
        value: (ks__bit_field & 0b0000010) != 0
      ks__has_field_avatar_abilities: # Field №2
        value: (ks__bit_field & 0b0000100) != 0
      ks__has_field_team_abilities: # Field №3
        value: (ks__bit_field & 0b0001000) != 0
      ks__has_field_monster_abilities: # Field №4
        value: (ks__bit_field & 0b0010000) != 0
      ks__has_field_elem_amplify_damage: # Field №5
        value: (ks__bit_field & 0b0100000) != 0
      ks__has_field_preload_monster_entity_i_ds: # Field №6
        value: (ks__bit_field & 0b1000000) != 0
      # Base class fields
      common:
        value: ks__base.common
      head_control:
        value: ks__base.head_control
      special_point:
        value: ks__base.special_point
      custom_attack_shape:
        value: ks__base.custom_attack_shape
      model:
        value: ks__base.model
      dither:
        value: ks__base.dither
      global_value:
        value: ks__base.global_value
      entity_tags:
        value: ks__base.entity_tags
  trans_point_update_material:
    seq:
      - id: ks__bit_field
        type: u1
      - id: level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level
      - id: mat_path
        type: aux_types::string
        if: ks__has_field_mat_path
      - id: transforms
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_transforms
    instances:
      ks__has_field_level: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_mat_path: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_transforms: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_trans_point_entity_register:
    seq: []
    instances: {}
  ks__array_of__trans_point_update_material__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: trans_point_update_material
        repeat: expr
        repeat-expr: length.value
  config_trans_point_entity:
    seq:
      - id: ks__base
        type: config_gadget
      - id: ks__bit_field
        type: u1
      - id: update_material_list
        type: ks__array_of__trans_point_update_material__length_u
        if: ks__has_field_update_material_list
    instances:
      ks__has_field_update_material_list: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      has_equip:
        value: ks__base.has_equip
      has_audio:
        value: ks__base.has_audio
      has_model:
        value: ks__base.has_model
      has_ability:
        value: ks__base.has_ability
      has_follow_wind_zone_rotation:
        value: ks__base.has_follow_wind_zone_rotation
      force_dont_use_update_rigidbody:
        value: ks__base.force_dont_use_update_rigidbody
      has_connect_trigger:
        value: ks__base.has_connect_trigger
      can_be_created_on_platform:
        value: ks__base.can_be_created_on_platform
      connect_trigger_priority:
        value: ks__base.connect_trigger_priority
      ignore_child_scene_prop:
        value: ks__base.ignore_child_scene_prop
      move_refresh_ground_force_up:
        value: ks__base.move_refresh_ground_force_up
      combat:
        value: ks__base.combat
      abilities:
        value: ks__base.abilities
      field:
        value: ks__base.field
      timer:
        value: ks__base.timer
      move:
        value: ks__base.move
      gadget:
        value: ks__base.gadget
      equipment:
        value: ks__base.equipment
      navigation:
        value: ks__base.navigation
      ui_interact:
        value: ks__base.ui_interact
      misc:
        value: ks__base.misc
      state_layers:
        value: ks__base.state_layers
      audio:
        value: ks__base.audio
      aibeta:
        value: ks__base.aibeta
      weather:
        value: ks__base.weather
      wall:
        value: ks__base.wall
      face:
        value: ks__base.face
      part_control:
        value: ks__base.part_control
      paimon:
        value: ks__base.paimon
      radar_hint:
        value: ks__base.radar_hint
      keep_modifier_out_sight:
        value: ks__base.keep_modifier_out_sight
      gadget_action:
        value: ks__base.gadget_action
      gadget_turn:
        value: ks__base.gadget_turn
      billboard:
        value: ks__base.billboard
      intee:
        value: ks__base.intee
      bind_emotions:
        value: ks__base.bind_emotions
      projector:
        value: ks__base.projector
      low_priority_intee:
        value: ks__base.low_priority_intee
      can_remove_by_client:
        value: ks__base.can_remove_by_client
      tags:
        value: ks__base.tags
      can_be_triggered_by_avatar_ray:
        value: ks__base.can_be_triggered_by_avatar_ray
      vehicle:
        value: ks__base.vehicle
      dangerzone:
        value: ks__base.dangerzone
      fishing_zone:
        value: ks__base.fishing_zone
      force_set_entity_type:
        value: ks__base.force_set_entity_type
      camera_adjust:
        value: ks__base.camera_adjust
      vod_intee:
        value: ks__base.vod_intee
      vod_player:
        value: ks__base.vod_player
      camera_box:
        value: ks__base.camera_box
      open_watcher:
        value: ks__base.open_watcher
      common:
        value: ks__base.common
      head_control:
        value: ks__base.head_control
      special_point:
        value: ks__base.special_point
      custom_attack_shape:
        value: ks__base.custom_attack_shape
      model:
        value: ks__base.model
      dither:
        value: ks__base.dither
      global_value:
        value: ks__base.global_value
      entity_tags:
        value: ks__base.entity_tags
  config_attachment:
    seq:
      - id: ks__bit_field
        type: u1
      - id: slot_name
        type: aux_types::string
        if: ks__has_field_slot_name
      - id: attach_path
        type: aux_types::string
        if: ks__has_field_attach_path
      - id: effect_path
        type: aux_types::string
        if: ks__has_field_effect_path
      - id: attach_pos
        type: vector
        if: ks__has_field_attach_pos
      - id: attach_rot
        type: vector
        if: ks__has_field_attach_rot
      - id: attach_scale
        type: vector
        if: ks__has_field_attach_scale
    instances:
      ks__has_field_slot_name: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_attach_path: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_effect_path: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_attach_pos: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_attach_rot: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_attach_scale: # Field №5
        value: (ks__bit_field & 0b100000) != 0
  ks__kvp_of_dict__aux_types__string_config_attachment:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: config_attachment
  ks__dict_of__aux_types__string_config_attachment:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_config_attachment
        repeat: expr
        repeat-expr: length.value
  config_attachment_data:
    seq:
      - id: ks__bit_field
        type: u1
      - id: attach_map
        type: ks__dict_of__aux_types__string_config_attachment
        if: ks__has_field_attach_map
    instances:
      ks__has_field_attach_map: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_gadget_audio_register:
    seq: []
    instances: {}
  config_vehicle_audio_register:
    seq: []
    instances: {}
  config_vehicle_audio:
    seq:
      - id: ks__base
        type: config_gadget_audio
      - id: ks__bit_field
        type: u1
      - id: collision_event
        type: config_wwise_string
        if: ks__has_field_collision_event
      - id: max_velocity
        type: f4
        if: ks__has_field_max_velocity
      - id: collision_audio_trigger_cooldown
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_collision_audio_trigger_cooldown
      - id: collision_audio_trigger_threshold
        type: f4
        if: ks__has_field_collision_audio_trigger_threshold
    instances:
      ks__has_field_collision_event: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_max_velocity: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_collision_audio_trigger_cooldown: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_collision_audio_trigger_threshold: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      triggers_speech:
        value: ks__base.triggers_speech
      anim_audio:
        value: ks__base.anim_audio
      init_event:
        value: ks__base.init_event
      enable_event:
        value: ks__base.enable_event
      disable_event:
        value: ks__base.disable_event
      destroy_event:
        value: ks__base.destroy_event
  config_character_audio_register:
    seq: []
    instances: {}
  config_avatar_audio_register:
    seq: []
    instances: {}
  config_monster_audio_register:
    seq: []
    instances: {}
  config_entity_black_grp:
    seq:
      - id: ks__bit_field
        type: u1
      - id: is_black
        type: u1
        if: ks__has_field_is_black
      - id: entity_type
        type: ks__enum__entity_type
        if: ks__has_field_entity_type
      - id: entity_ids
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_entity_ids
    instances:
      ks__has_field_is_black: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_entity_type: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_entity_ids: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__array_of__config_entity_black_grp__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_entity_black_grp
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__aux_types__string_ks__array_of__config_entity_black_grp__length_u:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: ks__array_of__config_entity_black_grp__length_u
  ks__dict_of__aux_types__string_ks__array_of__config_entity_black_grp__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_ks__array_of__config_entity_black_grp__length_u
        repeat: expr
        repeat-expr: length.value
  config_entity_ban_data:
    seq:
      - id: ks__bit_field
        type: u1
      - id: entity_ban_map
        type: ks__dict_of__aux_types__string_ks__array_of__config_entity_black_grp__length_u
        if: ks__has_field_entity_ban_map
    instances:
      ks__has_field_entity_ban_map: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_entity_reuse:
    seq:
      - id: ks__bit_field
        type: u1
      - id: config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_config_id
      - id: destroy_time
        type: f4
        if: ks__has_field_destroy_time
      - id: max_entity_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_entity_count
    instances:
      ks__has_field_config_id: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_destroy_time: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_max_entity_count: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__array_of__config_entity_reuse__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_entity_reuse
        repeat: expr
        repeat-expr: length.value
  config_entity_reuse_data:
    seq:
      - id: ks__bit_field
        type: u1
      - id: entity_reuse_list
        type: ks__array_of__config_entity_reuse__length_u
        if: ks__has_field_entity_reuse_list
    instances:
      ks__has_field_entity_reuse_list: # Field №0
        value: (ks__bit_field & 0b1) != 0
  entity_type_comparer:
    seq: []
    instances: {}
  vehicle_type_comparer:
    seq: []
    instances: {}
  endure_type_comparer:
    seq: []
    instances: {}
  taunt_level_comparer:
    seq: []
    instances: {}
  environment_type_comparer:
    seq: []
    instances: {}
  rand_task_content_type_comparer:
    seq: []
    instances: {}
  scene_type_comparer:
    seq: []
    instances: {}
  audio_voice_trigger_comparer:
    seq: []
    instances: {}
  config_external_voice_sound:
    seq:
      - id: ks__bit_field
        type: u1
      - id: source_file_name
        type: aux_types::string
        if: ks__has_field_source_file_name
      - id: rate
        type: f4
        if: ks__has_field_rate
      - id: avatar_name
        type: aux_types::string
        if: ks__has_field_avatar_name
      - id: emotion
        type: aux_types::string
        if: ks__has_field_emotion
      - id: gender
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_gender
    instances:
      ks__has_field_source_file_name: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_rate: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_avatar_name: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_emotion: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_gender: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  config_external_voice_inferior_item:
    seq:
      - id: ks__bit_field
        type: u1
      - id: guid
        type: aux_types::string
        if: ks__has_field_guid
      - id: include
        type: u1
        if: ks__has_field_include
    instances:
      ks__has_field_guid: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_include: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__array_of__config_external_voice_inferior_item__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_external_voice_inferior_item
        repeat: expr
        repeat-expr: length.value
  ks__array_of__config_external_voice_sound__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_external_voice_sound
        repeat: expr
        repeat-expr: length.value
  config_external_voice_item:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: guid
        type: aux_types::string
        if: ks__has_field_guid
      - id: play_rate
        type: f4
        if: ks__has_field_play_rate
      - id: initial_delay
        type: f4
        if: ks__has_field_initial_delay
      - id: cooldown
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_cooldown
      - id: interrupted_guids
        type: ks__array_of__config_external_voice_inferior_item__length_u
        if: ks__has_field_interrupted_guids
      - id: queue_up_config
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_queue_up_config
      - id: game_trigger
        type: aux_types::string
        if: ks__has_field_game_trigger
      - id: game_trigger_args
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_game_trigger_args
      - id: personal_config
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_personal_config
      - id: view_config
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_view_config
      - id: clear_all
        type: u1
        if: ks__has_field_clear_all
      - id: is_global_stop
        type: u1
        if: ks__has_field_is_global_stop
      - id: is_play_on_team
        type: u1
        if: ks__has_field_is_play_on_team
      - id: avoid_repeat
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_avoid_repeat
      - id: parent_id
        type: aux_types::string
        if: ks__has_field_parent_id
      - id: source_names
        type: ks__array_of__config_external_voice_sound__length_u
        if: ks__has_field_source_names
    instances:
      ks__has_field_guid: # Field №0
        value: (ks__bit_field.value & 0b0000000000000001) != 0
      ks__has_field_play_rate: # Field №1
        value: (ks__bit_field.value & 0b0000000000000010) != 0
      ks__has_field_initial_delay: # Field №2
        value: (ks__bit_field.value & 0b0000000000000100) != 0
      ks__has_field_cooldown: # Field №3
        value: (ks__bit_field.value & 0b0000000000001000) != 0
      ks__has_field_interrupted_guids: # Field №4
        value: (ks__bit_field.value & 0b0000000000010000) != 0
      ks__has_field_queue_up_config: # Field №5
        value: (ks__bit_field.value & 0b0000000000100000) != 0
      ks__has_field_game_trigger: # Field №6
        value: (ks__bit_field.value & 0b0000000001000000) != 0
      ks__has_field_game_trigger_args: # Field №7
        value: (ks__bit_field.value & 0b0000000010000000) != 0
      ks__has_field_personal_config: # Field №8
        value: (ks__bit_field.value & 0b0000000100000000) != 0
      ks__has_field_view_config: # Field №9
        value: (ks__bit_field.value & 0b0000001000000000) != 0
      ks__has_field_clear_all: # Field №10
        value: (ks__bit_field.value & 0b0000010000000000) != 0
      ks__has_field_is_global_stop: # Field №11
        value: (ks__bit_field.value & 0b0000100000000000) != 0
      ks__has_field_is_play_on_team: # Field №12
        value: (ks__bit_field.value & 0b0001000000000000) != 0
      ks__has_field_avoid_repeat: # Field №13
        value: (ks__bit_field.value & 0b0010000000000000) != 0
      ks__has_field_parent_id: # Field №14
        value: (ks__bit_field.value & 0b0100000000000000) != 0
      ks__has_field_source_names: # Field №15
        value: (ks__bit_field.value & 0b1000000000000000) != 0
  config_external_voice_lookup_item:
    seq:
      - id: ks__bit_field
        type: u1
      - id: file_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_file_id
      - id: game_trigger
        type: ks__enum__audio_voice_trigger
        if: ks__has_field_game_trigger
      - id: game_trigger_args
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_game_trigger_args
    instances:
      ks__has_field_file_id: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_game_trigger: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_game_trigger_args: # Field №2
        value: (ks__bit_field & 0b100) != 0
  face_animation_type_config:
    seq:
      - id: ks__bit_field
        type: u1
      - id: type
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_type
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field & 0b1) != 0
  face_animation_t_setting_path_config:
    seq:
      - id: ks__bit_field
        type: u1
      - id: path
        type: aux_types::string
        if: ks__has_field_path
    instances:
      ks__has_field_path: # Field №0
        value: (ks__bit_field & 0b1) != 0
  ks__kvp_of_dict__aux_types__string_face_animation_type_config:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: face_animation_type_config
  ks__dict_of__aux_types__string_face_animation_type_config:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_face_animation_type_config
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__aux_types__vlq_base128_le_u_face_animation_t_setting_path_config:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_u
      - id: value
        type: face_animation_t_setting_path_config
  ks__dict_of__aux_types__vlq_base128_le_u_face_animation_t_setting_path_config:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_u_face_animation_t_setting_path_config
        repeat: expr
        repeat-expr: length.value
  config_face_animation_global:
    seq:
      - id: ks__bit_field
        type: u1
      - id: type_defines
        type: ks__dict_of__aux_types__string_face_animation_type_config
        if: ks__has_field_type_defines
      - id: path_defines
        type: ks__dict_of__aux_types__vlq_base128_le_u_face_animation_t_setting_path_config
        if: ks__has_field_path_defines
    instances:
      ks__has_field_type_defines: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_path_defines: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_flycloak_fashion_effect:
    seq:
      - id: ks__bit_field
        type: u1
      - id: tail
        type: aux_types::string
        if: ks__has_field_tail
      - id: fly_start
        type: aux_types::string
        if: ks__has_field_fly_start
      - id: fly_end
        type: aux_types::string
        if: ks__has_field_fly_end
    instances:
      ks__has_field_tail: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_fly_start: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_fly_end: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_flycloak_fashion_scale:
    seq:
      - id: ks__bit_field
        type: u1
      - id: male
        type: f4
        if: ks__has_field_male
      - id: lady
        type: f4
        if: ks__has_field_lady
      - id: boy
        type: f4
        if: ks__has_field_boy
      - id: girl
        type: f4
        if: ks__has_field_girl
      - id: loli
        type: f4
        if: ks__has_field_loli
    instances:
      ks__has_field_male: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_lady: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_boy: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_girl: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_loli: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  config_flycloak_fashion:
    seq:
      - id: ks__bit_field
        type: u1
      - id: effects
        type: config_flycloak_fashion_effect
        if: ks__has_field_effects
      - id: scale
        type: config_flycloak_fashion_scale
        if: ks__has_field_scale
    instances:
      ks__has_field_effects: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_scale: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_gadget_path:
    seq:
      - id: ks__bit_field
        type: u1
      - id: gadget_paths
        type: ks__dict_of__aux_types__string_ks__array_of__aux_types__string__length_u
        if: ks__has_field_gadget_paths
    instances:
      ks__has_field_gadget_paths: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_gadget_do_attack_event_register:
    seq: []
    instances: {}
  config_gadget_trigger_ability_register:
    seq: []
    instances: {}
  config_gadget_damage_by_attack_value_register:
    seq: []
    instances: {}
  ccd_type_comparer:
    seq: []
    instances: {}
  config_gadget_collided_pattern_register:
    seq: []
    instances: {}
  ks__array_of__ks__disp__config_base_gadget_trigger_action__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__disp__config_base_gadget_trigger_action
        repeat: expr
        repeat-expr: length.value
  config_gadget_collided_pattern:
    seq:
      - id: ks__base
        type: config_gadget_pattern
      - id: ks__bit_field
        type: u1
      - id: collision_actions
        type: ks__array_of__ks__disp__config_base_gadget_trigger_action__length_u
        if: ks__has_field_collision_actions
      - id: this_collider_name
        type: aux_types::string
        if: ks__has_field_this_collider_name
      - id: target_collider_name
        type: aux_types::string
        if: ks__has_field_target_collider_name
    instances:
      ks__has_field_collision_actions: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_this_collider_name: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_target_collider_name: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      collision:
        value: ks__base.collision
  config_bullet_pattern_register:
    seq: []
    instances: {}
  config_bullet_pattern:
    seq:
      - id: ks__base
        type: config_gadget_pattern
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: trigger_actions
        type: ks__array_of__ks__disp__config_base_gadget_trigger_action__length_u
        if: ks__has_field_trigger_actions
      - id: trigger_life_over_actions
        type: ks__array_of__ks__disp__config_base_gadget_trigger_action__length_u
        if: ks__has_field_trigger_life_over_actions
      - id: kill_by_other
        type: u1
        if: ks__has_field_kill_by_other
      - id: die_delay_time
        type: f4
        if: ks__has_field_die_delay_time
      - id: check_grass
        type: u1
        if: ks__has_field_check_grass
      - id: check_water
        type: u1
        if: ks__has_field_check_water
      - id: check_interval
        type: f4
        if: ks__has_field_check_interval
      - id: need_create_gw
        type: u1
        if: ks__has_field_need_create_gw
      - id: fire_ai_sound_event
        type: u1
        if: ks__has_field_fire_ai_sound_event
      - id: max_auto_kill_dist
        type: f4
        if: ks__has_field_max_auto_kill_dist
      - id: enable_collision_delay
        type: f4
        if: ks__has_field_enable_collision_delay
    instances:
      ks__has_field_trigger_actions: # Field №0
        value: (ks__bit_field.value & 0b00000000001) != 0
      ks__has_field_trigger_life_over_actions: # Field №1
        value: (ks__bit_field.value & 0b00000000010) != 0
      ks__has_field_kill_by_other: # Field №2
        value: (ks__bit_field.value & 0b00000000100) != 0
      ks__has_field_die_delay_time: # Field №3
        value: (ks__bit_field.value & 0b00000001000) != 0
      ks__has_field_check_grass: # Field №4
        value: (ks__bit_field.value & 0b00000010000) != 0
      ks__has_field_check_water: # Field №5
        value: (ks__bit_field.value & 0b00000100000) != 0
      ks__has_field_check_interval: # Field №6
        value: (ks__bit_field.value & 0b00001000000) != 0
      ks__has_field_need_create_gw: # Field №7
        value: (ks__bit_field.value & 0b00010000000) != 0
      ks__has_field_fire_ai_sound_event: # Field №8
        value: (ks__bit_field.value & 0b00100000000) != 0
      ks__has_field_max_auto_kill_dist: # Field №9
        value: (ks__bit_field.value & 0b01000000000) != 0
      ks__has_field_enable_collision_delay: # Field №10
        value: (ks__bit_field.value & 0b10000000000) != 0
      # Base class fields
      collision:
        value: ks__base.collision
  config_global_hit:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: min_hit_vx
        type: f4
        if: ks__has_field_min_hit_vx
      - id: max_hit_vx
        type: f4
        if: ks__has_field_max_hit_vx
      - id: min_hit_vy
        type: f4
        if: ks__has_field_min_hit_vy
      - id: max_hit_vy
        type: f4
        if: ks__has_field_max_hit_vy
      - id: gravity
        type: f4
        if: ks__has_field_gravity
      - id: hit_retreat_friction
        type: f4
        if: ks__has_field_hit_retreat_friction
      - id: air_friction_x
        type: f4
        if: ks__has_field_air_friction_x
      - id: air_friction_y
        type: f4
        if: ks__has_field_air_friction_y
      - id: die_retreat_ratio
        type: f4
        if: ks__has_field_die_retreat_ratio
      - id: die_retreat_light_ratio
        type: f4
        if: ks__has_field_die_retreat_light_ratio
      - id: die_retreat_heavy_ratio
        type: f4
        if: ks__has_field_die_retreat_heavy_ratio
      - id: die_retreat_add
        type: f4
        if: ks__has_field_die_retreat_add
      - id: die_retreat_heavy_add
        type: f4
        if: ks__has_field_die_retreat_heavy_add
      - id: die_retreat_air_x_add
        type: f4
        if: ks__has_field_die_retreat_air_x_add
      - id: die_retreat_air_y_add
        type: f4
        if: ks__has_field_die_retreat_air_y_add
    instances:
      ks__has_field_min_hit_vx: # Field №0
        value: (ks__bit_field.value & 0b000000000000001) != 0
      ks__has_field_max_hit_vx: # Field №1
        value: (ks__bit_field.value & 0b000000000000010) != 0
      ks__has_field_min_hit_vy: # Field №2
        value: (ks__bit_field.value & 0b000000000000100) != 0
      ks__has_field_max_hit_vy: # Field №3
        value: (ks__bit_field.value & 0b000000000001000) != 0
      ks__has_field_gravity: # Field №4
        value: (ks__bit_field.value & 0b000000000010000) != 0
      ks__has_field_hit_retreat_friction: # Field №5
        value: (ks__bit_field.value & 0b000000000100000) != 0
      ks__has_field_air_friction_x: # Field №6
        value: (ks__bit_field.value & 0b000000001000000) != 0
      ks__has_field_air_friction_y: # Field №7
        value: (ks__bit_field.value & 0b000000010000000) != 0
      ks__has_field_die_retreat_ratio: # Field №8
        value: (ks__bit_field.value & 0b000000100000000) != 0
      ks__has_field_die_retreat_light_ratio: # Field №9
        value: (ks__bit_field.value & 0b000001000000000) != 0
      ks__has_field_die_retreat_heavy_ratio: # Field №10
        value: (ks__bit_field.value & 0b000010000000000) != 0
      ks__has_field_die_retreat_add: # Field №11
        value: (ks__bit_field.value & 0b000100000000000) != 0
      ks__has_field_die_retreat_heavy_add: # Field №12
        value: (ks__bit_field.value & 0b001000000000000) != 0
      ks__has_field_die_retreat_air_x_add: # Field №13
        value: (ks__bit_field.value & 0b010000000000000) != 0
      ks__has_field_die_retreat_air_y_add: # Field №14
        value: (ks__bit_field.value & 0b100000000000000) != 0
  config_global_collision:
    seq:
      - id: ks__bit_field
        type: u1
      - id: high_spd_threshold
        type: f4
        if: ks__has_field_high_spd_threshold
    instances:
      ks__has_field_high_spd_threshold: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_public_ai_skill_cd:
    seq:
      - id: ks__bit_field
        type: u1
      - id: name
        type: aux_types::string
        if: ks__has_field_name
      - id: min_interval
        type: f4
        if: ks__has_field_min_interval
    instances:
      ks__has_field_name: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_min_interval: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__kvp_of_dict__aux_types__string_config_public_ai_skill_cd:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: config_public_ai_skill_cd
  ks__dict_of__aux_types__string_config_public_ai_skill_cd:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_config_public_ai_skill_cd
        repeat: expr
        repeat-expr: length.value
  config_global_ai:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: avatar_melee_slot_radius
        type: f4
        if: ks__has_field_avatar_melee_slot_radius
      - id: avoidance_radius
        type: f4
        if: ks__has_field_avoidance_radius
      - id: avoidance_force
        type: f4
        if: ks__has_field_avoidance_force
      - id: lod0
        type: f4
        if: ks__has_field_lod0
      - id: lod1
        type: f4
        if: ks__has_field_lod1
      - id: lod2
        type: f4
        if: ks__has_field_lod2
      - id: sensing_ignore_camp_i_ds
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_sensing_ignore_camp_i_ds
      - id: public_c_ds
        type: ks__dict_of__aux_types__string_config_public_ai_skill_cd
        if: ks__has_field_public_c_ds
      - id: default_weather_neuron_mapping
        type: ks__dict_of__ks__enum__config_weather_type_ks__array_of__ks__enum__neuron_name__length_u
        if: ks__has_field_default_weather_neuron_mapping
      - id: use_server_pathfinding
        type: u1
        if: ks__has_field_use_server_pathfinding
    instances:
      ks__has_field_avatar_melee_slot_radius: # Field №0
        value: (ks__bit_field.value & 0b0000000001) != 0
      ks__has_field_avoidance_radius: # Field №1
        value: (ks__bit_field.value & 0b0000000010) != 0
      ks__has_field_avoidance_force: # Field №2
        value: (ks__bit_field.value & 0b0000000100) != 0
      ks__has_field_lod0: # Field №3
        value: (ks__bit_field.value & 0b0000001000) != 0
      ks__has_field_lod1: # Field №4
        value: (ks__bit_field.value & 0b0000010000) != 0
      ks__has_field_lod2: # Field №5
        value: (ks__bit_field.value & 0b0000100000) != 0
      ks__has_field_sensing_ignore_camp_i_ds: # Field №6
        value: (ks__bit_field.value & 0b0001000000) != 0
      ks__has_field_public_c_ds: # Field №7
        value: (ks__bit_field.value & 0b0010000000) != 0
      ks__has_field_default_weather_neuron_mapping: # Field №8
        value: (ks__bit_field.value & 0b0100000000) != 0
      ks__has_field_use_server_pathfinding: # Field №9
        value: (ks__bit_field.value & 0b1000000000) != 0
  config_move_sync_interval:
    seq:
      - id: ks__bit_field
        type: u1
      - id: lod0
        type: config_specific_float_value
        if: ks__has_field_lod0
      - id: lod1
        type: config_specific_float_value
        if: ks__has_field_lod1
      - id: lod2
        type: config_specific_float_value
        if: ks__has_field_lod2
    instances:
      ks__has_field_lod0: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_lod1: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_lod2: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_global_move:
    seq:
      - id: ks__bit_field
        type: u1
      - id: sync_interval
        type: config_move_sync_interval
        if: ks__has_field_sync_interval
      - id: no_ground_stay_in_place
        type: u1
        if: ks__has_field_no_ground_stay_in_place
    instances:
      ks__has_field_sync_interval: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_no_ground_stay_in_place: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_default_abilities:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: monter_elite_ability_name
        type: aux_types::string
        if: ks__has_field_monter_elite_ability_name
      - id: non_humanoid_move_abilities
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_non_humanoid_move_abilities
      - id: level_default_abilities
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_level_default_abilities
      - id: level_element_abilities
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_level_element_abilities
      - id: level_item_abilities
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_level_item_abilities
      - id: level_s_buff_abilities
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_level_s_buff_abilities
      - id: dungeon_abilities
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_dungeon_abilities
      - id: default_team_abilities
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_default_team_abilities
      - id: default_mp_level_abilities
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_default_mp_level_abilities
      - id: default_avatar_abilities
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_default_avatar_abilities
    instances:
      ks__has_field_monter_elite_ability_name: # Field №0
        value: (ks__bit_field.value & 0b0000000001) != 0
      ks__has_field_non_humanoid_move_abilities: # Field №1
        value: (ks__bit_field.value & 0b0000000010) != 0
      ks__has_field_level_default_abilities: # Field №2
        value: (ks__bit_field.value & 0b0000000100) != 0
      ks__has_field_level_element_abilities: # Field №3
        value: (ks__bit_field.value & 0b0000001000) != 0
      ks__has_field_level_item_abilities: # Field №4
        value: (ks__bit_field.value & 0b0000010000) != 0
      ks__has_field_level_s_buff_abilities: # Field №5
        value: (ks__bit_field.value & 0b0000100000) != 0
      ks__has_field_dungeon_abilities: # Field №6
        value: (ks__bit_field.value & 0b0001000000) != 0
      ks__has_field_default_team_abilities: # Field №7
        value: (ks__bit_field.value & 0b0010000000) != 0
      ks__has_field_default_mp_level_abilities: # Field №8
        value: (ks__bit_field.value & 0b0100000000) != 0
      ks__has_field_default_avatar_abilities: # Field №9
        value: (ks__bit_field.value & 0b1000000000) != 0
  config_global_shake_off:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: reduce_durability
        type: f4
        if: ks__has_field_reduce_durability
      - id: interval
        type: f4
        if: ks__has_field_interval
      - id: shake_life_time
        type: f4
        if: ks__has_field_shake_life_time
      - id: shake_value
        type: f4
        if: ks__has_field_shake_value
      - id: shake_period
        type: f4
        if: ks__has_field_shake_period
      - id: shake_smooth_ratio
        type: f4
        if: ks__has_field_shake_smooth_ratio
      - id: shake_along_angle
        type: f4
        if: ks__has_field_shake_along_angle
      - id: shake_rot_angle
        type: f4
        if: ks__has_field_shake_rot_angle
      - id: shake_noise_ratio
        type: f4
        if: ks__has_field_shake_noise_ratio
      - id: shake_dir_ratio
        type: f4
        if: ks__has_field_shake_dir_ratio
      - id: shake_z_ratio
        type: f4
        if: ks__has_field_shake_z_ratio
    instances:
      ks__has_field_reduce_durability: # Field №0
        value: (ks__bit_field.value & 0b00000000001) != 0
      ks__has_field_interval: # Field №1
        value: (ks__bit_field.value & 0b00000000010) != 0
      ks__has_field_shake_life_time: # Field №2
        value: (ks__bit_field.value & 0b00000000100) != 0
      ks__has_field_shake_value: # Field №3
        value: (ks__bit_field.value & 0b00000001000) != 0
      ks__has_field_shake_period: # Field №4
        value: (ks__bit_field.value & 0b00000010000) != 0
      ks__has_field_shake_smooth_ratio: # Field №5
        value: (ks__bit_field.value & 0b00000100000) != 0
      ks__has_field_shake_along_angle: # Field №6
        value: (ks__bit_field.value & 0b00001000000) != 0
      ks__has_field_shake_rot_angle: # Field №7
        value: (ks__bit_field.value & 0b00010000000) != 0
      ks__has_field_shake_noise_ratio: # Field №8
        value: (ks__bit_field.value & 0b00100000000) != 0
      ks__has_field_shake_dir_ratio: # Field №9
        value: (ks__bit_field.value & 0b01000000000) != 0
      ks__has_field_shake_z_ratio: # Field №10
        value: (ks__bit_field.value & 0b10000000000) != 0
  config_element_shield_resistance:
    seq:
      - id: ks__bit_field
        type: u1
      - id: element_type
        type: ks__enum__element_type
        if: ks__has_field_element_type
      - id: damage_ratio
        type: ks__array_of__f4__length_u
        if: ks__has_field_damage_ratio
      - id: restraint
        type: ks__array_of__aux_types__vlq_base128_le_s__length_u
        if: ks__has_field_restraint
    instances:
      ks__has_field_element_type: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_damage_ratio: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_restraint: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__kvp_of_dict__ks__enum__element_type_config_element_shield_resistance:
    seq:
      - id: key
        type: ks__enum__element_type
      - id: value
        type: config_element_shield_resistance
  ks__dict_of__ks__enum__element_type_config_element_shield_resistance:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__ks__enum__element_type_config_element_shield_resistance
        repeat: expr
        repeat-expr: length.value
  config_element_shield:
    seq:
      - id: ks__bit_field
        type: u1
      - id: row
        type: ks__array_of__ks__enum__element_type__length_u
        if: ks__has_field_row
      - id: shield_damage_ratios_map
        type: ks__dict_of__ks__enum__element_type_config_element_shield_resistance
        if: ks__has_field_shield_damage_ratios_map
    instances:
      ks__has_field_row: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_shield_damage_ratios_map: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_elite_shield_resistance:
    seq:
      - id: ks__bit_field
        type: u1
      - id: type
        type: aux_types::string
        if: ks__has_field_type
      - id: damage_ratio
        type: ks__array_of__f4__length_u
        if: ks__has_field_damage_ratio
      - id: damage_suffer_ratio
        type: ks__array_of__f4__length_u
        if: ks__has_field_damage_suffer_ratio
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_damage_ratio: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_damage_suffer_ratio: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__kvp_of_dict__aux_types__string_config_elite_shield_resistance:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: config_elite_shield_resistance
  ks__dict_of__aux_types__string_config_elite_shield_resistance:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_config_elite_shield_resistance
        repeat: expr
        repeat-expr: length.value
  config_elite_shield:
    seq:
      - id: ks__bit_field
        type: u1
      - id: row
        type: ks__array_of__ks__enum__element_type__length_u
        if: ks__has_field_row
      - id: shield_damage_ratios_map
        type: ks__dict_of__aux_types__string_config_elite_shield_resistance
        if: ks__has_field_shield_damage_ratios_map
    instances:
      ks__has_field_row: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_shield_damage_ratios_map: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_global_switch:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: enable_multi_player
        type: u1
        if: ks__has_field_enable_multi_player
      - id: enable_animator_interleave
        type: u1
        if: ks__has_field_enable_animator_interleave
      - id: enable_mixin_modifier_detach_callback
        type: u1
        if: ks__has_field_enable_mixin_modifier_detach_callback
      - id: enable_packet_process_time_limit
        type: u1
        if: ks__has_field_enable_packet_process_time_limit
      - id: enable_ui_temp_fix
        type: u1
        if: ks__has_field_enable_ui_temp_fix
      - id: enable_equip_data_item_fix
        type: u1
        if: ks__has_field_enable_equip_data_item_fix
      - id: cache_entity_light_de_active
        type: u1
        if: ks__has_field_cache_entity_light_de_active
      - id: enablemax_delay_packet_ms
        type: u1
        if: ks__has_field_enablemax_delay_packet_ms
      - id: max_delay_packet_ms
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_delay_packet_ms
      - id: enable_force_sync_postion
        type: u1
        if: ks__has_field_enable_force_sync_postion
      - id: max_force_distance
        type: f4
        if: ks__has_field_max_force_distance
      - id: enable_ability_invoke_after_ready
        type: u1
        if: ks__has_field_enable_ability_invoke_after_ready
    instances:
      ks__has_field_enable_multi_player: # Field №0
        value: (ks__bit_field.value & 0b000000000001) != 0
      ks__has_field_enable_animator_interleave: # Field №1
        value: (ks__bit_field.value & 0b000000000010) != 0
      ks__has_field_enable_mixin_modifier_detach_callback: # Field №2
        value: (ks__bit_field.value & 0b000000000100) != 0
      ks__has_field_enable_packet_process_time_limit: # Field №3
        value: (ks__bit_field.value & 0b000000001000) != 0
      ks__has_field_enable_ui_temp_fix: # Field №4
        value: (ks__bit_field.value & 0b000000010000) != 0
      ks__has_field_enable_equip_data_item_fix: # Field №5
        value: (ks__bit_field.value & 0b000000100000) != 0
      ks__has_field_cache_entity_light_de_active: # Field №6
        value: (ks__bit_field.value & 0b000001000000) != 0
      ks__has_field_enablemax_delay_packet_ms: # Field №7
        value: (ks__bit_field.value & 0b000010000000) != 0
      ks__has_field_max_delay_packet_ms: # Field №8
        value: (ks__bit_field.value & 0b000100000000) != 0
      ks__has_field_enable_force_sync_postion: # Field №9
        value: (ks__bit_field.value & 0b001000000000) != 0
      ks__has_field_max_force_distance: # Field №10
        value: (ks__bit_field.value & 0b010000000000) != 0
      ks__has_field_enable_ability_invoke_after_ready: # Field №11
        value: (ks__bit_field.value & 0b100000000000) != 0
  config_global_lock_target:
    seq:
      - id: ks__bit_field
        type: u1
      - id: lock_weight_out_camera_param
        type: f4
        if: ks__has_field_lock_weight_out_camera_param
      - id: lock_weight_relock_param
        type: f4
        if: ks__has_field_lock_weight_relock_param
      - id: clear_lock_target_out_combat
        type: f4
        if: ks__has_field_clear_lock_target_out_combat
      - id: clear_lock_target_in_combat
        type: f4
        if: ks__has_field_clear_lock_target_in_combat
      - id: force_lock_target_in_combat
        type: f4
        if: ks__has_field_force_lock_target_in_combat
    instances:
      ks__has_field_lock_weight_out_camera_param: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_lock_weight_relock_param: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_clear_lock_target_out_combat: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_clear_lock_target_in_combat: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_force_lock_target_in_combat: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  ks__kvp_of_dict__ks__enum__element_reaction_type_aux_types__string:
    seq:
      - id: key
        type: ks__enum__element_reaction_type
      - id: value
        type: aux_types::string
  ks__dict_of__ks__enum__element_reaction_type_aux_types__string:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__ks__enum__element_reaction_type_aux_types__string
        repeat: expr
        repeat-expr: length.value
  config_element_ui:
    seq:
      - id: ks__bit_field
        type: u1
      - id: show_icon_entity_types
        type: ks__array_of__ks__enum__entity_type__length_u
        if: ks__has_field_show_icon_entity_types
      - id: show_reaction_entity_types
        type: ks__array_of__ks__enum__entity_type__length_u
        if: ks__has_field_show_reaction_entity_types
      - id: icon_recover_time
        type: f4
        if: ks__has_field_icon_recover_time
      - id: icon_disappear_time
        type: f4
        if: ks__has_field_icon_disappear_time
      - id: icon_disappear_round
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_icon_disappear_round
      - id: icon_show_distance
        type: f4
        if: ks__has_field_icon_show_distance
      - id: override_elem_path
        type: ks__dict_of__aux_types__string_aux_types__string
        if: ks__has_field_override_elem_path
      - id: reaction_elem_path
        type: ks__dict_of__ks__enum__element_reaction_type_aux_types__string
        if: ks__has_field_reaction_elem_path
    instances:
      ks__has_field_show_icon_entity_types: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_show_reaction_entity_types: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_icon_recover_time: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_icon_disappear_time: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_icon_disappear_round: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_icon_show_distance: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_override_elem_path: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_reaction_elem_path: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
  config_log_setting:
    seq:
      - id: ks__bit_field
        type: u1
      - id: send_engine_log_to_server
        type: u1
        if: ks__has_field_send_engine_log_to_server
    instances:
      ks__has_field_send_engine_log_to_server: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_attack_attenuation:
    seq:
      - id: ks__bit_field
        type: u1
      - id: reset_cycle
        type: f4
        if: ks__has_field_reset_cycle
      - id: durability_sequence
        type: ks__array_of__f4__length_u
        if: ks__has_field_durability_sequence
      - id: enbreak_sequence
        type: ks__array_of__f4__length_u
        if: ks__has_field_enbreak_sequence
      - id: damage_sequence
        type: ks__array_of__f4__length_u
        if: ks__has_field_damage_sequence
    instances:
      ks__has_field_reset_cycle: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_durability_sequence: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_enbreak_sequence: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_damage_sequence: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  config_gadget_creation_limit:
    seq:
      - id: ks__bit_field
        type: u1
      - id: tag
        type: aux_types::string
        if: ks__has_field_tag
      - id: gadget_i_ds
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_gadget_i_ds
      - id: max_value
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_value
    instances:
      ks__has_field_tag: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_gadget_i_ds: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_max_value: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_lua_safety_check_switch:
    seq:
      - id: ks__bit_field
        type: u1
      - id: tick_world
        type: u1
        if: ks__has_field_tick_world
      - id: tick_world_cd
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_tick_world_cd
      - id: tick_chest
        type: u1
        if: ks__has_field_tick_chest
      - id: tick_monster
        type: u1
        if: ks__has_field_tick_monster
    instances:
      ks__has_field_tick_world: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_tick_world_cd: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_tick_chest: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_tick_monster: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  config_global_interaction:
    seq:
      - id: ks__bit_field
        type: u1
      - id: talk_enable_angle
        type: f4
        if: ks__has_field_talk_enable_angle
      - id: head_ctrl_enable_angle
        type: f4
        if: ks__has_field_head_ctrl_enable_angle
      - id: head_ctrl_disable_angle
        type: f4
        if: ks__has_field_head_ctrl_disable_angle
    instances:
      ks__has_field_talk_enable_angle: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_head_ctrl_enable_angle: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_head_ctrl_disable_angle: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_global_dither:
    seq:
      - id: ks__bit_field
        type: u1
      - id: dither_min_range
        type: f4
        if: ks__has_field_dither_min_range
      - id: dither_max_range
        type: f4
        if: ks__has_field_dither_max_range
      - id: default_detect_height
        type: f4
        if: ks__has_field_default_detect_height
      - id: detect_height_check_step
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_detect_height_check_step
    instances:
      ks__has_field_dither_min_range: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_dither_max_range: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_default_detect_height: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_detect_height_check_step: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  config_element_decrate:
    seq:
      - id: ks__bit_field
        type: u1
      - id: elem1
        type: ks__enum__element_type
        if: ks__has_field_elem1
      - id: elem2
        type: ks__enum__element_type
        if: ks__has_field_elem2
      - id: ratio
        type: f4
        if: ks__has_field_ratio
    instances:
      ks__has_field_elem1: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_elem2: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_ratio: # Field №2
        value: (ks__bit_field & 0b100) != 0
  element_convert_to_charge_bar_value_mixin_item:
    seq:
      - id: ks__bit_field
        type: u1
      - id: element_type
        type: ks__enum__element_type
        if: ks__has_field_element_type
      - id: ratio
        type: f4
        if: ks__has_field_ratio
    instances:
      ks__has_field_element_type: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_ratio: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_slice_frame_watch:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: amortized_tick_massive_entity_budget
        type: f4
        if: ks__has_field_amortized_tick_massive_entity_budget
      - id: shared_slice_frame_game_system_time
        type: f4
        if: ks__has_field_shared_slice_frame_game_system_time
      - id: resources_manager_asset_job_min_time
        type: f4
        if: ks__has_field_resources_manager_asset_job_min_time
      - id: resources_manager_asset_job_max_time
        type: f4
        if: ks__has_field_resources_manager_asset_job_max_time
      - id: resources_manager_instantiate_min_time
        type: f4
        if: ks__has_field_resources_manager_instantiate_min_time
      - id: resources_manager_instantiate_max_time
        type: f4
        if: ks__has_field_resources_manager_instantiate_max_time
      - id: resources_manager_unload_min_time
        type: f4
        if: ks__has_field_resources_manager_unload_min_time
      - id: resources_manager_unload_max_time
        type: f4
        if: ks__has_field_resources_manager_unload_max_time
      - id: resources_manager_instantiate_job_time
        type: f4
        if: ks__has_field_resources_manager_instantiate_job_time
      - id: level_appear_disappear_time_ms_default
        type: f4
        if: ks__has_field_level_appear_disappear_time_ms_default
      - id: level_appear_disappear_wrr_weight
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_level_appear_disappear_wrr_weight
      - id: init_component_common_slicing_time_default
        type: f4
        if: ks__has_field_init_component_common_slicing_time_default
      - id: remove_entity_time_ms_default
        type: f4
        if: ks__has_field_remove_entity_time_ms_default
      - id: remove_enity_wrr_weight
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_remove_enity_wrr_weight
      - id: sectr_wrr_weight_default
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_sectr_wrr_weight_default
      - id: timer_manager_time_ms
        type: f4
        if: ks__has_field_timer_manager_time_ms
      - id: use_legacy_generic_object_pool
        type: u1
        if: ks__has_field_use_legacy_generic_object_pool
      - id: significance_task_thread_lod
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_significance_task_thread_lod
      - id: loading_use_sync_load
        type: u1
        if: ks__has_field_loading_use_sync_load
    instances:
      ks__has_field_amortized_tick_massive_entity_budget: # Field №0
        value: (ks__bit_field.value & 0b0000000000000000001) != 0
      ks__has_field_shared_slice_frame_game_system_time: # Field №1
        value: (ks__bit_field.value & 0b0000000000000000010) != 0
      ks__has_field_resources_manager_asset_job_min_time: # Field №2
        value: (ks__bit_field.value & 0b0000000000000000100) != 0
      ks__has_field_resources_manager_asset_job_max_time: # Field №3
        value: (ks__bit_field.value & 0b0000000000000001000) != 0
      ks__has_field_resources_manager_instantiate_min_time: # Field №4
        value: (ks__bit_field.value & 0b0000000000000010000) != 0
      ks__has_field_resources_manager_instantiate_max_time: # Field №5
        value: (ks__bit_field.value & 0b0000000000000100000) != 0
      ks__has_field_resources_manager_unload_min_time: # Field №6
        value: (ks__bit_field.value & 0b0000000000001000000) != 0
      ks__has_field_resources_manager_unload_max_time: # Field №7
        value: (ks__bit_field.value & 0b0000000000010000000) != 0
      ks__has_field_resources_manager_instantiate_job_time: # Field №8
        value: (ks__bit_field.value & 0b0000000000100000000) != 0
      ks__has_field_level_appear_disappear_time_ms_default: # Field №9
        value: (ks__bit_field.value & 0b0000000001000000000) != 0
      ks__has_field_level_appear_disappear_wrr_weight: # Field №10
        value: (ks__bit_field.value & 0b0000000010000000000) != 0
      ks__has_field_init_component_common_slicing_time_default: # Field №11
        value: (ks__bit_field.value & 0b0000000100000000000) != 0
      ks__has_field_remove_entity_time_ms_default: # Field №12
        value: (ks__bit_field.value & 0b0000001000000000000) != 0
      ks__has_field_remove_enity_wrr_weight: # Field №13
        value: (ks__bit_field.value & 0b0000010000000000000) != 0
      ks__has_field_sectr_wrr_weight_default: # Field №14
        value: (ks__bit_field.value & 0b0000100000000000000) != 0
      ks__has_field_timer_manager_time_ms: # Field №15
        value: (ks__bit_field.value & 0b0001000000000000000) != 0
      ks__has_field_use_legacy_generic_object_pool: # Field №16
        value: (ks__bit_field.value & 0b0010000000000000000) != 0
      ks__has_field_significance_task_thread_lod: # Field №17
        value: (ks__bit_field.value & 0b0100000000000000000) != 0
      ks__has_field_loading_use_sync_load: # Field №18
        value: (ks__bit_field.value & 0b1000000000000000000) != 0
  config_bool_for_platforms:
    seq:
      - id: ks__bit_field
        type: u1
      - id: ps4
        type: u1
        if: ks__has_field_ps4
      - id: android
        type: u1
        if: ks__has_field_android
      - id: ios
        type: u1
        if: ks__has_field_ios
      - id: pc
        type: u1
        if: ks__has_field_pc
      - id: editor
        type: u1
        if: ks__has_field_editor
    instances:
      ks__has_field_ps4: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_android: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_ios: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_pc: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_editor: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  config_ik:
    seq:
      - id: ks__bit_field
        type: u1
      - id: remote_move_ik
        type: config_bool_for_platforms
        if: ks__has_field_remote_move_ik
      - id: remote_climb_ik
        type: config_bool_for_platforms
        if: ks__has_field_remote_climb_ik
    instances:
      ks__has_field_remote_move_ik: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_remote_climb_ik: # Field №1
        value: (ks__bit_field & 0b10) != 0
  equip_size_data:
    seq:
      - id: ks__bit_field
        type: u1
      - id: equip_type
        type: ks__enum__equip_entity_type
        if: ks__has_field_equip_type
      - id: put_away_size
        type: f4
        if: ks__has_field_put_away_size
      - id: take_out_size
        type: f4
        if: ks__has_field_take_out_size
    instances:
      ks__has_field_equip_type: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_put_away_size: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_take_out_size: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_big_world_environment_damage_clamp:
    seq:
      - id: ks__bit_field
        type: u1
      - id: reduce_level
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_reduce_level
      - id: world_level_cut_threshhold
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_world_level_cut_threshhold
    instances:
      ks__has_field_reduce_level: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_world_level_cut_threshhold: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_td_play_tower_data:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: tower_type
        type: ks__enum__td_play_tower_type
        if: ks__has_field_tower_type
      - id: damage_per_level
        type: f4
        if: ks__has_field_damage_per_level
      - id: elem_mastery_per_level
        type: f4
        if: ks__has_field_elem_mastery_per_level
      - id: elem_mastery_per_per_stack
        type: f4
        if: ks__has_field_elem_mastery_per_per_stack
      - id: damage_a_per_stack
        type: f4
        if: ks__has_field_damage_a_per_stack
      - id: damage_b_per_stack
        type: f4
        if: ks__has_field_damage_b_per_stack
      - id: attack_speed_a
        type: f4
        if: ks__has_field_attack_speed_a
      - id: attack_speed_b
        type: f4
        if: ks__has_field_attack_speed_b
      - id: attack_range_a
        type: f4
        if: ks__has_field_attack_range_a
      - id: attack_range_b
        type: f4
        if: ks__has_field_attack_range_b
    instances:
      ks__has_field_tower_type: # Field №0
        value: (ks__bit_field.value & 0b0000000001) != 0
      ks__has_field_damage_per_level: # Field №1
        value: (ks__bit_field.value & 0b0000000010) != 0
      ks__has_field_elem_mastery_per_level: # Field №2
        value: (ks__bit_field.value & 0b0000000100) != 0
      ks__has_field_elem_mastery_per_per_stack: # Field №3
        value: (ks__bit_field.value & 0b0000001000) != 0
      ks__has_field_damage_a_per_stack: # Field №4
        value: (ks__bit_field.value & 0b0000010000) != 0
      ks__has_field_damage_b_per_stack: # Field №5
        value: (ks__bit_field.value & 0b0000100000) != 0
      ks__has_field_attack_speed_a: # Field №6
        value: (ks__bit_field.value & 0b0001000000) != 0
      ks__has_field_attack_speed_b: # Field №7
        value: (ks__bit_field.value & 0b0010000000) != 0
      ks__has_field_attack_range_a: # Field №8
        value: (ks__bit_field.value & 0b0100000000) != 0
      ks__has_field_attack_range_b: # Field №9
        value: (ks__bit_field.value & 0b1000000000) != 0
  ks__kvp_of_dict__ks__enum__td_play_tower_type_config_td_play_tower_data:
    seq:
      - id: key
        type: ks__enum__td_play_tower_type
      - id: value
        type: config_td_play_tower_data
  ks__dict_of__ks__enum__td_play_tower_type_config_td_play_tower_data:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__ks__enum__td_play_tower_type_config_td_play_tower_data
        repeat: expr
        repeat-expr: length.value
  config_td_play:
    seq:
      - id: ks__bit_field
        type: u1
      - id: attack_speed_c
        type: f4
        if: ks__has_field_attack_speed_c
      - id: tower_datas
        type: ks__dict_of__ks__enum__td_play_tower_type_config_td_play_tower_data
        if: ks__has_field_tower_datas
    instances:
      ks__has_field_attack_speed_c: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_tower_datas: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_safe_type_report_data:
    seq:
      - id: ks__bit_field
        type: u1
      - id: max_count
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_max_count
    instances:
      ks__has_field_max_count: # Field №0
        value: (ks__bit_field & 0b1) != 0
  ks__kvp_of_dict__aux_types__string_config_blade_element_fx:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: config_blade_element_fx
  ks__dict_of__aux_types__string_config_blade_element_fx:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_config_blade_element_fx
        repeat: expr
        repeat-expr: length.value
  config_airflow_field:
    seq:
      - id: ks__base
        type: config_const_force_field
      - id: ks__bit_field
        type: u1
      - id: scale
        type: f4
        if: ks__has_field_scale
      - id: stay_effect
        type: aux_types::string
        if: ks__has_field_stay_effect
      - id: enter_effect
        type: aux_types::string
        if: ks__has_field_enter_effect
      - id: auto_fly
        type: u1
        if: ks__has_field_auto_fly
    instances:
      ks__has_field_scale: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_stay_effect: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_enter_effect: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_auto_fly: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      velocity:
        value: ks__base.velocity
      type:
        value: ks__base.type
      gadget_id:
        value: ks__base.gadget_id
      area_id:
        value: ks__base.area_id
      pos:
        value: ks__base.pos
      rot:
        value: ks__base.rot
      tran_pos:
        value: ks__base.tran_pos
      tran_rot:
        value: ks__base.tran_rot
      unlocked:
        value: ks__base.unlocked
      alias:
        value: ks__base.alias
      group_limit:
        value: ks__base.group_limit
      is_model_hidden:
        value: ks__base.is_model_hidden
  config_fire_grass_airflow_field:
    seq:
      - id: ks__base
        type: config_airflow_field
      - id: ks__bit_field
        type: u1
      - id: enable
        type: u1
        if: ks__has_field_enable
      - id: trigger_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_trigger_num
      - id: height
        type: f4
        if: ks__has_field_height
      - id: height_speed
        type: f4
        if: ks__has_field_height_speed
    instances:
      ks__has_field_enable: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_trigger_num: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_height: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_height_speed: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      scale:
        value: ks__base.scale
      stay_effect:
        value: ks__base.stay_effect
      enter_effect:
        value: ks__base.enter_effect
      auto_fly:
        value: ks__base.auto_fly
      velocity:
        value: ks__base.velocity
      type:
        value: ks__base.type
      gadget_id:
        value: ks__base.gadget_id
      area_id:
        value: ks__base.area_id
      pos:
        value: ks__base.pos
      rot:
        value: ks__base.rot
      tran_pos:
        value: ks__base.tran_pos
      tran_rot:
        value: ks__base.tran_rot
      unlocked:
        value: ks__base.unlocked
      alias:
        value: ks__base.alias
      group_limit:
        value: ks__base.group_limit
      is_model_hidden:
        value: ks__base.is_model_hidden
  ks__kvp_of_dict__ks__enum__ability_state_ks__array_of__ks__enum__element_reaction_type__length_u:
    seq:
      - id: key
        type: ks__enum__ability_state
      - id: value
        type: ks__array_of__ks__enum__element_reaction_type__length_u
  ks__dict_of__ks__enum__ability_state_ks__array_of__ks__enum__element_reaction_type__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__ks__enum__ability_state_ks__array_of__ks__enum__element_reaction_type__length_u
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__aux_types__string_config_attack_attenuation:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: config_attack_attenuation
  ks__dict_of__aux_types__string_config_attack_attenuation:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_config_attack_attenuation
        repeat: expr
        repeat-expr: length.value
  ks__array_of__config_gadget_creation_limit__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_gadget_creation_limit
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__aux_types__vlq_base128_le_s_f4:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_s
      - id: value
        type: f4
  ks__dict_of__aux_types__vlq_base128_le_s_f4:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_s_f4
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__ks__enum__ability_state_aux_types__string:
    seq:
      - id: key
        type: ks__enum__ability_state
      - id: value
        type: aux_types::string
  ks__dict_of__ks__enum__ability_state_aux_types__string:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__ks__enum__ability_state_aux_types__string
        repeat: expr
        repeat-expr: length.value
  ks__array_of__config_element_decrate__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_element_decrate
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__aux_types__string_ks__array_of__config_element_decrate__length_u:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: ks__array_of__config_element_decrate__length_u
  ks__dict_of__aux_types__string_ks__array_of__config_element_decrate__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_ks__array_of__config_element_decrate__length_u
        repeat: expr
        repeat-expr: length.value
  ks__array_of__equip_size_data__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: equip_size_data
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__aux_types__vlq_base128_le_s_ks__array_of__equip_size_data__length_u:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_s
      - id: value
        type: ks__array_of__equip_size_data__length_u
  ks__dict_of__aux_types__vlq_base128_le_s_ks__array_of__equip_size_data__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_s_ks__array_of__equip_size_data__length_u
        repeat: expr
        repeat-expr: length.value
  ks__array_of__element_convert_to_charge_bar_value_mixin_item__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: element_convert_to_charge_bar_value_mixin_item
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__aux_types__string_ks__array_of__element_convert_to_charge_bar_value_mixin_item__length_u:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: ks__array_of__element_convert_to_charge_bar_value_mixin_item__length_u
  ks__dict_of__aux_types__string_ks__array_of__element_convert_to_charge_bar_value_mixin_item__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_ks__array_of__element_convert_to_charge_bar_value_mixin_item__length_u
        repeat: expr
        repeat-expr: length.value
  config_global_combat:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: hit_data
        type: config_global_hit
        if: ks__has_field_hit_data
      - id: collision_data
        type: config_global_collision
        if: ks__has_field_collision_data
      - id: ai_data
        type: config_global_ai
        if: ks__has_field_ai_data
      - id: move_data
        type: config_global_move
        if: ks__has_field_move_data
      - id: default_avatar_hit_bucket_setting
        type: config_avatar_hit_bucket_setting
        if: ks__has_field_default_avatar_hit_bucket_setting
      - id: element_blade_data
        type: ks__dict_of__aux_types__string_config_blade_element_fx
        if: ks__has_field_element_blade_data
      - id: fire_grass_airflow_data
        type: config_fire_grass_airflow_field
        if: ks__has_field_fire_grass_airflow_data
      - id: miscs
        type: config_gloabl_miscs
        if: ks__has_field_miscs
      - id: default_abilities
        type: config_default_abilities
        if: ks__has_field_default_abilities
      - id: elem_react_damage
        type: ks__dict_of__aux_types__string_ks__dict_of__aux_types__string_f4
        if: ks__has_field_elem_react_damage
      - id: elem_amplify_damage
        type: ks__dict_of__aux_types__string_ks__dict_of__aux_types__string_f4
        if: ks__has_field_elem_amplify_damage
      - id: elem_prority
        type: ks__array_of__ks__enum__element_type__length_u
        if: ks__has_field_elem_prority
      - id: shake_off
        type: config_global_shake_off
        if: ks__has_field_shake_off
      - id: element_shield
        type: config_element_shield
        if: ks__has_field_element_shield
      - id: elite_shield
        type: config_elite_shield
        if: ks__has_field_elite_shield
      - id: global_switch
        type: config_global_switch
        if: ks__has_field_global_switch
      - id: lock_target
        type: config_global_lock_target
        if: ks__has_field_lock_target
      - id: elem_ui
        type: config_element_ui
        if: ks__has_field_elem_ui
      - id: reject_element_reaction
        type: ks__dict_of__ks__enum__ability_state_ks__array_of__ks__enum__element_reaction_type__length_u
        if: ks__has_field_reject_element_reaction
      - id: log_setting
        type: config_log_setting
        if: ks__has_field_log_setting
      - id: attack_attenuation
        type: ks__dict_of__aux_types__string_config_attack_attenuation
        if: ks__has_field_attack_attenuation
      - id: gadget_creation_limits
        type: ks__array_of__config_gadget_creation_limit__length_u
        if: ks__has_field_gadget_creation_limits
      - id: lua_safety_switch
        type: config_lua_safety_check_switch
        if: ks__has_field_lua_safety_switch
      - id: temp_component_budget
        type: ks__dict_of__aux_types__vlq_base128_le_s_f4
        if: ks__has_field_temp_component_budget
      - id: global_interaction
        type: config_global_interaction
        if: ks__has_field_global_interaction
      - id: lamp_offset
        type: ks__array_of__vector__length_u
        if: ks__has_field_lamp_offset
      - id: ability_state_trigger_abilities
        type: ks__dict_of__ks__enum__ability_state_aux_types__string
        if: ks__has_field_ability_state_trigger_abilities
      - id: dither
        type: config_global_dither
        if: ks__has_field_dither
      - id: element_decrate_group
        type: ks__dict_of__aux_types__string_ks__array_of__config_element_decrate__length_u
        if: ks__has_field_element_decrate_group
      - id: slice_frame_watch
        type: config_slice_frame_watch
        if: ks__has_field_slice_frame_watch
      - id: ik
        type: config_ik
        if: ks__has_field_ik
      - id: avatar_equip_size_datas
        type: ks__dict_of__aux_types__vlq_base128_le_s_ks__array_of__equip_size_data__length_u
        if: ks__has_field_avatar_equip_size_datas
      - id: manekin_equip_size_datas
        type: ks__dict_of__aux_types__vlq_base128_le_s_ks__array_of__equip_size_data__length_u
        if: ks__has_field_manekin_equip_size_datas
      - id: big_world_environment_damage_clamp
        type: config_big_world_environment_damage_clamp
        if: ks__has_field_big_world_environment_damage_clamp
      - id: td_play
        type: config_td_play
        if: ks__has_field_td_play
      - id: game_anim_safe_type
        type: config_safe_type_report_data
        if: ks__has_field_game_anim_safe_type
      - id: element_convert_to_charge_bar_value_mixin_item_group
        type: ks__dict_of__aux_types__string_ks__array_of__element_convert_to_charge_bar_value_mixin_item__length_u
        if: ks__has_field_element_convert_to_charge_bar_value_mixin_item_group
      - id: charge_bar_mixin_global_value_key
        type: aux_types::string
        if: ks__has_field_charge_bar_mixin_global_value_key
    instances:
      ks__has_field_hit_data: # Field №0
        value: (ks__bit_field.value & 0b00000000000000000000000000000000000001) != 0
      ks__has_field_collision_data: # Field №1
        value: (ks__bit_field.value & 0b00000000000000000000000000000000000010) != 0
      ks__has_field_ai_data: # Field №2
        value: (ks__bit_field.value & 0b00000000000000000000000000000000000100) != 0
      ks__has_field_move_data: # Field №3
        value: (ks__bit_field.value & 0b00000000000000000000000000000000001000) != 0
      ks__has_field_default_avatar_hit_bucket_setting: # Field №4
        value: (ks__bit_field.value & 0b00000000000000000000000000000000010000) != 0
      ks__has_field_element_blade_data: # Field №5
        value: (ks__bit_field.value & 0b00000000000000000000000000000000100000) != 0
      ks__has_field_fire_grass_airflow_data: # Field №6
        value: (ks__bit_field.value & 0b00000000000000000000000000000001000000) != 0
      ks__has_field_miscs: # Field №7
        value: (ks__bit_field.value & 0b00000000000000000000000000000010000000) != 0
      ks__has_field_default_abilities: # Field №8
        value: (ks__bit_field.value & 0b00000000000000000000000000000100000000) != 0
      ks__has_field_elem_react_damage: # Field №9
        value: (ks__bit_field.value & 0b00000000000000000000000000001000000000) != 0
      ks__has_field_elem_amplify_damage: # Field №10
        value: (ks__bit_field.value & 0b00000000000000000000000000010000000000) != 0
      ks__has_field_elem_prority: # Field №11
        value: (ks__bit_field.value & 0b00000000000000000000000000100000000000) != 0
      ks__has_field_shake_off: # Field №12
        value: (ks__bit_field.value & 0b00000000000000000000000001000000000000) != 0
      ks__has_field_element_shield: # Field №13
        value: (ks__bit_field.value & 0b00000000000000000000000010000000000000) != 0
      ks__has_field_elite_shield: # Field №14
        value: (ks__bit_field.value & 0b00000000000000000000000100000000000000) != 0
      ks__has_field_global_switch: # Field №15
        value: (ks__bit_field.value & 0b00000000000000000000001000000000000000) != 0
      ks__has_field_lock_target: # Field №16
        value: (ks__bit_field.value & 0b00000000000000000000010000000000000000) != 0
      ks__has_field_elem_ui: # Field №17
        value: (ks__bit_field.value & 0b00000000000000000000100000000000000000) != 0
      ks__has_field_reject_element_reaction: # Field №18
        value: (ks__bit_field.value & 0b00000000000000000001000000000000000000) != 0
      ks__has_field_log_setting: # Field №19
        value: (ks__bit_field.value & 0b00000000000000000010000000000000000000) != 0
      ks__has_field_attack_attenuation: # Field №20
        value: (ks__bit_field.value & 0b00000000000000000100000000000000000000) != 0
      ks__has_field_gadget_creation_limits: # Field №21
        value: (ks__bit_field.value & 0b00000000000000001000000000000000000000) != 0
      ks__has_field_lua_safety_switch: # Field №22
        value: (ks__bit_field.value & 0b00000000000000010000000000000000000000) != 0
      ks__has_field_temp_component_budget: # Field №23
        value: (ks__bit_field.value & 0b00000000000000100000000000000000000000) != 0
      ks__has_field_global_interaction: # Field №24
        value: (ks__bit_field.value & 0b00000000000001000000000000000000000000) != 0
      ks__has_field_lamp_offset: # Field №25
        value: (ks__bit_field.value & 0b00000000000010000000000000000000000000) != 0
      ks__has_field_ability_state_trigger_abilities: # Field №26
        value: (ks__bit_field.value & 0b00000000000100000000000000000000000000) != 0
      ks__has_field_dither: # Field №27
        value: (ks__bit_field.value & 0b00000000001000000000000000000000000000) != 0
      ks__has_field_element_decrate_group: # Field №28
        value: (ks__bit_field.value & 0b00000000010000000000000000000000000000) != 0
      ks__has_field_slice_frame_watch: # Field №29
        value: (ks__bit_field.value & 0b00000000100000000000000000000000000000) != 0
      ks__has_field_ik: # Field №30
        value: (ks__bit_field.value & 0b00000001000000000000000000000000000000) != 0
      ks__has_field_avatar_equip_size_datas: # Field №31
        value: (ks__bit_field.value & 0b00000010000000000000000000000000000000) != 0
      ks__has_field_manekin_equip_size_datas: # Field №32
        value: (ks__bit_field.value & 0b00000100000000000000000000000000000000) != 0
      ks__has_field_big_world_environment_damage_clamp: # Field №33
        value: (ks__bit_field.value & 0b00001000000000000000000000000000000000) != 0
      ks__has_field_td_play: # Field №34
        value: (ks__bit_field.value & 0b00010000000000000000000000000000000000) != 0
      ks__has_field_game_anim_safe_type: # Field №35
        value: (ks__bit_field.value & 0b00100000000000000000000000000000000000) != 0
      ks__has_field_element_convert_to_charge_bar_value_mixin_item_group: # Field №36
        value: (ks__bit_field.value & 0b01000000000000000000000000000000000000) != 0
      ks__has_field_charge_bar_mixin_global_value_key: # Field №37
        value: (ks__bit_field.value & 0b10000000000000000000000000000000000000) != 0
  first_person_coop_cam_config:
    seq:
      - id: ks__bit_field
        type: u1
      - id: cam_position_offset
        type: vector
        if: ks__has_field_cam_position_offset
      - id: cam_target_offset
        type: vector
        if: ks__has_field_cam_target_offset
      - id: cam_fov
        type: f4
        if: ks__has_field_cam_fov
    instances:
      ks__has_field_cam_position_offset: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_cam_target_offset: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_cam_fov: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__kvp_of_dict__ks__enum__npc_body_type_first_person_coop_cam_config:
    seq:
      - id: key
        type: ks__enum__npc_body_type
      - id: value
        type: first_person_coop_cam_config
  ks__dict_of__ks__enum__npc_body_type_first_person_coop_cam_config:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__ks__enum__npc_body_type_first_person_coop_cam_config
        repeat: expr
        repeat-expr: length.value
  config_global_values:
    seq:
      - id: ks__bit_field
        type: u1
      - id: first_person_coop_cam_configs
        type: ks__dict_of__ks__enum__npc_body_type_first_person_coop_cam_config
        if: ks__has_field_first_person_coop_cam_configs
    instances:
      ks__has_field_first_person_coop_cam_configs: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_setting_level_value:
    seq:
      - id: ks__bit_field
        type: u1
      - id: quality_resolution_percentage_map
        type: ks__dict_of__aux_types__string_aux_types__vlq_base128_le_s
        if: ks__has_field_quality_resolution_percentage_map
      - id: graphics_recommend_grades
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_graphics_recommend_grades
    instances:
      ks__has_field_quality_resolution_percentage_map: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_graphics_recommend_grades: # Field №1
        value: (ks__bit_field & 0b10) != 0
  shadow_quality_comparer:
    seq: []
    instances: {}
  grass_quality_level_comparer:
    seq: []
    instances: {}
  fade_tint_quality_level_comparer:
    seq: []
    instances: {}
  checkboard_type_comparer:
    seq: []
    instances: {}
  motion_blur_quality_comparer:
    seq: []
    instances: {}
  antialiasing_method_comparer:
    seq: []
    instances: {}
  taa_quality_comparer:
    seq: []
    instances: {}
  smaa_quality_comparer:
    seq: []
    instances: {}
  ssao_mode_comparer:
    seq: []
    instances: {}
  graphics_setting_entry_type_comparer:
    seq: []
    instances: {}
  setting_entry_display_type_comparer:
    seq: []
    instances: {}
  config_shadow_resolution_comparer:
    seq: []
    instances: {}
  config_graphic_setting_entry_sort_type_comparer:
    seq: []
    instances: {}
  volatile_type_comparer:
    seq: []
    instances: {}
  option_type_comparer:
    seq: []
    instances: {}
  particle_emit_level_type_comparer:
    seq: []
    instances: {}
  light_level_comparer:
    seq: []
    instances: {}
  perf_cost_ratio_grade_comparer:
    seq: []
    instances: {}
  config_hdr_setting:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: max_luminosity
        type: f4
        if: ks__has_field_max_luminosity
      - id: min_max_luminosity
        type: f4
        if: ks__has_field_min_max_luminosity
      - id: max_max_luminosity
        type: f4
        if: ks__has_field_max_max_luminosity
      - id: step_max_luminosity
        type: f4
        if: ks__has_field_step_max_luminosity
      - id: ui_paper_white
        type: f4
        if: ks__has_field_ui_paper_white
      - id: min_ui_paper_white
        type: f4
        if: ks__has_field_min_ui_paper_white
      - id: max_ui_paper_white
        type: f4
        if: ks__has_field_max_ui_paper_white
      - id: step_ui_paper_white
        type: f4
        if: ks__has_field_step_ui_paper_white
      - id: scene_paper_white
        type: f4
        if: ks__has_field_scene_paper_white
      - id: min_scene_paper_white
        type: f4
        if: ks__has_field_min_scene_paper_white
      - id: max_scene_paper_white
        type: f4
        if: ks__has_field_max_scene_paper_white
      - id: step_scene_paper_white
        type: f4
        if: ks__has_field_step_scene_paper_white
    instances:
      ks__has_field_max_luminosity: # Field №0
        value: (ks__bit_field.value & 0b000000000001) != 0
      ks__has_field_min_max_luminosity: # Field №1
        value: (ks__bit_field.value & 0b000000000010) != 0
      ks__has_field_max_max_luminosity: # Field №2
        value: (ks__bit_field.value & 0b000000000100) != 0
      ks__has_field_step_max_luminosity: # Field №3
        value: (ks__bit_field.value & 0b000000001000) != 0
      ks__has_field_ui_paper_white: # Field №4
        value: (ks__bit_field.value & 0b000000010000) != 0
      ks__has_field_min_ui_paper_white: # Field №5
        value: (ks__bit_field.value & 0b000000100000) != 0
      ks__has_field_max_ui_paper_white: # Field №6
        value: (ks__bit_field.value & 0b000001000000) != 0
      ks__has_field_step_ui_paper_white: # Field №7
        value: (ks__bit_field.value & 0b000010000000) != 0
      ks__has_field_scene_paper_white: # Field №8
        value: (ks__bit_field.value & 0b000100000000) != 0
      ks__has_field_min_scene_paper_white: # Field №9
        value: (ks__bit_field.value & 0b001000000000) != 0
      ks__has_field_max_scene_paper_white: # Field №10
        value: (ks__bit_field.value & 0b010000000000) != 0
      ks__has_field_step_scene_paper_white: # Field №11
        value: (ks__bit_field.value & 0b100000000000) != 0
  ks__enum__group_entity_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: group_entity_type
  group_entity_type_comparer:
    seq: []
    instances: {}
  ks__enum__guide_open_state_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: guide_open_state_type
  guide_open_state_type_comparer:
    seq: []
    instances: {}
  ks__enum__guide_page_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: guide_page_type
  guide_page_type_comparer:
    seq: []
    instances: {}
  ks__enum__guide_operator:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: guide_operator
  guide_operator_comparer:
    seq: []
    instances: {}
  ks__enum__guide_multi_player_mode:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: guide_multi_player_mode
  guide_multi_player_mode_comparer:
    seq: []
    instances: {}
  config_base_guide:
    seq: []
    instances: {}
  config_guide_action_register:
    seq: []
    instances: {}
  config_guide_action:
    seq:
      - id: ks__base
        type: config_base_guide
    instances: {}
  config_guide_condition_register:
    seq: []
    instances: {}
  config_guide_condition:
    seq:
      - id: ks__base
        type: config_base_guide
    instances: {}
  ks__array_of__ks__disp__config_base_guide__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__disp__config_base_guide
        repeat: expr
        repeat-expr: length.value
  ks__array_of__ks__array_of__ks__disp__config_base_guide__length_u__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__array_of__ks__disp__config_base_guide__length_u
        repeat: expr
        repeat-expr: length.value
  config_guide_task:
    seq:
      - id: ks__bit_field
        type: u1
      - id: name
        type: aux_types::string
        if: ks__has_field_name
      - id: is_freshman_guide
        type: u1
        if: ks__has_field_is_freshman_guide
      - id: predicates
        type: ks__array_of__ks__disp__config_base_guide__length_u
        if: ks__has_field_predicates
      - id: on_check
        type: ks__array_of__ks__disp__config_base_guide__length_u
        if: ks__has_field_on_check
      - id: on_guide
        type: ks__array_of__ks__disp__config_base_guide__length_u
        if: ks__has_field_on_guide
      - id: finish_condition
        type: ks__array_of__ks__array_of__ks__disp__config_base_guide__length_u__length_u
        if: ks__has_field_finish_condition
      - id: on_finish
        type: ks__array_of__ks__disp__config_base_guide__length_u
        if: ks__has_field_on_finish
      - id: on_quit
        type: ks__array_of__ks__disp__config_base_guide__length_u
        if: ks__has_field_on_quit
    instances:
      ks__has_field_name: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_is_freshman_guide: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_predicates: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_on_check: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_on_guide: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_finish_condition: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_on_finish: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_on_quit: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
  config_avatar_equip_changed_condition_register:
    seq: []
    instances: {}
  config_avatar_equip_changed_condition:
    seq:
      - id: ks__base
        type: config_guide_condition
      - id: ks__bit_field
        type: u1
      - id: config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_config_id
    instances:
      ks__has_field_config_id: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_guide_open_state_condition_register:
    seq: []
    instances: {}
  config_guide_open_state_condition:
    seq:
      - id: ks__base
        type: config_guide_condition
      - id: ks__bit_field
        type: u1
      - id: open_state
        type: ks__enum__guide_open_state_type
        if: ks__has_field_open_state
      - id: value
        type: u1
        if: ks__has_field_value
    instances:
      ks__has_field_open_state: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_value: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_guide_level_condition_register:
    seq: []
    instances: {}
  config_guide_level_condition:
    seq:
      - id: ks__base
        type: config_guide_condition
      - id: ks__bit_field
        type: u1
      - id: limit_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_limit_level
      - id: is_less
        type: u1
        if: ks__has_field_is_less
    instances:
      ks__has_field_limit_level: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_is_less: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_guide_open_ui_condition_register:
    seq: []
    instances: {}
  config_guide_open_ui_condition:
    seq:
      - id: ks__base
        type: config_guide_condition
      - id: ks__bit_field
        type: u1
      - id: context_name
        type: aux_types::string
        if: ks__has_field_context_name
      - id: enable
        type: u1
        if: ks__has_field_enable
      - id: active_list
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_active_list
      - id: page_type
        type: ks__enum__guide_page_type
        if: ks__has_field_page_type
    instances:
      ks__has_field_context_name: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_enable: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_active_list: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_page_type: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  config_guide_avatar_change_condition_register:
    seq: []
    instances: {}
  config_guide_avatar_change_condition:
    seq:
      - id: ks__base
        type: config_guide_condition
      - id: ks__bit_field
        type: u1
      - id: config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_config_id
    instances:
      ks__has_field_config_id: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_guide_can_get_personal_line_key_condition_register:
    seq: []
    instances: {}
  config_guide_can_get_personal_line_key_condition:
    seq:
      - id: ks__base
        type: config_guide_condition
      - id: ks__bit_field
        type: u1
      - id: value
        type: u1
        if: ks__has_field_value
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_guide_climate_type_condition_register:
    seq: []
    instances: {}
  config_guide_climate_type_condition:
    seq:
      - id: ks__base
        type: config_guide_condition
      - id: ks__bit_field
        type: u1
      - id: climate_type
        type: ks__enum__json_climate_type
        if: ks__has_field_climate_type
      - id: is_equal
        type: u1
        if: ks__has_field_is_equal
    instances:
      ks__has_field_climate_type: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_is_equal: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_guide_team_member_condition_register:
    seq: []
    instances: {}
  config_guide_team_member_condition:
    seq:
      - id: ks__base
        type: config_guide_condition
      - id: ks__bit_field
        type: u1
      - id: config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_config_id
      - id: has_member
        type: u1
        if: ks__has_field_has_member
    instances:
      ks__has_field_config_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_has_member: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__enum__guide_avatar_state:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: guide_avatar_state
  guide_avatar_state_comparer:
    seq: []
    instances: {}
  config_guide_avatar_state_condition_register:
    seq: []
    instances: {}
  config_guide_avatar_state_condition:
    seq:
      - id: ks__base
        type: config_guide_condition
      - id: ks__bit_field
        type: u1
      - id: state
        type: ks__enum__guide_avatar_state
        if: ks__has_field_state
    instances:
      ks__has_field_state: # Field №0
        value: (ks__bit_field & 0b1) != 0
  ks__enum__guide_button_click:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: guide_button_click
  guide_button_click_comparer:
    seq: []
    instances: {}
  ks__enum__guide_widget_special_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: guide_widget_special_type
  guide_widget_special_type_comparer:
    seq: []
    instances: {}
  config_guide_button_click_condition_register:
    seq: []
    instances: {}
  config_guide_button_click_condition:
    seq:
      - id: ks__base
        type: config_guide_condition
      - id: ks__bit_field
        type: u1
      - id: button_path
        type: aux_types::string
        if: ks__has_field_button_path
      - id: context_name
        type: aux_types::string
        if: ks__has_field_context_name
      - id: page_type
        type: ks__enum__guide_page_type
        if: ks__has_field_page_type
      - id: type
        type: ks__enum__guide_button_click
        if: ks__has_field_type
      - id: value
        type: f4
        if: ks__has_field_value
      - id: special
        type: ks__enum__guide_widget_special_type
        if: ks__has_field_special
      - id: special_index
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_special_index
    instances:
      ks__has_field_button_path: # Field №0
        value: (ks__bit_field & 0b0000001) != 0
      ks__has_field_context_name: # Field №1
        value: (ks__bit_field & 0b0000010) != 0
      ks__has_field_page_type: # Field №2
        value: (ks__bit_field & 0b0000100) != 0
      ks__has_field_type: # Field №3
        value: (ks__bit_field & 0b0001000) != 0
      ks__has_field_value: # Field №4
        value: (ks__bit_field & 0b0010000) != 0
      ks__has_field_special: # Field №5
        value: (ks__bit_field & 0b0100000) != 0
      ks__has_field_special_index: # Field №6
        value: (ks__bit_field & 0b1000000) != 0
  config_guide_tab_item_condition_register:
    seq: []
    instances: {}
  config_guide_tab_item_condition:
    seq:
      - id: ks__base
        type: config_guide_condition
      - id: ks__bit_field
        type: u1
      - id: path
        type: aux_types::string
        if: ks__has_field_path
      - id: context_name
        type: aux_types::string
        if: ks__has_field_context_name
      - id: value
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_value
      - id: page_type
        type: ks__enum__guide_page_type
        if: ks__has_field_page_type
      - id: is_select
        type: u1
        if: ks__has_field_is_select
    instances:
      ks__has_field_path: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_context_name: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_value: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_page_type: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_is_select: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  config_guide_theatre_mechanicus_building_select_condition_register:
    seq: []
    instances: {}
  config_guide_theatre_mechanicus_building_select_condition:
    seq:
      - id: ks__base
        type: config_guide_condition
      - id: ks__bit_field
        type: u1
      - id: value
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_value
      - id: is_rebuild
        type: u1
        if: ks__has_field_is_rebuild
      - id: is_select
        type: u1
        if: ks__has_field_is_select
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_is_rebuild: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_is_select: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_guide_theatre_mechanicus_info_select_condition_register:
    seq: []
    instances: {}
  config_guide_theatre_mechanicus_info_select_condition:
    seq:
      - id: ks__base
        type: config_guide_condition
      - id: ks__bit_field
        type: u1
      - id: value
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_value
      - id: is_select
        type: u1
        if: ks__has_field_is_select
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_is_select: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__enum__guide_item_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: guide_item_type
  guide_item_type_comparer:
    seq: []
    instances: {}
  config_guide_has_item_condition_register:
    seq: []
    instances: {}
  config_guide_has_item_condition:
    seq:
      - id: ks__base
        type: config_guide_condition
      - id: ks__bit_field
        type: u1
      - id: item_id_lists
        type: ks__array_of__ks__array_of__aux_types__vlq_base128_le_u__length_u__length_u
        if: ks__has_field_item_id_lists
      - id: material_type_list
        type: ks__array_of__aux_types__vlq_base128_le_s__length_u
        if: ks__has_field_material_type_list
      - id: type
        type: ks__enum__guide_item_type
        if: ks__has_field_type
      - id: not_have
        type: u1
        if: ks__has_field_not_have
      - id: value
        type: f4
        if: ks__has_field_value
    instances:
      ks__has_field_item_id_lists: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_material_type_list: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_type: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_not_have: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_value: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  ks__enum__guide_camera_action:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: guide_camera_action
  guide_camera_action_comparer:
    seq: []
    instances: {}
  config_guide_camera_condition_register:
    seq: []
    instances: {}
  config_guide_camera_condition:
    seq:
      - id: ks__base
        type: config_guide_condition
      - id: ks__bit_field
        type: u1
      - id: action
        type: ks__enum__guide_camera_action
        if: ks__has_field_action
      - id: param
        type: f4
        if: ks__has_field_param
    instances:
      ks__has_field_action: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_param: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__enum__guide_avatar_action:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: guide_avatar_action
  guide_avatar_action_comparer:
    seq: []
    instances: {}
  config_guide_avatar_action_condition_register:
    seq: []
    instances: {}
  config_guide_avatar_action_condition:
    seq:
      - id: ks__base
        type: config_guide_condition
      - id: ks__bit_field
        type: u1
      - id: action
        type: ks__enum__guide_avatar_action
        if: ks__has_field_action
    instances:
      ks__has_field_action: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_guide_delay_finish_condition_register:
    seq: []
    instances: {}
  config_guide_delay_finish_condition:
    seq:
      - id: ks__base
        type: config_guide_condition
      - id: ks__bit_field
        type: u1
      - id: delay_time
        type: f4
        if: ks__has_field_delay_time
    instances:
      ks__has_field_delay_time: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_guide_multi_single_player_condition_register:
    seq: []
    instances: {}
  config_guide_multi_single_player_condition:
    seq:
      - id: ks__base
        type: config_guide_condition
      - id: ks__bit_field
        type: u1
      - id: is_in
        type: u1
        if: ks__has_field_is_in
    instances:
      ks__has_field_is_in: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_guide_multi_player_condition_register:
    seq: []
    instances: {}
  config_guide_multi_player_condition:
    seq:
      - id: ks__base
        type: config_guide_condition
      - id: ks__bit_field
        type: u1
      - id: is_in
        type: u1
        if: ks__has_field_is_in
      - id: player_num
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_player_num
      - id: opt
        type: ks__enum__guide_operator
        if: ks__has_field_opt
      - id: mode
        type: ks__enum__guide_multi_player_mode
        if: ks__has_field_mode
    instances:
      ks__has_field_is_in: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_player_num: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_opt: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_mode: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  ks__enum__guide_has_avatar_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: guide_has_avatar_type
  guide_has_avatar_type_comparer:
    seq: []
    instances: {}
  ks__enum__guide_has_avatar_con_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: guide_has_avatar_con_type
  guide_has_avatar_con_type_comparer:
    seq: []
    instances: {}
  config_guide_has_avatar_condition_register:
    seq: []
    instances: {}
  config_guide_has_avatar_condition:
    seq:
      - id: ks__base
        type: config_guide_condition
      - id: ks__bit_field
        type: u1
      - id: type
        type: ks__enum__guide_has_avatar_type
        if: ks__has_field_type
      - id: con_type
        type: ks__enum__guide_has_avatar_con_type
        if: ks__has_field_con_type
      - id: value
        type: f4
        if: ks__has_field_value
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_con_type: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_value: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_guide_kill_monster_condition_register:
    seq: []
    instances: {}
  config_guide_kill_monster_condition:
    seq:
      - id: ks__base
        type: config_guide_condition
      - id: ks__bit_field
        type: u1
      - id: spawn_new
        type: u1
        if: ks__has_field_spawn_new
      - id: monster_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_monster_id
      - id: monster_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_monster_level
      - id: monster_pos
        type: vector
        if: ks__has_field_monster_pos
      - id: monster_yaw
        type: f4
        if: ks__has_field_monster_yaw
    instances:
      ks__has_field_spawn_new: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_monster_id: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_monster_level: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_monster_pos: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_monster_yaw: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  config_guide_check_task_finish_condition_register:
    seq: []
    instances: {}
  config_guide_check_task_finish_condition:
    seq:
      - id: ks__base
        type: config_guide_condition
      - id: ks__bit_field
        type: u1
      - id: task_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_task_id
    instances:
      ks__has_field_task_id: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_guide_check_quest_state_condition_register:
    seq: []
    instances: {}
  config_guide_check_quest_state_condition:
    seq:
      - id: ks__base
        type: config_guide_condition
      - id: ks__bit_field
        type: u1
      - id: quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_quest_id
      - id: quest_state
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_quest_state
      - id: is_equal
        type: u1
        if: ks__has_field_is_equal
    instances:
      ks__has_field_quest_id: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_quest_state: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_is_equal: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__enum__guide_navigation_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: guide_navigation_type
  guide_navigation_type_comparer:
    seq: []
    instances: {}
  ks__enum__guide_navigation_check_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: guide_navigation_check_type
  guide_navigation_check_type_comparer:
    seq: []
    instances: {}
  config_guide_navigation_condition_register:
    seq: []
    instances: {}
  config_guide_navigation_condition:
    seq:
      - id: ks__base
        type: config_guide_condition
      - id: ks__bit_field
        type: u1
      - id: navigation_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_navigation_id
      - id: navigation_type
        type: ks__enum__guide_navigation_type
        if: ks__has_field_navigation_type
      - id: check_type
        type: ks__enum__guide_navigation_check_type
        if: ks__has_field_check_type
      - id: only_check_change
        type: u1
        if: ks__has_field_only_check_change
    instances:
      ks__has_field_navigation_id: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_navigation_type: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_check_type: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_only_check_change: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  config_guide_open_paimon_navigation_condition_register:
    seq: []
    instances: {}
  config_guide_open_paimon_navigation_condition:
    seq:
      - id: ks__base
        type: config_guide_condition
    instances: {}
  ks__enum__guide_virtual_dial_action:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: guide_virtual_dial_action
  guide_virtual_dial_action_comparer:
    seq: []
    instances: {}
  config_guide_virtual_dial_action_condition_register:
    seq: []
    instances: {}
  config_guide_virtual_dial_action_condition:
    seq:
      - id: ks__base
        type: config_guide_condition
      - id: ks__bit_field
        type: u1
      - id: virtual_dial_action
        type: ks__enum__guide_virtual_dial_action
        if: ks__has_field_virtual_dial_action
    instances:
      ks__has_field_virtual_dial_action: # Field №0
        value: (ks__bit_field & 0b1) != 0
  ks__enum__guide_platform:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: guide_platform
  guide_platform_comparer:
    seq: []
    instances: {}
  config_guide_check_platform_condition_register:
    seq: []
    instances: {}
  config_guide_check_platform_condition:
    seq:
      - id: ks__base
        type: config_guide_condition
      - id: ks__bit_field
        type: u1
      - id: platform
        type: ks__enum__guide_platform
        if: ks__has_field_platform
      - id: value
        type: u1
        if: ks__has_field_value
    instances:
      ks__has_field_platform: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_value: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_guide_check_aim_condition_register:
    seq: []
    instances: {}
  config_guide_check_aim_condition:
    seq:
      - id: ks__base
        type: config_guide_condition
      - id: ks__bit_field
        type: u1
      - id: value
        type: u1
        if: ks__has_field_value
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b1) != 0
  ks__enum__guide_level_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: guide_level_type
  guide_level_type_comparer:
    seq: []
    instances: {}
  config_guide_level_type_condition_register:
    seq: []
    instances: {}
  config_guide_level_type_condition:
    seq:
      - id: ks__base
        type: config_guide_condition
      - id: ks__bit_field
        type: u1
      - id: type
        type: ks__enum__guide_level_type
        if: ks__has_field_type
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field & 0b1) != 0
  ks__enum__guide_key_click:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: guide_key_click
  guide_key_click_comparer:
    seq: []
    instances: {}
  config_guide_press_key_condition_register:
    seq: []
    instances: {}
  config_guide_press_key_condition:
    seq:
      - id: ks__base
        type: config_guide_condition
      - id: ks__bit_field
        type: u1
      - id: event_id
        type: ks__enum__input_event_type
        if: ks__has_field_event_id
      - id: end_event_id
        type: ks__enum__input_event_type
        if: ks__has_field_end_event_id
      - id: type
        type: ks__enum__guide_key_click
        if: ks__has_field_type
      - id: value
        type: f4
        if: ks__has_field_value
    instances:
      ks__has_field_event_id: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_end_event_id: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_type: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_value: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  config_guide_map_click_condition_register:
    seq: []
    instances: {}
  config_guide_map_click_condition:
    seq:
      - id: ks__base
        type: config_guide_condition
      - id: ks__bit_field
        type: u1
      - id: mark_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_mark_id
      - id: only_single_click
        type: u1
        if: ks__has_field_only_single_click
    instances:
      ks__has_field_mark_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_only_single_click: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_guide_scene_id_condition_register:
    seq: []
    instances: {}
  config_guide_scene_id_condition:
    seq:
      - id: ks__base
        type: config_guide_condition
      - id: ks__bit_field
        type: u1
      - id: scene_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scene_id
      - id: scene_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_scene_id_list
      - id: is_scene
        type: u1
        if: ks__has_field_is_scene
    instances:
      ks__has_field_scene_id: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_scene_id_list: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_is_scene: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_guide_dungeon_id_condition_register:
    seq: []
    instances: {}
  config_guide_dungeon_id_condition:
    seq:
      - id: ks__base
        type: config_guide_condition
      - id: ks__bit_field
        type: u1
      - id: dungeon_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_dungeon_id
      - id: dungeon_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_dungeon_id_list
      - id: is_dungeon
        type: u1
        if: ks__has_field_is_dungeon
    instances:
      ks__has_field_dungeon_id: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_dungeon_id_list: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_is_dungeon: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_guide_home_scene_condition_register:
    seq: []
    instances: {}
  config_guide_home_scene_condition:
    seq:
      - id: ks__base
        type: config_guide_condition
      - id: ks__bit_field
        type: u1
      - id: is_in_home_big_world
        type: u1
        if: ks__has_field_is_in_home_big_world
      - id: is_in_home_room
        type: u1
        if: ks__has_field_is_in_home_room
    instances:
      ks__has_field_is_in_home_big_world: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_is_in_home_room: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_guide_foundation_build_condition_register:
    seq: []
    instances: {}
  config_guide_foundation_build_condition:
    seq:
      - id: ks__base
        type: config_guide_condition
      - id: ks__bit_field
        type: u1
      - id: num
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_num
      - id: opt
        type: ks__enum__guide_operator
        if: ks__has_field_opt
      - id: is_build
        type: u1
        if: ks__has_field_is_build
    instances:
      ks__has_field_num: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_opt: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_is_build: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_guide_mechanicus_pick_card_condition_register:
    seq: []
    instances: {}
  config_guide_mechanicus_pick_card_condition:
    seq:
      - id: ks__base
        type: config_guide_condition
      - id: ks__bit_field
        type: u1
      - id: value
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_value
      - id: is_select
        type: u1
        if: ks__has_field_is_select
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_is_select: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_guide_mechanicus_curse_card_condition_register:
    seq: []
    instances: {}
  config_guide_mechanicus_curse_card_condition:
    seq:
      - id: ks__base
        type: config_guide_condition
      - id: ks__bit_field
        type: u1
      - id: has_curse
        type: u1
        if: ks__has_field_has_curse
    instances:
      ks__has_field_has_curse: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_guide_page_check_base_condition_register:
    seq: []
    instances: {}
  config_guide_page_check_base_condition:
    seq:
      - id: ks__base
        type: config_guide_condition
    instances: {}
  config_guide_hideand_seek_skill_category_condition_register:
    seq: []
    instances: {}
  config_guide_hideand_seek_skill_category_condition:
    seq:
      - id: ks__base
        type: config_guide_page_check_base_condition
      - id: ks__bit_field
        type: u1
      - id: index
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_index
      - id: is_select
        type: u1
        if: ks__has_field_is_select
    instances:
      ks__has_field_index: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_is_select: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_guide_anchor_unlock_condition_register:
    seq: []
    instances: {}
  config_guide_anchor_unlock_condition:
    seq:
      - id: ks__base
        type: config_guide_condition
      - id: ks__bit_field
        type: u1
      - id: point_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_point_id
      - id: unlock
        type: u1
        if: ks__has_field_unlock
    instances:
      ks__has_field_point_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_unlock: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_guide_fly_start_condition_register:
    seq: []
    instances: {}
  config_guide_fly_start_condition:
    seq:
      - id: ks__base
        type: config_guide_condition
      - id: ks__bit_field
        type: u1
      - id: height
        type: f4
        if: ks__has_field_height
    instances:
      ks__has_field_height: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_guide_fly_finish_condition_register:
    seq: []
    instances: {}
  config_guide_fly_finish_condition:
    seq:
      - id: ks__base
        type: config_guide_condition
      - id: ks__bit_field
        type: u1
      - id: time
        type: f4
        if: ks__has_field_time
    instances:
      ks__has_field_time: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_guide_fly_fail_condition_register:
    seq: []
    instances: {}
  config_guide_fly_fail_condition:
    seq:
      - id: ks__base
        type: config_guide_condition
    instances: {}
  ks__enum__button_guide_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: button_guide_type
  button_guide_type_comparer:
    seq: []
    instances: {}
  ks__enum__mask_guide_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: mask_guide_type
  mask_guide_type_comparer:
    seq: []
    instances: {}
  ks__enum__widget_info_pos:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: widget_info_pos
  widget_info_pos_comparer:
    seq: []
    instances: {}
  ks__array_of__ks__enum__input_action_type__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__enum__input_action_type
        repeat: expr
        repeat-expr: length.value
  config_input_hint:
    seq:
      - id: ks__bit_field
        type: u1
      - id: hint_info
        type: aux_types::string
        if: ks__has_field_hint_info
      - id: action_info_list
        type: ks__array_of__ks__enum__input_action_type__length_u
        if: ks__has_field_action_info_list
    instances:
      ks__has_field_hint_info: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_action_info_list: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__array_of__config_input_hint__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_input_hint
        repeat: expr
        repeat-expr: length.value
  config_guide_widget_content:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: path
        type: aux_types::string
        if: ks__has_field_path
      - id: context_name
        type: aux_types::string
        if: ks__has_field_context_name
      - id: hint_info
        type: aux_types::string
        if: ks__has_field_hint_info
      - id: widght_info
        type: aux_types::string
        if: ks__has_field_widght_info
      - id: warning_info
        type: aux_types::string
        if: ks__has_field_warning_info
      - id: white_context_list
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_white_context_list
      - id: action_info_list
        type: ks__array_of__ks__enum__input_action_type__length_u
        if: ks__has_field_action_info_list
      - id: input_hint_list
        type: ks__array_of__config_input_hint__length_u
        if: ks__has_field_input_hint_list
      - id: widght_info_pos
        type: ks__enum__widget_info_pos
        if: ks__has_field_widght_info_pos
      - id: mask_type
        type: ks__enum__mask_guide_type
        if: ks__has_field_mask_type
      - id: mask_pass_easy_touch
        type: u1
        if: ks__has_field_mask_pass_easy_touch
      - id: type
        type: ks__enum__button_guide_type
        if: ks__has_field_type
      - id: x_offset
        type: f4
        if: ks__has_field_x_offset
      - id: y_offset
        type: f4
        if: ks__has_field_y_offset
      - id: hint_offset
        type: f4
        if: ks__has_field_hint_offset
      - id: special
        type: ks__enum__guide_widget_special_type
        if: ks__has_field_special
      - id: value
        type: f4
        if: ks__has_field_value
      - id: value_str
        type: aux_types::string
        if: ks__has_field_value_str
      - id: page_type
        type: ks__enum__guide_page_type
        if: ks__has_field_page_type
      - id: mask_index
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_mask_index
      - id: keep_scale
        type: u1
        if: ks__has_field_keep_scale
    instances:
      ks__has_field_path: # Field №0
        value: (ks__bit_field.value & 0b000000000000000000001) != 0
      ks__has_field_context_name: # Field №1
        value: (ks__bit_field.value & 0b000000000000000000010) != 0
      ks__has_field_hint_info: # Field №2
        value: (ks__bit_field.value & 0b000000000000000000100) != 0
      ks__has_field_widght_info: # Field №3
        value: (ks__bit_field.value & 0b000000000000000001000) != 0
      ks__has_field_warning_info: # Field №4
        value: (ks__bit_field.value & 0b000000000000000010000) != 0
      ks__has_field_white_context_list: # Field №5
        value: (ks__bit_field.value & 0b000000000000000100000) != 0
      ks__has_field_action_info_list: # Field №6
        value: (ks__bit_field.value & 0b000000000000001000000) != 0
      ks__has_field_input_hint_list: # Field №7
        value: (ks__bit_field.value & 0b000000000000010000000) != 0
      ks__has_field_widght_info_pos: # Field №8
        value: (ks__bit_field.value & 0b000000000000100000000) != 0
      ks__has_field_mask_type: # Field №9
        value: (ks__bit_field.value & 0b000000000001000000000) != 0
      ks__has_field_mask_pass_easy_touch: # Field №10
        value: (ks__bit_field.value & 0b000000000010000000000) != 0
      ks__has_field_type: # Field №11
        value: (ks__bit_field.value & 0b000000000100000000000) != 0
      ks__has_field_x_offset: # Field №12
        value: (ks__bit_field.value & 0b000000001000000000000) != 0
      ks__has_field_y_offset: # Field №13
        value: (ks__bit_field.value & 0b000000010000000000000) != 0
      ks__has_field_hint_offset: # Field №14
        value: (ks__bit_field.value & 0b000000100000000000000) != 0
      ks__has_field_special: # Field №15
        value: (ks__bit_field.value & 0b000001000000000000000) != 0
      ks__has_field_value: # Field №16
        value: (ks__bit_field.value & 0b000010000000000000000) != 0
      ks__has_field_value_str: # Field №17
        value: (ks__bit_field.value & 0b000100000000000000000) != 0
      ks__has_field_page_type: # Field №18
        value: (ks__bit_field.value & 0b001000000000000000000) != 0
      ks__has_field_mask_index: # Field №19
        value: (ks__bit_field.value & 0b010000000000000000000) != 0
      ks__has_field_keep_scale: # Field №20
        value: (ks__bit_field.value & 0b100000000000000000000) != 0
  config_guide_context_list:
    seq:
      - id: ks__bit_field
        type: u1
      - id: main_page_black
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_main_page_black
      - id: dialog_black
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_dialog_black
      - id: global_white
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_global_white
      - id: interval_black
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_interval_black
    instances:
      ks__has_field_main_page_black: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_dialog_black: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_global_white: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_interval_black: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  ks__enum__config_guide_context_list_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: config_guide_context_list_type
  config_guide_context_list_type_comparer:
    seq: []
    instances: {}
  config_guide_ui_mask_action_register:
    seq: []
    instances: {}
  ks__array_of__config_guide_widget_content__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_guide_widget_content
        repeat: expr
        repeat-expr: length.value
  config_guide_ui_mask_action:
    seq:
      - id: ks__base
        type: config_guide_action
      - id: ks__bit_field
        type: u1
      - id: widget_list
        type: ks__array_of__config_guide_widget_content__length_u
        if: ks__has_field_widget_list
      - id: top_info
        type: aux_types::string
        if: ks__has_field_top_info
      - id: prefab_list
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_prefab_list
      - id: click_to_close
        type: u1
        if: ks__has_field_click_to_close
      - id: context_list_type
        type: ks__enum__config_guide_context_list_type
        if: ks__has_field_context_list_type
    instances:
      ks__has_field_widget_list: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_top_info: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_prefab_list: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_click_to_close: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_context_list_type: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  config_guide_show_page_register:
    seq: []
    instances: {}
  config_guide_show_page:
    seq:
      - id: ks__base
        type: config_guide_action
      - id: ks__bit_field
        type: u1
      - id: context_name
        type: aux_types::string
        if: ks__has_field_context_name
      - id: enable
        type: u1
        if: ks__has_field_enable
    instances:
      ks__has_field_context_name: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_enable: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_guide_info_dialog_action_register:
    seq: []
    instances: {}
  config_guide_info_dialog_action:
    seq:
      - id: ks__base
        type: config_guide_action
      - id: ks__bit_field
        type: u1
      - id: title
        type: aux_types::string
        if: ks__has_field_title
      - id: content
        type: aux_types::string
        if: ks__has_field_content
      - id: on_ok_actions
        type: ks__array_of__ks__disp__config_base_guide__length_u
        if: ks__has_field_on_ok_actions
      - id: on_cancel_actions
        type: ks__array_of__ks__disp__config_base_guide__length_u
        if: ks__has_field_on_cancel_actions
    instances:
      ks__has_field_title: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_content: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_on_ok_actions: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_on_cancel_actions: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  config_guide_set_open_state_action_register:
    seq: []
    instances: {}
  config_guide_set_open_state_action:
    seq:
      - id: ks__base
        type: config_guide_action
      - id: ks__bit_field
        type: u1
      - id: open_state
        type: ks__enum__guide_open_state_type
        if: ks__has_field_open_state
      - id: value
        type: u1
        if: ks__has_field_value
    instances:
      ks__has_field_open_state: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_value: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_guide_add_task_action_register:
    seq: []
    instances: {}
  config_guide_add_task_action:
    seq:
      - id: ks__base
        type: config_guide_action
      - id: ks__bit_field
        type: u1
      - id: task_name
        type: aux_types::string
        if: ks__has_field_task_name
    instances:
      ks__has_field_task_name: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_guide_end_task_action_register:
    seq: []
    instances: {}
  config_guide_end_task_action:
    seq:
      - id: ks__base
        type: config_guide_action
      - id: ks__bit_field
        type: u1
      - id: task_name
        type: aux_types::string
        if: ks__has_field_task_name
    instances:
      ks__has_field_task_name: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_guide_pause_action_register:
    seq: []
    instances: {}
  config_guide_pause_action:
    seq:
      - id: ks__base
        type: config_guide_action
    instances: {}
  config_guide_force_avatar_move_action_register:
    seq: []
    instances: {}
  config_guide_force_avatar_move_action:
    seq:
      - id: ks__base
        type: config_guide_action
      - id: ks__bit_field
        type: u1
      - id: angle
        type: f4
        if: ks__has_field_angle
      - id: mold
        type: f4
        if: ks__has_field_mold
    instances:
      ks__has_field_angle: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_mold: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_guide_camera_control_action_register:
    seq: []
    instances: {}
  config_guide_camera_control_action:
    seq:
      - id: ks__base
        type: config_guide_action
    instances: {}
  ks__enum__guide_cmd_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: guide_cmd_type
  guide_cmd_type_comparer:
    seq: []
    instances: {}
  config_guide_add_cmd_register:
    seq: []
    instances: {}
  config_guide_add_cmd:
    seq:
      - id: ks__base
        type: config_guide_action
      - id: ks__bit_field
        type: u1
      - id: cmd_type
        type: ks__enum__guide_cmd_type
        if: ks__has_field_cmd_type
      - id: para_value
        type: f4
        if: ks__has_field_para_value
    instances:
      ks__has_field_cmd_type: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_para_value: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_guide_delay_do_action_register:
    seq: []
    instances: {}
  config_guide_delay_do_action:
    seq:
      - id: ks__base
        type: config_guide_action
      - id: ks__bit_field
        type: u1
      - id: delay_time
        type: f4
        if: ks__has_field_delay_time
      - id: actions
        type: ks__array_of__ks__disp__config_base_guide__length_u
        if: ks__has_field_actions
    instances:
      ks__has_field_delay_time: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_actions: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_guide_do_action_by_predicate_register:
    seq: []
    instances: {}
  config_guide_do_action_by_predicate:
    seq:
      - id: ks__base
        type: config_guide_action
      - id: ks__bit_field
        type: u1
      - id: predicates
        type: ks__array_of__ks__array_of__ks__disp__config_base_guide__length_u__length_u
        if: ks__has_field_predicates
      - id: actions
        type: ks__array_of__ks__disp__config_base_guide__length_u
        if: ks__has_field_actions
    instances:
      ks__has_field_predicates: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_actions: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_guide_show_tutorial_action_register:
    seq: []
    instances: {}
  config_guide_show_tutorial_action:
    seq:
      - id: ks__base
        type: config_guide_action
      - id: ks__bit_field
        type: u1
      - id: tutorial_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_tutorial_id
    instances:
      ks__has_field_tutorial_id: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_guide_show_panel_action_register:
    seq: []
    instances: {}
  config_guide_show_panel_action:
    seq:
      - id: ks__base
        type: config_guide_action
      - id: ks__bit_field
        type: u1
      - id: enable
        type: u1
        if: ks__has_field_enable
    instances:
      ks__has_field_enable: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_guide_switch_input_context_action_register:
    seq: []
    instances: {}
  config_guide_switch_input_context_action:
    seq:
      - id: ks__base
        type: config_guide_action
      - id: ks__bit_field
        type: u1
      - id: input_event_list
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_input_event_list
      - id: context_event_list
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_context_event_list
      - id: input_priority_list
        type: ks__array_of__aux_types__vlq_base128_le_s__length_u
        if: ks__has_field_input_priority_list
    instances:
      ks__has_field_input_event_list: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_context_event_list: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_input_priority_list: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_guide_finish_quest_action_register:
    seq: []
    instances: {}
  config_guide_finish_quest_action:
    seq:
      - id: ks__base
        type: config_guide_action
      - id: ks__bit_field
        type: u1
      - id: quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_quest_id
    instances:
      ks__has_field_quest_id: # Field №0
        value: (ks__bit_field & 0b1) != 0
  ks__enum__persistent_furniture_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: persistent_furniture_type
  persistent_furniture_type_comparer:
    seq: []
    instances: {}
  ks__kvp_of_dict__aux_types__string_ks__array_of__aux_types__vlq_base128_le_u__length_u:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
  ks__dict_of__aux_types__string_ks__array_of__aux_types__vlq_base128_le_u__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_ks__array_of__aux_types__vlq_base128_le_u__length_u
        repeat: expr
        repeat-expr: length.value
  config_home_place_col_path:
    seq:
      - id: ks__bit_field
        type: u1
      - id: place_col_path
        type: ks__dict_of__aux_types__string_ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_place_col_path
    instances:
      ks__has_field_place_col_path: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_homeworld_furniture_default_save:
    seq:
      - id: ks__bit_field
        type: u1
      - id: furniture_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_furniture_id
      - id: spawn_pos
        type: vector
        if: ks__has_field_spawn_pos
      - id: spawn_rot
        type: vector
        if: ks__has_field_spawn_rot
      - id: parent_furniture_index
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_parent_furniture_index
    instances:
      ks__has_field_furniture_id: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_spawn_pos: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_spawn_rot: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_parent_furniture_index: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  config_homeworld_djinn_info_default_save:
    seq:
      - id: ks__bit_field
        type: u1
      - id: pos
        type: vector
        if: ks__has_field_pos
      - id: rot
        type: vector
        if: ks__has_field_rot
    instances:
      ks__has_field_pos: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_rot: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__array_of__config_homeworld_furniture_default_save__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_homeworld_furniture_default_save
        repeat: expr
        repeat-expr: length.value
  ks__array_of__config_homeworld_djinn_info_default_save__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_homeworld_djinn_info_default_save
        repeat: expr
        repeat-expr: length.value
  config_homeworld_block_default_save:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: block_id
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_block_id
      - id: persistent_furniture_list
        type: ks__array_of__config_homeworld_furniture_default_save__length_u
        if: ks__has_field_persistent_furniture_list
      - id: deploy_furniure_list
        type: ks__array_of__config_homeworld_furniture_default_save__length_u
        if: ks__has_field_deploy_furniure_list
      - id: deploy_npc_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_deploy_npc_list
      - id: furniture_suite_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_furniture_suite_list
      - id: deploy_animal_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_deploy_animal_list
      - id: is_unlocked
        type: u1
        if: ks__has_field_is_unlocked
      - id: comfort_value
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_comfort_value
      - id: weekend_djinn_info_list
        type: ks__array_of__config_homeworld_djinn_info_default_save__length_u
        if: ks__has_field_weekend_djinn_info_list
      - id: dot_pattern_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_dot_pattern_list
    instances:
      ks__has_field_block_id: # Field №0
        value: (ks__bit_field.value & 0b0000000001) != 0
      ks__has_field_persistent_furniture_list: # Field №1
        value: (ks__bit_field.value & 0b0000000010) != 0
      ks__has_field_deploy_furniure_list: # Field №2
        value: (ks__bit_field.value & 0b0000000100) != 0
      ks__has_field_deploy_npc_list: # Field №3
        value: (ks__bit_field.value & 0b0000001000) != 0
      ks__has_field_furniture_suite_list: # Field №4
        value: (ks__bit_field.value & 0b0000010000) != 0
      ks__has_field_deploy_animal_list: # Field №5
        value: (ks__bit_field.value & 0b0000100000) != 0
      ks__has_field_is_unlocked: # Field №6
        value: (ks__bit_field.value & 0b0001000000) != 0
      ks__has_field_comfort_value: # Field №7
        value: (ks__bit_field.value & 0b0010000000) != 0
      ks__has_field_weekend_djinn_info_list: # Field №8
        value: (ks__bit_field.value & 0b0100000000) != 0
      ks__has_field_dot_pattern_list: # Field №9
        value: (ks__bit_field.value & 0b1000000000) != 0
  ks__array_of__config_homeworld_block_default_save__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_homeworld_block_default_save
        repeat: expr
        repeat-expr: length.value
  config_homeworld_default_save:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: scene_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scene_id
      - id: block_arrangement_info_list
        type: ks__array_of__config_homeworld_block_default_save__length_u
        if: ks__has_field_block_arrangement_info_list
      - id: is_set_born_pos
        type: u1
        if: ks__has_field_is_set_born_pos
      - id: born_pos
        type: vector
        if: ks__has_field_born_pos
      - id: born_rot
        type: vector
        if: ks__has_field_born_rot
      - id: door_list
        type: ks__array_of__config_homeworld_furniture_default_save__length_u
        if: ks__has_field_door_list
      - id: stair_list
        type: ks__array_of__config_homeworld_furniture_default_save__length_u
        if: ks__has_field_stair_list
      - id: main_house
        type: config_homeworld_furniture_default_save
        if: ks__has_field_main_house
      - id: comfort_value
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_comfort_value
      - id: djinn_pos
        type: vector
        if: ks__has_field_djinn_pos
      - id: tmp_version
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_tmp_version
    instances:
      ks__has_field_scene_id: # Field №0
        value: (ks__bit_field.value & 0b00000000001) != 0
      ks__has_field_block_arrangement_info_list: # Field №1
        value: (ks__bit_field.value & 0b00000000010) != 0
      ks__has_field_is_set_born_pos: # Field №2
        value: (ks__bit_field.value & 0b00000000100) != 0
      ks__has_field_born_pos: # Field №3
        value: (ks__bit_field.value & 0b00000001000) != 0
      ks__has_field_born_rot: # Field №4
        value: (ks__bit_field.value & 0b00000010000) != 0
      ks__has_field_door_list: # Field №5
        value: (ks__bit_field.value & 0b00000100000) != 0
      ks__has_field_stair_list: # Field №6
        value: (ks__bit_field.value & 0b00001000000) != 0
      ks__has_field_main_house: # Field №7
        value: (ks__bit_field.value & 0b00010000000) != 0
      ks__has_field_comfort_value: # Field №8
        value: (ks__bit_field.value & 0b00100000000) != 0
      ks__has_field_djinn_pos: # Field №9
        value: (ks__bit_field.value & 0b01000000000) != 0
      ks__has_field_tmp_version: # Field №10
        value: (ks__bit_field.value & 0b10000000000) != 0
  config_homeworld_furniture_unit:
    seq:
      - id: ks__bit_field
        type: u1
      - id: furniture_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_furniture_id
      - id: position
        type: vector
        if: ks__has_field_position
      - id: rotation
        type: vector
        if: ks__has_field_rotation
      - id: parent_index
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_parent_index
    instances:
      ks__has_field_furniture_id: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_position: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_rotation: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_parent_index: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  config_homeworld_furniture_light_component:
    seq:
      - id: ks__bit_field
        type: u1
      - id: light_range
        type: f4
        if: ks__has_field_light_range
      - id: light_intensity
        type: f4
        if: ks__has_field_light_intensity
      - id: min_view_dist_ratio
        type: f4
        if: ks__has_field_min_view_dist_ratio
      - id: max_view_dist_ratio
        type: f4
        if: ks__has_field_max_view_dist_ratio
      - id: light_type
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_light_type
      - id: lightmap_bake_type
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_lightmap_bake_type
      - id: light_shading_mode
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_light_shading_mode
      - id: light_color
        type: color_vector
        if: ks__has_field_light_color
    instances:
      ks__has_field_light_range: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_light_intensity: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_min_view_dist_ratio: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_max_view_dist_ratio: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_light_type: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_lightmap_bake_type: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_light_shading_mode: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_light_color: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
  config_homeworld_furniture_enviro_component:
    seq:
      - id: ks__bit_field
        type: u1
      - id: on_day
        type: u1
        if: ks__has_field_on_day
      - id: weather_bits
        type: u1
        if: ks__has_field_weather_bits
      - id: type
        type: u1
        if: ks__has_field_type
      - id: disable_dist
        type: f4
        if: ks__has_field_disable_dist
    instances:
      ks__has_field_on_day: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_weather_bits: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_type: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_disable_dist: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  config_homeworld_furniture_light_detail:
    seq:
      - id: ks__bit_field
        type: u1
      - id: position
        type: vector
        if: ks__has_field_position
      - id: rotation
        type: vector
        if: ks__has_field_rotation
      - id: light_path
        type: aux_types::string
        if: ks__has_field_light_path
      - id: light_component
        type: config_homeworld_furniture_light_component
        if: ks__has_field_light_component
      - id: enviro_component
        type: config_homeworld_furniture_enviro_component
        if: ks__has_field_enviro_component
    instances:
      ks__has_field_position: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_rotation: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_light_path: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_light_component: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_enviro_component: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  ks__array_of__config_homeworld_furniture_light_detail__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_homeworld_furniture_light_detail
        repeat: expr
        repeat-expr: length.value
  config_homeworld_furniture_light:
    seq:
      - id: ks__bit_field
        type: u1
      - id: furniture_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_furniture_id
      - id: light_details
        type: ks__array_of__config_homeworld_furniture_light_detail__length_u
        if: ks__has_field_light_details
    instances:
      ks__has_field_furniture_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_light_details: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_homeworld_suite_npc_spawn_point:
    seq:
      - id: ks__bit_field
        type: u1
      - id: position
        type: vector
        if: ks__has_field_position
      - id: rotation
        type: vector
        if: ks__has_field_rotation
    instances:
      ks__has_field_position: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_rotation: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__array_of__config_homeworld_furniture_unit__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_homeworld_furniture_unit
        repeat: expr
        repeat-expr: length.value
  ks__array_of__config_homeworld_suite_npc_spawn_point__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_homeworld_suite_npc_spawn_point
        repeat: expr
        repeat-expr: length.value
  config_homeworld_furniture_set:
    seq:
      - id: ks__bit_field
        type: u1
      - id: radius
        type: f4
        if: ks__has_field_radius
      - id: height
        type: f4
        if: ks__has_field_height
      - id: furniture_units
        type: ks__array_of__config_homeworld_furniture_unit__length_u
        if: ks__has_field_furniture_units
      - id: npc_spawn_points
        type: ks__array_of__config_homeworld_suite_npc_spawn_point__length_u
        if: ks__has_field_npc_spawn_points
    instances:
      ks__has_field_radius: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_height: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_furniture_units: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_npc_spawn_points: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  config_home_common_pos:
    seq:
      - id: ks__bit_field
        type: u1
      - id: position
        type: vector
        if: ks__has_field_position
      - id: rotation
        type: vector
        if: ks__has_field_rotation
    instances:
      ks__has_field_position: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_rotation: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__array_of__config_home_common_pos__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_home_common_pos
        repeat: expr
        repeat-expr: length.value
  config_home_fishpond:
    seq:
      - id: ks__bit_field
        type: u1
      - id: max_fish_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_fish_count
      - id: fish_born_pos_list
        type: ks__array_of__config_home_common_pos__length_u
        if: ks__has_field_fish_born_pos_list
    instances:
      ks__has_field_max_fish_count: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_fish_born_pos_list: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__kvp_of_dict__aux_types__vlq_base128_le_u_config_home_fishpond:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_u
      - id: value
        type: config_home_fishpond
  ks__dict_of__aux_types__vlq_base128_le_u_config_home_fishpond:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_u_config_home_fishpond
        repeat: expr
        repeat-expr: length.value
  config_home_fishpond_set:
    seq:
      - id: ks__bit_field
        type: u1
      - id: fishpond_map
        type: ks__dict_of__aux_types__vlq_base128_le_u_config_home_fishpond
        if: ks__has_field_fishpond_map
    instances:
      ks__has_field_fishpond_map: # Field №0
        value: (ks__bit_field & 0b1) != 0
  ks__enum__inter_priority_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: inter_priority_type
  inter_priority_type_comparer:
    seq: []
    instances: {}
  interaction_type_comparer:
    seq: []
    instances: {}
  ks__enum__animator_param_type2:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: animator_param_type2
  animator_param_type2comparer:
    seq: []
    instances: {}
  ks__enum__dialog_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: dialog_type
  dialog_type_comparer:
    seq: []
    instances: {}
  dialog_steer_type_comparer:
    seq: []
    instances: {}
  ks__enum__story_camera_pos_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: story_camera_pos_type
  story_camera_pos_type_comparer:
    seq: []
    instances: {}
  ks__enum__story_camera_target_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: story_camera_target_type
  story_camera_target_type_comparer:
    seq: []
    instances: {}
  ks__enum__black_screen_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: black_screen_type
  black_screen_type_comparer:
    seq: []
    instances: {}
  ks__enum__emo_back_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: emo_back_type
  emo_back_type_comparer:
    seq: []
    instances: {}
  ks__enum__move_to_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: move_to_type
  move_to_type_comparer:
    seq: []
    instances: {}
  ks__enum__stand_direction:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: stand_direction
  stand_direction_comparer:
    seq: []
    instances: {}
  ks__enum__remove_actor_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: remove_actor_type
  remove_actor_type_comparer:
    seq: []
    instances: {}
  ks__enum__look_at_target_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: look_at_target_type
  look_at_target_type_comparer:
    seq: []
    instances: {}
  ks__enum__frame_face_animation_play_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: frame_face_animation_play_type
  frame_face_animation_play_type_comparer:
    seq: []
    instances: {}
  config_inter_fade:
    seq:
      - id: ks__bit_field
        type: u1
      - id: start_fade_in_duration
        type: f4
        if: ks__has_field_start_fade_in_duration
      - id: start_fade_out_duration
        type: f4
        if: ks__has_field_start_fade_out_duration
    instances:
      ks__has_field_start_fade_in_duration: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_start_fade_out_duration: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_inter_actor:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_config_id
      - id: alias
        type: aux_types::string
        if: ks__has_field_alias
      - id: visible
        type: u1
        if: ks__has_field_visible
      - id: born_point_name
        type: aux_types::string
        if: ks__has_field_born_point_name
      - id: use_relative_pos
        type: u1
        if: ks__has_field_use_relative_pos
      - id: relative_pos
        type: vector
        if: ks__has_field_relative_pos
      - id: relative_rot
        type: vector
        if: ks__has_field_relative_rot
      - id: quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_quest_id
      - id: remove_actor_type
        type: ks__enum__remove_actor_type
        if: ks__has_field_remove_actor_type
      - id: force_create_daily
        type: u1
        if: ks__has_field_force_create_daily
    instances:
      ks__has_field_config_id: # Field №0
        value: (ks__bit_field.value & 0b0000000001) != 0
      ks__has_field_alias: # Field №1
        value: (ks__bit_field.value & 0b0000000010) != 0
      ks__has_field_visible: # Field №2
        value: (ks__bit_field.value & 0b0000000100) != 0
      ks__has_field_born_point_name: # Field №3
        value: (ks__bit_field.value & 0b0000001000) != 0
      ks__has_field_use_relative_pos: # Field №4
        value: (ks__bit_field.value & 0b0000010000) != 0
      ks__has_field_relative_pos: # Field №5
        value: (ks__bit_field.value & 0b0000100000) != 0
      ks__has_field_relative_rot: # Field №6
        value: (ks__bit_field.value & 0b0001000000) != 0
      ks__has_field_quest_id: # Field №7
        value: (ks__bit_field.value & 0b0010000000) != 0
      ks__has_field_remove_actor_type: # Field №8
        value: (ks__bit_field.value & 0b0100000000) != 0
      ks__has_field_force_create_daily: # Field №9
        value: (ks__bit_field.value & 0b1000000000) != 0
  config_inter_grp_id:
    seq:
      - id: ks__bit_field
        type: u1
      - id: index
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_index
      - id: grp_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_grp_id
      - id: next_grp_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_next_grp_id
    instances:
      ks__has_field_index: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_grp_id: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_next_grp_id: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__array_of__config_inter_actor__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_inter_actor
        repeat: expr
        repeat-expr: length.value
  ks__array_of__ks__disp__config_base_inter_action__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__disp__config_base_inter_action
        repeat: expr
        repeat-expr: length.value
  ks__array_of__ks__array_of__ks__disp__config_base_inter_action__length_u__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__array_of__ks__disp__config_base_inter_action__length_u
        repeat: expr
        repeat-expr: length.value
  ks__array_of__config_inter_grp_id__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_inter_grp_id
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__aux_types__vlq_base128_le_u_ks__array_of__aux_types__vlq_base128_le_s__length_u:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_u
      - id: value
        type: ks__array_of__aux_types__vlq_base128_le_s__length_u
  ks__dict_of__aux_types__vlq_base128_le_u_ks__array_of__aux_types__vlq_base128_le_s__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_u_ks__array_of__aux_types__vlq_base128_le_s__length_u
        repeat: expr
        repeat-expr: length.value
  config_inter_container:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: lua_data_path
        type: aux_types::string
        if: ks__has_field_lua_data_path
      - id: is_simple_talk
        type: u1
        if: ks__has_field_is_simple_talk
      - id: dont_use_default_finish
        type: u1
        if: ks__has_field_dont_use_default_finish
      - id: attack_mode_recover
        type: u1
        if: ks__has_field_attack_mode_recover
      - id: pause_actor
        type: u1
        if: ks__has_field_pause_actor
      - id: hide_pickable_entity
        type: u1
        if: ks__has_field_hide_pickable_entity
      - id: start_black_keep_time
        type: f4
        if: ks__has_field_start_black_keep_time
      - id: entity_ban
        type: aux_types::string
        if: ks__has_field_entity_ban
      - id: is_key_interaction
        type: u1
        if: ks__has_field_is_key_interaction
      - id: disable_npc_lod
        type: u1
        if: ks__has_field_disable_npc_lod
      - id: start_fade
        type: config_inter_fade
        if: ks__has_field_start_fade
      - id: end_fade
        type: config_inter_fade
        if: ks__has_field_end_fade
      - id: actors
        type: ks__array_of__config_inter_actor__length_u
        if: ks__has_field_actors
      - id: group
        type: ks__array_of__ks__array_of__ks__disp__config_base_inter_action__length_u__length_u
        if: ks__has_field_group
      - id: group_id
        type: ks__array_of__config_inter_grp_id__length_u
        if: ks__has_field_group_id
      - id: free_style_dic
        type: ks__dict_of__aux_types__vlq_base128_le_u_ks__array_of__aux_types__vlq_base128_le_s__length_u
        if: ks__has_field_free_style_dic
    instances:
      ks__has_field_lua_data_path: # Field №0
        value: (ks__bit_field.value & 0b0000000000000001) != 0
      ks__has_field_is_simple_talk: # Field №1
        value: (ks__bit_field.value & 0b0000000000000010) != 0
      ks__has_field_dont_use_default_finish: # Field №2
        value: (ks__bit_field.value & 0b0000000000000100) != 0
      ks__has_field_attack_mode_recover: # Field №3
        value: (ks__bit_field.value & 0b0000000000001000) != 0
      ks__has_field_pause_actor: # Field №4
        value: (ks__bit_field.value & 0b0000000000010000) != 0
      ks__has_field_hide_pickable_entity: # Field №5
        value: (ks__bit_field.value & 0b0000000000100000) != 0
      ks__has_field_start_black_keep_time: # Field №6
        value: (ks__bit_field.value & 0b0000000001000000) != 0
      ks__has_field_entity_ban: # Field №7
        value: (ks__bit_field.value & 0b0000000010000000) != 0
      ks__has_field_is_key_interaction: # Field №8
        value: (ks__bit_field.value & 0b0000000100000000) != 0
      ks__has_field_disable_npc_lod: # Field №9
        value: (ks__bit_field.value & 0b0000001000000000) != 0
      ks__has_field_start_fade: # Field №10
        value: (ks__bit_field.value & 0b0000010000000000) != 0
      ks__has_field_end_fade: # Field №11
        value: (ks__bit_field.value & 0b0000100000000000) != 0
      ks__has_field_actors: # Field №12
        value: (ks__bit_field.value & 0b0001000000000000) != 0
      ks__has_field_group: # Field №13
        value: (ks__bit_field.value & 0b0010000000000000) != 0
      ks__has_field_group_id: # Field №14
        value: (ks__bit_field.value & 0b0100000000000000) != 0
      ks__has_field_free_style_dic: # Field №15
        value: (ks__bit_field.value & 0b1000000000000000) != 0
  config_lua_action_register:
    seq: []
    instances: {}
  config_lua_action:
    seq:
      - id: ks__base
        type: config_base_inter_action
      - id: ks__bit_field
        type: u1
      - id: invoke
        type: u1
        if: ks__has_field_invoke
      - id: invoke_alias
        type: aux_types::string
        if: ks__has_field_invoke_alias
      - id: invoke_param
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_invoke_param
    instances:
      ks__has_field_invoke: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_invoke_alias: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_invoke_param: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      type:
        value: ks__base.type
      delay_time:
        value: ks__base.delay_time
      duration:
        value: ks__base.duration
      alias_list:
        value: ks__base.alias_list
      check_next_immediately:
        value: ks__base.check_next_immediately
  config_dialog_inter_action_register:
    seq: []
    instances: {}
  config_dialog_inter_action:
    seq:
      - id: ks__base
        type: config_base_inter_action
      - id: ks__bit_field
        type: u1
      - id: dialog_type
        type: ks__enum__dialog_type
        if: ks__has_field_dialog_type
      - id: dialog_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_dialog_id
      - id: protect_time
        type: f4
        if: ks__has_field_protect_time
      - id: play_audio
        type: u1
        if: ks__has_field_play_audio
      - id: auto_talk_use_new_protect_time
        type: u1
        if: ks__has_field_auto_talk_use_new_protect_time
      - id: auto_talk_protect_time
        type: f4
        if: ks__has_field_auto_talk_protect_time
    instances:
      ks__has_field_dialog_type: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_dialog_id: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_protect_time: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_play_audio: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_auto_talk_use_new_protect_time: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_auto_talk_protect_time: # Field №5
        value: (ks__bit_field & 0b100000) != 0
      # Base class fields
      type:
        value: ks__base.type
      delay_time:
        value: ks__base.delay_time
      duration:
        value: ks__base.duration
      alias_list:
        value: ks__base.alias_list
      check_next_immediately:
        value: ks__base.check_next_immediately
  config_dialog_next_action_register:
    seq: []
    instances: {}
  config_dialog_next_action:
    seq:
      - id: ks__base
        type: config_base_inter_action
      - id: ks__bit_field
        type: u1
      - id: talk_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_talk_id
    instances:
      ks__has_field_talk_id: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      type:
        value: ks__base.type
      delay_time:
        value: ks__base.delay_time
      duration:
        value: ks__base.duration
      alias_list:
        value: ks__base.alias_list
      check_next_immediately:
        value: ks__base.check_next_immediately
  config_dialog_select_action_register:
    seq: []
    instances: {}
  config_dialog_select_action:
    seq:
      - id: ks__base
        type: config_base_inter_action
      - id: ks__bit_field
        type: u1
      - id: talk_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_talk_id_list
      - id: dialog_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_dialog_id_list
      - id: grp_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_grp_id_list
      - id: use_grp_id
        type: u1
        if: ks__has_field_use_grp_id
    instances:
      ks__has_field_talk_id_list: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_dialog_id_list: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_grp_id_list: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_use_grp_id: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      type:
        value: ks__base.type
      delay_time:
        value: ks__base.delay_time
      duration:
        value: ks__base.duration
      alias_list:
        value: ks__base.alias_list
      check_next_immediately:
        value: ks__base.check_next_immediately
  config_body_lang_inter_action_register:
    seq: []
    instances: {}
  config_steer_inter_action_register:
    seq: []
    instances: {}
  config_look_at_inter_action_register:
    seq: []
    instances: {}
  config_look_at_inter_action:
    seq:
      - id: ks__base
        type: config_base_inter_action
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: enable_head
        type: u1
        if: ks__has_field_enable_head
      - id: use_target_pos
        type: u1
        if: ks__has_field_use_target_pos
      - id: enable_absolute
        type: u1
        if: ks__has_field_enable_absolute
      - id: target_offset
        type: vector
        if: ks__has_field_target_offset
      - id: target_position
        type: vector
        if: ks__has_field_target_position
      - id: head_rotate_vec
        type: vector
        if: ks__has_field_head_rotate_vec
      - id: enable_body
        type: u1
        if: ks__has_field_enable_body
      - id: body_angle
        type: f4
        if: ks__has_field_body_angle
      - id: head_turn_time
        type: f4
        if: ks__has_field_head_turn_time
      - id: body_turn_time
        type: f4
        if: ks__has_field_body_turn_time
      - id: target_npc_alias
        type: aux_types::string
        if: ks__has_field_target_npc_alias
      - id: look_at_target_type
        type: ks__enum__look_at_target_type
        if: ks__has_field_look_at_target_type
    instances:
      ks__has_field_enable_head: # Field №0
        value: (ks__bit_field.value & 0b000000000001) != 0
      ks__has_field_use_target_pos: # Field №1
        value: (ks__bit_field.value & 0b000000000010) != 0
      ks__has_field_enable_absolute: # Field №2
        value: (ks__bit_field.value & 0b000000000100) != 0
      ks__has_field_target_offset: # Field №3
        value: (ks__bit_field.value & 0b000000001000) != 0
      ks__has_field_target_position: # Field №4
        value: (ks__bit_field.value & 0b000000010000) != 0
      ks__has_field_head_rotate_vec: # Field №5
        value: (ks__bit_field.value & 0b000000100000) != 0
      ks__has_field_enable_body: # Field №6
        value: (ks__bit_field.value & 0b000001000000) != 0
      ks__has_field_body_angle: # Field №7
        value: (ks__bit_field.value & 0b000010000000) != 0
      ks__has_field_head_turn_time: # Field №8
        value: (ks__bit_field.value & 0b000100000000) != 0
      ks__has_field_body_turn_time: # Field №9
        value: (ks__bit_field.value & 0b001000000000) != 0
      ks__has_field_target_npc_alias: # Field №10
        value: (ks__bit_field.value & 0b010000000000) != 0
      ks__has_field_look_at_target_type: # Field №11
        value: (ks__bit_field.value & 0b100000000000) != 0
      # Base class fields
      type:
        value: ks__base.type
      delay_time:
        value: ks__base.delay_time
      duration:
        value: ks__base.duration
      alias_list:
        value: ks__base.alias_list
      check_next_immediately:
        value: ks__base.check_next_immediately
  config_look_at_eye_ctrl_inter_action_register:
    seq: []
    instances: {}
  config_look_at_eye_ctrl_inter_action:
    seq:
      - id: ks__base
        type: config_base_inter_action
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: clear_all
        type: u1
        if: ks__has_field_clear_all
      - id: use_target_pos
        type: u1
        if: ks__has_field_use_target_pos
      - id: target_position
        type: vector
        if: ks__has_field_target_position
      - id: eye_rotate_vec_left
        type: vector
        if: ks__has_field_eye_rotate_vec_left
      - id: eye_rotate_vec_right
        type: vector
        if: ks__has_field_eye_rotate_vec_right
      - id: eye_scale_x
        type: f4
        if: ks__has_field_eye_scale_x
      - id: eye_scale_z
        type: f4
        if: ks__has_field_eye_scale_z
      - id: turn_time
        type: f4
        if: ks__has_field_turn_time
      - id: target_npc_alias
        type: aux_types::string
        if: ks__has_field_target_npc_alias
      - id: target_point
        type: aux_types::string
        if: ks__has_field_target_point
    instances:
      ks__has_field_clear_all: # Field №0
        value: (ks__bit_field.value & 0b0000000001) != 0
      ks__has_field_use_target_pos: # Field №1
        value: (ks__bit_field.value & 0b0000000010) != 0
      ks__has_field_target_position: # Field №2
        value: (ks__bit_field.value & 0b0000000100) != 0
      ks__has_field_eye_rotate_vec_left: # Field №3
        value: (ks__bit_field.value & 0b0000001000) != 0
      ks__has_field_eye_rotate_vec_right: # Field №4
        value: (ks__bit_field.value & 0b0000010000) != 0
      ks__has_field_eye_scale_x: # Field №5
        value: (ks__bit_field.value & 0b0000100000) != 0
      ks__has_field_eye_scale_z: # Field №6
        value: (ks__bit_field.value & 0b0001000000) != 0
      ks__has_field_turn_time: # Field №7
        value: (ks__bit_field.value & 0b0010000000) != 0
      ks__has_field_target_npc_alias: # Field №8
        value: (ks__bit_field.value & 0b0100000000) != 0
      ks__has_field_target_point: # Field №9
        value: (ks__bit_field.value & 0b1000000000) != 0
      # Base class fields
      type:
        value: ks__base.type
      delay_time:
        value: ks__base.delay_time
      duration:
        value: ks__base.duration
      alias_list:
        value: ks__base.alias_list
      check_next_immediately:
        value: ks__base.check_next_immediately
  config_camera_move_inter_action_register:
    seq: []
    instances: {}
  config_camera_move_inter_action:
    seq:
      - id: ks__base
        type: config_base_inter_action
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: camera_pos_type
        type: ks__enum__story_camera_pos_type
        if: ks__has_field_camera_pos_type
      - id: cam_pos_offset
        type: vector
        if: ks__has_field_cam_pos_offset
      - id: near_length
        type: f4
        if: ks__has_field_near_length
      - id: cam_target_type
        type: ks__enum__story_camera_target_type
        if: ks__has_field_cam_target_type
      - id: cam_forward_target_offset
        type: vector
        if: ks__has_field_cam_forward_target_offset
      - id: need_elev
        type: u1
        if: ks__has_field_need_elev
      - id: cam_fov
        type: f4
        if: ks__has_field_cam_fov
      - id: cam_dutch
        type: f4
        if: ks__has_field_cam_dutch
      - id: lerp_ratio
        type: f4
        if: ks__has_field_lerp_ratio
      - id: lerp_pattern
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_lerp_pattern
      - id: camera_blend_type
        type: ks__enum__tween_ease_type
        if: ks__has_field_camera_blend_type
      - id: story_dither
        type: u1
        if: ks__has_field_story_dither
      - id: cut_frame_trans
        type: config_frame_transition
        if: ks__has_field_cut_frame_trans
      - id: need_z_axis_rotate
        type: u1
        if: ks__has_field_need_z_axis_rotate
      - id: rotate_angle
        type: f4
        if: ks__has_field_rotate_angle
      - id: open_camera_dither
        type: u1
        if: ks__has_field_open_camera_dither
      - id: target_npc_alias
        type: aux_types::string
        if: ks__has_field_target_npc_alias
      - id: keep_camera_pos
        type: u1
        if: ks__has_field_keep_camera_pos
      - id: use_duration_when_exit_focus
        type: u1
        if: ks__has_field_use_duration_when_exit_focus
      - id: close_tree_leaf_dither
        type: u1
        if: ks__has_field_close_tree_leaf_dither
      - id: multi_target_npc_alias_array
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_multi_target_npc_alias_array
    instances:
      ks__has_field_camera_pos_type: # Field №0
        value: (ks__bit_field.value & 0b000000000000000000001) != 0
      ks__has_field_cam_pos_offset: # Field №1
        value: (ks__bit_field.value & 0b000000000000000000010) != 0
      ks__has_field_near_length: # Field №2
        value: (ks__bit_field.value & 0b000000000000000000100) != 0
      ks__has_field_cam_target_type: # Field №3
        value: (ks__bit_field.value & 0b000000000000000001000) != 0
      ks__has_field_cam_forward_target_offset: # Field №4
        value: (ks__bit_field.value & 0b000000000000000010000) != 0
      ks__has_field_need_elev: # Field №5
        value: (ks__bit_field.value & 0b000000000000000100000) != 0
      ks__has_field_cam_fov: # Field №6
        value: (ks__bit_field.value & 0b000000000000001000000) != 0
      ks__has_field_cam_dutch: # Field №7
        value: (ks__bit_field.value & 0b000000000000010000000) != 0
      ks__has_field_lerp_ratio: # Field №8
        value: (ks__bit_field.value & 0b000000000000100000000) != 0
      ks__has_field_lerp_pattern: # Field №9
        value: (ks__bit_field.value & 0b000000000001000000000) != 0
      ks__has_field_camera_blend_type: # Field №10
        value: (ks__bit_field.value & 0b000000000010000000000) != 0
      ks__has_field_story_dither: # Field №11
        value: (ks__bit_field.value & 0b000000000100000000000) != 0
      ks__has_field_cut_frame_trans: # Field №12
        value: (ks__bit_field.value & 0b000000001000000000000) != 0
      ks__has_field_need_z_axis_rotate: # Field №13
        value: (ks__bit_field.value & 0b000000010000000000000) != 0
      ks__has_field_rotate_angle: # Field №14
        value: (ks__bit_field.value & 0b000000100000000000000) != 0
      ks__has_field_open_camera_dither: # Field №15
        value: (ks__bit_field.value & 0b000001000000000000000) != 0
      ks__has_field_target_npc_alias: # Field №16
        value: (ks__bit_field.value & 0b000010000000000000000) != 0
      ks__has_field_keep_camera_pos: # Field №17
        value: (ks__bit_field.value & 0b000100000000000000000) != 0
      ks__has_field_use_duration_when_exit_focus: # Field №18
        value: (ks__bit_field.value & 0b001000000000000000000) != 0
      ks__has_field_close_tree_leaf_dither: # Field №19
        value: (ks__bit_field.value & 0b010000000000000000000) != 0
      ks__has_field_multi_target_npc_alias_array: # Field №20
        value: (ks__bit_field.value & 0b100000000000000000000) != 0
      # Base class fields
      type:
        value: ks__base.type
      delay_time:
        value: ks__base.delay_time
      duration:
        value: ks__base.duration
      alias_list:
        value: ks__base.alias_list
      check_next_immediately:
        value: ks__base.check_next_immediately
  config_cutscene_inter_action_register:
    seq: []
    instances: {}
  config_cutscene_inter_action:
    seq:
      - id: ks__base
        type: config_base_inter_action
      - id: ks__bit_field
        type: u1
      - id: cutscene_cfg
        type: ks__disp__config_base_cutscene
        if: ks__has_field_cutscene_cfg
      - id: cutscene_index
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cutscene_index
      - id: sync_load
        type: u1
        if: ks__has_field_sync_load
    instances:
      ks__has_field_cutscene_cfg: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_cutscene_index: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_sync_load: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      type:
        value: ks__base.type
      delay_time:
        value: ks__base.delay_time
      duration:
        value: ks__base.duration
      alias_list:
        value: ks__base.alias_list
      check_next_immediately:
        value: ks__base.check_next_immediately
  config_visible_inter_action_register:
    seq: []
    instances: {}
  config_visible_inter_action:
    seq:
      - id: ks__base
        type: config_base_inter_action
      - id: ks__bit_field
        type: u1
      - id: is_visible
        type: u1
        if: ks__has_field_is_visible
      - id: use_dither
        type: u1
        if: ks__has_field_use_dither
    instances:
      ks__has_field_is_visible: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_use_dither: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      type:
        value: ks__base.type
      delay_time:
        value: ks__base.delay_time
      duration:
        value: ks__base.duration
      alias_list:
        value: ks__base.alias_list
      check_next_immediately:
        value: ks__base.check_next_immediately
  config_audio_state_inter_action_register:
    seq: []
    instances: {}
  config_audio_state_inter_action:
    seq:
      - id: ks__base
        type: config_base_inter_action
      - id: ks__bit_field
        type: u1
      - id: state_group
        type: aux_types::string
        if: ks__has_field_state_group
      - id: state
        type: aux_types::string
        if: ks__has_field_state
    instances:
      ks__has_field_state_group: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_state: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      type:
        value: ks__base.type
      delay_time:
        value: ks__base.delay_time
      duration:
        value: ks__base.duration
      alias_list:
        value: ks__base.alias_list
      check_next_immediately:
        value: ks__base.check_next_immediately
  config_shop_exchange_inter_action_register:
    seq: []
    instances: {}
  config_shop_exchange_inter_action:
    seq:
      - id: ks__base
        type: config_base_inter_action
      - id: ks__bit_field
        type: u1
      - id: shop_type
        type: aux_types::string
        if: ks__has_field_shop_type
    instances:
      ks__has_field_shop_type: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      type:
        value: ks__base.type
      delay_time:
        value: ks__base.delay_time
      duration:
        value: ks__base.duration
      alias_list:
        value: ks__base.alias_list
      check_next_immediately:
        value: ks__base.check_next_immediately
  config_gadget_touch_action_register:
    seq: []
    instances: {}
  config_gadget_touch_action:
    seq:
      - id: ks__base
        type: config_base_inter_action
    instances:
      # Base class fields
      type:
        value: ks__base.type
      delay_time:
        value: ks__base.delay_time
      duration:
        value: ks__base.duration
      alias_list:
        value: ks__base.alias_list
      check_next_immediately:
        value: ks__base.check_next_immediately
  config_ui_trigger_inter_action_register:
    seq: []
    instances: {}
  config_emo_sync_inter_action_register:
    seq: []
    instances: {}
  config_emo_sync_inter_action:
    seq:
      - id: ks__base
        type: config_base_inter_action
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: data_path
        type: aux_types::string
        if: ks__has_field_data_path
      - id: phoneme_path
        type: aux_types::string
        if: ks__has_field_phoneme_path
      - id: emotion_path
        type: aux_types::string
        if: ks__has_field_emotion_path
      - id: mate_data_path
        type: aux_types::string
        if: ks__has_field_mate_data_path
      - id: mate_phoneme_path
        type: aux_types::string
        if: ks__has_field_mate_phoneme_path
      - id: mate_emotion_path
        type: aux_types::string
        if: ks__has_field_mate_emotion_path
      - id: back_type
        type: ks__enum__emo_back_type
        if: ks__has_field_back_type
      - id: enable_blink
        type: u1
        if: ks__has_field_enable_blink
      - id: data_path_hash_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_data_path_hash_list
      - id: phoneme_path_hash_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_phoneme_path_hash_list
      - id: emotion_path_hash_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_emotion_path_hash_list
      - id: mate_data_path_hash_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_mate_data_path_hash_list
      - id: mate_phoneme_path_hash_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_mate_phoneme_path_hash_list
      - id: mate_emotion_path_hash_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_mate_emotion_path_hash_list
    instances:
      ks__has_field_data_path: # Field №0
        value: (ks__bit_field.value & 0b00000000000001) != 0
      ks__has_field_phoneme_path: # Field №1
        value: (ks__bit_field.value & 0b00000000000010) != 0
      ks__has_field_emotion_path: # Field №2
        value: (ks__bit_field.value & 0b00000000000100) != 0
      ks__has_field_mate_data_path: # Field №3
        value: (ks__bit_field.value & 0b00000000001000) != 0
      ks__has_field_mate_phoneme_path: # Field №4
        value: (ks__bit_field.value & 0b00000000010000) != 0
      ks__has_field_mate_emotion_path: # Field №5
        value: (ks__bit_field.value & 0b00000000100000) != 0
      ks__has_field_back_type: # Field №6
        value: (ks__bit_field.value & 0b00000001000000) != 0
      ks__has_field_enable_blink: # Field №7
        value: (ks__bit_field.value & 0b00000010000000) != 0
      ks__has_field_data_path_hash_list: # Field №8
        value: (ks__bit_field.value & 0b00000100000000) != 0
      ks__has_field_phoneme_path_hash_list: # Field №9
        value: (ks__bit_field.value & 0b00001000000000) != 0
      ks__has_field_emotion_path_hash_list: # Field №10
        value: (ks__bit_field.value & 0b00010000000000) != 0
      ks__has_field_mate_data_path_hash_list: # Field №11
        value: (ks__bit_field.value & 0b00100000000000) != 0
      ks__has_field_mate_phoneme_path_hash_list: # Field №12
        value: (ks__bit_field.value & 0b01000000000000) != 0
      ks__has_field_mate_emotion_path_hash_list: # Field №13
        value: (ks__bit_field.value & 0b10000000000000) != 0
      # Base class fields
      type:
        value: ks__base.type
      delay_time:
        value: ks__base.delay_time
      duration:
        value: ks__base.duration
      alias_list:
        value: ks__base.alias_list
      check_next_immediately:
        value: ks__base.check_next_immediately
  config_emotion_inter_action_register:
    seq: []
    instances: {}
  config_black_screen_action_register:
    seq: []
    instances: {}
  config_black_screen_action:
    seq:
      - id: ks__base
        type: config_base_inter_action
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: black_screen_type
        type: ks__enum__black_screen_type
        if: ks__has_field_black_screen_type
      - id: duration_to_black
        type: f4
        if: ks__has_field_duration_to_black
      - id: duration_keep_black
        type: f4
        if: ks__has_field_duration_keep_black
      - id: duration_from_black
        type: f4
        if: ks__has_field_duration_from_black
      - id: change_to_intee_pos
        type: u1
        if: ks__has_field_change_to_intee_pos
      - id: intee_pos
        type: aux_types::string
        if: ks__has_field_intee_pos
      - id: text_map_id
        type: aux_types::string
        if: ks__has_field_text_map_id
      - id: text_shake
        type: u1
        if: ks__has_field_text_shake
      - id: use_white_screen
        type: u1
        if: ks__has_field_use_white_screen
      - id: use_text_fade
        type: u1
        if: ks__has_field_use_text_fade
    instances:
      ks__has_field_black_screen_type: # Field №0
        value: (ks__bit_field.value & 0b0000000001) != 0
      ks__has_field_duration_to_black: # Field №1
        value: (ks__bit_field.value & 0b0000000010) != 0
      ks__has_field_duration_keep_black: # Field №2
        value: (ks__bit_field.value & 0b0000000100) != 0
      ks__has_field_duration_from_black: # Field №3
        value: (ks__bit_field.value & 0b0000001000) != 0
      ks__has_field_change_to_intee_pos: # Field №4
        value: (ks__bit_field.value & 0b0000010000) != 0
      ks__has_field_intee_pos: # Field №5
        value: (ks__bit_field.value & 0b0000100000) != 0
      ks__has_field_text_map_id: # Field №6
        value: (ks__bit_field.value & 0b0001000000) != 0
      ks__has_field_text_shake: # Field №7
        value: (ks__bit_field.value & 0b0010000000) != 0
      ks__has_field_use_white_screen: # Field №8
        value: (ks__bit_field.value & 0b0100000000) != 0
      ks__has_field_use_text_fade: # Field №9
        value: (ks__bit_field.value & 0b1000000000) != 0
      # Base class fields
      type:
        value: ks__base.type
      delay_time:
        value: ks__base.delay_time
      duration:
        value: ks__base.duration
      alias_list:
        value: ks__base.alias_list
      check_next_immediately:
        value: ks__base.check_next_immediately
  config_camera_shake_action_register:
    seq: []
    instances: {}
  config_camera_shake_action:
    seq:
      - id: ks__base
        type: config_base_inter_action
      - id: ks__bit_field
        type: u1
      - id: shake_range
        type: f4
        if: ks__has_field_shake_range
      - id: shake_time
        type: f4
        if: ks__has_field_shake_time
      - id: shake_dinstance
        type: f4
        if: ks__has_field_shake_dinstance
      - id: shake_dir
        type: vector
        if: ks__has_field_shake_dir
    instances:
      ks__has_field_shake_range: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_shake_time: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_shake_dinstance: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_shake_dir: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      type:
        value: ks__base.type
      delay_time:
        value: ks__base.delay_time
      duration:
        value: ks__base.duration
      alias_list:
        value: ks__base.alias_list
      check_next_immediately:
        value: ks__base.check_next_immediately
  config_show_message_action_register:
    seq: []
    instances: {}
  config_show_message_action:
    seq:
      - id: ks__base
        type: config_base_inter_action
      - id: ks__bit_field
        type: u1
      - id: txt_map_str
        type: aux_types::string
        if: ks__has_field_txt_map_str
    instances:
      ks__has_field_txt_map_str: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      type:
        value: ks__base.type
      delay_time:
        value: ks__base.delay_time
      duration:
        value: ks__base.duration
      alias_list:
        value: ks__base.alias_list
      check_next_immediately:
        value: ks__base.check_next_immediately
  config_audio_play_action_register:
    seq: []
    instances: {}
  config_audio_play_action:
    seq:
      - id: ks__base
        type: config_base_inter_action
      - id: ks__bit_field
        type: u1
      - id: audio_event_str
        type: aux_types::string
        if: ks__has_field_audio_event_str
    instances:
      ks__has_field_audio_event_str: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      type:
        value: ks__base.type
      delay_time:
        value: ks__base.delay_time
      duration:
        value: ks__base.duration
      alias_list:
        value: ks__base.alias_list
      check_next_immediately:
        value: ks__base.check_next_immediately
  config_video_play_action_register:
    seq: []
    instances: {}
  config_video_play_action:
    seq:
      - id: ks__base
        type: config_base_inter_action
      - id: ks__bit_field
        type: u1
      - id: video_name
        type: aux_types::string
        if: ks__has_field_video_name
      - id: subtitle_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_subtitle_id
      - id: can_skip
        type: u1
        if: ks__has_field_can_skip
      - id: bg_color
        type: color_vector
        if: ks__has_field_bg_color
      - id: fade_in_time
        type: f4
        if: ks__has_field_fade_in_time
      - id: fade_out_time
        type: f4
        if: ks__has_field_fade_out_time
    instances:
      ks__has_field_video_name: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_subtitle_id: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_can_skip: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_bg_color: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_fade_in_time: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_fade_out_time: # Field №5
        value: (ks__bit_field & 0b100000) != 0
      # Base class fields
      type:
        value: ks__base.type
      delay_time:
        value: ks__base.delay_time
      duration:
        value: ks__base.duration
      alias_list:
        value: ks__base.alias_list
      check_next_immediately:
        value: ks__base.check_next_immediately
  config_first_sight_action_register:
    seq: []
    instances: {}
  config_first_sight_action:
    seq:
      - id: ks__base
        type: config_base_inter_action
    instances:
      # Base class fields
      type:
        value: ks__base.type
      delay_time:
        value: ks__base.delay_time
      duration:
        value: ks__base.duration
      alias_list:
        value: ks__base.alias_list
      check_next_immediately:
        value: ks__base.check_next_immediately
  config_camera_dof_action_register:
    seq: []
    instances: {}
  config_camera_dof_action:
    seq:
      - id: ks__base
        type: config_base_inter_action
      - id: ks__bit_field
        type: u1
      - id: enabled
        type: u1
        if: ks__has_field_enabled
      - id: focus_distance
        type: f4
        if: ks__has_field_focus_distance
      - id: focus_range
        type: f4
        if: ks__has_field_focus_range
      - id: near_focal_distance
        type: f4
        if: ks__has_field_near_focal_distance
      - id: near_focal_trans_distance
        type: f4
        if: ks__has_field_near_focal_trans_distance
      - id: dof_blur_amount
        type: f4
        if: ks__has_field_dof_blur_amount
      - id: quality
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_quality
    instances:
      ks__has_field_enabled: # Field №0
        value: (ks__bit_field & 0b0000001) != 0
      ks__has_field_focus_distance: # Field №1
        value: (ks__bit_field & 0b0000010) != 0
      ks__has_field_focus_range: # Field №2
        value: (ks__bit_field & 0b0000100) != 0
      ks__has_field_near_focal_distance: # Field №3
        value: (ks__bit_field & 0b0001000) != 0
      ks__has_field_near_focal_trans_distance: # Field №4
        value: (ks__bit_field & 0b0010000) != 0
      ks__has_field_dof_blur_amount: # Field №5
        value: (ks__bit_field & 0b0100000) != 0
      ks__has_field_quality: # Field №6
        value: (ks__bit_field & 0b1000000) != 0
      # Base class fields
      type:
        value: ks__base.type
      delay_time:
        value: ks__base.delay_time
      duration:
        value: ks__base.duration
      alias_list:
        value: ks__base.alias_list
      check_next_immediately:
        value: ks__base.check_next_immediately
  config_move_to_action_register:
    seq: []
    instances: {}
  config_move_to_action:
    seq:
      - id: ks__base
        type: config_base_inter_action
      - id: ks__bit_field
        type: u1
      - id: move_type
        type: ks__enum__move_to_type
        if: ks__has_field_move_type
      - id: route_list
        type: ks__array_of__vector__length_u
        if: ks__has_field_route_list
      - id: exactly_move
        type: u1
        if: ks__has_field_exactly_move
    instances:
      ks__has_field_move_type: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_route_list: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_exactly_move: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      type:
        value: ks__base.type
      delay_time:
        value: ks__base.delay_time
      duration:
        value: ks__base.duration
      alias_list:
        value: ks__base.alias_list
      check_next_immediately:
        value: ks__base.check_next_immediately
  config_request_msg_action_register:
    seq: []
    instances: {}
  config_request_msg_action:
    seq:
      - id: ks__base
        type: config_base_inter_action
      - id: ks__bit_field
        type: u1
      - id: msg_name
        type: aux_types::string
        if: ks__has_field_msg_name
    instances:
      ks__has_field_msg_name: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      type:
        value: ks__base.type
      delay_time:
        value: ks__base.delay_time
      duration:
        value: ks__base.duration
      alias_list:
        value: ks__base.alias_list
      check_next_immediately:
        value: ks__base.check_next_immediately
  config_emoji_bubble_action_register:
    seq: []
    instances: {}
  config_emoji_bubble_action:
    seq:
      - id: ks__base
        type: config_base_inter_action
      - id: ks__bit_field
        type: u1
      - id: pattarn_name
        type: aux_types::string
        if: ks__has_field_pattarn_name
      - id: try_stop
        type: u1
        if: ks__has_field_try_stop
    instances:
      ks__has_field_pattarn_name: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_try_stop: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      type:
        value: ks__base.type
      delay_time:
        value: ks__base.delay_time
      duration:
        value: ks__base.duration
      alias_list:
        value: ks__base.alias_list
      check_next_immediately:
        value: ks__base.check_next_immediately
  config_time_protect_action_register:
    seq: []
    instances: {}
  config_time_protect_action:
    seq:
      - id: ks__base
        type: config_base_inter_action
    instances:
      # Base class fields
      type:
        value: ks__base.type
      delay_time:
        value: ks__base.delay_time
      duration:
        value: ks__base.duration
      alias_list:
        value: ks__base.alias_list
      check_next_immediately:
        value: ks__base.check_next_immediately
  config_simple_black_screen_action_register:
    seq: []
    instances: {}
  config_simple_black_screen_action:
    seq:
      - id: ks__base
        type: config_base_inter_action
      - id: ks__bit_field
        type: u1
      - id: duration_to_black
        type: f4
        if: ks__has_field_duration_to_black
      - id: duration_keep_black
        type: f4
        if: ks__has_field_duration_keep_black
      - id: duration_from_black
        type: f4
        if: ks__has_field_duration_from_black
      - id: text_map_id
        type: aux_types::string
        if: ks__has_field_text_map_id
      - id: use_white_screen
        type: u1
        if: ks__has_field_use_white_screen
      - id: use_text_fade
        type: u1
        if: ks__has_field_use_text_fade
    instances:
      ks__has_field_duration_to_black: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_duration_keep_black: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_duration_from_black: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_text_map_id: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_use_white_screen: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_use_text_fade: # Field №5
        value: (ks__bit_field & 0b100000) != 0
      # Base class fields
      type:
        value: ks__base.type
      delay_time:
        value: ks__base.delay_time
      duration:
        value: ks__base.duration
      alias_list:
        value: ks__base.alias_list
      check_next_immediately:
        value: ks__base.check_next_immediately
  config_simple_ui_show_inter_action_register:
    seq: []
    instances: {}
  config_simple_ui_show_inter_action:
    seq:
      - id: ks__base
        type: config_base_inter_action
      - id: ks__bit_field
        type: u1
      - id: context_name
        type: aux_types::string
        if: ks__has_field_context_name
      - id: is_close
        type: u1
        if: ks__has_field_is_close
      - id: param
        type: aux_types::string
        if: ks__has_field_param
      - id: multi_param
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_multi_param
    instances:
      ks__has_field_context_name: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_is_close: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_param: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_multi_param: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      type:
        value: ks__base.type
      delay_time:
        value: ks__base.delay_time
      duration:
        value: ks__base.duration
      alias_list:
        value: ks__base.alias_list
      check_next_immediately:
        value: ks__base.check_next_immediately
  config_open_blossom_mark_inter_action_register:
    seq: []
    instances: {}
  config_open_blossom_mark_inter_action:
    seq:
      - id: ks__base
        type: config_base_inter_action
      - id: ks__bit_field
        type: u1
      - id: open_all
        type: u1
        if: ks__has_field_open_all
    instances:
      ks__has_field_open_all: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      type:
        value: ks__base.type
      delay_time:
        value: ks__base.delay_time
      duration:
        value: ks__base.duration
      alias_list:
        value: ks__base.alias_list
      check_next_immediately:
        value: ks__base.check_next_immediately
  config_speech_bubble_action_register:
    seq: []
    instances: {}
  config_speech_bubble_action:
    seq:
      - id: ks__base
        type: config_base_inter_action
      - id: ks__bit_field
        type: u1
      - id: dialog_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_dialog_id
      - id: priority
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_priority
      - id: hold_on
        type: u1
        if: ks__has_field_hold_on
      - id: try_stop
        type: u1
        if: ks__has_field_try_stop
    instances:
      ks__has_field_dialog_id: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_priority: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_hold_on: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_try_stop: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      type:
        value: ks__base.type
      delay_time:
        value: ks__base.delay_time
      duration:
        value: ks__base.duration
      alias_list:
        value: ks__base.alias_list
      check_next_immediately:
        value: ks__base.check_next_immediately
  config_emotion_template_action_register:
    seq: []
    instances: {}
  config_emotion_template_action:
    seq:
      - id: ks__base
        type: config_base_inter_action
      - id: ks__bit_field
        type: u1
      - id: emo_template_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_emo_template_id
    instances:
      ks__has_field_emo_template_id: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      type:
        value: ks__base.type
      delay_time:
        value: ks__base.delay_time
      duration:
        value: ks__base.duration
      alias_list:
        value: ks__base.alias_list
      check_next_immediately:
        value: ks__base.check_next_immediately
  config_sit_or_stand_action_register:
    seq: []
    instances: {}
  config_sit_or_stand_action:
    seq:
      - id: ks__base
        type: config_base_inter_action
      - id: ks__bit_field
        type: u1
      - id: is_sit
        type: u1
        if: ks__has_field_is_sit
      - id: stand_direction
        type: ks__enum__stand_direction
        if: ks__has_field_stand_direction
    instances:
      ks__has_field_is_sit: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_stand_direction: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      type:
        value: ks__base.type
      delay_time:
        value: ks__base.delay_time
      duration:
        value: ks__base.duration
      alias_list:
        value: ks__base.alias_list
      check_next_immediately:
        value: ks__base.check_next_immediately
  config_play_effect_action_register:
    seq: []
    instances: {}
  config_play_effect_action:
    seq:
      - id: ks__base
        type: config_base_inter_action
      - id: ks__bit_field
        type: u1
      - id: effect_index
        type: aux_types::string
        if: ks__has_field_effect_index
      - id: pattern_name
        type: aux_types::string
        if: ks__has_field_pattern_name
      - id: pos
        type: vector
        if: ks__has_field_pos
      - id: euler
        type: vector
        if: ks__has_field_euler
      - id: scale
        type: vector
        if: ks__has_field_scale
      - id: is_loop
        type: u1
        if: ks__has_field_is_loop
      - id: attach_to_entity
        type: u1
        if: ks__has_field_attach_to_entity
      - id: is_remove
        type: u1
        if: ks__has_field_is_remove
    instances:
      ks__has_field_effect_index: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_pattern_name: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_pos: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_euler: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_scale: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_is_loop: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_attach_to_entity: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_is_remove: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
      # Base class fields
      type:
        value: ks__base.type
      delay_time:
        value: ks__base.delay_time
      duration:
        value: ks__base.duration
      alias_list:
        value: ks__base.alias_list
      check_next_immediately:
        value: ks__base.check_next_immediately
  config_teleport_to_action_register:
    seq: []
    instances: {}
  config_teleport_to_action:
    seq:
      - id: ks__base
        type: config_base_inter_action
      - id: ks__bit_field
        type: u1
      - id: position
        type: vector
        if: ks__has_field_position
      - id: forward
        type: vector
        if: ks__has_field_forward
    instances:
      ks__has_field_position: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_forward: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      type:
        value: ks__base.type
      delay_time:
        value: ks__base.delay_time
      duration:
        value: ks__base.duration
      alias_list:
        value: ks__base.alias_list
      check_next_immediately:
        value: ks__base.check_next_immediately
  config_set_animator_action_register:
    seq: []
    instances: {}
  config_set_animator_action:
    seq:
      - id: ks__base
        type: config_base_inter_action
      - id: ks__bit_field
        type: u1
      - id: param_type
        type: ks__enum__animator_param_type2
        if: ks__has_field_param_type
      - id: param_name
        type: aux_types::string
        if: ks__has_field_param_name
      - id: int_value
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_int_value
      - id: float_value
        type: f4
        if: ks__has_field_float_value
      - id: bool_value
        type: u1
        if: ks__has_field_bool_value
    instances:
      ks__has_field_param_type: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_param_name: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_int_value: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_float_value: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_bool_value: # Field №4
        value: (ks__bit_field & 0b10000) != 0
      # Base class fields
      type:
        value: ks__base.type
      delay_time:
        value: ks__base.delay_time
      duration:
        value: ks__base.duration
      alias_list:
        value: ks__base.alias_list
      check_next_immediately:
        value: ks__base.check_next_immediately
  config_play_post_effect_action_register:
    seq: []
    instances: {}
  config_play_post_effect_action:
    seq:
      - id: ks__base
        type: config_base_inter_action
      - id: ks__bit_field
        type: u1
      - id: asset_name
        type: aux_types::string
        if: ks__has_field_asset_name
      - id: is_remove
        type: u1
        if: ks__has_field_is_remove
    instances:
      ks__has_field_asset_name: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_is_remove: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      type:
        value: ks__base.type
      delay_time:
        value: ks__base.delay_time
      duration:
        value: ks__base.duration
      alias_list:
        value: ks__base.alias_list
      check_next_immediately:
        value: ks__base.check_next_immediately
  config_play_frame_face_animation_action_register:
    seq: []
    instances: {}
  config_play_frame_face_animation_action:
    seq:
      - id: ks__base
        type: config_base_inter_action
      - id: ks__bit_field
        type: u1
      - id: animation
        type: aux_types::string
        if: ks__has_field_animation
      - id: mode
        type: ks__enum__frame_face_animation_play_type
        if: ks__has_field_mode
    instances:
      ks__has_field_animation: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_mode: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      type:
        value: ks__base.type
      delay_time:
        value: ks__base.delay_time
      duration:
        value: ks__base.duration
      alias_list:
        value: ks__base.alias_list
      check_next_immediately:
        value: ks__base.check_next_immediately
  config_hide_widget_pet_register:
    seq: []
    instances: {}
  config_hide_widget_pet:
    seq:
      - id: ks__base
        type: config_base_inter_action
      - id: ks__bit_field
        type: u1
      - id: is_hide
        type: u1
        if: ks__has_field_is_hide
    instances:
      ks__has_field_is_hide: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      type:
        value: ks__base.type
      delay_time:
        value: ks__base.delay_time
      duration:
        value: ks__base.duration
      alias_list:
        value: ks__base.alias_list
      check_next_immediately:
        value: ks__base.check_next_immediately
  config_local_gadget_op_register:
    seq: []
    instances: {}
  config_local_gadget_op:
    seq:
      - id: ks__base
        type: config_base_inter_action
      - id: ks__bit_field
        type: u1
      - id: gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gadget_id
      - id: sub_key
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sub_key
      - id: opr_code
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_opr_code
      - id: position
        type: vector
        if: ks__has_field_position
      - id: euler
        type: vector
        if: ks__has_field_euler
      - id: gv_key
        type: aux_types::string
        if: ks__has_field_gv_key
      - id: gv_value
        type: f4
        if: ks__has_field_gv_value
    instances:
      ks__has_field_gadget_id: # Field №0
        value: (ks__bit_field & 0b0000001) != 0
      ks__has_field_sub_key: # Field №1
        value: (ks__bit_field & 0b0000010) != 0
      ks__has_field_opr_code: # Field №2
        value: (ks__bit_field & 0b0000100) != 0
      ks__has_field_position: # Field №3
        value: (ks__bit_field & 0b0001000) != 0
      ks__has_field_euler: # Field №4
        value: (ks__bit_field & 0b0010000) != 0
      ks__has_field_gv_key: # Field №5
        value: (ks__bit_field & 0b0100000) != 0
      ks__has_field_gv_value: # Field №6
        value: (ks__bit_field & 0b1000000) != 0
      # Base class fields
      type:
        value: ks__base.type
      delay_time:
        value: ks__base.delay_time
      duration:
        value: ks__base.duration
      alias_list:
        value: ks__base.alias_list
      check_next_immediately:
        value: ks__base.check_next_immediately
  config_lc_base_intee:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: trigger_shape_in
        type: aux_types::string
        if: ks__has_field_trigger_shape_in
      - id: trigger_shape_in_height
        type: f4
        if: ks__has_field_trigger_shape_in_height
      - id: trigger_shape_out
        type: aux_types::string
        if: ks__has_field_trigger_shape_out
      - id: trigger_shape_out_height
        type: f4
        if: ks__has_field_trigger_shape_out_height
      - id: trigger_shape_in_offset
        type: vector
        if: ks__has_field_trigger_shape_in_offset
      - id: trigger_shape_out_offset
        type: vector
        if: ks__has_field_trigger_shape_out_offset
      - id: trigger_shape_free_interaction
        type: aux_types::string
        if: ks__has_field_trigger_shape_free_interaction
      - id: trigger_shape_free_interaction_height
        type: f4
        if: ks__has_field_trigger_shape_free_interaction_height
      - id: trigger_shape_free_interaction_offset
        type: vector
        if: ks__has_field_trigger_shape_free_interaction_offset
    instances:
      ks__has_field_trigger_shape_in: # Field №0
        value: (ks__bit_field.value & 0b000000001) != 0
      ks__has_field_trigger_shape_in_height: # Field №1
        value: (ks__bit_field.value & 0b000000010) != 0
      ks__has_field_trigger_shape_out: # Field №2
        value: (ks__bit_field.value & 0b000000100) != 0
      ks__has_field_trigger_shape_out_height: # Field №3
        value: (ks__bit_field.value & 0b000001000) != 0
      ks__has_field_trigger_shape_in_offset: # Field №4
        value: (ks__bit_field.value & 0b000010000) != 0
      ks__has_field_trigger_shape_out_offset: # Field №5
        value: (ks__bit_field.value & 0b000100000) != 0
      ks__has_field_trigger_shape_free_interaction: # Field №6
        value: (ks__bit_field.value & 0b001000000) != 0
      ks__has_field_trigger_shape_free_interaction_height: # Field №7
        value: (ks__bit_field.value & 0b010000000) != 0
      ks__has_field_trigger_shape_free_interaction_offset: # Field №8
        value: (ks__bit_field.value & 0b100000000) != 0
  ks__kvp_of_dict__aux_types__string_ks__disp__config_lc_base_intee:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: ks__disp__config_lc_base_intee
  ks__dict_of__aux_types__string_ks__disp__config_lc_base_intee:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_ks__disp__config_lc_base_intee
        repeat: expr
        repeat-expr: length.value
  config_lc_base_intee_data:
    seq:
      - id: ks__bit_field
        type: u1
      - id: config_dic
        type: ks__dict_of__aux_types__string_ks__disp__config_lc_base_intee
        if: ks__has_field_config_dic
    instances:
      ks__has_field_config_dic: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_lc_gadget_intee_register:
    seq: []
    instances: {}
  config_lc_gadget_intee:
    seq:
      - id: ks__base
        type: config_lc_base_intee
    instances:
      # Base class fields
      trigger_shape_in:
        value: ks__base.trigger_shape_in
      trigger_shape_in_height:
        value: ks__base.trigger_shape_in_height
      trigger_shape_out:
        value: ks__base.trigger_shape_out
      trigger_shape_out_height:
        value: ks__base.trigger_shape_out_height
      trigger_shape_in_offset:
        value: ks__base.trigger_shape_in_offset
      trigger_shape_out_offset:
        value: ks__base.trigger_shape_out_offset
      trigger_shape_free_interaction:
        value: ks__base.trigger_shape_free_interaction
      trigger_shape_free_interaction_height:
        value: ks__base.trigger_shape_free_interaction_height
      trigger_shape_free_interaction_offset:
        value: ks__base.trigger_shape_free_interaction_offset
  ks__kvp_of_dict__aux_types__string_config_lc_gadget_intee:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: config_lc_gadget_intee
  ks__dict_of__aux_types__string_config_lc_gadget_intee:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_config_lc_gadget_intee
        repeat: expr
        repeat-expr: length.value
  config_lc_gadget_intee_data:
    seq:
      - id: ks__bit_field
        type: u1
      - id: config_dic
        type: ks__dict_of__aux_types__string_config_lc_gadget_intee
        if: ks__has_field_config_dic
    instances:
      ks__has_field_config_dic: # Field №0
        value: (ks__bit_field & 0b1) != 0
  ks__enum__keyboard_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: keyboard_type
  keyboard_type_comparer:
    seq: []
    instances: {}
  ks__enum__input_action_group_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: input_action_group_type
  input_action_group_type_comparer:
    seq: []
    instances: {}
  ks__enum__config_key_code:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: config_key_code
  ks__kvp_of_dict__ks__enum__config_key_code_aux_types__string:
    seq:
      - id: key
        type: ks__enum__config_key_code
      - id: value
        type: aux_types::string
  ks__dict_of__ks__enum__config_key_code_aux_types__string:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__ks__enum__config_key_code_aux_types__string
        repeat: expr
        repeat-expr: length.value
  config_keyboard_layout_item:
    seq:
      - id: ks__bit_field
        type: u1
      - id: key_code_friendly_name
        type: ks__dict_of__ks__enum__config_key_code_aux_types__string
        if: ks__has_field_key_code_friendly_name
    instances:
      ks__has_field_key_code_friendly_name: # Field №0
        value: (ks__bit_field & 0b1) != 0
  ks__kvp_of_dict__ks__enum__keyboard_type_config_keyboard_layout_item:
    seq:
      - id: key
        type: ks__enum__keyboard_type
      - id: value
        type: config_keyboard_layout_item
  ks__dict_of__ks__enum__keyboard_type_config_keyboard_layout_item:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__ks__enum__keyboard_type_config_keyboard_layout_item
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__ks__enum__input_action_group_type_ks__array_of__ks__enum__input_action_type__length_u:
    seq:
      - id: key
        type: ks__enum__input_action_group_type
      - id: value
        type: ks__array_of__ks__enum__input_action_type__length_u
  ks__dict_of__ks__enum__input_action_group_type_ks__array_of__ks__enum__input_action_type__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__ks__enum__input_action_group_type_ks__array_of__ks__enum__input_action_type__length_u
        repeat: expr
        repeat-expr: length.value
  config_keyboard_layout:
    seq:
      - id: ks__bit_field
        type: u1
      - id: config_keyboard_layouts
        type: ks__dict_of__ks__enum__keyboard_type_config_keyboard_layout_item
        if: ks__has_field_config_keyboard_layouts
      - id: input_action_type_groups
        type: ks__dict_of__ks__enum__input_action_group_type_ks__array_of__ks__enum__input_action_type__length_u
        if: ks__has_field_input_action_type_groups
    instances:
      ks__has_field_config_keyboard_layouts: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_input_action_type_groups: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_key_code_comparer:
    seq: []
    instances: {}
  text_language_type_comparer:
    seq: []
    instances: {}
  voice_language_type_comparer:
    seq: []
    instances: {}
  config_action_point:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: local_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_local_id
      - id: type
        type: ks__enum__action_point_type
        if: ks__has_field_type
      - id: pos
        type: vector
        if: ks__has_field_pos
      - id: rot
        type: vector
        if: ks__has_field_rot
      - id: capacity
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_capacity
      - id: act_zone_inner_radius
        type: f4
        if: ks__has_field_act_zone_inner_radius
      - id: act_zone_outer_radius
        type: f4
        if: ks__has_field_act_zone_outer_radius
      - id: freestyle
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_freestyle
      - id: face_center
        type: u1
        if: ks__has_field_face_center
    instances:
      ks__has_field_local_id: # Field №0
        value: (ks__bit_field.value & 0b000000001) != 0
      ks__has_field_type: # Field №1
        value: (ks__bit_field.value & 0b000000010) != 0
      ks__has_field_pos: # Field №2
        value: (ks__bit_field.value & 0b000000100) != 0
      ks__has_field_rot: # Field №3
        value: (ks__bit_field.value & 0b000001000) != 0
      ks__has_field_capacity: # Field №4
        value: (ks__bit_field.value & 0b000010000) != 0
      ks__has_field_act_zone_inner_radius: # Field №5
        value: (ks__bit_field.value & 0b000100000) != 0
      ks__has_field_act_zone_outer_radius: # Field №6
        value: (ks__bit_field.value & 0b001000000) != 0
      ks__has_field_freestyle: # Field №7
        value: (ks__bit_field.value & 0b010000000) != 0
      ks__has_field_face_center: # Field №8
        value: (ks__bit_field.value & 0b100000000) != 0
  ks__array_of__config_action_point__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_action_point
        repeat: expr
        repeat-expr: length.value
  config_level_action_point:
    seq:
      - id: ks__bit_field
        type: u1
      - id: scene_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scene_id
      - id: action_points
        type: ks__array_of__config_action_point__length_u
        if: ks__has_field_action_points
    instances:
      ks__has_field_scene_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_action_points: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__enum__chest_show_moment:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: chest_show_moment
  chest_show_moment_comparer:
    seq: []
    instances: {}
  ks__enum__chest_show_ui_remind:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: chest_show_ui_remind
  chest_show_ui_remind_comparer:
    seq: []
    instances: {}
  ks__enum__chest_show_cutscene_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: chest_show_cutscene_type
  chest_show_cutscene_type_comparer:
    seq: []
    instances: {}
  ks__enum__indicator_distance_info_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: indicator_distance_info_type
  indicator_distance_info_type_comparer:
    seq: []
    instances: {}
  ks__enum__indicator_operator:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: indicator_operator
  indicator_operator_comparer:
    seq: []
    instances: {}
  indicator_condition:
    seq: []
    instances: {}
  indicator_condition_gadget_state_register:
    seq: []
    instances: {}
  indicator_condition_gadget_state:
    seq:
      - id: ks__base
        type: indicator_condition
      - id: ks__bit_field
        type: u1
      - id: from_state
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_from_state
      - id: to_state
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_to_state
    instances:
      ks__has_field_from_state: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_to_state: # Field №1
        value: (ks__bit_field & 0b10) != 0
  indicator_condition_allow_interact_register:
    seq: []
    instances: {}
  indicator_condition_allow_interact:
    seq:
      - id: ks__base
        type: indicator_condition
      - id: ks__bit_field
        type: u1
      - id: allow_interact
        type: u1
        if: ks__has_field_allow_interact
    instances:
      ks__has_field_allow_interact: # Field №0
        value: (ks__bit_field & 0b1) != 0
  indicator_condition_dummy_point_distance_register:
    seq: []
    instances: {}
  template_param:
    seq:
      - id: ks__bit_field
        type: u1
      - id: param
        type: aux_types::string
        if: ks__has_field_param
    instances:
      ks__has_field_param: # Field №0
        value: (ks__bit_field & 0b1) != 0
  template_param_string:
    seq:
      - id: ks__base
        type: template_param
      - id: ks__bit_field
        type: u1
      - id: origin_value
        type: aux_types::string
        if: ks__has_field_origin_value
    instances:
      ks__has_field_origin_value: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      param:
        value: ks__base.param
  template_param_float:
    seq:
      - id: ks__base
        type: template_param
      - id: ks__bit_field
        type: u1
      - id: origin_value
        type: f4
        if: ks__has_field_origin_value
    instances:
      ks__has_field_origin_value: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      param:
        value: ks__base.param
  indicator_condition_dummy_point_distance:
    seq:
      - id: ks__base
        type: indicator_condition
      - id: ks__bit_field
        type: u1
      - id: key
        type: template_param_string
        if: ks__has_field_key
      - id: distance
        type: template_param_float
        if: ks__has_field_distance
    instances:
      ks__has_field_key: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_distance: # Field №1
        value: (ks__bit_field & 0b10) != 0
  indicator_condition_avatar_distance_register:
    seq: []
    instances: {}
  indicator_condition_avatar_distance:
    seq:
      - id: ks__base
        type: indicator_condition
      - id: ks__bit_field
        type: u1
      - id: distance
        type: template_param_float
        if: ks__has_field_distance
    instances:
      ks__has_field_distance: # Field №0
        value: (ks__bit_field & 0b1) != 0
  indicator_condition_killed_register:
    seq: []
    instances: {}
  indicator_condition_killed:
    seq:
      - id: ks__base
        type: indicator_condition
    instances: {}
  ks__array_of__ks__disp__indicator_condition__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__disp__indicator_condition
        repeat: expr
        repeat-expr: length.value
  indicator_logic:
    seq:
      - id: ks__bit_field
        type: u1
      - id: i_operator
        type: ks__enum__indicator_operator
        if: ks__has_field_i_operator
      - id: i_conditions
        type: ks__array_of__ks__disp__indicator_condition__length_u
        if: ks__has_field_i_conditions
    instances:
      ks__has_field_i_operator: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_i_conditions: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__array_of__indicator_logic__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: indicator_logic
        repeat: expr
        repeat-expr: length.value
  config_ui_indicator:
    seq:
      - id: ks__bit_field
        type: u1
      - id: icon
        type: template_param_string
        if: ks__has_field_icon
      - id: distance_show
        type: ks__enum__indicator_distance_info_type
        if: ks__has_field_distance_show
      - id: follow_move
        type: u1
        if: ks__has_field_follow_move
      - id: indicator
        type: ks__array_of__indicator_logic__length_u
        if: ks__has_field_indicator
    instances:
      ks__has_field_icon: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_distance_show: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_follow_move: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_indicator: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  config_template_data:
    seq:
      - id: ks__bit_field
        type: u1
      - id: template_name
        type: aux_types::string
        if: ks__has_field_template_name
      - id: param_datas
        type: ks__dict_of__aux_types__string_aux_types__string
        if: ks__has_field_param_datas
    instances:
      ks__has_field_template_name: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_param_datas: # Field №1
        value: (ks__bit_field & 0b10) != 0
  level_gadget:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_group_id
      - id: map_inst_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_map_inst_id
      - id: follow_move_attach_point
        type: aux_types::string
        if: ks__has_field_follow_move_attach_point
      - id: follow_move_target_instance_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_follow_move_target_instance_id
      - id: gadget_misc_unlock_show_cut_scene
        type: u1
        if: ks__has_field_gadget_misc_unlock_show_cut_scene
      - id: gadget_misc_chest_show_moment
        type: ks__enum__chest_show_moment
        if: ks__has_field_gadget_misc_chest_show_moment
      - id: gadget_misc_chest_show_ui_remind
        type: ks__enum__chest_show_ui_remind
        if: ks__has_field_gadget_misc_chest_show_ui_remind
      - id: gadget_misc_chest_show_cts_type
        type: ks__enum__chest_show_cutscene_type
        if: ks__has_field_gadget_misc_chest_show_cts_type
      - id: billboard_has_ui_bar
        type: u1
        if: ks__has_field_billboard_has_ui_bar
      - id: billboard_show_ui_bar_dis
        type: f4
        if: ks__has_field_billboard_show_ui_bar_dis
      - id: billboard_hide_ui_bar_dis
        type: f4
        if: ks__has_field_billboard_hide_ui_bar_dis
      - id: billboard_ui_bar_need_enter_combat
        type: u1
        if: ks__has_field_billboard_ui_bar_need_enter_combat
      - id: billboard_hp_bar_style
        type: ks__enum__hp_bar_style
        if: ks__has_field_billboard_hp_bar_style
      - id: target_indicator_type
        type: ks__enum__target_indicator_type
        if: ks__has_field_target_indicator_type
      - id: ui_indicator
        type: config_template_data
        if: ks__has_field_ui_indicator
      - id: target_indicator_task_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_target_indicator_task_id
      - id: billboard_multi_bar_sort_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_billboard_multi_bar_sort_id
      - id: billboard_multi_bar_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_billboard_multi_bar_num
    instances:
      ks__has_field_group_id: # Field №0
        value: (ks__bit_field.value & 0b000000000000000001) != 0
      ks__has_field_map_inst_id: # Field №1
        value: (ks__bit_field.value & 0b000000000000000010) != 0
      ks__has_field_follow_move_attach_point: # Field №2
        value: (ks__bit_field.value & 0b000000000000000100) != 0
      ks__has_field_follow_move_target_instance_id: # Field №3
        value: (ks__bit_field.value & 0b000000000000001000) != 0
      ks__has_field_gadget_misc_unlock_show_cut_scene: # Field №4
        value: (ks__bit_field.value & 0b000000000000010000) != 0
      ks__has_field_gadget_misc_chest_show_moment: # Field №5
        value: (ks__bit_field.value & 0b000000000000100000) != 0
      ks__has_field_gadget_misc_chest_show_ui_remind: # Field №6
        value: (ks__bit_field.value & 0b000000000001000000) != 0
      ks__has_field_gadget_misc_chest_show_cts_type: # Field №7
        value: (ks__bit_field.value & 0b000000000010000000) != 0
      ks__has_field_billboard_has_ui_bar: # Field №8
        value: (ks__bit_field.value & 0b000000000100000000) != 0
      ks__has_field_billboard_show_ui_bar_dis: # Field №9
        value: (ks__bit_field.value & 0b000000001000000000) != 0
      ks__has_field_billboard_hide_ui_bar_dis: # Field №10
        value: (ks__bit_field.value & 0b000000010000000000) != 0
      ks__has_field_billboard_ui_bar_need_enter_combat: # Field №11
        value: (ks__bit_field.value & 0b000000100000000000) != 0
      ks__has_field_billboard_hp_bar_style: # Field №12
        value: (ks__bit_field.value & 0b000001000000000000) != 0
      ks__has_field_target_indicator_type: # Field №13
        value: (ks__bit_field.value & 0b000010000000000000) != 0
      ks__has_field_ui_indicator: # Field №14
        value: (ks__bit_field.value & 0b000100000000000000) != 0
      ks__has_field_target_indicator_task_id: # Field №15
        value: (ks__bit_field.value & 0b001000000000000000) != 0
      ks__has_field_billboard_multi_bar_sort_id: # Field №16
        value: (ks__bit_field.value & 0b010000000000000000) != 0
      ks__has_field_billboard_multi_bar_num: # Field №17
        value: (ks__bit_field.value & 0b100000000000000000) != 0
  ks__array_of__level_gadget__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: level_gadget
        repeat: expr
        repeat-expr: length.value
  config_level_gadget_data:
    seq:
      - id: ks__bit_field
        type: u1
      - id: scene_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scene_id
      - id: gadgets
        type: ks__array_of__level_gadget__length_u
        if: ks__has_field_gadgets
    instances:
      ks__has_field_scene_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_gadgets: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_level_block_meta:
    seq:
      - id: ks__bit_field
        type: u1
      - id: block_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_block_id
      - id: is_ignore_block_position
        type: u1
        if: ks__has_field_is_ignore_block_position
      - id: block_center_x
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_block_center_x
      - id: block_center_z
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_block_center_z
    instances:
      ks__has_field_block_id: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_is_ignore_block_position: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_block_center_x: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_block_center_z: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  ks__array_of__config_level_block_meta__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_level_block_meta
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__aux_types__vlq_base128_le_u_ks__array_of__config_level_block_meta__length_u:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_u
      - id: value
        type: ks__array_of__config_level_block_meta__length_u
  ks__dict_of__aux_types__vlq_base128_le_u_ks__array_of__config_level_block_meta__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_u_ks__array_of__config_level_block_meta__length_u
        repeat: expr
        repeat-expr: length.value
  config_level_meta:
    seq:
      - id: ks__bit_field
        type: u1
      - id: scene_meta
        type: ks__dict_of__aux_types__vlq_base128_le_u_ks__array_of__config_level_block_meta__length_u
        if: ks__has_field_scene_meta
    instances:
      ks__has_field_scene_meta: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_level_monster_ai_patrol:
    seq:
      - id: ks__bit_field
        type: u1
      - id: ai_patrol_group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_ai_patrol_group_id
      - id: ai_patrol_is_leader
        type: u1
        if: ks__has_field_ai_patrol_is_leader
      - id: ai_patrol_offset
        type: point2d
        if: ks__has_field_ai_patrol_offset
    instances:
      ks__has_field_ai_patrol_group_id: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_ai_patrol_is_leader: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_ai_patrol_offset: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_level_monster_unit:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_group_id
      - id: map_inst_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_map_inst_id
      - id: spawned_by_evt_pattern
        type: u1
        if: ks__has_field_spawned_by_evt_pattern
      - id: route_id
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_route_id
      - id: ai_patrol_setting
        type: config_level_monster_ai_patrol
        if: ks__has_field_ai_patrol_setting
      - id: ai_group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_ai_group_id
      - id: override_defend_area_range
        type: u1
        if: ks__has_field_override_defend_area_range
      - id: defend_area_range
        type: f4
        if: ks__has_field_defend_area_range
      - id: defend_area_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_defend_area_id
      - id: wander_area_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_wander_area_id
      - id: override_clear_threat_target_distance
        type: u1
        if: ks__has_field_override_clear_threat_target_distance
      - id: clear_threat_target_distance
        type: f4
        if: ks__has_field_clear_threat_target_distance
      - id: ai_neuron_setting
        type: aux_types::string
        if: ks__has_field_ai_neuron_setting
      - id: ai_sensing_template
        type: aux_types::string
        if: ks__has_field_ai_sensing_template
      - id: force_combat_on_spawn
        type: u1
        if: ks__has_field_force_combat_on_spawn
      - id: disable_wander
        type: u1
        if: ks__has_field_disable_wander
      - id: stand_on_distant_mesh
        type: u1
        if: ks__has_field_stand_on_distant_mesh
      - id: landing_point_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_landing_point_id
      - id: extraction_point_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_extraction_point_id
      - id: billboard_has_ui_bar
        type: u1
        if: ks__has_field_billboard_has_ui_bar
      - id: billboard_show_ui_bar_dis
        type: f4
        if: ks__has_field_billboard_show_ui_bar_dis
      - id: billboard_hide_ui_bar_dis
        type: f4
        if: ks__has_field_billboard_hide_ui_bar_dis
      - id: billboard_ui_bar_need_enter_combat
        type: u1
        if: ks__has_field_billboard_ui_bar_need_enter_combat
      - id: billboard_hp_bar_style
        type: ks__enum__hp_bar_style
        if: ks__has_field_billboard_hp_bar_style
      - id: billboard_multi_bar_sort_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_billboard_multi_bar_sort_id
      - id: billboard_multi_bar_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_billboard_multi_bar_num
    instances:
      ks__has_field_group_id: # Field №0
        value: (ks__bit_field.value & 0b00000000000000000000000001) != 0
      ks__has_field_map_inst_id: # Field №1
        value: (ks__bit_field.value & 0b00000000000000000000000010) != 0
      ks__has_field_spawned_by_evt_pattern: # Field №2
        value: (ks__bit_field.value & 0b00000000000000000000000100) != 0
      ks__has_field_route_id: # Field №3
        value: (ks__bit_field.value & 0b00000000000000000000001000) != 0
      ks__has_field_ai_patrol_setting: # Field №4
        value: (ks__bit_field.value & 0b00000000000000000000010000) != 0
      ks__has_field_ai_group_id: # Field №5
        value: (ks__bit_field.value & 0b00000000000000000000100000) != 0
      ks__has_field_override_defend_area_range: # Field №6
        value: (ks__bit_field.value & 0b00000000000000000001000000) != 0
      ks__has_field_defend_area_range: # Field №7
        value: (ks__bit_field.value & 0b00000000000000000010000000) != 0
      ks__has_field_defend_area_id: # Field №8
        value: (ks__bit_field.value & 0b00000000000000000100000000) != 0
      ks__has_field_wander_area_id: # Field №9
        value: (ks__bit_field.value & 0b00000000000000001000000000) != 0
      ks__has_field_override_clear_threat_target_distance: # Field №10
        value: (ks__bit_field.value & 0b00000000000000010000000000) != 0
      ks__has_field_clear_threat_target_distance: # Field №11
        value: (ks__bit_field.value & 0b00000000000000100000000000) != 0
      ks__has_field_ai_neuron_setting: # Field №12
        value: (ks__bit_field.value & 0b00000000000001000000000000) != 0
      ks__has_field_ai_sensing_template: # Field №13
        value: (ks__bit_field.value & 0b00000000000010000000000000) != 0
      ks__has_field_force_combat_on_spawn: # Field №14
        value: (ks__bit_field.value & 0b00000000000100000000000000) != 0
      ks__has_field_disable_wander: # Field №15
        value: (ks__bit_field.value & 0b00000000001000000000000000) != 0
      ks__has_field_stand_on_distant_mesh: # Field №16
        value: (ks__bit_field.value & 0b00000000010000000000000000) != 0
      ks__has_field_landing_point_id: # Field №17
        value: (ks__bit_field.value & 0b00000000100000000000000000) != 0
      ks__has_field_extraction_point_id: # Field №18
        value: (ks__bit_field.value & 0b00000001000000000000000000) != 0
      ks__has_field_billboard_has_ui_bar: # Field №19
        value: (ks__bit_field.value & 0b00000010000000000000000000) != 0
      ks__has_field_billboard_show_ui_bar_dis: # Field №20
        value: (ks__bit_field.value & 0b00000100000000000000000000) != 0
      ks__has_field_billboard_hide_ui_bar_dis: # Field №21
        value: (ks__bit_field.value & 0b00001000000000000000000000) != 0
      ks__has_field_billboard_ui_bar_need_enter_combat: # Field №22
        value: (ks__bit_field.value & 0b00010000000000000000000000) != 0
      ks__has_field_billboard_hp_bar_style: # Field №23
        value: (ks__bit_field.value & 0b00100000000000000000000000) != 0
      ks__has_field_billboard_multi_bar_sort_id: # Field №24
        value: (ks__bit_field.value & 0b01000000000000000000000000) != 0
      ks__has_field_billboard_multi_bar_num: # Field №25
        value: (ks__bit_field.value & 0b10000000000000000000000000) != 0
  ks__array_of__config_level_monster_unit__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_level_monster_unit
        repeat: expr
        repeat-expr: length.value
  config_level_monster_data:
    seq:
      - id: ks__bit_field
        type: u1
      - id: scene_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scene_id
      - id: monsters
        type: ks__array_of__config_level_monster_unit__length_u
        if: ks__has_field_monsters
    instances:
      ks__has_field_scene_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_monsters: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__enum__config_level_polygon_tag:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: config_level_polygon_tag
  config_level_polygon_tag_comparer:
    seq: []
    instances: {}
  ks__array_of__ks__enum__config_level_polygon_tag__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__enum__config_level_polygon_tag
        repeat: expr
        repeat-expr: length.value
  config_level_polygon:
    seq:
      - id: ks__bit_field
        type: u1
      - id: local_polygon_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_local_polygon_id
      - id: y_max
        type: f4
        if: ks__has_field_y_max
      - id: y_min
        type: f4
        if: ks__has_field_y_min
      - id: vertices
        type: ks__array_of__vector__length_u
        if: ks__has_field_vertices
      - id: tags
        type: ks__array_of__ks__enum__config_level_polygon_tag__length_u
        if: ks__has_field_tags
    instances:
      ks__has_field_local_polygon_id: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_y_max: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_y_min: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_vertices: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_tags: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  ks__array_of__config_level_polygon__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_level_polygon
        repeat: expr
        repeat-expr: length.value
  config_level_polygons:
    seq:
      - id: ks__bit_field
        type: u1
      - id: scene_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scene_id
      - id: polygons
        type: ks__array_of__config_level_polygon__length_u
        if: ks__has_field_polygons
    instances:
      ks__has_field_scene_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_polygons: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_waypoint:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: pos
        type: vector
        if: ks__has_field_pos
      - id: wait_time
        type: f4
        if: ks__has_field_wait_time
      - id: move_angular_speed
        type: f4
        if: ks__has_field_move_angular_speed
      - id: wait_angular_speed
        type: f4
        if: ks__has_field_wait_angular_speed
      - id: move_rotate_round
        type: f4
        if: ks__has_field_move_rotate_round
      - id: wait_rotate_round
        type: f4
        if: ks__has_field_wait_rotate_round
      - id: stop_wait_rotate
        type: u1
        if: ks__has_field_stop_wait_rotate
      - id: speed_level
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_speed_level
      - id: target_velocity
        type: f4
        if: ks__has_field_target_velocity
      - id: has_reach_event
        type: u1
        if: ks__has_field_has_reach_event
      - id: rot_angle_move_speed
        type: f4
        if: ks__has_field_rot_angle_move_speed
      - id: rot_angle_wait_speed
        type: f4
        if: ks__has_field_rot_angle_wait_speed
      - id: rot_angle_same_stop
        type: u1
        if: ks__has_field_rot_angle_same_stop
      - id: rot_round_reach_dir
        type: vector
        if: ks__has_field_rot_round_reach_dir
      - id: rot_round_reach_rounds
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_rot_round_reach_rounds
      - id: rot_round_leave_dir
        type: vector
        if: ks__has_field_rot_round_leave_dir
      - id: rot_round_wait_rounds
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_rot_round_wait_rounds
      - id: reach_stop
        type: u1
        if: ks__has_field_reach_stop
    instances:
      ks__has_field_pos: # Field №0
        value: (ks__bit_field.value & 0b000000000000000001) != 0
      ks__has_field_wait_time: # Field №1
        value: (ks__bit_field.value & 0b000000000000000010) != 0
      ks__has_field_move_angular_speed: # Field №2
        value: (ks__bit_field.value & 0b000000000000000100) != 0
      ks__has_field_wait_angular_speed: # Field №3
        value: (ks__bit_field.value & 0b000000000000001000) != 0
      ks__has_field_move_rotate_round: # Field №4
        value: (ks__bit_field.value & 0b000000000000010000) != 0
      ks__has_field_wait_rotate_round: # Field №5
        value: (ks__bit_field.value & 0b000000000000100000) != 0
      ks__has_field_stop_wait_rotate: # Field №6
        value: (ks__bit_field.value & 0b000000000001000000) != 0
      ks__has_field_speed_level: # Field №7
        value: (ks__bit_field.value & 0b000000000010000000) != 0
      ks__has_field_target_velocity: # Field №8
        value: (ks__bit_field.value & 0b000000000100000000) != 0
      ks__has_field_has_reach_event: # Field №9
        value: (ks__bit_field.value & 0b000000001000000000) != 0
      ks__has_field_rot_angle_move_speed: # Field №10
        value: (ks__bit_field.value & 0b000000010000000000) != 0
      ks__has_field_rot_angle_wait_speed: # Field №11
        value: (ks__bit_field.value & 0b000000100000000000) != 0
      ks__has_field_rot_angle_same_stop: # Field №12
        value: (ks__bit_field.value & 0b000001000000000000) != 0
      ks__has_field_rot_round_reach_dir: # Field №13
        value: (ks__bit_field.value & 0b000010000000000000) != 0
      ks__has_field_rot_round_reach_rounds: # Field №14
        value: (ks__bit_field.value & 0b000100000000000000) != 0
      ks__has_field_rot_round_leave_dir: # Field №15
        value: (ks__bit_field.value & 0b001000000000000000) != 0
      ks__has_field_rot_round_wait_rounds: # Field №16
        value: (ks__bit_field.value & 0b010000000000000000) != 0
      ks__has_field_reach_stop: # Field №17
        value: (ks__bit_field.value & 0b100000000000000000) != 0
  ks__enum__route_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: route_type
  route_type_comparer:
    seq: []
    instances: {}
  ks__enum__rot_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: rot_type
  rot_type_comparer:
    seq: []
    instances: {}
  ks__enum__rot_angle_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: rot_angle_type
  rot_angle_type_comparer:
    seq: []
    instances: {}
  ks__array_of__config_waypoint__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_waypoint
        repeat: expr
        repeat-expr: length.value
  config_route:
    seq:
      - id: ks__bit_field
        type: u1
      - id: local_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_local_id
      - id: name
        type: aux_types::string
        if: ks__has_field_name
      - id: type
        type: ks__enum__route_type
        if: ks__has_field_type
      - id: is_forward
        type: u1
        if: ks__has_field_is_forward
      - id: points
        type: ks__array_of__config_waypoint__length_u
        if: ks__has_field_points
      - id: rot_type
        type: ks__enum__rot_type
        if: ks__has_field_rot_type
      - id: rot_angle_type
        type: ks__enum__rot_angle_type
        if: ks__has_field_rot_angle_type
      - id: arrive_range
        type: f4
        if: ks__has_field_arrive_range
    instances:
      ks__has_field_local_id: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_name: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_type: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_is_forward: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_points: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_rot_type: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_rot_angle_type: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_arrive_range: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
  ks__array_of__config_route__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_route
        repeat: expr
        repeat-expr: length.value
  config_level_route:
    seq:
      - id: ks__bit_field
        type: u1
      - id: scene_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scene_id
      - id: routes
        type: ks__array_of__config_route__length_u
        if: ks__has_field_routes
    instances:
      ks__has_field_scene_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_routes: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__enum__route_record_mode:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: route_record_mode
  route_record_mode_comparer:
    seq: []
    instances: {}
  config_point:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: point_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_point_id
      - id: position
        type: vector
        if: ks__has_field_position
      - id: rotation
        type: vector
        if: ks__has_field_rotation
      - id: velocity
        type: f4
        if: ks__has_field_velocity
      - id: time
        type: f4
        if: ks__has_field_time
      - id: is_reach_event
        type: u1
        if: ks__has_field_is_reach_event
      - id: rot_axis
        type: vector
        if: ks__has_field_rot_axis
      - id: rot_speed
        type: f4
        if: ks__has_field_rot_speed
      - id: arrive_range
        type: f4
        if: ks__has_field_arrive_range
    instances:
      ks__has_field_point_id: # Field №0
        value: (ks__bit_field.value & 0b000000001) != 0
      ks__has_field_position: # Field №1
        value: (ks__bit_field.value & 0b000000010) != 0
      ks__has_field_rotation: # Field №2
        value: (ks__bit_field.value & 0b000000100) != 0
      ks__has_field_velocity: # Field №3
        value: (ks__bit_field.value & 0b000001000) != 0
      ks__has_field_time: # Field №4
        value: (ks__bit_field.value & 0b000010000) != 0
      ks__has_field_is_reach_event: # Field №5
        value: (ks__bit_field.value & 0b000100000) != 0
      ks__has_field_rot_axis: # Field №6
        value: (ks__bit_field.value & 0b001000000) != 0
      ks__has_field_rot_speed: # Field №7
        value: (ks__bit_field.value & 0b010000000) != 0
      ks__has_field_arrive_range: # Field №8
        value: (ks__bit_field.value & 0b100000000) != 0
  ks__array_of__config_point__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_point
        repeat: expr
        repeat-expr: length.value
  config_point_array:
    seq:
      - id: ks__bit_field
        type: u1
      - id: point_array_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_point_array_id
      - id: platform_point_list
        type: ks__array_of__config_point__length_u
        if: ks__has_field_platform_point_list
    instances:
      ks__has_field_point_array_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_platform_point_list: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_logo_page:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: channel_name
        type: aux_types::string
        if: ks__has_field_channel_name
      - id: logo_file_name
        type: aux_types::string
        if: ks__has_field_logo_file_name
      - id: show_tip_text
        type: u1
        if: ks__has_field_show_tip_text
      - id: tip_text_map_id
        type: aux_types::string
        if: ks__has_field_tip_text_map_id
      - id: show_tip_img_aw
        type: u1
        if: ks__has_field_show_tip_img_aw
      - id: tip_img_aw_name
        type: aux_types::string
        if: ks__has_field_tip_img_aw_name
      - id: show_warning_view
        type: u1
        if: ks__has_field_show_warning_view
      - id: warning_title
        type: aux_types::string
        if: ks__has_field_warning_title
      - id: warning_desc
        type: aux_types::string
        if: ks__has_field_warning_desc
      - id: show_koran_tips_view
        type: u1
        if: ks__has_field_show_koran_tips_view
      - id: koran_tips_desc
        type: aux_types::string
        if: ks__has_field_koran_tips_desc
    instances:
      ks__has_field_channel_name: # Field №0
        value: (ks__bit_field.value & 0b00000000001) != 0
      ks__has_field_logo_file_name: # Field №1
        value: (ks__bit_field.value & 0b00000000010) != 0
      ks__has_field_show_tip_text: # Field №2
        value: (ks__bit_field.value & 0b00000000100) != 0
      ks__has_field_tip_text_map_id: # Field №3
        value: (ks__bit_field.value & 0b00000001000) != 0
      ks__has_field_show_tip_img_aw: # Field №4
        value: (ks__bit_field.value & 0b00000010000) != 0
      ks__has_field_tip_img_aw_name: # Field №5
        value: (ks__bit_field.value & 0b00000100000) != 0
      ks__has_field_show_warning_view: # Field №6
        value: (ks__bit_field.value & 0b00001000000) != 0
      ks__has_field_warning_title: # Field №7
        value: (ks__bit_field.value & 0b00010000000) != 0
      ks__has_field_warning_desc: # Field №8
        value: (ks__bit_field.value & 0b00100000000) != 0
      ks__has_field_show_koran_tips_view: # Field №9
        value: (ks__bit_field.value & 0b01000000000) != 0
      ks__has_field_koran_tips_desc: # Field №10
        value: (ks__bit_field.value & 0b10000000000) != 0
  ks__kvp_of_dict__aux_types__string_config_logo_page:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: config_logo_page
  ks__dict_of__aux_types__string_config_logo_page:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_config_logo_page
        repeat: expr
        repeat-expr: length.value
  config_logo_page_setting:
    seq:
      - id: ks__bit_field
        type: u1
      - id: default_config
        type: config_logo_page
        if: ks__has_field_default_config
      - id: logo_config_map
        type: ks__dict_of__aux_types__string_config_logo_page
        if: ks__has_field_logo_config_map
      - id: logo_folder_path
        type: aux_types::string
        if: ks__has_field_logo_folder_path
      - id: tip_img_aw_folder_path
        type: aux_types::string
        if: ks__has_field_tip_img_aw_folder_path
    instances:
      ks__has_field_default_config: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_logo_config_map: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_logo_folder_path: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_tip_img_aw_folder_path: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  ks__enum__actor_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: actor_type
  actor_type_comparer:
    seq: []
    instances: {}
  ks__enum__task_id:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: task_id
  task_id_comparer:
    seq: []
    instances: {}
  ks__enum__inter_timing_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: inter_timing_type
  inter_timing_type_comparer:
    seq: []
    instances: {}
  ks__enum__actor_evt_target_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: actor_evt_target_type
  actor_evt_target_type_comparer:
    seq: []
    instances: {}
  ks__enum__weather_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: weather_type
  weather_type_comparer:
    seq: []
    instances: {}
  ks__enum__lua_task_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: lua_task_type
  lua_task_type_comparer:
    seq: []
    instances: {}
  ks__enum__be_follow_state:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: be_follow_state
  be_follow_state_comparer:
    seq: []
    instances: {}
  ks__enum__narrator_state:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: narrator_state
  narrator_state_comparer:
    seq: []
    instances: {}
  ks__enum__q_state:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: q_state
  q_state_comparer:
    seq: []
    instances: {}
  ks__enum__dist_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: dist_type
  dist_type_comparer:
    seq: []
    instances: {}
  config_lua_hack:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: ui_lua_script_path
        type: aux_types::string
        if: ks__has_field_ui_lua_script_path
      - id: enable_lua_patch
        type: u1
        if: ks__has_field_enable_lua_patch
      - id: enable_all_context_lua_patch
        type: u1
        if: ks__has_field_enable_all_context_lua_patch
      - id: ui_lua_patch_context_startup_list
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_ui_lua_patch_context_startup_list
      - id: ui_lua_patch_context_setup_view_list
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_ui_lua_patch_context_setup_view_list
      - id: ui_lua_patch_context_post_setup_view_list
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_ui_lua_patch_context_post_setup_view_list
      - id: ui_lua_patch_context_set_active_enabled_list
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_ui_lua_patch_context_set_active_enabled_list
      - id: ui_lua_patch_context_set_active_disabled_list
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_ui_lua_patch_context_set_active_disabled_list
      - id: ui_lua_patch_context_destroy_list
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_ui_lua_patch_context_destroy_list
      - id: ui_lua_patch_context_destroy_force_list
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_ui_lua_patch_context_destroy_force_list
      - id: ui_lua_patch_context_button_map
        type: ks__dict_of__aux_types__string_ks__array_of__aux_types__string__length_u
        if: ks__has_field_ui_lua_patch_context_button_map
      - id: ui_lua_patch_context_input_field_map
        type: ks__dict_of__aux_types__string_ks__array_of__aux_types__string__length_u
        if: ks__has_field_ui_lua_patch_context_input_field_map
      - id: ui_lua_patch_context_drowdown_map
        type: ks__dict_of__aux_types__string_ks__array_of__aux_types__string__length_u
        if: ks__has_field_ui_lua_patch_context_drowdown_map
      - id: ui_lua_patch_context_toggle_map
        type: ks__dict_of__aux_types__string_ks__array_of__aux_types__string__length_u
        if: ks__has_field_ui_lua_patch_context_toggle_map
      - id: ui_lua_patch_context_slider_map
        type: ks__dict_of__aux_types__string_ks__array_of__aux_types__string__length_u
        if: ks__has_field_ui_lua_patch_context_slider_map
      - id: ui_lua_patch_context_panel_map
        type: ks__dict_of__aux_types__string_ks__array_of__aux_types__string__length_u
        if: ks__has_field_ui_lua_patch_context_panel_map
    instances:
      ks__has_field_ui_lua_script_path: # Field №0
        value: (ks__bit_field.value & 0b0000000000000001) != 0
      ks__has_field_enable_lua_patch: # Field №1
        value: (ks__bit_field.value & 0b0000000000000010) != 0
      ks__has_field_enable_all_context_lua_patch: # Field №2
        value: (ks__bit_field.value & 0b0000000000000100) != 0
      ks__has_field_ui_lua_patch_context_startup_list: # Field №3
        value: (ks__bit_field.value & 0b0000000000001000) != 0
      ks__has_field_ui_lua_patch_context_setup_view_list: # Field №4
        value: (ks__bit_field.value & 0b0000000000010000) != 0
      ks__has_field_ui_lua_patch_context_post_setup_view_list: # Field №5
        value: (ks__bit_field.value & 0b0000000000100000) != 0
      ks__has_field_ui_lua_patch_context_set_active_enabled_list: # Field №6
        value: (ks__bit_field.value & 0b0000000001000000) != 0
      ks__has_field_ui_lua_patch_context_set_active_disabled_list: # Field №7
        value: (ks__bit_field.value & 0b0000000010000000) != 0
      ks__has_field_ui_lua_patch_context_destroy_list: # Field №8
        value: (ks__bit_field.value & 0b0000000100000000) != 0
      ks__has_field_ui_lua_patch_context_destroy_force_list: # Field №9
        value: (ks__bit_field.value & 0b0000001000000000) != 0
      ks__has_field_ui_lua_patch_context_button_map: # Field №10
        value: (ks__bit_field.value & 0b0000010000000000) != 0
      ks__has_field_ui_lua_patch_context_input_field_map: # Field №11
        value: (ks__bit_field.value & 0b0000100000000000) != 0
      ks__has_field_ui_lua_patch_context_drowdown_map: # Field №12
        value: (ks__bit_field.value & 0b0001000000000000) != 0
      ks__has_field_ui_lua_patch_context_toggle_map: # Field №13
        value: (ks__bit_field.value & 0b0010000000000000) != 0
      ks__has_field_ui_lua_patch_context_slider_map: # Field №14
        value: (ks__bit_field.value & 0b0100000000000000) != 0
      ks__has_field_ui_lua_patch_context_panel_map: # Field №15
        value: (ks__bit_field.value & 0b1000000000000000) != 0
  ks__enum__mark_view_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: mark_view_type
  config_v_base_mark:
    seq:
      - id: ks__bit_field
        type: u1
      - id: type
        type: ks__enum__mark_view_type
        if: ks__has_field_type
      - id: res_path
        type: aux_types::string
        if: ks__has_field_res_path
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_res_path: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__enum__mark_visible_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: mark_visible_type
  ks__enum__mark_layer_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: mark_layer_type
  config_v_map_mark:
    seq:
      - id: ks__base
        type: config_v_base_mark
      - id: ks__bit_field
        type: u1
      - id: visible_type_mini_map
        type: ks__enum__mark_visible_type
        if: ks__has_field_visible_type_mini_map
      - id: visible_type_level_map
        type: ks__enum__mark_visible_type
        if: ks__has_field_visible_type_level_map
      - id: layer_type
        type: ks__enum__mark_layer_type
        if: ks__has_field_layer_type
    instances:
      ks__has_field_visible_type_mini_map: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_visible_type_level_map: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_layer_type: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      type:
        value: ks__base.type
      res_path:
        value: ks__base.res_path
  ks__enum__mark_custom_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: mark_custom_type
  config_v_custom_map_mark:
    seq:
      - id: ks__base
        type: config_v_map_mark
      - id: ks__bit_field
        type: u1
      - id: custom_type
        type: ks__enum__mark_custom_type
        if: ks__has_field_custom_type
    instances:
      ks__has_field_custom_type: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      visible_type_mini_map:
        value: ks__base.visible_type_mini_map
      visible_type_level_map:
        value: ks__base.visible_type_level_map
      layer_type:
        value: ks__base.layer_type
      type:
        value: ks__base.type
      res_path:
        value: ks__base.res_path
  ks__array_of__config_v_custom_map_mark__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_v_custom_map_mark
        repeat: expr
        repeat-expr: length.value
  config_map_global:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: mini_map_ui_radius
        type: f4
        if: ks__has_field_mini_map_ui_radius
      - id: mini_map_sight_radius
        type: f4
        if: ks__has_field_mini_map_sight_radius
      - id: mini_map_scale_default
        type: f4
        if: ks__has_field_mini_map_scale_default
      - id: mini_map_scale_ranks
        type: ks__array_of__f4__length_u
        if: ks__has_field_mini_map_scale_ranks
      - id: level_map_scale_default
        type: f4
        if: ks__has_field_level_map_scale_default
      - id: level_map_scale_max
        type: f4
        if: ks__has_field_level_map_scale_max
      - id: level_map_scale_min
        type: f4
        if: ks__has_field_level_map_scale_min
      - id: level_map_trans_point_radius
        type: f4
        if: ks__has_field_level_map_trans_point_radius
      - id: level_map_custom_mark_cancel_radius
        type: f4
        if: ks__has_field_level_map_custom_mark_cancel_radius
      - id: level_map_custom_mark_near_cancel_radius
        type: f4
        if: ks__has_field_level_map_custom_mark_near_cancel_radius
      - id: custom_styles
        type: ks__array_of__config_v_custom_map_mark__length_u
        if: ks__has_field_custom_styles
      - id: mark_near_threshold
        type: f4
        if: ks__has_field_mark_near_threshold
      - id: mark_selected_scale
        type: f4
        if: ks__has_field_mark_selected_scale
      - id: reward_tip_slide_value
        type: f4
        if: ks__has_field_reward_tip_slide_value
      - id: first_area_id_hide_mini_map
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_first_area_id_hide_mini_map
      - id: mark_unlock_effect_delay
        type: f4
        if: ks__has_field_mark_unlock_effect_delay
    instances:
      ks__has_field_mini_map_ui_radius: # Field №0
        value: (ks__bit_field.value & 0b0000000000000001) != 0
      ks__has_field_mini_map_sight_radius: # Field №1
        value: (ks__bit_field.value & 0b0000000000000010) != 0
      ks__has_field_mini_map_scale_default: # Field №2
        value: (ks__bit_field.value & 0b0000000000000100) != 0
      ks__has_field_mini_map_scale_ranks: # Field №3
        value: (ks__bit_field.value & 0b0000000000001000) != 0
      ks__has_field_level_map_scale_default: # Field №4
        value: (ks__bit_field.value & 0b0000000000010000) != 0
      ks__has_field_level_map_scale_max: # Field №5
        value: (ks__bit_field.value & 0b0000000000100000) != 0
      ks__has_field_level_map_scale_min: # Field №6
        value: (ks__bit_field.value & 0b0000000001000000) != 0
      ks__has_field_level_map_trans_point_radius: # Field №7
        value: (ks__bit_field.value & 0b0000000010000000) != 0
      ks__has_field_level_map_custom_mark_cancel_radius: # Field №8
        value: (ks__bit_field.value & 0b0000000100000000) != 0
      ks__has_field_level_map_custom_mark_near_cancel_radius: # Field №9
        value: (ks__bit_field.value & 0b0000001000000000) != 0
      ks__has_field_custom_styles: # Field №10
        value: (ks__bit_field.value & 0b0000010000000000) != 0
      ks__has_field_mark_near_threshold: # Field №11
        value: (ks__bit_field.value & 0b0000100000000000) != 0
      ks__has_field_mark_selected_scale: # Field №12
        value: (ks__bit_field.value & 0b0001000000000000) != 0
      ks__has_field_reward_tip_slide_value: # Field №13
        value: (ks__bit_field.value & 0b0010000000000000) != 0
      ks__has_field_first_area_id_hide_mini_map: # Field №14
        value: (ks__bit_field.value & 0b0100000000000000) != 0
      ks__has_field_mark_unlock_effect_delay: # Field №15
        value: (ks__bit_field.value & 0b1000000000000000) != 0
  ks__enum__mark_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: mark_type
  mark_type_comparer:
    seq: []
    instances: {}
  ks__enum__mark_icon_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: mark_icon_type
  mark_icon_type_comparer:
    seq: []
    instances: {}
  ks__enum__mark_order:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: mark_order
  mark_order_comparer:
    seq: []
    instances: {}
  mark_visible_type_comparer:
    seq: []
    instances: {}
  mark_view_type_comparer:
    seq: []
    instances: {}
  mark_custom_type_comparer:
    seq: []
    instances: {}
  mark_layer_type_comparer:
    seq: []
    instances: {}
  ks__array_of__ks__disp__config_v_base_mark__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__disp__config_v_base_mark
        repeat: expr
        repeat-expr: length.value
  config_l_base_mark:
    seq:
      - id: ks__bit_field
        type: u1
      - id: priority
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_priority
      - id: views
        type: ks__array_of__ks__disp__config_v_base_mark__length_u
        if: ks__has_field_views
    instances:
      ks__has_field_priority: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_views: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_l_map_mark_register:
    seq: []
    instances: {}
  config_l_map_mark:
    seq:
      - id: ks__base
        type: config_l_base_mark
    instances:
      # Base class fields
      priority:
        value: ks__base.priority
      views:
        value: ks__base.views
  config_v_map_mark_register:
    seq: []
    instances: {}
  config_v_custom_map_mark_register:
    seq: []
    instances: {}
  ks__enum__mark_visibility_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: mark_visibility_type
  mark_visibility_type_comparer:
    seq: []
    instances: {}
  ks__enum__mark_plugin_icon_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: mark_plugin_icon_type
  mark_plugin_icon_type_comparer:
    seq: []
    instances: {}
  config_mark_icon:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: icon_name
        type: aux_types::string
        if: ks__has_field_icon_name
      - id: material_index
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_material_index
      - id: mark_type
        type: ks__enum__mark_type
        if: ks__has_field_mark_type
      - id: effect_name
        type: aux_types::string
        if: ks__has_field_effect_name
      - id: ignore_raycast_on_map
        type: u1
        if: ks__has_field_ignore_raycast_on_map
      - id: title
        type: aux_types::string
        if: ks__has_field_title
      - id: desc
        type: aux_types::string
        if: ks__has_field_desc
      - id: mark_layer
        type: ks__enum__mark_order
        if: ks__has_field_mark_layer
      - id: visibility_on_radar
        type: ks__enum__mark_visibility_type
        if: ks__has_field_visibility_on_radar
      - id: visibility_on_map
        type: ks__enum__mark_visibility_type
        if: ks__has_field_visibility_on_map
      - id: show_height_on_radar
        type: u1
        if: ks__has_field_show_height_on_radar
      - id: show_on_locked_area
        type: u1
        if: ks__has_field_show_on_locked_area
      - id: plugin_icon_type
        type: ks__enum__mark_plugin_icon_type
        if: ks__has_field_plugin_icon_type
    instances:
      ks__has_field_icon_name: # Field №0
        value: (ks__bit_field.value & 0b0000000000001) != 0
      ks__has_field_material_index: # Field №1
        value: (ks__bit_field.value & 0b0000000000010) != 0
      ks__has_field_mark_type: # Field №2
        value: (ks__bit_field.value & 0b0000000000100) != 0
      ks__has_field_effect_name: # Field №3
        value: (ks__bit_field.value & 0b0000000001000) != 0
      ks__has_field_ignore_raycast_on_map: # Field №4
        value: (ks__bit_field.value & 0b0000000010000) != 0
      ks__has_field_title: # Field №5
        value: (ks__bit_field.value & 0b0000000100000) != 0
      ks__has_field_desc: # Field №6
        value: (ks__bit_field.value & 0b0000001000000) != 0
      ks__has_field_mark_layer: # Field №7
        value: (ks__bit_field.value & 0b0000010000000) != 0
      ks__has_field_visibility_on_radar: # Field №8
        value: (ks__bit_field.value & 0b0000100000000) != 0
      ks__has_field_visibility_on_map: # Field №9
        value: (ks__bit_field.value & 0b0001000000000) != 0
      ks__has_field_show_height_on_radar: # Field №10
        value: (ks__bit_field.value & 0b0010000000000) != 0
      ks__has_field_show_on_locked_area: # Field №11
        value: (ks__bit_field.value & 0b0100000000000) != 0
      ks__has_field_plugin_icon_type: # Field №12
        value: (ks__bit_field.value & 0b1000000000000) != 0
  ks__kvp_of_dict__ks__enum__mark_icon_type_config_mark_icon:
    seq:
      - id: key
        type: ks__enum__mark_icon_type
      - id: value
        type: config_mark_icon
  ks__dict_of__ks__enum__mark_icon_type_config_mark_icon:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__ks__enum__mark_icon_type_config_mark_icon
        repeat: expr
        repeat-expr: length.value
  ks__array_of__ks__enum__mark_icon_type__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__enum__mark_icon_type
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__ks__enum__scene_building_type_ks__enum__mark_icon_type:
    seq:
      - id: key
        type: ks__enum__scene_building_type
      - id: value
        type: ks__enum__mark_icon_type
  ks__dict_of__ks__enum__scene_building_type_ks__enum__mark_icon_type:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__ks__enum__scene_building_type_ks__enum__mark_icon_type
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__ks__enum__mark_order_aux_types__vlq_base128_le_s:
    seq:
      - id: key
        type: ks__enum__mark_order
      - id: value
        type: aux_types::vlq_base128_le_s
  ks__dict_of__ks__enum__mark_order_aux_types__vlq_base128_le_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__ks__enum__mark_order_aux_types__vlq_base128_le_s
        repeat: expr
        repeat-expr: length.value
  config_mark_global:
    seq:
      - id: ks__bit_field
        type: u1
      - id: mark_icon_config
        type: ks__dict_of__ks__enum__mark_icon_type_config_mark_icon
        if: ks__has_field_mark_icon_config
      - id: custom_mark_icons
        type: ks__array_of__ks__enum__mark_icon_type__length_u
        if: ks__has_field_custom_mark_icons
      - id: scene_building_marks
        type: ks__dict_of__ks__enum__scene_building_type_ks__enum__mark_icon_type
        if: ks__has_field_scene_building_marks
      - id: mark_order_to_layer_map
        type: ks__dict_of__ks__enum__mark_order_aux_types__vlq_base128_le_s
        if: ks__has_field_mark_order_to_layer_map
    instances:
      ks__has_field_mark_icon_config: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_custom_mark_icons: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_scene_building_marks: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_mark_order_to_layer_map: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  config_mist:
    seq:
      - id: ks__bit_field
        type: u1
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: hide_scene_point_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_hide_scene_point_list
      - id: sort_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sort_id
      - id: prefab_path
        type: aux_types::string
        if: ks__has_field_prefab_path
      - id: map_pos_list
        type: ks__array_of__point2d__length_u
        if: ks__has_field_map_pos_list
      - id: need_anim
        type: u1
        if: ks__has_field_need_anim
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_hide_scene_point_list: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_sort_id: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_prefab_path: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_map_pos_list: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_need_anim: # Field №5
        value: (ks__bit_field & 0b100000) != 0
  velocity_force_type_comparer:
    seq: []
    instances: {}
  config_move_smoothed_speed:
    seq:
      - id: ks__bit_field
        type: u1
      - id: max_speed
        type: f4
        if: ks__has_field_max_speed
      - id: acceleration_xz
        type: f4
        if: ks__has_field_acceleration_xz
      - id: acceleration_y
        type: f4
        if: ks__has_field_acceleration_y
      - id: zeroing_speed_xz
        type: f4
        if: ks__has_field_zeroing_speed_xz
      - id: zeroing_speed_y
        type: f4
        if: ks__has_field_zeroing_speed_y
    instances:
      ks__has_field_max_speed: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_acceleration_xz: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_acceleration_y: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_zeroing_speed_xz: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_zeroing_speed_y: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  config_move_correction:
    seq: []
    instances: {}
  config_simple_move_register:
    seq: []
    instances: {}
  config_simple_move:
    seq:
      - id: ks__base
        type: config_move
      - id: ks__bit_field
        type: u1
      - id: const_speed_ratio
        type: f4
        if: ks__has_field_const_speed_ratio
      - id: follow_reference_system
        type: u1
        if: ks__has_field_follow_reference_system
    instances:
      ks__has_field_const_speed_ratio: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_follow_reference_system: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      velocity_force:
        value: ks__base.velocity_force
      handle_combat_task_immediately:
        value: ks__base.handle_combat_task_immediately
  config_rigidbody_move_register:
    seq: []
    instances: {}
  config_rigidbody_move:
    seq:
      - id: ks__base
        type: config_move
      - id: ks__bit_field
        type: u1
      - id: const_speed_ratio
        type: f4
        if: ks__has_field_const_speed_ratio
      - id: start_close_to_ground
        type: u1
        if: ks__has_field_start_close_to_ground
      - id: enable_close_to_ground_when_tick
        type: u1
        if: ks__has_field_enable_close_to_ground_when_tick
      - id: follow_reference_system
        type: u1
        if: ks__has_field_follow_reference_system
    instances:
      ks__has_field_const_speed_ratio: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_start_close_to_ground: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_enable_close_to_ground_when_tick: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_follow_reference_system: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      velocity_force:
        value: ks__base.velocity_force
      handle_combat_task_immediately:
        value: ks__base.handle_combat_task_immediately
  config_vehicle_move_register:
    seq: []
    instances: {}
  config_vehicle_move:
    seq:
      - id: ks__base
        type: config_move
    instances:
      # Base class fields
      velocity_force:
        value: ks__base.velocity_force
      handle_combat_task_immediately:
        value: ks__base.handle_combat_task_immediately
  config_boat_move_register:
    seq: []
    instances: {}
  config_boat_move:
    seq:
      - id: ks__base
        type: config_vehicle_move
    instances:
      # Base class fields
      velocity_force:
        value: ks__base.velocity_force
      handle_combat_task_immediately:
        value: ks__base.handle_combat_task_immediately
  config_skiff_move_register:
    seq: []
    instances: {}
  config_skiff_move:
    seq:
      - id: ks__base
        type: config_vehicle_move
    instances:
      # Base class fields
      velocity_force:
        value: ks__base.velocity_force
      handle_combat_task_immediately:
        value: ks__base.handle_combat_task_immediately
  ks__enum__facing_move_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: facing_move_type
  facing_move_type_comparer:
    seq: []
    instances: {}
  ks__enum__monster_size_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: monster_size_type
  monster_size_type_comparer:
    seq: []
    instances: {}
  ks__enum__position_modify_state:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: position_modify_state
  position_modify_state_comparer:
    seq: []
    instances: {}
  config_animator_move_register:
    seq: []
    instances: {}
  ks__kvp_of_dict__aux_types__vlq_base128_le_u_ks__enum__position_modify_state:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_u
      - id: value
        type: ks__enum__position_modify_state
  ks__dict_of__aux_types__vlq_base128_le_u_ks__enum__position_modify_state:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_u_ks__enum__position_modify_state
        repeat: expr
        repeat-expr: length.value
  config_animator_move:
    seq:
      - id: ks__base
        type: config_move
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: init_with_ground_hit_check
        type: u1
        if: ks__has_field_init_with_ground_hit_check
      - id: smoothed_speed
        type: config_move_smoothed_speed
        if: ks__has_field_smoothed_speed
      - id: move_on_ground
        type: u1
        if: ks__has_field_move_on_ground
      - id: move_on_water
        type: u1
        if: ks__has_field_move_on_water
      - id: move_on_water_depth
        type: f4
        if: ks__has_field_move_on_water_depth
      - id: facing_move
        type: ks__enum__facing_move_type
        if: ks__has_field_facing_move
      - id: monster_size_type
        type: ks__enum__monster_size_type
        if: ks__has_field_monster_size_type
      - id: position_modify_state
        type: ks__enum__position_modify_state
        if: ks__has_field_position_modify_state
      - id: position_modify_state_map
        type: ks__dict_of__aux_types__vlq_base128_le_u_ks__enum__position_modify_state
        if: ks__has_field_position_modify_state_map
      - id: destroy_rock_when_init
        type: u1
        if: ks__has_field_destroy_rock_when_init
      - id: yaw_speed_ratio
        type: f4
        if: ks__has_field_yaw_speed_ratio
      - id: velocity_ratio
        type: f4
        if: ks__has_field_velocity_ratio
    instances:
      ks__has_field_init_with_ground_hit_check: # Field №0
        value: (ks__bit_field.value & 0b000000000001) != 0
      ks__has_field_smoothed_speed: # Field №1
        value: (ks__bit_field.value & 0b000000000010) != 0
      ks__has_field_move_on_ground: # Field №2
        value: (ks__bit_field.value & 0b000000000100) != 0
      ks__has_field_move_on_water: # Field №3
        value: (ks__bit_field.value & 0b000000001000) != 0
      ks__has_field_move_on_water_depth: # Field №4
        value: (ks__bit_field.value & 0b000000010000) != 0
      ks__has_field_facing_move: # Field №5
        value: (ks__bit_field.value & 0b000000100000) != 0
      ks__has_field_monster_size_type: # Field №6
        value: (ks__bit_field.value & 0b000001000000) != 0
      ks__has_field_position_modify_state: # Field №7
        value: (ks__bit_field.value & 0b000010000000) != 0
      ks__has_field_position_modify_state_map: # Field №8
        value: (ks__bit_field.value & 0b000100000000) != 0
      ks__has_field_destroy_rock_when_init: # Field №9
        value: (ks__bit_field.value & 0b001000000000) != 0
      ks__has_field_yaw_speed_ratio: # Field №10
        value: (ks__bit_field.value & 0b010000000000) != 0
      ks__has_field_velocity_ratio: # Field №11
        value: (ks__bit_field.value & 0b100000000000) != 0
      # Base class fields
      velocity_force:
        value: ks__base.velocity_force
      handle_combat_task_immediately:
        value: ks__base.handle_combat_task_immediately
  config_npc_move_register:
    seq: []
    instances: {}
  config_npc_move:
    seq:
      - id: ks__base
        type: config_animator_move
    instances:
      # Base class fields
      init_with_ground_hit_check:
        value: ks__base.init_with_ground_hit_check
      smoothed_speed:
        value: ks__base.smoothed_speed
      move_on_ground:
        value: ks__base.move_on_ground
      move_on_water:
        value: ks__base.move_on_water
      move_on_water_depth:
        value: ks__base.move_on_water_depth
      facing_move:
        value: ks__base.facing_move
      monster_size_type:
        value: ks__base.monster_size_type
      position_modify_state:
        value: ks__base.position_modify_state
      position_modify_state_map:
        value: ks__base.position_modify_state_map
      destroy_rock_when_init:
        value: ks__base.destroy_rock_when_init
      yaw_speed_ratio:
        value: ks__base.yaw_speed_ratio
      velocity_ratio:
        value: ks__base.velocity_ratio
      velocity_force:
        value: ks__base.velocity_force
      handle_combat_task_immediately:
        value: ks__base.handle_combat_task_immediately
  ks__enum__move_platform_delay_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: move_platform_delay_type
  move_platform_delay_type_comparer:
    seq: []
    instances: {}
  config_platform_move_register:
    seq: []
    instances: {}
  config_platform_move:
    seq:
      - id: ks__base
        type: config_move
      - id: ks__bit_field
        type: u1
      - id: avatar_trigger_event_distance
        type: f4
        if: ks__has_field_avatar_trigger_event_distance
      - id: is_moving_water
        type: u1
        if: ks__has_field_is_moving_water
      - id: route
        type: config_route
        if: ks__has_field_route
      - id: delay_type
        type: ks__enum__move_platform_delay_type
        if: ks__has_field_delay_type
    instances:
      ks__has_field_avatar_trigger_event_distance: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_is_moving_water: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_route: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_delay_type: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      velocity_force:
        value: ks__base.velocity_force
      handle_combat_task_immediately:
        value: ks__base.handle_combat_task_immediately
  config_scene_prop_animator_move_register:
    seq: []
    instances: {}
  config_scene_prop_animator_move:
    seq:
      - id: ks__base
        type: config_move
    instances:
      # Base class fields
      velocity_force:
        value: ks__base.velocity_force
      handle_combat_task_immediately:
        value: ks__base.handle_combat_task_immediately
  config_windmill_move_register:
    seq: []
    instances: {}
  config_windmill_move:
    seq:
      - id: ks__base
        type: config_move
    instances:
      # Base class fields
      velocity_force:
        value: ks__base.velocity_force
      handle_combat_task_immediately:
        value: ks__base.handle_combat_task_immediately
  config_bullet_move_angle:
    seq: []
    instances: {}
  config_bullet_move_angle_by_velocity_register:
    seq: []
    instances: {}
  config_bullet_move_angle_by_velocity:
    seq:
      - id: ks__base
        type: config_bullet_move_angle
      - id: ks__bit_field
        type: u1
      - id: trace_lerp_coef
        type: f4
        if: ks__has_field_trace_lerp_coef
      - id: is_smooth_rotation
        type: u1
        if: ks__has_field_is_smooth_rotation
    instances:
      ks__has_field_trace_lerp_coef: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_is_smooth_rotation: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_bullet_move_angle_rotating_register:
    seq: []
    instances: {}
  config_bullet_move_angle_rotating:
    seq:
      - id: ks__base
        type: config_bullet_move_angle
      - id: ks__bit_field
        type: u1
      - id: angular_velocity
        type: vector
        if: ks__has_field_angular_velocity
    instances:
      ks__has_field_angular_velocity: # Field №0
        value: (ks__bit_field & 0b1) != 0
  ks__enum__unstick_action:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: unstick_action
  unstick_action_comparer:
    seq: []
    instances: {}
  config_move_stick_to_ground:
    seq:
      - id: ks__bit_field
        type: u1
      - id: max_step_height
        type: f4
        if: ks__has_field_max_step_height
      - id: max_slope_angle
        type: f4
        if: ks__has_field_max_slope_angle
      - id: height_to_ground
        type: f4
        if: ks__has_field_height_to_ground
      - id: flexible_range
        type: f4
        if: ks__has_field_flexible_range
      - id: is_stick_to_water
        type: u1
        if: ks__has_field_is_stick_to_water
      - id: unstick_when_down_slide
        type: ks__enum__unstick_action
        if: ks__has_field_unstick_when_down_slide
      - id: unstick_when_up_slide
        type: ks__enum__unstick_action
        if: ks__has_field_unstick_when_up_slide
    instances:
      ks__has_field_max_step_height: # Field №0
        value: (ks__bit_field & 0b0000001) != 0
      ks__has_field_max_slope_angle: # Field №1
        value: (ks__bit_field & 0b0000010) != 0
      ks__has_field_height_to_ground: # Field №2
        value: (ks__bit_field & 0b0000100) != 0
      ks__has_field_flexible_range: # Field №3
        value: (ks__bit_field & 0b0001000) != 0
      ks__has_field_is_stick_to_water: # Field №4
        value: (ks__bit_field & 0b0010000) != 0
      ks__has_field_unstick_when_down_slide: # Field №5
        value: (ks__bit_field & 0b0100000) != 0
      ks__has_field_unstick_when_up_slide: # Field №6
        value: (ks__bit_field & 0b1000000) != 0
  config_bullet_move_register:
    seq: []
    instances: {}
  config_bullet_move:
    seq:
      - id: ks__base
        type: config_move
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: speed
        type: f4
        if: ks__has_field_speed
      - id: max_speed
        type: f4
        if: ks__has_field_max_speed
      - id: min_speed
        type: f4
        if: ks__has_field_min_speed
      - id: angler_velocity
        type: f4
        if: ks__has_field_angler_velocity
      - id: acceleration
        type: f4
        if: ks__has_field_acceleration
      - id: acceleration_time
        type: f4
        if: ks__has_field_acceleration_time
      - id: can_born_in_water
        type: u1
        if: ks__has_field_can_born_in_water
      - id: update_angle
        type: ks__disp__config_bullet_move_angle
        if: ks__has_field_update_angle
      - id: delay
        type: f4
        if: ks__has_field_delay
      - id: stick_to_ground
        type: config_move_stick_to_ground
        if: ks__has_field_stick_to_ground
      - id: sync_to_remote
        type: u1
        if: ks__has_field_sync_to_remote
      - id: blocked_by_monster_radius
        type: f4
        if: ks__has_field_blocked_by_monster_radius
    instances:
      ks__has_field_speed: # Field №0
        value: (ks__bit_field.value & 0b000000000001) != 0
      ks__has_field_max_speed: # Field №1
        value: (ks__bit_field.value & 0b000000000010) != 0
      ks__has_field_min_speed: # Field №2
        value: (ks__bit_field.value & 0b000000000100) != 0
      ks__has_field_angler_velocity: # Field №3
        value: (ks__bit_field.value & 0b000000001000) != 0
      ks__has_field_acceleration: # Field №4
        value: (ks__bit_field.value & 0b000000010000) != 0
      ks__has_field_acceleration_time: # Field №5
        value: (ks__bit_field.value & 0b000000100000) != 0
      ks__has_field_can_born_in_water: # Field №6
        value: (ks__bit_field.value & 0b000001000000) != 0
      ks__has_field_update_angle: # Field №7
        value: (ks__bit_field.value & 0b000010000000) != 0
      ks__has_field_delay: # Field №8
        value: (ks__bit_field.value & 0b000100000000) != 0
      ks__has_field_stick_to_ground: # Field №9
        value: (ks__bit_field.value & 0b001000000000) != 0
      ks__has_field_sync_to_remote: # Field №10
        value: (ks__bit_field.value & 0b010000000000) != 0
      ks__has_field_blocked_by_monster_radius: # Field №11
        value: (ks__bit_field.value & 0b100000000000) != 0
      # Base class fields
      velocity_force:
        value: ks__base.velocity_force
      handle_combat_task_immediately:
        value: ks__base.handle_combat_task_immediately
  config_liner_bullet_move_register:
    seq: []
    instances: {}
  config_liner_bullet_move:
    seq:
      - id: ks__base
        type: config_bullet_move
    instances:
      # Base class fields
      speed:
        value: ks__base.speed
      max_speed:
        value: ks__base.max_speed
      min_speed:
        value: ks__base.min_speed
      angler_velocity:
        value: ks__base.angler_velocity
      acceleration:
        value: ks__base.acceleration
      acceleration_time:
        value: ks__base.acceleration_time
      can_born_in_water:
        value: ks__base.can_born_in_water
      update_angle:
        value: ks__base.update_angle
      delay:
        value: ks__base.delay
      stick_to_ground:
        value: ks__base.stick_to_ground
      sync_to_remote:
        value: ks__base.sync_to_remote
      blocked_by_monster_radius:
        value: ks__base.blocked_by_monster_radius
      velocity_force:
        value: ks__base.velocity_force
      handle_combat_task_immediately:
        value: ks__base.handle_combat_task_immediately
  config_animation_bullet_move_register:
    seq: []
    instances: {}
  config_animation_bullet_move:
    seq:
      - id: ks__base
        type: config_bullet_move
    instances:
      # Base class fields
      speed:
        value: ks__base.speed
      max_speed:
        value: ks__base.max_speed
      min_speed:
        value: ks__base.min_speed
      angler_velocity:
        value: ks__base.angler_velocity
      acceleration:
        value: ks__base.acceleration
      acceleration_time:
        value: ks__base.acceleration_time
      can_born_in_water:
        value: ks__base.can_born_in_water
      update_angle:
        value: ks__base.update_angle
      delay:
        value: ks__base.delay
      stick_to_ground:
        value: ks__base.stick_to_ground
      sync_to_remote:
        value: ks__base.sync_to_remote
      blocked_by_monster_radius:
        value: ks__base.blocked_by_monster_radius
      velocity_force:
        value: ks__base.velocity_force
      handle_combat_task_immediately:
        value: ks__base.handle_combat_task_immediately
  config_surround_bullet_move_register:
    seq: []
    instances: {}
  config_surround_bullet_move:
    seq:
      - id: ks__base
        type: config_bullet_move
      - id: ks__bit_field
        type: u1
      - id: clockwise
        type: u1
        if: ks__has_field_clockwise
      - id: radius
        type: f4
        if: ks__has_field_radius
      - id: trace_on_y_axis
        type: u1
        if: ks__has_field_trace_on_y_axis
      - id: destroy_when_target_die
        type: u1
        if: ks__has_field_destroy_when_target_die
    instances:
      ks__has_field_clockwise: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_radius: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_trace_on_y_axis: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_destroy_when_target_die: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      speed:
        value: ks__base.speed
      max_speed:
        value: ks__base.max_speed
      min_speed:
        value: ks__base.min_speed
      angler_velocity:
        value: ks__base.angler_velocity
      acceleration:
        value: ks__base.acceleration
      acceleration_time:
        value: ks__base.acceleration_time
      can_born_in_water:
        value: ks__base.can_born_in_water
      update_angle:
        value: ks__base.update_angle
      delay:
        value: ks__base.delay
      stick_to_ground:
        value: ks__base.stick_to_ground
      sync_to_remote:
        value: ks__base.sync_to_remote
      blocked_by_monster_radius:
        value: ks__base.blocked_by_monster_radius
      velocity_force:
        value: ks__base.velocity_force
      handle_combat_task_immediately:
        value: ks__base.handle_combat_task_immediately
  config_pinball_bullet_move_register:
    seq: []
    instances: {}
  config_pinball_bullet_move:
    seq:
      - id: ks__base
        type: config_bullet_move
      - id: ks__bit_field
        type: u1
      - id: radius
        type: f4
        if: ks__has_field_radius
      - id: trace_on_y_axis
        type: u1
        if: ks__has_field_trace_on_y_axis
      - id: destroy_when_target_die
        type: u1
        if: ks__has_field_destroy_when_target_die
      - id: random_back_angle_added
        type: f4
        if: ks__has_field_random_back_angle_added
      - id: rebound_interval
        type: f4
        if: ks__has_field_rebound_interval
      - id: out_of_range_fix_cd
        type: f4
        if: ks__has_field_out_of_range_fix_cd
    instances:
      ks__has_field_radius: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_trace_on_y_axis: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_destroy_when_target_die: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_random_back_angle_added: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_rebound_interval: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_out_of_range_fix_cd: # Field №5
        value: (ks__bit_field & 0b100000) != 0
      # Base class fields
      speed:
        value: ks__base.speed
      max_speed:
        value: ks__base.max_speed
      min_speed:
        value: ks__base.min_speed
      angler_velocity:
        value: ks__base.angler_velocity
      acceleration:
        value: ks__base.acceleration
      acceleration_time:
        value: ks__base.acceleration_time
      can_born_in_water:
        value: ks__base.can_born_in_water
      update_angle:
        value: ks__base.update_angle
      delay:
        value: ks__base.delay
      stick_to_ground:
        value: ks__base.stick_to_ground
      sync_to_remote:
        value: ks__base.sync_to_remote
      blocked_by_monster_radius:
        value: ks__base.blocked_by_monster_radius
      velocity_force:
        value: ks__base.velocity_force
      handle_combat_task_immediately:
        value: ks__base.handle_combat_task_immediately
  config_parabola_bullet_move_correction_register:
    seq: []
    instances: {}
  config_parabola_bullet_move_correction:
    seq:
      - id: ks__base
        type: config_move_correction
      - id: ks__bit_field
        type: u1
      - id: deviation
        type: f4
        if: ks__has_field_deviation
      - id: fix_angle_of_ver
        type: f4
        if: ks__has_field_fix_angle_of_ver
      - id: min_speed
        type: f4
        if: ks__has_field_min_speed
      - id: max_speed
        type: f4
        if: ks__has_field_max_speed
    instances:
      ks__has_field_deviation: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_fix_angle_of_ver: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_min_speed: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_max_speed: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  config_parabola_bullet_move_register:
    seq: []
    instances: {}
  config_parabola_bullet_move:
    seq:
      - id: ks__base
        type: config_bullet_move
      - id: ks__bit_field
        type: u1
      - id: angle_off_hor
        type: f4
        if: ks__has_field_angle_off_hor
      - id: gravity_of_acceleration
        type: f4
        if: ks__has_field_gravity_of_acceleration
      - id: correction
        type: ks__disp__config_move_correction
        if: ks__has_field_correction
    instances:
      ks__has_field_angle_off_hor: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_gravity_of_acceleration: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_correction: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      speed:
        value: ks__base.speed
      max_speed:
        value: ks__base.max_speed
      min_speed:
        value: ks__base.min_speed
      angler_velocity:
        value: ks__base.angler_velocity
      acceleration:
        value: ks__base.acceleration
      acceleration_time:
        value: ks__base.acceleration_time
      can_born_in_water:
        value: ks__base.can_born_in_water
      update_angle:
        value: ks__base.update_angle
      delay:
        value: ks__base.delay
      stick_to_ground:
        value: ks__base.stick_to_ground
      sync_to_remote:
        value: ks__base.sync_to_remote
      blocked_by_monster_radius:
        value: ks__base.blocked_by_monster_radius
      velocity_force:
        value: ks__base.velocity_force
      handle_combat_task_immediately:
        value: ks__base.handle_combat_task_immediately
  config_fishing_aim_parabola_bullet_move_register:
    seq: []
    instances: {}
  config_fishing_aim_parabola_bullet_move:
    seq:
      - id: ks__base
        type: config_bullet_move
      - id: ks__bit_field
        type: u1
      - id: gravity
        type: f4
        if: ks__has_field_gravity
      - id: init_speed
        type: f4
        if: ks__has_field_init_speed
      - id: global_value_key
        type: aux_types::string
        if: ks__has_field_global_value_key
    instances:
      ks__has_field_gravity: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_init_speed: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_global_value_key: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      speed:
        value: ks__base.speed
      max_speed:
        value: ks__base.max_speed
      min_speed:
        value: ks__base.min_speed
      angler_velocity:
        value: ks__base.angler_velocity
      acceleration:
        value: ks__base.acceleration
      acceleration_time:
        value: ks__base.acceleration_time
      can_born_in_water:
        value: ks__base.can_born_in_water
      update_angle:
        value: ks__base.update_angle
      delay:
        value: ks__base.delay
      stick_to_ground:
        value: ks__base.stick_to_ground
      sync_to_remote:
        value: ks__base.sync_to_remote
      blocked_by_monster_radius:
        value: ks__base.blocked_by_monster_radius
      velocity_force:
        value: ks__base.velocity_force
      handle_combat_task_immediately:
        value: ks__base.handle_combat_task_immediately
  config_track_bullet_move_register:
    seq: []
    instances: {}
  config_track_bullet_move:
    seq:
      - id: ks__base
        type: config_bullet_move
      - id: ks__bit_field
        type: u1
      - id: destroy_when_target_die
        type: u1
        if: ks__has_field_destroy_when_target_die
      - id: trace_on_y_axis
        type: u1
        if: ks__has_field_trace_on_y_axis
    instances:
      ks__has_field_destroy_when_target_die: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_trace_on_y_axis: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      speed:
        value: ks__base.speed
      max_speed:
        value: ks__base.max_speed
      min_speed:
        value: ks__base.min_speed
      angler_velocity:
        value: ks__base.angler_velocity
      acceleration:
        value: ks__base.acceleration
      acceleration_time:
        value: ks__base.acceleration_time
      can_born_in_water:
        value: ks__base.can_born_in_water
      update_angle:
        value: ks__base.update_angle
      delay:
        value: ks__base.delay
      stick_to_ground:
        value: ks__base.stick_to_ground
      sync_to_remote:
        value: ks__base.sync_to_remote
      blocked_by_monster_radius:
        value: ks__base.blocked_by_monster_radius
      velocity_force:
        value: ks__base.velocity_force
      handle_combat_task_immediately:
        value: ks__base.handle_combat_task_immediately
  config_liner_parabola_bullet_move_register:
    seq: []
    instances: {}
  config_liner_parabola_bullet_move:
    seq:
      - id: ks__base
        type: config_liner_bullet_move
      - id: ks__bit_field
        type: u1
      - id: straight_range
        type: f4
        if: ks__has_field_straight_range
      - id: gravity_of_acceleration
        type: f4
        if: ks__has_field_gravity_of_acceleration
      - id: air_resistance
        type: f4
        if: ks__has_field_air_resistance
    instances:
      ks__has_field_straight_range: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_gravity_of_acceleration: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_air_resistance: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      speed:
        value: ks__base.speed
      max_speed:
        value: ks__base.max_speed
      min_speed:
        value: ks__base.min_speed
      angler_velocity:
        value: ks__base.angler_velocity
      acceleration:
        value: ks__base.acceleration
      acceleration_time:
        value: ks__base.acceleration_time
      can_born_in_water:
        value: ks__base.can_born_in_water
      update_angle:
        value: ks__base.update_angle
      delay:
        value: ks__base.delay
      stick_to_ground:
        value: ks__base.stick_to_ground
      sync_to_remote:
        value: ks__base.sync_to_remote
      blocked_by_monster_radius:
        value: ks__base.blocked_by_monster_radius
      velocity_force:
        value: ks__base.velocity_force
      handle_combat_task_immediately:
        value: ks__base.handle_combat_task_immediately
  config_itano_circus_bullet_move_register:
    seq: []
    instances: {}
  config_itano_circus_bullet_move:
    seq:
      - id: ks__base
        type: config_bullet_move
      - id: ks__bit_field
        type: u1
      - id: itano_circus_start_angler
        type: f4
        if: ks__has_field_itano_circus_start_angler
      - id: destroy_when_target_die
        type: u1
        if: ks__has_field_destroy_when_target_die
      - id: guidance_delay
        type: f4
        if: ks__has_field_guidance_delay
      - id: guidance_speed_change
        type: u1
        if: ks__has_field_guidance_speed_change
      - id: guidance_min_angler_velocity
        type: f4
        if: ks__has_field_guidance_min_angler_velocity
      - id: guidance_duration
        type: f4
        if: ks__has_field_guidance_duration
    instances:
      ks__has_field_itano_circus_start_angler: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_destroy_when_target_die: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_guidance_delay: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_guidance_speed_change: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_guidance_min_angler_velocity: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_guidance_duration: # Field №5
        value: (ks__bit_field & 0b100000) != 0
      # Base class fields
      speed:
        value: ks__base.speed
      max_speed:
        value: ks__base.max_speed
      min_speed:
        value: ks__base.min_speed
      angler_velocity:
        value: ks__base.angler_velocity
      acceleration:
        value: ks__base.acceleration
      acceleration_time:
        value: ks__base.acceleration_time
      can_born_in_water:
        value: ks__base.can_born_in_water
      update_angle:
        value: ks__base.update_angle
      delay:
        value: ks__base.delay
      stick_to_ground:
        value: ks__base.stick_to_ground
      sync_to_remote:
        value: ks__base.sync_to_remote
      blocked_by_monster_radius:
        value: ks__base.blocked_by_monster_radius
      velocity_force:
        value: ks__base.velocity_force
      handle_combat_task_immediately:
        value: ks__base.handle_combat_task_immediately
  ks__enum__follow_target:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: follow_target
  follow_target_comparer:
    seq: []
    instances: {}
  ks__enum__entity_collider_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: entity_collider_type
  entity_collider_type_comparer:
    seq: []
    instances: {}
  config_entity_collider:
    seq:
      - id: ks__bit_field
        type: u1
      - id: type
        type: ks__enum__entity_collider_type
        if: ks__has_field_type
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field & 0b1) != 0
  ks__array_of__config_entity_collider__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_entity_collider
        repeat: expr
        repeat-expr: length.value
  config_ignore_collision:
    seq:
      - id: ks__bit_field
        type: u1
      - id: self_colliders
        type: ks__array_of__config_entity_collider__length_u
        if: ks__has_field_self_colliders
      - id: target_colliders
        type: ks__array_of__config_entity_collider__length_u
        if: ks__has_field_target_colliders
    instances:
      ks__has_field_self_colliders: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_target_colliders: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_move_disable_collision:
    seq:
      - id: ks__bit_field
        type: u1
      - id: self_colliders
        type: ks__array_of__config_entity_collider__length_u
        if: ks__has_field_self_colliders
      - id: delay_enable_time
        type: f4
        if: ks__has_field_delay_enable_time
    instances:
      ks__has_field_self_colliders: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_delay_enable_time: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_move_audio:
    seq:
      - id: ks__bit_field
        type: u1
      - id: start_event
        type: config_wwise_string
        if: ks__has_field_start_event
      - id: stop_event
        type: config_wwise_string
        if: ks__has_field_stop_event
      - id: move_state_param
        type: config_wwise_string
        if: ks__has_field_move_state_param
      - id: fall_on_ground_event
        type: config_wwise_string
        if: ks__has_field_fall_on_ground_event
    instances:
      ks__has_field_start_event: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_stop_event: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_move_state_param: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_fall_on_ground_event: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  config_follow_move_register:
    seq: []
    instances: {}
  config_follow_move:
    seq:
      - id: ks__base
        type: config_move
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: target
        type: ks__enum__follow_target
        if: ks__has_field_target
      - id: group_target_instance_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_group_target_instance_id
      - id: attach_point
        type: aux_types::string
        if: ks__has_field_attach_point
      - id: follow_rotation
        type: u1
        if: ks__has_field_follow_rotation
      - id: offset
        type: vector
        if: ks__has_field_offset
      - id: forward
        type: vector
        if: ks__has_field_forward
      - id: follow_owner_invisible
        type: u1
        if: ks__has_field_follow_owner_invisible
      - id: fixed_y
        type: f4
        if: ks__has_field_fixed_y
      - id: ignore_collision
        type: config_ignore_collision
        if: ks__has_field_ignore_collision
      - id: move_disable_collision
        type: config_move_disable_collision
        if: ks__has_field_move_disable_collision
      - id: move_audio
        type: config_move_audio
        if: ks__has_field_move_audio
      - id: sync_trans_to_server
        type: u1
        if: ks__has_field_sync_trans_to_server
      - id: sync_interval
        type: f4
        if: ks__has_field_sync_interval
      - id: handle_in_late_tick
        type: u1
        if: ks__has_field_handle_in_late_tick
    instances:
      ks__has_field_target: # Field №0
        value: (ks__bit_field.value & 0b00000000000001) != 0
      ks__has_field_group_target_instance_id: # Field №1
        value: (ks__bit_field.value & 0b00000000000010) != 0
      ks__has_field_attach_point: # Field №2
        value: (ks__bit_field.value & 0b00000000000100) != 0
      ks__has_field_follow_rotation: # Field №3
        value: (ks__bit_field.value & 0b00000000001000) != 0
      ks__has_field_offset: # Field №4
        value: (ks__bit_field.value & 0b00000000010000) != 0
      ks__has_field_forward: # Field №5
        value: (ks__bit_field.value & 0b00000000100000) != 0
      ks__has_field_follow_owner_invisible: # Field №6
        value: (ks__bit_field.value & 0b00000001000000) != 0
      ks__has_field_fixed_y: # Field №7
        value: (ks__bit_field.value & 0b00000010000000) != 0
      ks__has_field_ignore_collision: # Field №8
        value: (ks__bit_field.value & 0b00000100000000) != 0
      ks__has_field_move_disable_collision: # Field №9
        value: (ks__bit_field.value & 0b00001000000000) != 0
      ks__has_field_move_audio: # Field №10
        value: (ks__bit_field.value & 0b00010000000000) != 0
      ks__has_field_sync_trans_to_server: # Field №11
        value: (ks__bit_field.value & 0b00100000000000) != 0
      ks__has_field_sync_interval: # Field №12
        value: (ks__bit_field.value & 0b01000000000000) != 0
      ks__has_field_handle_in_late_tick: # Field №13
        value: (ks__bit_field.value & 0b10000000000000) != 0
      # Base class fields
      velocity_force:
        value: ks__base.velocity_force
      handle_combat_task_immediately:
        value: ks__base.handle_combat_task_immediately
  config_platform_ui_action:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: paths
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_paths
      - id: indent
        type: f4
        if: ks__has_field_indent
      - id: scale
        type: f4
        if: ks__has_field_scale
      - id: top
        type: f4
        if: ks__has_field_top
      - id: bottom
        type: f4
        if: ks__has_field_bottom
      - id: left
        type: f4
        if: ks__has_field_left
      - id: right
        type: f4
        if: ks__has_field_right
      - id: posx
        type: f4
        if: ks__has_field_posx
      - id: posy
        type: f4
        if: ks__has_field_posy
      - id: active
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_active
      - id: first_active
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_first_active
      - id: animation
        type: aux_types::string
        if: ks__has_field_animation
    instances:
      ks__has_field_paths: # Field №0
        value: (ks__bit_field.value & 0b000000000001) != 0
      ks__has_field_indent: # Field №1
        value: (ks__bit_field.value & 0b000000000010) != 0
      ks__has_field_scale: # Field №2
        value: (ks__bit_field.value & 0b000000000100) != 0
      ks__has_field_top: # Field №3
        value: (ks__bit_field.value & 0b000000001000) != 0
      ks__has_field_bottom: # Field №4
        value: (ks__bit_field.value & 0b000000010000) != 0
      ks__has_field_left: # Field №5
        value: (ks__bit_field.value & 0b000000100000) != 0
      ks__has_field_right: # Field №6
        value: (ks__bit_field.value & 0b000001000000) != 0
      ks__has_field_posx: # Field №7
        value: (ks__bit_field.value & 0b000010000000) != 0
      ks__has_field_posy: # Field №8
        value: (ks__bit_field.value & 0b000100000000) != 0
      ks__has_field_active: # Field №9
        value: (ks__bit_field.value & 0b001000000000) != 0
      ks__has_field_first_active: # Field №10
        value: (ks__bit_field.value & 0b010000000000) != 0
      ks__has_field_animation: # Field №11
        value: (ks__bit_field.value & 0b100000000000) != 0
  ks__kvp_of_dict__aux_types__string_config_platform_ui_action:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: config_platform_ui_action
  ks__dict_of__aux_types__string_config_platform_ui_action:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_config_platform_ui_action
        repeat: expr
        repeat-expr: length.value
  config_platform_ui_data:
    seq:
      - id: ks__bit_field
        type: u1
      - id: base_canvans_action
        type: config_platform_ui_action
        if: ks__has_field_base_canvans_action
      - id: base_page_action
        type: config_platform_ui_action
        if: ks__has_field_base_page_action
      - id: context_actions
        type: ks__dict_of__aux_types__string_config_platform_ui_action
        if: ks__has_field_context_actions
    instances:
      ks__has_field_base_canvans_action: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_base_page_action: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_context_actions: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__kvp_of_dict__aux_types__string_config_platform_ui_data:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: config_platform_ui_data
  ks__dict_of__aux_types__string_config_platform_ui_data:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_config_platform_ui_data
        repeat: expr
        repeat-expr: length.value
  config_muti_platform_ui_data:
    seq:
      - id: ks__bit_field
        type: u1
      - id: multi_platform
        type: ks__dict_of__aux_types__string_config_platform_ui_data
        if: ks__has_field_multi_platform
    instances:
      ks__has_field_multi_platform: # Field №0
        value: (ks__bit_field & 0b1) != 0
  ks__enum__music_game_param:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_u
    instances:
      value:
        value: data.value
        enum: music_game_param
  music_game_param_comparer:
    seq: []
    instances: {}
  ks__enum__music_stimulus:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_u
    instances:
      value:
        value: data.value
        enum: music_stimulus
  music_stimulus_comparer:
    seq: []
    instances: {}
  ks__enum__music_behaviour_ignorance:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_u
    instances:
      value:
        value: data.value
        enum: music_behaviour_ignorance
  music_behaviour_ignorance_comparer:
    seq: []
    instances: {}
  config_music_condition:
    seq:
      - id: ks__bit_field
        type: u1
      - id: id
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_id
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_music_true_condition_register:
    seq: []
    instances: {}
  config_music_true_condition:
    seq:
      - id: ks__base
        type: config_music_condition
    instances:
      # Base class fields
      id:
        value: ks__base.id
  config_music_negative_condition_register:
    seq: []
    instances: {}
  config_music_negative_condition:
    seq:
      - id: ks__base
        type: config_music_condition
      - id: ks__bit_field
        type: u1
      - id: inner_id
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_inner_id
    instances:
      ks__has_field_inner_id: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      id:
        value: ks__base.id
  config_music_binary_condition_register:
    seq: []
    instances: {}
  config_music_binary_condition:
    seq:
      - id: ks__base
        type: config_music_condition
      - id: ks__bit_field
        type: u1
      - id: lhs_id
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_lhs_id
      - id: rhs_id
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_rhs_id
    instances:
      ks__has_field_lhs_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_rhs_id: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      id:
        value: ks__base.id
  config_music_conjunctive_condition_register:
    seq: []
    instances: {}
  config_music_conjunctive_condition:
    seq:
      - id: ks__base
        type: config_music_binary_condition
    instances:
      # Base class fields
      lhs_id:
        value: ks__base.lhs_id
      rhs_id:
        value: ks__base.rhs_id
      id:
        value: ks__base.id
  config_music_disjunctive_condition_register:
    seq: []
    instances: {}
  config_music_disjunctive_condition:
    seq:
      - id: ks__base
        type: config_music_binary_condition
    instances:
      # Base class fields
      lhs_id:
        value: ks__base.lhs_id
      rhs_id:
        value: ks__base.rhs_id
      id:
        value: ks__base.id
  config_music_parameter_condition_register:
    seq: []
    instances: {}
  config_music_parameter_condition:
    seq:
      - id: ks__base
        type: config_music_condition
      - id: ks__bit_field
        type: u1
      - id: game_param
        type: ks__enum__music_game_param
        if: ks__has_field_game_param
    instances:
      ks__has_field_game_param: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      id:
        value: ks__base.id
  config_music_int32condition_register:
    seq: []
    instances: {}
  config_music_int32condition:
    seq:
      - id: ks__base
        type: config_music_parameter_condition
      - id: ks__bit_field
        type: u1
      - id: value
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_value
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      game_param:
        value: ks__base.game_param
      id:
        value: ks__base.id
  config_music_int32equality_condition_register:
    seq: []
    instances: {}
  config_music_int32equality_condition:
    seq:
      - id: ks__base
        type: config_music_int32condition
    instances:
      # Base class fields
      value:
        value: ks__base.value
      game_param:
        value: ks__base.game_param
      id:
        value: ks__base.id
  config_music_int32inequality_condition_register:
    seq: []
    instances: {}
  config_music_int32inequality_condition:
    seq:
      - id: ks__base
        type: config_music_int32condition
    instances:
      # Base class fields
      value:
        value: ks__base.value
      game_param:
        value: ks__base.game_param
      id:
        value: ks__base.id
  config_music_int32greater_than_condition_register:
    seq: []
    instances: {}
  config_music_int32greater_than_condition:
    seq:
      - id: ks__base
        type: config_music_int32condition
    instances:
      # Base class fields
      value:
        value: ks__base.value
      game_param:
        value: ks__base.game_param
      id:
        value: ks__base.id
  config_music_int32less_than_condition_register:
    seq: []
    instances: {}
  config_music_int32less_than_condition:
    seq:
      - id: ks__base
        type: config_music_int32condition
    instances:
      # Base class fields
      value:
        value: ks__base.value
      game_param:
        value: ks__base.game_param
      id:
        value: ks__base.id
  config_music_int32no_greater_than_condition_register:
    seq: []
    instances: {}
  config_music_int32no_greater_than_condition:
    seq:
      - id: ks__base
        type: config_music_int32condition
    instances:
      # Base class fields
      value:
        value: ks__base.value
      game_param:
        value: ks__base.game_param
      id:
        value: ks__base.id
  config_music_int32no_less_than_condition_register:
    seq: []
    instances: {}
  config_music_int32no_less_than_condition:
    seq:
      - id: ks__base
        type: config_music_int32condition
    instances:
      # Base class fields
      value:
        value: ks__base.value
      game_param:
        value: ks__base.game_param
      id:
        value: ks__base.id
  config_music_u_int32condition_register:
    seq: []
    instances: {}
  config_music_u_int32condition:
    seq:
      - id: ks__base
        type: config_music_parameter_condition
      - id: ks__bit_field
        type: u1
      - id: value
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_value
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      game_param:
        value: ks__base.game_param
      id:
        value: ks__base.id
  config_music_u_int32equality_condition_register:
    seq: []
    instances: {}
  config_music_u_int32equality_condition:
    seq:
      - id: ks__base
        type: config_music_u_int32condition
    instances:
      # Base class fields
      value:
        value: ks__base.value
      game_param:
        value: ks__base.game_param
      id:
        value: ks__base.id
  config_music_u_int32inequality_condition_register:
    seq: []
    instances: {}
  config_music_u_int32inequality_condition:
    seq:
      - id: ks__base
        type: config_music_u_int32condition
    instances:
      # Base class fields
      value:
        value: ks__base.value
      game_param:
        value: ks__base.game_param
      id:
        value: ks__base.id
  config_music_u_int32greater_than_condition_register:
    seq: []
    instances: {}
  config_music_u_int32greater_than_condition:
    seq:
      - id: ks__base
        type: config_music_u_int32condition
    instances:
      # Base class fields
      value:
        value: ks__base.value
      game_param:
        value: ks__base.game_param
      id:
        value: ks__base.id
  config_music_u_int32less_than_condition_register:
    seq: []
    instances: {}
  config_music_u_int32less_than_condition:
    seq:
      - id: ks__base
        type: config_music_u_int32condition
    instances:
      # Base class fields
      value:
        value: ks__base.value
      game_param:
        value: ks__base.game_param
      id:
        value: ks__base.id
  config_music_u_int32no_greater_than_condition_register:
    seq: []
    instances: {}
  config_music_u_int32no_greater_than_condition:
    seq:
      - id: ks__base
        type: config_music_u_int32condition
    instances:
      # Base class fields
      value:
        value: ks__base.value
      game_param:
        value: ks__base.game_param
      id:
        value: ks__base.id
  config_music_u_int32no_less_than_condition_register:
    seq: []
    instances: {}
  config_music_u_int32no_less_than_condition:
    seq:
      - id: ks__base
        type: config_music_u_int32condition
    instances:
      # Base class fields
      value:
        value: ks__base.value
      game_param:
        value: ks__base.game_param
      id:
        value: ks__base.id
  config_music_u_int32multi_condition_register:
    seq: []
    instances: {}
  config_music_u_int32multi_condition:
    seq:
      - id: ks__base
        type: config_music_parameter_condition
      - id: ks__bit_field
        type: u1
      - id: values
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_values
    instances:
      ks__has_field_values: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      game_param:
        value: ks__base.game_param
      id:
        value: ks__base.id
  config_music_single_condition_register:
    seq: []
    instances: {}
  config_music_single_condition:
    seq:
      - id: ks__base
        type: config_music_parameter_condition
      - id: ks__bit_field
        type: u1
      - id: value
        type: f4
        if: ks__has_field_value
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      game_param:
        value: ks__base.game_param
      id:
        value: ks__base.id
  config_music_single_equality_condition_register:
    seq: []
    instances: {}
  config_music_single_equality_condition:
    seq:
      - id: ks__base
        type: config_music_single_condition
    instances:
      # Base class fields
      value:
        value: ks__base.value
      game_param:
        value: ks__base.game_param
      id:
        value: ks__base.id
  config_music_single_inequality_condition_register:
    seq: []
    instances: {}
  config_music_single_inequality_condition:
    seq:
      - id: ks__base
        type: config_music_single_condition
    instances:
      # Base class fields
      value:
        value: ks__base.value
      game_param:
        value: ks__base.game_param
      id:
        value: ks__base.id
  config_music_single_greater_than_condition_register:
    seq: []
    instances: {}
  config_music_single_greater_than_condition:
    seq:
      - id: ks__base
        type: config_music_single_condition
    instances:
      # Base class fields
      value:
        value: ks__base.value
      game_param:
        value: ks__base.game_param
      id:
        value: ks__base.id
  config_music_single_less_than_condition_register:
    seq: []
    instances: {}
  config_music_single_less_than_condition:
    seq:
      - id: ks__base
        type: config_music_single_condition
    instances:
      # Base class fields
      value:
        value: ks__base.value
      game_param:
        value: ks__base.game_param
      id:
        value: ks__base.id
  config_music_single_no_greater_than_condition_register:
    seq: []
    instances: {}
  config_music_single_no_greater_than_condition:
    seq:
      - id: ks__base
        type: config_music_single_condition
    instances:
      # Base class fields
      value:
        value: ks__base.value
      game_param:
        value: ks__base.game_param
      id:
        value: ks__base.id
  config_music_single_no_less_than_condition_register:
    seq: []
    instances: {}
  config_music_single_no_less_than_condition:
    seq:
      - id: ks__base
        type: config_music_single_condition
    instances:
      # Base class fields
      value:
        value: ks__base.value
      game_param:
        value: ks__base.game_param
      id:
        value: ks__base.id
  config_music_double_condition_register:
    seq: []
    instances: {}
  config_music_double_condition:
    seq:
      - id: ks__base
        type: config_music_parameter_condition
      - id: ks__bit_field
        type: u1
      - id: value
        type: f8
        if: ks__has_field_value
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      game_param:
        value: ks__base.game_param
      id:
        value: ks__base.id
  config_music_double_equality_condition_register:
    seq: []
    instances: {}
  config_music_double_equality_condition:
    seq:
      - id: ks__base
        type: config_music_double_condition
    instances:
      # Base class fields
      value:
        value: ks__base.value
      game_param:
        value: ks__base.game_param
      id:
        value: ks__base.id
  config_music_double_inequality_condition_register:
    seq: []
    instances: {}
  config_music_double_inequality_condition:
    seq:
      - id: ks__base
        type: config_music_double_condition
    instances:
      # Base class fields
      value:
        value: ks__base.value
      game_param:
        value: ks__base.game_param
      id:
        value: ks__base.id
  config_music_double_greater_than_condition_register:
    seq: []
    instances: {}
  config_music_double_greater_than_condition:
    seq:
      - id: ks__base
        type: config_music_double_condition
    instances:
      # Base class fields
      value:
        value: ks__base.value
      game_param:
        value: ks__base.game_param
      id:
        value: ks__base.id
  config_music_double_less_than_condition_register:
    seq: []
    instances: {}
  config_music_double_less_than_condition:
    seq:
      - id: ks__base
        type: config_music_double_condition
    instances:
      # Base class fields
      value:
        value: ks__base.value
      game_param:
        value: ks__base.game_param
      id:
        value: ks__base.id
  config_music_double_no_greater_than_condition_register:
    seq: []
    instances: {}
  config_music_double_no_greater_than_condition:
    seq:
      - id: ks__base
        type: config_music_double_condition
    instances:
      # Base class fields
      value:
        value: ks__base.value
      game_param:
        value: ks__base.game_param
      id:
        value: ks__base.id
  config_music_double_no_less_than_condition_register:
    seq: []
    instances: {}
  config_music_double_no_less_than_condition:
    seq:
      - id: ks__base
        type: config_music_double_condition
    instances:
      # Base class fields
      value:
        value: ks__base.value
      game_param:
        value: ks__base.game_param
      id:
        value: ks__base.id
  config_music_boolean_condition_register:
    seq: []
    instances: {}
  config_music_boolean_condition:
    seq:
      - id: ks__base
        type: config_music_parameter_condition
      - id: ks__bit_field
        type: u1
      - id: value
        type: u1
        if: ks__has_field_value
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      game_param:
        value: ks__base.game_param
      id:
        value: ks__base.id
  config_music_string_condition_register:
    seq: []
    instances: {}
  config_music_string_condition:
    seq:
      - id: ks__base
        type: config_music_parameter_condition
      - id: ks__bit_field
        type: u1
      - id: value
        type: aux_types::string
        if: ks__has_field_value
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      game_param:
        value: ks__base.game_param
      id:
        value: ks__base.id
  config_music_string_equality_condition_register:
    seq: []
    instances: {}
  config_music_string_equality_condition:
    seq:
      - id: ks__base
        type: config_music_string_condition
    instances:
      # Base class fields
      value:
        value: ks__base.value
      game_param:
        value: ks__base.game_param
      id:
        value: ks__base.id
  config_music_string_containment_condition_register:
    seq: []
    instances: {}
  config_music_string_containment_condition:
    seq:
      - id: ks__base
        type: config_music_string_condition
    instances:
      # Base class fields
      value:
        value: ks__base.value
      game_param:
        value: ks__base.game_param
      id:
        value: ks__base.id
  config_music_u_int32list_condition_register:
    seq: []
    instances: {}
  config_music_u_int32list_condition:
    seq:
      - id: ks__base
        type: config_music_parameter_condition
    instances:
      # Base class fields
      game_param:
        value: ks__base.game_param
      id:
        value: ks__base.id
  config_music_u_int32list_emptiness_condition_register:
    seq: []
    instances: {}
  config_music_u_int32list_emptiness_condition:
    seq:
      - id: ks__base
        type: config_music_u_int32list_condition
      - id: ks__bit_field
        type: u1
      - id: value
        type: u1
        if: ks__has_field_value
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      game_param:
        value: ks__base.game_param
      id:
        value: ks__base.id
  config_music_u_int32list_member_condition_register:
    seq: []
    instances: {}
  config_music_u_int32list_member_condition:
    seq:
      - id: ks__base
        type: config_music_u_int32list_condition
      - id: ks__bit_field
        type: u1
      - id: value
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_value
    instances:
      ks__has_field_value: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      game_param:
        value: ks__base.game_param
      id:
        value: ks__base.id
  config_music_u_int32list_presence_condition_register:
    seq: []
    instances: {}
  config_music_u_int32list_presence_condition:
    seq:
      - id: ks__base
        type: config_music_u_int32list_member_condition
    instances:
      # Base class fields
      value:
        value: ks__base.value
      game_param:
        value: ks__base.game_param
      id:
        value: ks__base.id
  config_music_u_int32list_absence_condition_register:
    seq: []
    instances: {}
  config_music_u_int32list_absence_condition:
    seq:
      - id: ks__base
        type: config_music_u_int32list_member_condition
    instances:
      # Base class fields
      value:
        value: ks__base.value
      game_param:
        value: ks__base.game_param
      id:
        value: ks__base.id
  config_music_u_int32list_multi_member_condition_register:
    seq: []
    instances: {}
  config_music_u_int32list_multi_member_condition:
    seq:
      - id: ks__base
        type: config_music_u_int32list_condition
      - id: ks__bit_field
        type: u1
      - id: values
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_values
    instances:
      ks__has_field_values: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      game_param:
        value: ks__base.game_param
      id:
        value: ks__base.id
  config_music_u_int32list_all_presence_condition_register:
    seq: []
    instances: {}
  config_music_u_int32list_all_presence_condition:
    seq:
      - id: ks__base
        type: config_music_u_int32list_multi_member_condition
    instances:
      # Base class fields
      values:
        value: ks__base.values
      game_param:
        value: ks__base.game_param
      id:
        value: ks__base.id
  config_music_u_int32list_none_presence_condition_register:
    seq: []
    instances: {}
  config_music_u_int32list_none_presence_condition:
    seq:
      - id: ks__base
        type: config_music_u_int32list_multi_member_condition
    instances:
      # Base class fields
      values:
        value: ks__base.values
      game_param:
        value: ks__base.game_param
      id:
        value: ks__base.id
  config_music_u_int32list_partial_presence_condition_register:
    seq: []
    instances: {}
  config_music_u_int32list_partial_presence_condition:
    seq:
      - id: ks__base
        type: config_music_u_int32list_multi_member_condition
    instances:
      # Base class fields
      values:
        value: ks__base.values
      game_param:
        value: ks__base.game_param
      id:
        value: ks__base.id
  config_music_shifter:
    seq:
      - id: ks__bit_field
        type: u1
      - id: target_song_id
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_target_song_id
      - id: root_condition_id
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_root_condition_id
    instances:
      ks__has_field_target_song_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_root_condition_id: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__array_of__config_music_shifter__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_music_shifter
        repeat: expr
        repeat-expr: length.value
  config_music_transitions:
    seq:
      - id: ks__bit_field
        type: u1
      - id: shifters
        type: ks__array_of__config_music_shifter__length_u
        if: ks__has_field_shifters
    instances:
      ks__has_field_shifters: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_music_sync_transitions:
    seq:
      - id: ks__bit_field
        type: u1
      - id: beat_transitions
        type: config_music_transitions
        if: ks__has_field_beat_transitions
      - id: bar_transitions
        type: config_music_transitions
        if: ks__has_field_bar_transitions
      - id: grid_transitions
        type: config_music_transitions
        if: ks__has_field_grid_transitions
      - id: cue_transitions
        type: config_music_transitions
        if: ks__has_field_cue_transitions
      - id: exit_transitions
        type: config_music_transitions
        if: ks__has_field_exit_transitions
    instances:
      ks__has_field_beat_transitions: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_bar_transitions: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_grid_transitions: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_cue_transitions: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_exit_transitions: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  config_music_fixed_time_transitions:
    seq:
      - id: ks__bit_field
        type: u1
      - id: transitions
        type: config_music_transitions
        if: ks__has_field_transitions
      - id: fixed_time
        type: f4
        if: ks__has_field_fixed_time
    instances:
      ks__has_field_transitions: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_fixed_time: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__array_of__config_music_fixed_time_transitions__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_music_fixed_time_transitions
        repeat: expr
        repeat-expr: length.value
  config_music_time_transitions:
    seq:
      - id: ks__bit_field
        type: u1
      - id: interval
        type: f4
        if: ks__has_field_interval
      - id: repetitives
        type: config_music_transitions
        if: ks__has_field_repetitives
      - id: fixed_times
        type: ks__array_of__config_music_fixed_time_transitions__length_u
        if: ks__has_field_fixed_times
    instances:
      ks__has_field_interval: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_repetitives: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_fixed_times: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_music_stimulus_handler:
    seq:
      - id: ks__bit_field
        type: u1
      - id: stimulus
        type: ks__enum__music_stimulus
        if: ks__has_field_stimulus
      - id: transitions
        type: config_music_transitions
        if: ks__has_field_transitions
    instances:
      ks__has_field_stimulus: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_transitions: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_music_parameterized_stimulus_handler_register:
    seq: []
    instances: {}
  config_music_parameterized_stimulus_handler:
    seq:
      - id: ks__base
        type: config_music_stimulus_handler
    instances:
      # Base class fields
      stimulus:
        value: ks__base.stimulus
      transitions:
        value: ks__base.transitions
  config_music_int_stimulus_handler_register:
    seq: []
    instances: {}
  config_music_int_stimulus_handler:
    seq:
      - id: ks__base
        type: config_music_parameterized_stimulus_handler
      - id: ks__bit_field
        type: u1
      - id: int_param
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_int_param
    instances:
      ks__has_field_int_param: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      stimulus:
        value: ks__base.stimulus
      transitions:
        value: ks__base.transitions
  config_music_u_int_stimulus_handler_register:
    seq: []
    instances: {}
  config_music_u_int_stimulus_handler:
    seq:
      - id: ks__base
        type: config_music_parameterized_stimulus_handler
      - id: ks__bit_field
        type: u1
      - id: uint_param
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_uint_param
    instances:
      ks__has_field_uint_param: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      stimulus:
        value: ks__base.stimulus
      transitions:
        value: ks__base.transitions
  config_music_float_stimulus_handler_register:
    seq: []
    instances: {}
  config_music_float_stimulus_handler:
    seq:
      - id: ks__base
        type: config_music_parameterized_stimulus_handler
      - id: ks__bit_field
        type: u1
      - id: float_param
        type: f4
        if: ks__has_field_float_param
    instances:
      ks__has_field_float_param: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      stimulus:
        value: ks__base.stimulus
      transitions:
        value: ks__base.transitions
  config_music_string_stimulus_handler_register:
    seq: []
    instances: {}
  config_music_string_stimulus_handler:
    seq:
      - id: ks__base
        type: config_music_parameterized_stimulus_handler
      - id: ks__bit_field
        type: u1
      - id: string_param
        type: aux_types::string
        if: ks__has_field_string_param
    instances:
      ks__has_field_string_param: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      stimulus:
        value: ks__base.stimulus
      transitions:
        value: ks__base.transitions
  config_music_multi_value_parameterized_stimulus_handler_register:
    seq: []
    instances: {}
  config_music_multi_value_parameterized_stimulus_handler:
    seq:
      - id: ks__base
        type: config_music_parameterized_stimulus_handler
    instances:
      # Base class fields
      stimulus:
        value: ks__base.stimulus
      transitions:
        value: ks__base.transitions
  config_music_u_int_multi_value_stimulus_handler_register:
    seq: []
    instances: {}
  config_music_u_int_multi_value_stimulus_handler:
    seq:
      - id: ks__base
        type: config_music_multi_value_parameterized_stimulus_handler
      - id: ks__bit_field
        type: u1
      - id: uint_params
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_uint_params
    instances:
      ks__has_field_uint_params: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      stimulus:
        value: ks__base.stimulus
      transitions:
        value: ks__base.transitions
  config_music_u_int_presence_stimulus_handler_register:
    seq: []
    instances: {}
  config_music_u_int_presence_stimulus_handler:
    seq:
      - id: ks__base
        type: config_music_u_int_multi_value_stimulus_handler
    instances:
      # Base class fields
      uint_params:
        value: ks__base.uint_params
      stimulus:
        value: ks__base.stimulus
      transitions:
        value: ks__base.transitions
  config_music_u_int_absence_stimulus_handler_register:
    seq: []
    instances: {}
  config_music_u_int_absence_stimulus_handler:
    seq:
      - id: ks__base
        type: config_music_u_int_multi_value_stimulus_handler
    instances:
      # Base class fields
      uint_params:
        value: ks__base.uint_params
      stimulus:
        value: ks__base.stimulus
      transitions:
        value: ks__base.transitions
  config_music_string_multi_value_stimulus_handler_register:
    seq: []
    instances: {}
  config_music_string_multi_value_stimulus_handler:
    seq:
      - id: ks__base
        type: config_music_multi_value_parameterized_stimulus_handler
      - id: ks__bit_field
        type: u1
      - id: string_params
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_string_params
    instances:
      ks__has_field_string_params: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      stimulus:
        value: ks__base.stimulus
      transitions:
        value: ks__base.transitions
  config_music_string_presence_stimulus_handler_register:
    seq: []
    instances: {}
  config_music_string_presence_stimulus_handler:
    seq:
      - id: ks__base
        type: config_music_string_multi_value_stimulus_handler
    instances:
      # Base class fields
      string_params:
        value: ks__base.string_params
      stimulus:
        value: ks__base.stimulus
      transitions:
        value: ks__base.transitions
  config_music_string_absence_stimulus_handler_register:
    seq: []
    instances: {}
  config_music_string_absence_stimulus_handler:
    seq:
      - id: ks__base
        type: config_music_string_multi_value_stimulus_handler
    instances:
      # Base class fields
      string_params:
        value: ks__base.string_params
      stimulus:
        value: ks__base.stimulus
      transitions:
        value: ks__base.transitions
  ks__array_of__ks__disp__config_music_stimulus_handler__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__disp__config_music_stimulus_handler
        repeat: expr
        repeat-expr: length.value
  config_song:
    seq:
      - id: ks__bit_field
        type: u1
      - id: id
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_id
      - id: switch_value
        type: config_wwise_string
        if: ks__has_field_switch_value
      - id: sync_transitions
        type: config_music_sync_transitions
        if: ks__has_field_sync_transitions
      - id: time_transitions
        type: config_music_time_transitions
        if: ks__has_field_time_transitions
      - id: stimulus_handlers
        type: ks__array_of__ks__disp__config_music_stimulus_handler__length_u
        if: ks__has_field_stimulus_handlers
      - id: ignorance_mask
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_ignorance_mask
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_switch_value: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_sync_transitions: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_time_transitions: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_stimulus_handlers: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_ignorance_mask: # Field №5
        value: (ks__bit_field & 0b100000) != 0
  config_music:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: switch_group
        type: config_wwise_string
        if: ks__has_field_switch_group
      - id: play_event
        type: config_wwise_string
        if: ks__has_field_play_event
      - id: stop_event
        type: config_wwise_string
        if: ks__has_field_stop_event
      - id: pause_event
        type: config_wwise_string
        if: ks__has_field_pause_event
      - id: resume_event
        type: config_wwise_string
        if: ks__has_field_resume_event
      - id: duck_event
        type: config_wwise_string
        if: ks__has_field_duck_event
      - id: unduck_event
        type: config_wwise_string
        if: ks__has_field_unduck_event
      - id: start_transitions
        type: config_music_transitions
        if: ks__has_field_start_transitions
      - id: sync_transitions
        type: config_music_sync_transitions
        if: ks__has_field_sync_transitions
      - id: time_transitions
        type: config_music_time_transitions
        if: ks__has_field_time_transitions
      - id: stimulus_handlers
        type: ks__array_of__ks__disp__config_music_stimulus_handler__length_u
        if: ks__has_field_stimulus_handlers
    instances:
      ks__has_field_switch_group: # Field №0
        value: (ks__bit_field.value & 0b00000000001) != 0
      ks__has_field_play_event: # Field №1
        value: (ks__bit_field.value & 0b00000000010) != 0
      ks__has_field_stop_event: # Field №2
        value: (ks__bit_field.value & 0b00000000100) != 0
      ks__has_field_pause_event: # Field №3
        value: (ks__bit_field.value & 0b00000001000) != 0
      ks__has_field_resume_event: # Field №4
        value: (ks__bit_field.value & 0b00000010000) != 0
      ks__has_field_duck_event: # Field №5
        value: (ks__bit_field.value & 0b00000100000) != 0
      ks__has_field_unduck_event: # Field №6
        value: (ks__bit_field.value & 0b00001000000) != 0
      ks__has_field_start_transitions: # Field №7
        value: (ks__bit_field.value & 0b00010000000) != 0
      ks__has_field_sync_transitions: # Field №8
        value: (ks__bit_field.value & 0b00100000000) != 0
      ks__has_field_time_transitions: # Field №9
        value: (ks__bit_field.value & 0b01000000000) != 0
      ks__has_field_stimulus_handlers: # Field №10
        value: (ks__bit_field.value & 0b10000000000) != 0
  ks__enum__music_key_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: music_key_type
  music_key_type_comparer:
    seq: []
    instances: {}
  config_music_game_key:
    seq:
      - id: ks__bit_field
        type: u1
      - id: button
        type: ks__enum__music_key_type
        if: ks__has_field_button
      - id: time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_time
      - id: note
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_note
      - id: is_long_press
        type: u1
        if: ks__has_field_is_long_press
      - id: long_press_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_long_press_time
    instances:
      ks__has_field_button: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_time: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_note: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_is_long_press: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_long_press_time: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  ks__array_of__config_music_game_key__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_music_game_key
        repeat: expr
        repeat-expr: length.value
  config_music_game:
    seq:
      - id: ks__bit_field
        type: u1
      - id: button_sequence
        type: ks__array_of__config_music_game_key__length_u
        if: ks__has_field_button_sequence
      - id: instrument
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_instrument
      - id: play_music_event
        type: config_wwise_string
        if: ks__has_field_play_music_event
      - id: stop_music_event
        type: config_wwise_string
        if: ks__has_field_stop_music_event
      - id: pause_music_event
        type: config_wwise_string
        if: ks__has_field_pause_music_event
      - id: resume_music_event
        type: config_wwise_string
        if: ks__has_field_resume_music_event
      - id: auto_play
        type: u1
        if: ks__has_field_auto_play
    instances:
      ks__has_field_button_sequence: # Field №0
        value: (ks__bit_field & 0b0000001) != 0
      ks__has_field_instrument: # Field №1
        value: (ks__bit_field & 0b0000010) != 0
      ks__has_field_play_music_event: # Field №2
        value: (ks__bit_field & 0b0000100) != 0
      ks__has_field_stop_music_event: # Field №3
        value: (ks__bit_field & 0b0001000) != 0
      ks__has_field_pause_music_event: # Field №4
        value: (ks__bit_field & 0b0010000) != 0
      ks__has_field_resume_music_event: # Field №5
        value: (ks__bit_field & 0b0100000) != 0
      ks__has_field_auto_play: # Field №6
        value: (ks__bit_field & 0b1000000) != 0
  camera_play_condition:
    seq:
      - id: ks__bit_field
        type: u1
      - id: degree_x
        type: f4
        if: ks__has_field_degree_x
      - id: degree_y
        type: f4
        if: ks__has_field_degree_y
      - id: length
        type: f4
        if: ks__has_field_length
    instances:
      ks__has_field_degree_x: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_degree_y: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_length: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__array_of__camera_play_condition__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: camera_play_condition
        repeat: expr
        repeat-expr: length.value
  config_music_camera:
    seq:
      - id: ks__bit_field
        type: u1
      - id: res_name
        type: aux_types::string
        if: ks__has_field_res_name
      - id: condition_list
        type: ks__array_of__camera_play_condition__length_u
        if: ks__has_field_condition_list
      - id: style
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_style
      - id: disable_dither
        type: u1
        if: ks__has_field_disable_dither
    instances:
      ks__has_field_res_name: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_condition_list: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_style: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_disable_dither: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  ks__array_of__config_music_camera__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_music_camera
        repeat: expr
        repeat-expr: length.value
  config_music_game_camera:
    seq:
      - id: ks__bit_field
        type: u1
      - id: camera_config_list
        type: ks__array_of__config_music_camera__length_u
        if: ks__has_field_camera_config_list
    instances:
      ks__has_field_camera_config_list: # Field №0
        value: (ks__bit_field & 0b1) != 0
  nav_type_comparer:
    seq: []
    instances: {}
  config_npc_born_pos:
    seq:
      - id: ks__bit_field
        type: u1
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_config_id
      - id: room_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_room_id
      - id: pos
        type: vector
        if: ks__has_field_pos
      - id: rot
        type: vector
        if: ks__has_field_rot
      - id: group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_group_id
      - id: suite_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_suite_id
      - id: suite_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_suite_id_list
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_config_id: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_room_id: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_pos: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_rot: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_group_id: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_suite_id: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_suite_id_list: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
  ks__array_of__config_npc_born_pos__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_npc_born_pos
        repeat: expr
        repeat-expr: length.value
  config_level_npc_born_pos:
    seq:
      - id: ks__bit_field
        type: u1
      - id: scene_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scene_id
      - id: born_pos_list
        type: ks__array_of__config_npc_born_pos__length_u
        if: ks__has_field_born_pos_list
    instances:
      ks__has_field_scene_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_born_pos_list: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_level_npc_born_pos_no_group_register:
    seq: []
    instances: {}
  config_level_npc_born_pos_no_group:
    seq:
      - id: ks__base
        type: config_level_npc_born_pos
    instances:
      # Base class fields
      scene_id:
        value: ks__base.scene_id
      born_pos_list:
        value: ks__base.born_pos_list
  paimon_skill_comparer:
    seq: []
    instances: {}
  paimon_request_from_comparer:
    seq: []
    instances: {}
  ks__enum__action_btn_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: action_btn_type
  action_btn_type_comparer:
    seq: []
    instances: {}
  ks__enum__action_slot_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: action_slot_type
  action_slot_type_comparer:
    seq: []
    instances: {}
  play_mode_type_comparer:
    seq: []
    instances: {}
  config_action_button:
    seq:
      - id: ks__bit_field
        type: u1
      - id: type
        type: ks__enum__action_btn_type
        if: ks__has_field_type
      - id: force_show
        type: u1
        if: ks__has_field_force_show
      - id: only_handle_input
        type: u1
        if: ks__has_field_only_handle_input
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_force_show: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_only_handle_input: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__array_of__config_action_button__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_action_button
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__ks__enum__action_slot_type_ks__array_of__config_action_button__length_u:
    seq:
      - id: key
        type: ks__enum__action_slot_type
      - id: value
        type: ks__array_of__config_action_button__length_u
  ks__dict_of__ks__enum__action_slot_type_ks__array_of__config_action_button__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__ks__enum__action_slot_type_ks__array_of__config_action_button__length_u
        repeat: expr
        repeat-expr: length.value
  config_action_panel_state:
    seq:
      - id: ks__bit_field
        type: u1
      - id: slot_map
        type: ks__dict_of__ks__enum__action_slot_type_ks__array_of__config_action_button__length_u
        if: ks__has_field_slot_map
      - id: slot_map_joypad_override
        type: ks__dict_of__ks__enum__action_slot_type_ks__array_of__config_action_button__length_u
        if: ks__has_field_slot_map_joypad_override
    instances:
      ks__has_field_slot_map: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_slot_map_joypad_override: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__enum__action_panel_state:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: action_panel_state
  ks__kvp_of_dict__ks__enum__action_panel_state_aux_types__string:
    seq:
      - id: key
        type: ks__enum__action_panel_state
      - id: value
        type: aux_types::string
  ks__dict_of__ks__enum__action_panel_state_aux_types__string:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__ks__enum__action_panel_state_aux_types__string
        repeat: expr
        repeat-expr: length.value
  config_action_panel_mode:
    seq:
      - id: ks__bit_field
        type: u1
      - id: state_map
        type: ks__dict_of__ks__enum__action_panel_state_aux_types__string
        if: ks__has_field_state_map
    instances:
      ks__has_field_state_map: # Field №0
        value: (ks__bit_field & 0b1) != 0
  ks__kvp_of_dict__aux_types__string_config_action_panel_state:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: config_action_panel_state
  ks__dict_of__aux_types__string_config_action_panel_state:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_config_action_panel_state
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__ks__enum__play_mode_type_config_action_panel_mode:
    seq:
      - id: key
        type: ks__enum__play_mode_type
      - id: value
        type: config_action_panel_mode
  ks__dict_of__ks__enum__play_mode_type_config_action_panel_mode:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__ks__enum__play_mode_type_config_action_panel_mode
        repeat: expr
        repeat-expr: length.value
  config_mode_state_map:
    seq:
      - id: ks__bit_field
        type: u1
      - id: states
        type: ks__dict_of__aux_types__string_config_action_panel_state
        if: ks__has_field_states
      - id: modes
        type: ks__dict_of__ks__enum__play_mode_type_config_action_panel_mode
        if: ks__has_field_modes
    instances:
      ks__has_field_states: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_modes: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__enum__config_preload_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: config_preload_type
  config_preload_type_comparer:
    seq: []
    instances: {}
  ks__kvp_of_dict__ks__enum__config_preload_type_ks__array_of__aux_types__string__length_u:
    seq:
      - id: key
        type: ks__enum__config_preload_type
      - id: value
        type: ks__array_of__aux_types__string__length_u
  ks__dict_of__ks__enum__config_preload_type_ks__array_of__aux_types__string__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__ks__enum__config_preload_type_ks__array_of__aux_types__string__length_u
        repeat: expr
        repeat-expr: length.value
  config_preload:
    seq:
      - id: ks__bit_field
        type: u1
      - id: effects
        type: ks__dict_of__ks__enum__config_preload_type_ks__array_of__aux_types__string__length_u
        if: ks__has_field_effects
      - id: abilities
        type: ks__dict_of__ks__enum__config_preload_type_ks__array_of__aux_types__string__length_u
        if: ks__has_field_abilities
      - id: gadgets
        type: ks__dict_of__ks__enum__config_preload_type_ks__array_of__aux_types__string__length_u
        if: ks__has_field_gadgets
      - id: cameras
        type: ks__dict_of__ks__enum__config_preload_type_ks__array_of__aux_types__string__length_u
        if: ks__has_field_cameras
      - id: anim_event_patterns
        type: ks__dict_of__ks__enum__config_preload_type_ks__array_of__aux_types__string__length_u
        if: ks__has_field_anim_event_patterns
      - id: skill_icons
        type: ks__dict_of__ks__enum__config_preload_type_ks__array_of__aux_types__string__length_u
        if: ks__has_field_skill_icons
      - id: misc_obj_paths
        type: ks__dict_of__ks__enum__config_preload_type_ks__array_of__aux_types__string__length_u
        if: ks__has_field_misc_obj_paths
      - id: weathers
        type: ks__dict_of__ks__enum__config_preload_type_ks__array_of__aux_types__string__length_u
        if: ks__has_field_weathers
    instances:
      ks__has_field_effects: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_abilities: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_gadgets: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_cameras: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_anim_event_patterns: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_skill_icons: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_misc_obj_paths: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_weathers: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
  ks__array_of__ks__enum__config_preload_type__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__enum__config_preload_type
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__ks__enum__config_preload_type_ks__array_of__ks__enum__config_preload_type__length_u:
    seq:
      - id: key
        type: ks__enum__config_preload_type
      - id: value
        type: ks__array_of__ks__enum__config_preload_type__length_u
  ks__dict_of__ks__enum__config_preload_type_ks__array_of__ks__enum__config_preload_type__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__ks__enum__config_preload_type_ks__array_of__ks__enum__config_preload_type__length_u
        repeat: expr
        repeat-expr: length.value
  config_platform_preload_mapping:
    seq:
      - id: ks__bit_field
        type: u1
      - id: editor
        type: ks__dict_of__ks__enum__config_preload_type_ks__array_of__ks__enum__config_preload_type__length_u
        if: ks__has_field_editor
      - id: win
        type: ks__dict_of__ks__enum__config_preload_type_ks__array_of__ks__enum__config_preload_type__length_u
        if: ks__has_field_win
      - id: android
        type: ks__dict_of__ks__enum__config_preload_type_ks__array_of__ks__enum__config_preload_type__length_u
        if: ks__has_field_android
      - id: ps4
        type: ks__dict_of__ks__enum__config_preload_type_ks__array_of__ks__enum__config_preload_type__length_u
        if: ks__has_field_ps4
      - id: ios
        type: ks__dict_of__ks__enum__config_preload_type_ks__array_of__ks__enum__config_preload_type__length_u
        if: ks__has_field_ios
    instances:
      ks__has_field_editor: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_win: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_android: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_ps4: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_ios: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  ks__kvp_of_dict__aux_types__vlq_base128_le_u_config_preload:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_u
      - id: value
        type: config_preload
  ks__dict_of__aux_types__vlq_base128_le_u_config_preload:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_u_config_preload
        repeat: expr
        repeat-expr: length.value
  config_full_preload:
    seq:
      - id: ks__bit_field
        type: u1
      - id: platform_preload_mapping
        type: config_platform_preload_mapping
        if: ks__has_field_platform_preload_mapping
      - id: common_preload
        type: config_preload
        if: ks__has_field_common_preload
      - id: entities_preload
        type: ks__dict_of__aux_types__vlq_base128_le_u_config_preload
        if: ks__has_field_entities_preload
    instances:
      ks__has_field_platform_preload_mapping: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_common_preload: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_entities_preload: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_content_restriction:
    seq:
      - id: ks__bit_field
        type: u1
      - id: country_code
        type: aux_types::string
        if: ks__has_field_country_code
      - id: age
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_age
    instances:
      ks__has_field_country_code: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_age: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__array_of__config_content_restriction__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_content_restriction
        repeat: expr
        repeat-expr: length.value
  config_ps4trc:
    seq:
      - id: ks__bit_field
        type: u1
      - id: default_age
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_default_age
      - id: content_restriction_list
        type: ks__array_of__config_content_restriction__length_u
        if: ks__has_field_content_restriction_list
    instances:
      ks__has_field_default_age: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_content_restriction_list: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__enum__qte_step_button_input_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: qte_step_button_input_type
  qte_step_button_input_type_comparer:
    seq: []
    instances: {}
  ks__enum__qte_step_camera_pos_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: qte_step_camera_pos_type
  qte_step_camera_pos_type_comparer:
    seq: []
    instances: {}
  ks__enum__qte_step_camera_target_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: qte_step_camera_target_type
  qte_step_camera_target_type_comparer:
    seq: []
    instances: {}
  ks__enum__qte_step_cond_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: qte_step_cond_type
  qte_step_cond_type_comparer:
    seq: []
    instances: {}
  ks__enum__qte_step_action_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: qte_step_action_type
  qte_step_action_type_comparer:
    seq: []
    instances: {}
  config_qte_step_base_cond:
    seq:
      - id: ks__bit_field
        type: u1
      - id: cond_type
        type: ks__enum__qte_step_cond_type
        if: ks__has_field_cond_type
    instances:
      ks__has_field_cond_type: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_qte_step_power_bar_cond_register:
    seq: []
    instances: {}
  config_qte_step_power_bar_cond:
    seq:
      - id: ks__base
        type: config_qte_step_base_cond
      - id: ks__bit_field
        type: u1
      - id: order_type
        type: ks__enum__ordering_type
        if: ks__has_field_order_type
      - id: value
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_value
    instances:
      ks__has_field_order_type: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_value: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      cond_type:
        value: ks__base.cond_type
  ks__array_of__ks__disp__config_qte_step_base_cond__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__disp__config_qte_step_base_cond
        repeat: expr
        repeat-expr: length.value
  config_qte_step_cond_group:
    seq:
      - id: ks__bit_field
        type: u1
      - id: cond_comb_type
        type: ks__enum__logic_type
        if: ks__has_field_cond_comb_type
      - id: step_cond_list
        type: ks__array_of__ks__disp__config_qte_step_base_cond__length_u
        if: ks__has_field_step_cond_list
    instances:
      ks__has_field_cond_comb_type: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_step_cond_list: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_qte_step_base_action:
    seq:
      - id: ks__bit_field
        type: u1
      - id: action_type
        type: ks__enum__qte_step_action_type
        if: ks__has_field_action_type
      - id: duration
        type: f4
        if: ks__has_field_duration
    instances:
      ks__has_field_action_type: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_duration: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_qte_step_power_bar_action_register:
    seq: []
    instances: {}
  config_qte_step_power_bar_action:
    seq:
      - id: ks__base
        type: config_qte_step_base_action
      - id: ks__bit_field
        type: u1
      - id: change_value
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_change_value
    instances:
      ks__has_field_change_value: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      action_type:
        value: ks__base.action_type
      duration:
        value: ks__base.duration
  config_qte_step_play_audio_action_register:
    seq: []
    instances: {}
  config_qte_step_play_audio_action:
    seq:
      - id: ks__base
        type: config_qte_step_base_action
      - id: ks__bit_field
        type: u1
      - id: audio_name
        type: aux_types::string
        if: ks__has_field_audio_name
    instances:
      ks__has_field_audio_name: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      action_type:
        value: ks__base.action_type
      duration:
        value: ks__base.duration
  config_qte_step_base_inter_action_register:
    seq: []
    instances: {}
  config_qte_step_base_inter_action:
    seq:
      - id: ks__base
        type: config_qte_step_base_action
      - id: ks__bit_field
        type: u1
      - id: inter_action
        type: ks__disp__config_base_inter_action
        if: ks__has_field_inter_action
    instances:
      ks__has_field_inter_action: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      action_type:
        value: ks__base.action_type
      duration:
        value: ks__base.duration
  config_qte_step_camera_move_action_register:
    seq: []
    instances: {}
  config_qte_step_camera_move_action:
    seq:
      - id: ks__base
        type: config_qte_step_base_inter_action
      - id: ks__bit_field
        type: u1
      - id: exit_return_back
        type: u1
        if: ks__has_field_exit_return_back
    instances:
      ks__has_field_exit_return_back: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      inter_action:
        value: ks__base.inter_action
      action_type:
        value: ks__base.action_type
      duration:
        value: ks__base.duration
  ks__array_of__ks__disp__config_qte_step_base_action__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__disp__config_qte_step_base_action
        repeat: expr
        repeat-expr: length.value
  config_qte_step_cond_action_group:
    seq:
      - id: ks__bit_field
        type: u1
      - id: cond_group
        type: config_qte_step_cond_group
        if: ks__has_field_cond_group
      - id: actions
        type: ks__array_of__ks__disp__config_qte_step_base_action__length_u
        if: ks__has_field_actions
    instances:
      ks__has_field_cond_group: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_actions: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_qte_step_base_component:
    seq: []
    instances: {}
  config_qte_step_button_component_register:
    seq: []
    instances: {}
  ks__array_of__config_qte_step_cond_action_group__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_qte_step_cond_action_group
        repeat: expr
        repeat-expr: length.value
  config_qte_step_button_component:
    seq:
      - id: ks__base
        type: config_qte_step_base_component
      - id: ks__bit_field
        type: u1
      - id: position_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_position_id
      - id: input_event
        type: ks__enum__qte_step_button_input_type
        if: ks__has_field_input_event
      - id: click_trigger
        type: ks__array_of__config_qte_step_cond_action_group__length_u
        if: ks__has_field_click_trigger
    instances:
      ks__has_field_position_id: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_input_event: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_click_trigger: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_qte_step_power_bar_component_register:
    seq: []
    instances: {}
  config_qte_step_power_bar_component:
    seq:
      - id: ks__base
        type: config_qte_step_base_component
      - id: ks__bit_field
        type: u1
      - id: init_value
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_init_value
      - id: max_value
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_value
      - id: auto_change_value_per_second
        type: f4
        if: ks__has_field_auto_change_value_per_second
      - id: no_input_auto_change_interval
        type: f4
        if: ks__has_field_no_input_auto_change_interval
      - id: value_change_trigger
        type: ks__array_of__config_qte_step_cond_action_group__length_u
        if: ks__has_field_value_change_trigger
    instances:
      ks__has_field_init_value: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_max_value: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_auto_change_value_per_second: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_no_input_auto_change_interval: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_value_change_trigger: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  ks__array_of__ks__disp__config_qte_step_base_component__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__disp__config_qte_step_base_component
        repeat: expr
        repeat-expr: length.value
  config_qte_step_node:
    seq:
      - id: ks__bit_field
        type: u1
      - id: start_trigger
        type: ks__array_of__config_qte_step_cond_action_group__length_u
        if: ks__has_field_start_trigger
      - id: components
        type: ks__array_of__ks__disp__config_qte_step_base_component__length_u
        if: ks__has_field_components
      - id: success_trigger
        type: ks__array_of__config_qte_step_cond_action_group__length_u
        if: ks__has_field_success_trigger
      - id: fail_trigger
        type: ks__array_of__config_qte_step_cond_action_group__length_u
        if: ks__has_field_fail_trigger
    instances:
      ks__has_field_start_trigger: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_components: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_success_trigger: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_fail_trigger: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  quest_content_ex:
    seq:
      - id: ks__bit_field
        type: u1
      - id: type
        type: ks__enum__quest_content_type
        if: ks__has_field_type
      - id: param
        type: ks__array_of__aux_types__vlq_base128_le_s__length_u
        if: ks__has_field_param
      - id: count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_count
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_param: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_count: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__array_of__quest_cond_ex__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: quest_cond_ex
        repeat: expr
        repeat-expr: length.value
  ks__array_of__quest_content_ex__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: quest_content_ex
        repeat: expr
        repeat-expr: length.value
  ks__array_of__quest_exec_ex__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: quest_exec_ex
        repeat: expr
        repeat-expr: length.value
  config_quest_scheme:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: sub_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sub_id
      - id: main_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_main_id
      - id: order
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_order
      - id: sub_id_set
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sub_id_set
      - id: is_mp_block
        type: u1
        if: ks__has_field_is_mp_block
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: step_desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_step_desc
      - id: guide_tips
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_guide_tips
      - id: show_type
        type: ks__enum__quest_show_type
        if: ks__has_field_show_type
      - id: ban_type
        type: ks__enum__ban_group_type
        if: ks__has_field_ban_type
      - id: accept_cond_comb
        type: ks__enum__logic_type
        if: ks__has_field_accept_cond_comb
      - id: accept_cond
        type: ks__array_of__quest_cond_ex__length_u
        if: ks__has_field_accept_cond
      - id: finish_cond_comb
        type: ks__enum__logic_type
        if: ks__has_field_finish_cond_comb
      - id: finish_cond
        type: ks__array_of__quest_content_ex__length_u
        if: ks__has_field_finish_cond
      - id: fail_cond_comb
        type: ks__enum__logic_type
        if: ks__has_field_fail_cond_comb
      - id: fail_cond
        type: ks__array_of__quest_content_ex__length_u
        if: ks__has_field_fail_cond
      - id: guide
        type: quest_guide_ex
        if: ks__has_field_guide
      - id: show_guide
        type: ks__enum__show_quest_guide_type
        if: ks__has_field_show_guide
      - id: finish_parent
        type: u1
        if: ks__has_field_finish_parent
      - id: fail_parent
        type: u1
        if: ks__has_field_fail_parent
      - id: fail_parent_show
        type: ks__enum__quest_show_type
        if: ks__has_field_fail_parent_show
      - id: is_rewind
        type: u1
        if: ks__has_field_is_rewind
      - id: finish_exec
        type: ks__array_of__quest_exec_ex__length_u
        if: ks__has_field_finish_exec
      - id: fail_exec
        type: ks__array_of__quest_exec_ex__length_u
        if: ks__has_field_fail_exec
      - id: begin_exec
        type: ks__array_of__quest_exec_ex__length_u
        if: ks__has_field_begin_exec
      - id: exclusive_npc_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_exclusive_npc_list
      - id: exclusive_place_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_exclusive_place_list
      - id: shared_npc_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_shared_npc_list
      - id: exclusive_npc_priority
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_exclusive_npc_priority
      - id: trial_avatar_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_trial_avatar_list
      - id: version_begin
        type: aux_types::string
        if: ks__has_field_version_begin
      - id: version_end
        type: aux_types::string
        if: ks__has_field_version_end
    instances:
      ks__has_field_sub_id: # Field №0
        value: (ks__bit_field.value & 0b00000000000000000000000000000001) != 0
      ks__has_field_main_id: # Field №1
        value: (ks__bit_field.value & 0b00000000000000000000000000000010) != 0
      ks__has_field_order: # Field №2
        value: (ks__bit_field.value & 0b00000000000000000000000000000100) != 0
      ks__has_field_sub_id_set: # Field №3
        value: (ks__bit_field.value & 0b00000000000000000000000000001000) != 0
      ks__has_field_is_mp_block: # Field №4
        value: (ks__bit_field.value & 0b00000000000000000000000000010000) != 0
      ks__has_field_desc: # Field №5
        value: (ks__bit_field.value & 0b00000000000000000000000000100000) != 0
      ks__has_field_step_desc: # Field №6
        value: (ks__bit_field.value & 0b00000000000000000000000001000000) != 0
      ks__has_field_guide_tips: # Field №7
        value: (ks__bit_field.value & 0b00000000000000000000000010000000) != 0
      ks__has_field_show_type: # Field №8
        value: (ks__bit_field.value & 0b00000000000000000000000100000000) != 0
      ks__has_field_ban_type: # Field №9
        value: (ks__bit_field.value & 0b00000000000000000000001000000000) != 0
      ks__has_field_accept_cond_comb: # Field №10
        value: (ks__bit_field.value & 0b00000000000000000000010000000000) != 0
      ks__has_field_accept_cond: # Field №11
        value: (ks__bit_field.value & 0b00000000000000000000100000000000) != 0
      ks__has_field_finish_cond_comb: # Field №12
        value: (ks__bit_field.value & 0b00000000000000000001000000000000) != 0
      ks__has_field_finish_cond: # Field №13
        value: (ks__bit_field.value & 0b00000000000000000010000000000000) != 0
      ks__has_field_fail_cond_comb: # Field №14
        value: (ks__bit_field.value & 0b00000000000000000100000000000000) != 0
      ks__has_field_fail_cond: # Field №15
        value: (ks__bit_field.value & 0b00000000000000001000000000000000) != 0
      ks__has_field_guide: # Field №16
        value: (ks__bit_field.value & 0b00000000000000010000000000000000) != 0
      ks__has_field_show_guide: # Field №17
        value: (ks__bit_field.value & 0b00000000000000100000000000000000) != 0
      ks__has_field_finish_parent: # Field №18
        value: (ks__bit_field.value & 0b00000000000001000000000000000000) != 0
      ks__has_field_fail_parent: # Field №19
        value: (ks__bit_field.value & 0b00000000000010000000000000000000) != 0
      ks__has_field_fail_parent_show: # Field №20
        value: (ks__bit_field.value & 0b00000000000100000000000000000000) != 0
      ks__has_field_is_rewind: # Field №21
        value: (ks__bit_field.value & 0b00000000001000000000000000000000) != 0
      ks__has_field_finish_exec: # Field №22
        value: (ks__bit_field.value & 0b00000000010000000000000000000000) != 0
      ks__has_field_fail_exec: # Field №23
        value: (ks__bit_field.value & 0b00000000100000000000000000000000) != 0
      ks__has_field_begin_exec: # Field №24
        value: (ks__bit_field.value & 0b00000001000000000000000000000000) != 0
      ks__has_field_exclusive_npc_list: # Field №25
        value: (ks__bit_field.value & 0b00000010000000000000000000000000) != 0
      ks__has_field_exclusive_place_list: # Field №26
        value: (ks__bit_field.value & 0b00000100000000000000000000000000) != 0
      ks__has_field_shared_npc_list: # Field №27
        value: (ks__bit_field.value & 0b00001000000000000000000000000000) != 0
      ks__has_field_exclusive_npc_priority: # Field №28
        value: (ks__bit_field.value & 0b00010000000000000000000000000000) != 0
      ks__has_field_trial_avatar_list: # Field №29
        value: (ks__bit_field.value & 0b00100000000000000000000000000000) != 0
      ks__has_field_version_begin: # Field №30
        value: (ks__bit_field.value & 0b01000000000000000000000000000000) != 0
      ks__has_field_version_end: # Field №31
        value: (ks__bit_field.value & 0b10000000000000000000000000000000) != 0
  ks__array_of__config_quest_scheme__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_quest_scheme
        repeat: expr
        repeat-expr: length.value
  ks__array_of__config_talk_scheme__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_talk_scheme
        repeat: expr
        repeat-expr: length.value
  config_main_quest_scheme:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: series
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_series
      - id: type
        type: ks__enum__quest_type
        if: ks__has_field_type
      - id: main_quest_tag
        type: ks__enum__main_quest_tag_type
        if: ks__has_field_main_quest_tag
      - id: active_mode
        type: ks__enum__play_mode
        if: ks__has_field_active_mode
      - id: title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: lua_path
        type: aux_types::string
        if: ks__has_field_lua_path
      - id: recommend_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_recommend_level
      - id: repeatable
        type: u1
        if: ks__has_field_repeatable
      - id: suggest_track_main_quest_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_suggest_track_main_quest_list
      - id: suggest_track_out_of_order
        type: u1
        if: ks__has_field_suggest_track_out_of_order
      - id: reward_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_reward_id_list
      - id: show_type
        type: ks__enum__quest_show_type
        if: ks__has_field_show_type
      - id: special_show_cond_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_special_show_cond_id_list
      - id: special_show_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_special_show_quest_id
      - id: chapter_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_chapter_id
      - id: task_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_task_id
      - id: show_red_point
        type: u1
        if: ks__has_field_show_red_point
      - id: activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_id
      - id: sub_quests
        type: ks__array_of__config_quest_scheme__length_u
        if: ks__has_field_sub_quests
      - id: talks
        type: ks__array_of__config_talk_scheme__length_u
        if: ks__has_field_talks
      - id: preload_lua_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_preload_lua_list
      - id: force_preload_lua_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_force_preload_lua_list
      - id: free_style_dic
        type: ks__dict_of__aux_types__vlq_base128_le_u_ks__array_of__aux_types__vlq_base128_le_s__length_u
        if: ks__has_field_free_style_dic
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.value & 0b0000000000000000000000001) != 0
      ks__has_field_series: # Field №1
        value: (ks__bit_field.value & 0b0000000000000000000000010) != 0
      ks__has_field_type: # Field №2
        value: (ks__bit_field.value & 0b0000000000000000000000100) != 0
      ks__has_field_main_quest_tag: # Field №3
        value: (ks__bit_field.value & 0b0000000000000000000001000) != 0
      ks__has_field_active_mode: # Field №4
        value: (ks__bit_field.value & 0b0000000000000000000010000) != 0
      ks__has_field_title: # Field №5
        value: (ks__bit_field.value & 0b0000000000000000000100000) != 0
      ks__has_field_desc: # Field №6
        value: (ks__bit_field.value & 0b0000000000000000001000000) != 0
      ks__has_field_lua_path: # Field №7
        value: (ks__bit_field.value & 0b0000000000000000010000000) != 0
      ks__has_field_recommend_level: # Field №8
        value: (ks__bit_field.value & 0b0000000000000000100000000) != 0
      ks__has_field_repeatable: # Field №9
        value: (ks__bit_field.value & 0b0000000000000001000000000) != 0
      ks__has_field_suggest_track_main_quest_list: # Field №10
        value: (ks__bit_field.value & 0b0000000000000010000000000) != 0
      ks__has_field_suggest_track_out_of_order: # Field №11
        value: (ks__bit_field.value & 0b0000000000000100000000000) != 0
      ks__has_field_reward_id_list: # Field №12
        value: (ks__bit_field.value & 0b0000000000001000000000000) != 0
      ks__has_field_show_type: # Field №13
        value: (ks__bit_field.value & 0b0000000000010000000000000) != 0
      ks__has_field_special_show_cond_id_list: # Field №14
        value: (ks__bit_field.value & 0b0000000000100000000000000) != 0
      ks__has_field_special_show_quest_id: # Field №15
        value: (ks__bit_field.value & 0b0000000001000000000000000) != 0
      ks__has_field_chapter_id: # Field №16
        value: (ks__bit_field.value & 0b0000000010000000000000000) != 0
      ks__has_field_task_id: # Field №17
        value: (ks__bit_field.value & 0b0000000100000000000000000) != 0
      ks__has_field_show_red_point: # Field №18
        value: (ks__bit_field.value & 0b0000001000000000000000000) != 0
      ks__has_field_activity_id: # Field №19
        value: (ks__bit_field.value & 0b0000010000000000000000000) != 0
      ks__has_field_sub_quests: # Field №20
        value: (ks__bit_field.value & 0b0000100000000000000000000) != 0
      ks__has_field_talks: # Field №21
        value: (ks__bit_field.value & 0b0001000000000000000000000) != 0
      ks__has_field_preload_lua_list: # Field №22
        value: (ks__bit_field.value & 0b0010000000000000000000000) != 0
      ks__has_field_force_preload_lua_list: # Field №23
        value: (ks__bit_field.value & 0b0100000000000000000000000) != 0
      ks__has_field_free_style_dic: # Field №24
        value: (ks__bit_field.value & 0b1000000000000000000000000) != 0
  config_main_quest_brief:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: series
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_series
      - id: type
        type: ks__enum__quest_type
        if: ks__has_field_type
      - id: main_quest_tag
        type: ks__enum__main_quest_tag_type
        if: ks__has_field_main_quest_tag
      - id: title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_title
      - id: desc
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_desc
      - id: recommend_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_recommend_level
      - id: suggest_track_main_quest_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_suggest_track_main_quest_list
      - id: reward_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_reward_id_list
      - id: show_type
        type: ks__enum__quest_show_type
        if: ks__has_field_show_type
      - id: special_show_cond_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_special_show_cond_id_list
      - id: special_show_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_special_show_quest_id
      - id: chapter_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_chapter_id
      - id: task_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_task_id
      - id: sub_quests
        type: ks__array_of__config_quest_scheme__length_u
        if: ks__has_field_sub_quests
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.value & 0b000000000000001) != 0
      ks__has_field_series: # Field №1
        value: (ks__bit_field.value & 0b000000000000010) != 0
      ks__has_field_type: # Field №2
        value: (ks__bit_field.value & 0b000000000000100) != 0
      ks__has_field_main_quest_tag: # Field №3
        value: (ks__bit_field.value & 0b000000000001000) != 0
      ks__has_field_title: # Field №4
        value: (ks__bit_field.value & 0b000000000010000) != 0
      ks__has_field_desc: # Field №5
        value: (ks__bit_field.value & 0b000000000100000) != 0
      ks__has_field_recommend_level: # Field №6
        value: (ks__bit_field.value & 0b000000001000000) != 0
      ks__has_field_suggest_track_main_quest_list: # Field №7
        value: (ks__bit_field.value & 0b000000010000000) != 0
      ks__has_field_reward_id_list: # Field №8
        value: (ks__bit_field.value & 0b000000100000000) != 0
      ks__has_field_show_type: # Field №9
        value: (ks__bit_field.value & 0b000001000000000) != 0
      ks__has_field_special_show_cond_id_list: # Field №10
        value: (ks__bit_field.value & 0b000010000000000) != 0
      ks__has_field_special_show_quest_id: # Field №11
        value: (ks__bit_field.value & 0b000100000000000) != 0
      ks__has_field_chapter_id: # Field №12
        value: (ks__bit_field.value & 0b001000000000000) != 0
      ks__has_field_task_id: # Field №13
        value: (ks__bit_field.value & 0b010000000000000) != 0
      ks__has_field_sub_quests: # Field №14
        value: (ks__bit_field.value & 0b100000000000000) != 0
  config_npc_talk_scheme:
    seq:
      - id: ks__bit_field
        type: u1
      - id: npc_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_npc_id
      - id: talks
        type: ks__array_of__config_talk_scheme__length_u
        if: ks__has_field_talks
    instances:
      ks__has_field_npc_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_talks: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_activity_talk_scheme:
    seq:
      - id: ks__bit_field
        type: u1
      - id: activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_id
      - id: talks
        type: ks__array_of__config_talk_scheme__length_u
        if: ks__has_field_talks
    instances:
      ks__has_field_activity_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_talks: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_gadget_talk_scheme:
    seq:
      - id: ks__bit_field
        type: u1
      - id: config_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_config_id
      - id: group_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_group_id
      - id: talks
        type: ks__array_of__config_talk_scheme__length_u
        if: ks__has_field_talks
    instances:
      ks__has_field_config_id: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_group_id: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_talks: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__kvp_of_dict__aux_types__string_ks__array_of__aux_types__vlq_base128_le_s__length_u:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: ks__array_of__aux_types__vlq_base128_le_s__length_u
  ks__dict_of__aux_types__string_ks__array_of__aux_types__vlq_base128_le_s__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_ks__array_of__aux_types__vlq_base128_le_s__length_u
        repeat: expr
        repeat-expr: length.value
  config_random_quest_scheme:
    seq:
      - id: ks__bit_field
        type: u1
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: free_style_dic
        type: ks__dict_of__aux_types__vlq_base128_le_u_ks__array_of__aux_types__vlq_base128_le_s__length_u
        if: ks__has_field_free_style_dic
      - id: random_free_style_dic
        type: ks__dict_of__aux_types__string_ks__array_of__aux_types__vlq_base128_le_s__length_u
        if: ks__has_field_random_free_style_dic
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_free_style_dic: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_random_free_style_dic: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_random_talk_scheme:
    seq:
      - id: ks__bit_field
        type: u1
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: free_style_list
        type: ks__array_of__aux_types__vlq_base128_le_s__length_u
        if: ks__has_field_free_style_list
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_free_style_list: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__array_of__config_random_talk_scheme__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_random_talk_scheme
        repeat: expr
        repeat-expr: length.value
  ks__array_of__config_random_quest_scheme__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_random_quest_scheme
        repeat: expr
        repeat-expr: length.value
  config_random_quest_global_scheme:
    seq:
      - id: ks__bit_field
        type: u1
      - id: talk_list
        type: ks__array_of__config_random_talk_scheme__length_u
        if: ks__has_field_talk_list
      - id: quest_list
        type: ks__array_of__config_random_quest_scheme__length_u
        if: ks__has_field_quest_list
    instances:
      ks__has_field_talk_list: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_quest_list: # Field №1
        value: (ks__bit_field & 0b10) != 0
  quest_type_comparer:
    seq: []
    instances: {}
  quest_state_comparer:
    seq: []
    instances: {}
  ks__enum__parent_quest_state:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: parent_quest_state
  parent_quest_state_comparer:
    seq: []
    instances: {}
  quest_show_type_comparer:
    seq: []
    instances: {}
  main_quest_tag_type_comparer:
    seq: []
    instances: {}
  ks__enum__quest_cond_compare_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: quest_cond_compare_type
  quest_cond_compare_type_comparer:
    seq: []
    instances: {}
  quest_cond_type_comparer:
    seq: []
    instances: {}
  quest_content_type_comparer:
    seq: []
    instances: {}
  quest_guide_type_comparer:
    seq: []
    instances: {}
  ks__enum__quest_fish_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: quest_fish_type
  quest_fish_type_comparer:
    seq: []
    instances: {}
  ks__enum__quest_guide_npc_select_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: quest_guide_npc_select_type
  quest_guide_npc_select_type_comparer:
    seq: []
    instances: {}
  show_quest_guide_type_comparer:
    seq: []
    instances: {}
  quest_guide_auto_comparer:
    seq: []
    instances: {}
  quest_guide_style_comparer:
    seq: []
    instances: {}
  quest_guide_layer_comparer:
    seq: []
    instances: {}
  quest_exec_type_comparer:
    seq: []
    instances: {}
  talk_exec_type_comparer:
    seq: []
    instances: {}
  talk_begin_way_comparer:
    seq: []
    instances: {}
  talk_hero_type_comparer:
    seq: []
    instances: {}
  talk_load_type_comparer:
    seq: []
    instances: {}
  talk_role_type_comparer:
    seq: []
    instances: {}
  talk_show_type_comparer:
    seq: []
    instances: {}
  talk_mark_type_comparer:
    seq: []
    instances: {}
  random_quest_filter_type_comparer:
    seq: []
    instances: {}
  animator_float:
    seq:
      - id: ks__bit_field
        type: u1
      - id: name
        type: aux_types::string
        if: ks__has_field_name
      - id: value
        type: f4
        if: ks__has_field_value
    instances:
      ks__has_field_name: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_value: # Field №1
        value: (ks__bit_field & 0b10) != 0
  animator_int:
    seq:
      - id: ks__bit_field
        type: u1
      - id: name
        type: aux_types::string
        if: ks__has_field_name
      - id: value
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_value
    instances:
      ks__has_field_name: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_value: # Field №1
        value: (ks__bit_field & 0b10) != 0
  animator_bool:
    seq:
      - id: ks__bit_field
        type: u1
      - id: name
        type: aux_types::string
        if: ks__has_field_name
      - id: value
        type: u1
        if: ks__has_field_value
    instances:
      ks__has_field_name: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_value: # Field №1
        value: (ks__bit_field & 0b10) != 0
  animator_trigger:
    seq:
      - id: ks__bit_field
        type: u1
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: is_set
        type: u1
        if: ks__has_field_is_set
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_is_set: # Field №1
        value: (ks__bit_field & 0b10) != 0
  record_override_texture:
    seq:
      - id: ks__bit_field
        type: u1
      - id: name
        type: aux_types::string
        if: ks__has_field_name
      - id: value
        type: aux_types::string
        if: ks__has_field_value
    instances:
      ks__has_field_name: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_value: # Field №1
        value: (ks__bit_field & 0b10) != 0
  animator_record_state:
    seq:
      - id: ks__bit_field
        type: u1
      - id: short_name_hash
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_short_name_hash
      - id: state_length
        type: f4
        if: ks__has_field_state_length
      - id: normalized_time
        type: f4
        if: ks__has_field_normalized_time
    instances:
      ks__has_field_short_name_hash: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_state_length: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_normalized_time: # Field №2
        value: (ks__bit_field & 0b100) != 0
  animator_record_transition_info:
    seq:
      - id: ks__bit_field
        type: u1
      - id: transition_duration
        type: f4
        if: ks__has_field_transition_duration
      - id: normalized_transition_time
        type: f4
        if: ks__has_field_normalized_transition_time
      - id: duration_unit
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_duration_unit
    instances:
      ks__has_field_transition_duration: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_normalized_transition_time: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_duration_unit: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__array_of__animator_float__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: animator_float
        repeat: expr
        repeat-expr: length.value
  ks__array_of__animator_int__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: animator_int
        repeat: expr
        repeat-expr: length.value
  ks__array_of__animator_bool__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: animator_bool
        repeat: expr
        repeat-expr: length.value
  ks__array_of__animator_trigger__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: animator_trigger
        repeat: expr
        repeat-expr: length.value
  animator_parameters:
    seq:
      - id: ks__bit_field
        type: u1
      - id: floats
        type: ks__array_of__animator_float__length_u
        if: ks__has_field_floats
      - id: ints
        type: ks__array_of__animator_int__length_u
        if: ks__has_field_ints
      - id: bools
        type: ks__array_of__animator_bool__length_u
        if: ks__has_field_bools
      - id: triggers
        type: ks__array_of__animator_trigger__length_u
        if: ks__has_field_triggers
    instances:
      ks__has_field_floats: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_ints: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_bools: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_triggers: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  config_record_animator_info:
    seq:
      - id: ks__bit_field
        type: u1
      - id: animator_parameter
        type: animator_parameters
        if: ks__has_field_animator_parameter
      - id: current_state
        type: animator_record_state
        if: ks__has_field_current_state
      - id: next_state
        type: animator_record_state
        if: ks__has_field_next_state
      - id: transition_info
        type: animator_record_transition_info
        if: ks__has_field_transition_info
    instances:
      ks__has_field_animator_parameter: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_current_state: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_next_state: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_transition_info: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  renderer_float:
    seq:
      - id: ks__bit_field
        type: u1
      - id: name
        type: aux_types::string
        if: ks__has_field_name
      - id: value
        type: f4
        if: ks__has_field_value
    instances:
      ks__has_field_name: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_value: # Field №1
        value: (ks__bit_field & 0b10) != 0
  material_float:
    seq:
      - id: ks__bit_field
        type: u1
      - id: name
        type: aux_types::string
        if: ks__has_field_name
      - id: value
        type: f4
        if: ks__has_field_value
    instances:
      ks__has_field_name: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_value: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__array_of__renderer_float__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: renderer_float
        repeat: expr
        repeat-expr: length.value
  record_renderer_global_parameters:
    seq:
      - id: ks__bit_field
        type: u1
      - id: floats
        type: ks__array_of__renderer_float__length_u
        if: ks__has_field_floats
    instances:
      ks__has_field_floats: # Field №0
        value: (ks__bit_field & 0b1) != 0
  ks__array_of__record_override_texture__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: record_override_texture
        repeat: expr
        repeat-expr: length.value
  config_record_renderer_parameters:
    seq:
      - id: ks__bit_field
        type: u1
      - id: global_parameter
        type: record_renderer_global_parameters
        if: ks__has_field_global_parameter
      - id: textures
        type: ks__array_of__record_override_texture__length_u
        if: ks__has_field_textures
    instances:
      ks__has_field_global_parameter: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_textures: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__array_of__material_float__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: material_float
        repeat: expr
        repeat-expr: length.value
  config_record_material_parameters:
    seq:
      - id: ks__bit_field
        type: u1
      - id: material_type
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_material_type
      - id: texture_names
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_texture_names
      - id: floats
        type: ks__array_of__material_float__length_u
        if: ks__has_field_floats
    instances:
      ks__has_field_material_type: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_texture_names: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_floats: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_record_ragdoll_parameters:
    seq:
      - id: ks__bit_field
        type: u1
      - id: prefab_hash
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_prefab_hash
      - id: velocity_on_root
        type: vector
        if: ks__has_field_velocity_on_root
      - id: explosion_force
        type: vector
        if: ks__has_field_explosion_force
    instances:
      ks__has_field_prefab_hash: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_velocity_on_root: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_explosion_force: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__enum__emo_record_type_enum:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: emo_record_type_enum
  emo_record_type_enum_comparer:
    seq: []
    instances: {}
  config_record_emo_func:
    seq:
      - id: ks__bit_field
        type: u1
      - id: type
        type: ks__enum__emo_record_type_enum
        if: ks__has_field_type
      - id: record_bool
        type: u1
        if: ks__has_field_record_bool
      - id: record_float
        type: f4
        if: ks__has_field_record_float
      - id: string_arrays
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_string_arrays
      - id: ulongs
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_ulongs
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_record_bool: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_record_float: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_string_arrays: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_ulongs: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  ks__array_of__config_record_emo_func__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_record_emo_func
        repeat: expr
        repeat-expr: length.value
  config_record_emo_parameters:
    seq:
      - id: ks__bit_field
        type: u1
      - id: eye_info
        type: ks__array_of__vector__length_u
        if: ks__has_field_eye_info
      - id: emo_funcs
        type: ks__array_of__config_record_emo_func__length_u
        if: ks__has_field_emo_funcs
    instances:
      ks__has_field_eye_info: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_emo_funcs: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_record_actor_base:
    seq:
      - id: ks__bit_field
        type: u1
      - id: pos
        type: vector
        if: ks__has_field_pos
      - id: rot
        type: vector
        if: ks__has_field_rot
      - id: scale
        type: vector
        if: ks__has_field_scale
      - id: serial_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_serial_id
    instances:
      ks__has_field_pos: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_rot: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_scale: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_serial_id: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  config_record_entity_register:
    seq: []
    instances: {}
  config_record_entity:
    seq:
      - id: ks__base
        type: config_record_actor_base
      - id: ks__bit_field
        type: u1
      - id: animator_info
        type: config_record_animator_info
        if: ks__has_field_animator_info
      - id: renderer_params
        type: config_record_renderer_parameters
        if: ks__has_field_renderer_params
      - id: material_params
        type: config_record_material_parameters
        if: ks__has_field_material_params
      - id: ragdoll_params
        type: config_record_ragdoll_parameters
        if: ks__has_field_ragdoll_params
      - id: emo_params
        type: config_record_emo_parameters
        if: ks__has_field_emo_params
    instances:
      ks__has_field_animator_info: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_renderer_params: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_material_params: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_ragdoll_params: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_emo_params: # Field №4
        value: (ks__bit_field & 0b10000) != 0
      # Base class fields
      pos:
        value: ks__base.pos
      rot:
        value: ks__base.rot
      scale:
        value: ks__base.scale
      serial_id:
        value: ks__base.serial_id
  config_record_effect_register:
    seq: []
    instances: {}
  config_record_effect:
    seq:
      - id: ks__base
        type: config_record_actor_base
      - id: ks__bit_field
        type: u1
      - id: animator_info
        type: config_record_animator_info
        if: ks__has_field_animator_info
      - id: renderer_params
        type: config_record_renderer_parameters
        if: ks__has_field_renderer_params
      - id: material_params
        type: config_record_material_parameters
        if: ks__has_field_material_params
    instances:
      ks__has_field_animator_info: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_renderer_params: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_material_params: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      pos:
        value: ks__base.pos
      rot:
        value: ks__base.rot
      scale:
        value: ks__base.scale
      serial_id:
        value: ks__base.serial_id
  ks__array_of__ks__disp__config_record_actor_base__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__disp__config_record_actor_base
        repeat: expr
        repeat-expr: length.value
  config_record_frame:
    seq:
      - id: ks__bit_field
        type: u1
      - id: delta_time
        type: f4
        if: ks__has_field_delta_time
      - id: frame_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_frame_count
      - id: actors
        type: ks__array_of__ks__disp__config_record_actor_base__length_u
        if: ks__has_field_actors
    instances:
      ks__has_field_delta_time: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_frame_count: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_actors: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__enum__record_actor_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: record_actor_type
  record_actor_type_comparer:
    seq: []
    instances: {}
  config_record_actor_info:
    seq:
      - id: ks__bit_field
        type: u1
      - id: name
        type: aux_types::string
        if: ks__has_field_name
      - id: prefab_hash
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_prefab_hash
      - id: serial_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_serial_id
      - id: actor_type
        type: ks__enum__record_actor_type
        if: ks__has_field_actor_type
    instances:
      ks__has_field_name: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_prefab_hash: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_serial_id: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_actor_type: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  ks__array_of__config_record_actor_info__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_record_actor_info
        repeat: expr
        repeat-expr: length.value
  ks__array_of__config_record_frame__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_record_frame
        repeat: expr
        repeat-expr: length.value
  config_record:
    seq:
      - id: ks__bit_field
        type: u1
      - id: name
        type: aux_types::string
        if: ks__has_field_name
      - id: camera_attach_point
        type: aux_types::string
        if: ks__has_field_camera_attach_point
      - id: deactive_node_list
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_deactive_node_list
      - id: actor_info_list
        type: ks__array_of__config_record_actor_info__length_u
        if: ks__has_field_actor_info_list
      - id: frame_list
        type: ks__array_of__config_record_frame__length_u
        if: ks__has_field_frame_list
      - id: target_frame_rate
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_target_frame_rate
    instances:
      ks__has_field_name: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_camera_attach_point: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_deactive_node_list: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_actor_info_list: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_frame_list: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_target_frame_rate: # Field №5
        value: (ks__bit_field & 0b100000) != 0
  config_record_pattern:
    seq:
      - id: ks__bit_field
        type: u1
      - id: bool_list
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_bool_list
      - id: int_list
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_int_list
      - id: float_list
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_float_list
      - id: trigger_list
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_trigger_list
    instances:
      ks__has_field_bool_list: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_int_list: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_float_list: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_trigger_list: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  config_resonance_cut_scene:
    seq:
      - id: ks__bit_field
        type: u1
      - id: cutscene_index
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cutscene_index
      - id: vfx_ability
        type: aux_types::string
        if: ks__has_field_vfx_ability
    instances:
      ks__has_field_cutscene_index: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_vfx_ability: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__kvp_of_dict__ks__enum__element_type_config_resonance_cut_scene:
    seq:
      - id: key
        type: ks__enum__element_type
      - id: value
        type: config_resonance_cut_scene
  ks__dict_of__ks__enum__element_type_config_resonance_cut_scene:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__ks__enum__element_type_config_resonance_cut_scene
        repeat: expr
        repeat-expr: length.value
  config_resonance_cut_scene_map:
    seq:
      - id: ks__bit_field
        type: u1
      - id: cutscene_map
        type: ks__dict_of__ks__enum__element_type_config_resonance_cut_scene
        if: ks__has_field_cutscene_map
    instances:
      ks__has_field_cutscene_map: # Field №0
        value: (ks__bit_field & 0b1) != 0
  scene_point_type_comparer:
    seq: []
    instances: {}
  point_map_visibility_comparer:
    seq: []
    instances: {}
  scene_trans_point_register:
    seq: []
    instances: {}
  virtual_trans_point_register:
    seq: []
    instances: {}
  virtual_trans_point:
    seq:
      - id: ks__base
        type: scene_trans_point
      - id: ks__bit_field
        type: u1
      - id: mark_icon_type_name
        type: aux_types::string
        if: ks__has_field_mark_icon_type_name
    instances:
      ks__has_field_mark_icon_type_name: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      max_spring_volume:
        value: ks__base.max_spring_volume
      cutscene_list:
        value: ks__base.cutscene_list
      npc_id:
        value: ks__base.npc_id
      is_forbid_avatar_revive:
        value: ks__base.is_forbid_avatar_revive
      is_forbid_avatar_auto_use_spring:
        value: ks__base.is_forbid_avatar_auto_use_spring
      map_visibility:
        value: ks__base.map_visibility
      show_on_locked_area:
        value: ks__base.show_on_locked_area
      type:
        value: ks__base.type
      gadget_id:
        value: ks__base.gadget_id
      area_id:
        value: ks__base.area_id
      pos:
        value: ks__base.pos
      rot:
        value: ks__base.rot
      tran_pos:
        value: ks__base.tran_pos
      tran_rot:
        value: ks__base.tran_rot
      unlocked:
        value: ks__base.unlocked
      alias:
        value: ks__base.alias
      group_limit:
        value: ks__base.group_limit
      is_model_hidden:
        value: ks__base.is_model_hidden
  dungeon_entry_type_comparer:
    seq: []
    instances: {}
  dungeon_entry_register:
    seq: []
    instances: {}
  dungeon_exit_register:
    seq: []
    instances: {}
  dungeon_way_point_register:
    seq: []
    instances: {}
  dungeon_slip_revive_point_register:
    seq: []
    instances: {}
  dungeon_quit_point_register:
    seq: []
    instances: {}
  dungeon_reward_point_register:
    seq: []
    instances: {}
  personal_scene_jump_point_register:
    seq: []
    instances: {}
  scene_building_type_comparer:
    seq: []
    instances: {}
  scene_building_point_register:
    seq: []
    instances: {}
  scene_vehicle_summon_point_register:
    seq: []
    instances: {}
  ks__enum__scene_area_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: scene_area_type
  scene_area_type_comparer:
    seq: []
    instances: {}
  config_scene_area:
    seq:
      - id: ks__bit_field
        type: u1
      - id: type
        type: ks__enum__scene_area_type
        if: ks__has_field_type
      - id: unlocked
        type: u1
        if: ks__has_field_unlocked
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_unlocked: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_force_field_register:
    seq: []
    instances: {}
  config_const_force_field_register:
    seq: []
    instances: {}
  config_airflow_field_register:
    seq: []
    instances: {}
  config_fire_grass_airflow_field_register:
    seq: []
    instances: {}
  config_speedup_field_register:
    seq: []
    instances: {}
  config_speedup_field:
    seq:
      - id: ks__base
        type: config_const_force_field
      - id: ks__bit_field
        type: u1
      - id: attenuation
        type: f4
        if: ks__has_field_attenuation
      - id: single_dir
        type: u1
        if: ks__has_field_single_dir
      - id: trigger_vehicle
        type: u1
        if: ks__has_field_trigger_vehicle
      - id: stop_velocity
        type: f4
        if: ks__has_field_stop_velocity
    instances:
      ks__has_field_attenuation: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_single_dir: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_trigger_vehicle: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_stop_velocity: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      velocity:
        value: ks__base.velocity
      type:
        value: ks__base.type
      gadget_id:
        value: ks__base.gadget_id
      area_id:
        value: ks__base.area_id
      pos:
        value: ks__base.pos
      rot:
        value: ks__base.rot
      tran_pos:
        value: ks__base.tran_pos
      tran_rot:
        value: ks__base.tran_rot
      unlocked:
        value: ks__base.unlocked
      alias:
        value: ks__base.alias
      group_limit:
        value: ks__base.group_limit
      is_model_hidden:
        value: ks__base.is_model_hidden
  config_cannon_field_register:
    seq: []
    instances: {}
  config_cannon_field:
    seq:
      - id: ks__base
        type: config_speedup_field
    instances:
      # Base class fields
      attenuation:
        value: ks__base.attenuation
      single_dir:
        value: ks__base.single_dir
      trigger_vehicle:
        value: ks__base.trigger_vehicle
      stop_velocity:
        value: ks__base.stop_velocity
      velocity:
        value: ks__base.velocity
      type:
        value: ks__base.type
      gadget_id:
        value: ks__base.gadget_id
      area_id:
        value: ks__base.area_id
      pos:
        value: ks__base.pos
      rot:
        value: ks__base.rot
      tran_pos:
        value: ks__base.tran_pos
      tran_rot:
        value: ks__base.tran_rot
      unlocked:
        value: ks__base.unlocked
      alias:
        value: ks__base.alias
      group_limit:
        value: ks__base.group_limit
      is_model_hidden:
        value: ks__base.is_model_hidden
  config_rise_field_register:
    seq: []
    instances: {}
  ks__enum__height_pos_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: height_pos_type
  config_base_shape:
    seq:
      - id: ks__bit_field
        type: u1
      - id: use_height
        type: u1
        if: ks__has_field_use_height
      - id: height
        type: f4
        if: ks__has_field_height
      - id: height_type
        type: ks__enum__height_pos_type
        if: ks__has_field_height_type
    instances:
      ks__has_field_use_height: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_height: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_height_type: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_rise_field:
    seq:
      - id: ks__base
        type: config_force_field
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: cdmin
        type: f4
        if: ks__has_field_cdmin
      - id: cdmax
        type: f4
        if: ks__has_field_cdmax
      - id: vmin
        type: f4
        if: ks__has_field_vmin
      - id: vmax
        type: f4
        if: ks__has_field_vmax
      - id: hmin
        type: f4
        if: ks__has_field_hmin
      - id: hmax
        type: f4
        if: ks__has_field_hmax
      - id: attenuation
        type: f4
        if: ks__has_field_attenuation
      - id: box
        type: vector
        if: ks__has_field_box
      - id: shape
        type: ks__disp__config_base_shape
        if: ks__has_field_shape
    instances:
      ks__has_field_cdmin: # Field №0
        value: (ks__bit_field.value & 0b000000001) != 0
      ks__has_field_cdmax: # Field №1
        value: (ks__bit_field.value & 0b000000010) != 0
      ks__has_field_vmin: # Field №2
        value: (ks__bit_field.value & 0b000000100) != 0
      ks__has_field_vmax: # Field №3
        value: (ks__bit_field.value & 0b000001000) != 0
      ks__has_field_hmin: # Field №4
        value: (ks__bit_field.value & 0b000010000) != 0
      ks__has_field_hmax: # Field №5
        value: (ks__bit_field.value & 0b000100000) != 0
      ks__has_field_attenuation: # Field №6
        value: (ks__bit_field.value & 0b001000000) != 0
      ks__has_field_box: # Field №7
        value: (ks__bit_field.value & 0b010000000) != 0
      ks__has_field_shape: # Field №8
        value: (ks__bit_field.value & 0b100000000) != 0
      # Base class fields
      type:
        value: ks__base.type
      gadget_id:
        value: ks__base.gadget_id
      area_id:
        value: ks__base.area_id
      pos:
        value: ks__base.pos
      rot:
        value: ks__base.rot
      tran_pos:
        value: ks__base.tran_pos
      tran_rot:
        value: ks__base.tran_rot
      unlocked:
        value: ks__base.unlocked
      alias:
        value: ks__base.alias
      group_limit:
        value: ks__base.group_limit
      is_model_hidden:
        value: ks__base.is_model_hidden
  config_light_core_register:
    seq: []
    instances: {}
  config_light_core:
    seq:
      - id: ks__base
        type: config_const_force_field
      - id: ks__bit_field
        type: u1
      - id: trigger_name
        type: aux_types::string
        if: ks__has_field_trigger_name
      - id: core_trigger_name
        type: aux_types::string
        if: ks__has_field_core_trigger_name
      - id: max_absorb_time
        type: f4
        if: ks__has_field_max_absorb_time
      - id: attenuation
        type: f4
        if: ks__has_field_attenuation
      - id: cd
        type: f4
        if: ks__has_field_cd
    instances:
      ks__has_field_trigger_name: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_core_trigger_name: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_max_absorb_time: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_attenuation: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_cd: # Field №4
        value: (ks__bit_field & 0b10000) != 0
      # Base class fields
      velocity:
        value: ks__base.velocity
      type:
        value: ks__base.type
      gadget_id:
        value: ks__base.gadget_id
      area_id:
        value: ks__base.area_id
      pos:
        value: ks__base.pos
      rot:
        value: ks__base.rot
      tran_pos:
        value: ks__base.tran_pos
      tran_rot:
        value: ks__base.tran_rot
      unlocked:
        value: ks__base.unlocked
      alias:
        value: ks__base.alias
      group_limit:
        value: ks__base.group_limit
      is_model_hidden:
        value: ks__base.is_model_hidden
  config_local_entity_register:
    seq: []
    instances: {}
  config_local_entity:
    seq:
      - id: ks__base
        type: config_scene_point
      - id: ks__bit_field
        type: u1
      - id: check_dist
        type: f4
        if: ks__has_field_check_dist
      - id: with_go
        type: u1
        if: ks__has_field_with_go
    instances:
      ks__has_field_check_dist: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_with_go: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      type:
        value: ks__base.type
      gadget_id:
        value: ks__base.gadget_id
      area_id:
        value: ks__base.area_id
      pos:
        value: ks__base.pos
      rot:
        value: ks__base.rot
      tran_pos:
        value: ks__base.tran_pos
      tran_rot:
        value: ks__base.tran_rot
      unlocked:
        value: ks__base.unlocked
      alias:
        value: ks__base.alias
      group_limit:
        value: ks__base.group_limit
      is_model_hidden:
        value: ks__base.is_model_hidden
  config_windmill_register:
    seq: []
    instances: {}
  config_windmill:
    seq:
      - id: ks__base
        type: config_local_entity
    instances:
      # Base class fields
      check_dist:
        value: ks__base.check_dist
      with_go:
        value: ks__base.with_go
      type:
        value: ks__base.type
      gadget_id:
        value: ks__base.gadget_id
      area_id:
        value: ks__base.area_id
      pos:
        value: ks__base.pos
      rot:
        value: ks__base.rot
      tran_pos:
        value: ks__base.tran_pos
      tran_rot:
        value: ks__base.tran_rot
      unlocked:
        value: ks__base.unlocked
      alias:
        value: ks__base.alias
      group_limit:
        value: ks__base.group_limit
      is_model_hidden:
        value: ks__base.is_model_hidden
  config_local_trigger_register:
    seq: []
    instances: {}
  config_local_trigger:
    seq:
      - id: ks__base
        type: config_local_entity
      - id: ks__bit_field
        type: u1
      - id: trigger_flag
        type: ks__enum__trigger_flag
        if: ks__has_field_trigger_flag
      - id: shape
        type: ks__disp__config_base_shape
        if: ks__has_field_shape
      - id: check_count
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_check_count
      - id: trigger_interval
        type: f4
        if: ks__has_field_trigger_interval
      - id: vector_param
        type: vector
        if: ks__has_field_vector_param
      - id: float_param
        type: f4
        if: ks__has_field_float_param
      - id: string_param
        type: aux_types::string
        if: ks__has_field_string_param
    instances:
      ks__has_field_trigger_flag: # Field №0
        value: (ks__bit_field & 0b0000001) != 0
      ks__has_field_shape: # Field №1
        value: (ks__bit_field & 0b0000010) != 0
      ks__has_field_check_count: # Field №2
        value: (ks__bit_field & 0b0000100) != 0
      ks__has_field_trigger_interval: # Field №3
        value: (ks__bit_field & 0b0001000) != 0
      ks__has_field_vector_param: # Field №4
        value: (ks__bit_field & 0b0010000) != 0
      ks__has_field_float_param: # Field №5
        value: (ks__bit_field & 0b0100000) != 0
      ks__has_field_string_param: # Field №6
        value: (ks__bit_field & 0b1000000) != 0
      # Base class fields
      check_dist:
        value: ks__base.check_dist
      with_go:
        value: ks__base.with_go
      type:
        value: ks__base.type
      gadget_id:
        value: ks__base.gadget_id
      area_id:
        value: ks__base.area_id
      pos:
        value: ks__base.pos
      rot:
        value: ks__base.rot
      tran_pos:
        value: ks__base.tran_pos
      tran_rot:
        value: ks__base.tran_rot
      unlocked:
        value: ks__base.unlocked
      alias:
        value: ks__base.alias
      group_limit:
        value: ks__base.group_limit
      is_model_hidden:
        value: ks__base.is_model_hidden
  config_loading_door_register:
    seq: []
    instances: {}
  config_loading_door:
    seq:
      - id: ks__base
        type: config_scene_point
      - id: ks__bit_field
        type: u1
      - id: room1
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_room1
      - id: room2
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_room2
    instances:
      ks__has_field_room1: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_room2: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      type:
        value: ks__base.type
      gadget_id:
        value: ks__base.gadget_id
      area_id:
        value: ks__base.area_id
      pos:
        value: ks__base.pos
      rot:
        value: ks__base.rot
      tran_pos:
        value: ks__base.tran_pos
      tran_rot:
        value: ks__base.tran_rot
      unlocked:
        value: ks__base.unlocked
      alias:
        value: ks__base.alias
      group_limit:
        value: ks__base.group_limit
      is_model_hidden:
        value: ks__base.is_model_hidden
  ks__kvp_of_dict__aux_types__string_ks__disp__config_scene_point:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: ks__disp__config_scene_point
  ks__dict_of__aux_types__string_ks__disp__config_scene_point:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_ks__disp__config_scene_point
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__aux_types__string_config_scene_area:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: config_scene_area
  ks__dict_of__aux_types__string_config_scene_area:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_config_scene_area
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__aux_types__string_config_loading_door:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: config_loading_door
  ks__dict_of__aux_types__string_config_loading_door:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_config_loading_door
        repeat: expr
        repeat-expr: length.value
  config_scene:
    seq:
      - id: ks__bit_field
        type: u1
      - id: trans_radius
        type: f4
        if: ks__has_field_trans_radius
      - id: points
        type: ks__dict_of__aux_types__string_ks__disp__config_scene_point
        if: ks__has_field_points
      - id: areas
        type: ks__dict_of__aux_types__string_config_scene_area
        if: ks__has_field_areas
      - id: forces
        type: ks__dict_of__aux_types__string_ks__disp__config_scene_point
        if: ks__has_field_forces
      - id: entities
        type: ks__dict_of__aux_types__string_ks__disp__config_scene_point
        if: ks__has_field_entities
      - id: doors
        type: ks__dict_of__aux_types__string_config_loading_door
        if: ks__has_field_doors
    instances:
      ks__has_field_trans_radius: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_points: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_areas: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_forces: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_entities: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_doors: # Field №5
        value: (ks__bit_field & 0b100000) != 0
  ks__enum__env_zone_event_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: env_zone_event_type
  env_zone_event_type_comparer:
    seq: []
    instances: {}
  ks__array_of__ks__enum__env_zone_event_type__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__enum__env_zone_event_type
        repeat: expr
        repeat-expr: length.value
  config_environment_zone:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: area_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_area_id
      - id: env_type
        type: ks__enum__environment_type
        if: ks__has_field_env_type
      - id: point_vec
        type: ks__array_of__point2d__length_u
        if: ks__has_field_point_vec
      - id: bottom
        type: f4
        if: ks__has_field_bottom
      - id: top
        type: f4
        if: ks__has_field_top
      - id: is_use_height_range
        type: u1
        if: ks__has_field_is_use_height_range
      - id: animal_max_num
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_animal_max_num
      - id: refresh_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_refresh_time
      - id: index
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_index
      - id: event_type_list
        type: ks__array_of__ks__enum__env_zone_event_type__length_u
        if: ks__has_field_event_type_list
      - id: task_content_type
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_task_content_type
      - id: task_type
        type: ks__enum__rand_task_content_type
        if: ks__has_field_task_type
      - id: task_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_task_id_list
      - id: center
        type: point2d
        if: ks__has_field_center
      - id: level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_level
      - id: zone_bit_type
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_zone_bit_type
      - id: choose_possible_point
        type: u1
        if: ks__has_field_choose_possible_point
      - id: possible_point_vec
        type: ks__array_of__vector__length_u
        if: ks__has_field_possible_point_vec
      - id: random_quest_entrance_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_random_quest_entrance_id_list
    instances:
      ks__has_field_area_id: # Field №0
        value: (ks__bit_field.value & 0b0000000000000000001) != 0
      ks__has_field_env_type: # Field №1
        value: (ks__bit_field.value & 0b0000000000000000010) != 0
      ks__has_field_point_vec: # Field №2
        value: (ks__bit_field.value & 0b0000000000000000100) != 0
      ks__has_field_bottom: # Field №3
        value: (ks__bit_field.value & 0b0000000000000001000) != 0
      ks__has_field_top: # Field №4
        value: (ks__bit_field.value & 0b0000000000000010000) != 0
      ks__has_field_is_use_height_range: # Field №5
        value: (ks__bit_field.value & 0b0000000000000100000) != 0
      ks__has_field_animal_max_num: # Field №6
        value: (ks__bit_field.value & 0b0000000000001000000) != 0
      ks__has_field_refresh_time: # Field №7
        value: (ks__bit_field.value & 0b0000000000010000000) != 0
      ks__has_field_index: # Field №8
        value: (ks__bit_field.value & 0b0000000000100000000) != 0
      ks__has_field_event_type_list: # Field №9
        value: (ks__bit_field.value & 0b0000000001000000000) != 0
      ks__has_field_task_content_type: # Field №10
        value: (ks__bit_field.value & 0b0000000010000000000) != 0
      ks__has_field_task_type: # Field №11
        value: (ks__bit_field.value & 0b0000000100000000000) != 0
      ks__has_field_task_id_list: # Field №12
        value: (ks__bit_field.value & 0b0000001000000000000) != 0
      ks__has_field_center: # Field №13
        value: (ks__bit_field.value & 0b0000010000000000000) != 0
      ks__has_field_level: # Field №14
        value: (ks__bit_field.value & 0b0000100000000000000) != 0
      ks__has_field_zone_bit_type: # Field №15
        value: (ks__bit_field.value & 0b0001000000000000000) != 0
      ks__has_field_choose_possible_point: # Field №16
        value: (ks__bit_field.value & 0b0010000000000000000) != 0
      ks__has_field_possible_point_vec: # Field №17
        value: (ks__bit_field.value & 0b0100000000000000000) != 0
      ks__has_field_random_quest_entrance_id_list: # Field №18
        value: (ks__bit_field.value & 0b1000000000000000000) != 0
  config_weather_area:
    seq:
      - id: ks__bit_field
        type: u1
      - id: area_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_area_id
      - id: is_accurate_border
        type: u1
        if: ks__has_field_is_accurate_border
      - id: points
        type: ks__array_of__point2d__length_u
        if: ks__has_field_points
    instances:
      ks__has_field_area_id: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_is_accurate_border: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_points: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_home_furniture:
    seq:
      - id: ks__bit_field
        type: u1
      - id: furniture_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_furniture_id
      - id: spawn_pos
        type: vector
        if: ks__has_field_spawn_pos
      - id: spawn_rot
        type: vector
        if: ks__has_field_spawn_rot
      - id: parent_furniture_index
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_parent_furniture_index
    instances:
      ks__has_field_furniture_id: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_spawn_pos: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_spawn_rot: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_parent_furniture_index: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  config_home_furniture_suite:
    seq:
      - id: ks__bit_field
        type: u1
      - id: suite_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_suite_id
      - id: spawn_pos
        type: vector
        if: ks__has_field_spawn_pos
      - id: included_furniture_index_list
        type: ks__array_of__aux_types__vlq_base128_le_s__length_u
        if: ks__has_field_included_furniture_index_list
    instances:
      ks__has_field_suite_id: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_spawn_pos: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_included_furniture_index_list: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_home_animal:
    seq:
      - id: ks__bit_field
        type: u1
      - id: furniture_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_furniture_id
      - id: spawn_pos
        type: vector
        if: ks__has_field_spawn_pos
      - id: spawn_rot
        type: vector
        if: ks__has_field_spawn_rot
    instances:
      ks__has_field_furniture_id: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_spawn_pos: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_spawn_rot: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_weekend_djinn:
    seq:
      - id: ks__bit_field
        type: u1
      - id: spawn_pos
        type: vector
        if: ks__has_field_spawn_pos
      - id: spawn_rot
        type: vector
        if: ks__has_field_spawn_rot
      - id: pos
        type: vector
        if: ks__has_field_pos
      - id: rot
        type: vector
        if: ks__has_field_rot
    instances:
      ks__has_field_spawn_pos: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_spawn_rot: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_pos: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_rot: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  ks__array_of__config_home_furniture__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_home_furniture
        repeat: expr
        repeat-expr: length.value
  ks__array_of__config_home_furniture_suite__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_home_furniture_suite
        repeat: expr
        repeat-expr: length.value
  ks__array_of__config_home_animal__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_home_animal
        repeat: expr
        repeat-expr: length.value
  ks__array_of__config_weekend_djinn__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_weekend_djinn
        repeat: expr
        repeat-expr: length.value
  config_home_block:
    seq:
      - id: ks__bit_field
        type: u1
      - id: block_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_block_id
      - id: persistent_furniture_list
        type: ks__array_of__config_home_furniture__length_u
        if: ks__has_field_persistent_furniture_list
      - id: deploy_furniure_list
        type: ks__array_of__config_home_furniture__length_u
        if: ks__has_field_deploy_furniure_list
      - id: furniture_suite_list
        type: ks__array_of__config_home_furniture_suite__length_u
        if: ks__has_field_furniture_suite_list
      - id: deploy_animal_list
        type: ks__array_of__config_home_animal__length_u
        if: ks__has_field_deploy_animal_list
      - id: weekend_djinn_info_list
        type: ks__array_of__config_weekend_djinn__length_u
        if: ks__has_field_weekend_djinn_info_list
    instances:
      ks__has_field_block_id: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_persistent_furniture_list: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_deploy_furniure_list: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_furniture_suite_list: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_deploy_animal_list: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_weekend_djinn_info_list: # Field №5
        value: (ks__bit_field & 0b100000) != 0
  ks__array_of__config_home_block__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_home_block
        repeat: expr
        repeat-expr: length.value
  config_scene_home_info:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: scene_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scene_id
      - id: block_arrangement_info_list
        type: ks__array_of__config_home_block__length_u
        if: ks__has_field_block_arrangement_info_list
      - id: is_set_born_pos
        type: u1
        if: ks__has_field_is_set_born_pos
      - id: born_pos
        type: vector
        if: ks__has_field_born_pos
      - id: born_rot
        type: vector
        if: ks__has_field_born_rot
      - id: door_list
        type: ks__array_of__config_home_furniture__length_u
        if: ks__has_field_door_list
      - id: stair_list
        type: ks__array_of__config_home_furniture__length_u
        if: ks__has_field_stair_list
      - id: main_house
        type: config_home_furniture
        if: ks__has_field_main_house
      - id: djinn_pos
        type: vector
        if: ks__has_field_djinn_pos
      - id: tmp_version
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_tmp_version
    instances:
      ks__has_field_scene_id: # Field №0
        value: (ks__bit_field.value & 0b0000000001) != 0
      ks__has_field_block_arrangement_info_list: # Field №1
        value: (ks__bit_field.value & 0b0000000010) != 0
      ks__has_field_is_set_born_pos: # Field №2
        value: (ks__bit_field.value & 0b0000000100) != 0
      ks__has_field_born_pos: # Field №3
        value: (ks__bit_field.value & 0b0000001000) != 0
      ks__has_field_born_rot: # Field №4
        value: (ks__bit_field.value & 0b0000010000) != 0
      ks__has_field_door_list: # Field №5
        value: (ks__bit_field.value & 0b0000100000) != 0
      ks__has_field_stair_list: # Field №6
        value: (ks__bit_field.value & 0b0001000000) != 0
      ks__has_field_main_house: # Field №7
        value: (ks__bit_field.value & 0b0010000000) != 0
      ks__has_field_djinn_pos: # Field №8
        value: (ks__bit_field.value & 0b0100000000) != 0
      ks__has_field_tmp_version: # Field №9
        value: (ks__bit_field.value & 0b1000000000) != 0
  ks__enum__config_schedule_platform:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: config_schedule_platform
  config_schedule_platform_comparer:
    seq: []
    instances: {}
  ks__enum__config_schedule_job_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: config_schedule_job_type
  config_schedule_job_type_comparer:
    seq: []
    instances: {}
  ks__enum__config_scheduler_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: config_scheduler_type
  config_scheduler_type_comparer:
    seq: []
    instances: {}
  config_job:
    seq:
      - id: ks__bit_field
        type: u1
      - id: is_force_main_thread
        type: u1
        if: ks__has_field_is_force_main_thread
      - id: schedule_job_type
        type: ks__enum__config_schedule_job_type
        if: ks__has_field_schedule_job_type
      - id: schedule_type
        type: ks__enum__config_scheduler_type
        if: ks__has_field_schedule_type
      - id: max_node_num
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_max_node_num
      - id: group_id
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_group_id
    instances:
      ks__has_field_is_force_main_thread: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_schedule_job_type: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_schedule_type: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_max_node_num: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_group_id: # Field №4
        value: (ks__bit_field & 0b10000) != 0
  ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_job:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_s
      - id: value
        type: config_job
  ks__dict_of__aux_types__vlq_base128_le_s_config_job:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_s_config_job
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__aux_types__vlq_base128_le_s_ks__dict_of__aux_types__vlq_base128_le_s_config_job:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_s
      - id: value
        type: ks__dict_of__aux_types__vlq_base128_le_s_config_job
  ks__dict_of__aux_types__vlq_base128_le_s_ks__dict_of__aux_types__vlq_base128_le_s_config_job:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_s_ks__dict_of__aux_types__vlq_base128_le_s_config_job
        repeat: expr
        repeat-expr: length.value
  config_job_data:
    seq:
      - id: ks__bit_field
        type: u1
      - id: job_map_data
        type: ks__dict_of__aux_types__vlq_base128_le_s_ks__dict_of__aux_types__vlq_base128_le_s_config_job
        if: ks__has_field_job_map_data
    instances:
      ks__has_field_job_map_data: # Field №0
        value: (ks__bit_field & 0b1) != 0
  ks__enum__sectr_platform_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: sectr_platform_type
  sectr_platform_type_comparer:
    seq: []
    instances: {}
  ks__enum__sectr_object_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: sectr_object_type
  sectr_object_type_comparer:
    seq: []
    instances: {}
  ks__enum__sectr_sector_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: sectr_sector_type
  sectr_sector_type_comparer:
    seq: []
    instances: {}
  ks__enum__sectr_layer_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: sectr_layer_type
  sectr_layer_type_comparer:
    seq: []
    instances: {}
  ks__enum__sectr_stream_object_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: sectr_stream_object_type
  sectr_stream_object_type_comparer:
    seq: []
    instances: {}
  sectr_platform_stream_layer_runtime_native_ref:
    seq: []
    instances: {}
  sectr_platform_stream_layer:
    seq:
      - id: ks__bit_field
        type: u1
      - id: type
        type: ks__enum__sectr_platform_type
        if: ks__has_field_type
      - id: layer_loader_path_hash
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_layer_loader_path_hash
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_layer_loader_path_hash: # Field №1
        value: (ks__bit_field & 0b10) != 0
  sectr_combine_stream_path_info_runtime_native_ref:
    seq: []
    instances: {}
  ks__array_of__sectr_platform_stream_layer__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: sectr_platform_stream_layer
        repeat: expr
        repeat-expr: length.value
  sectr_combine_stream_path_info:
    seq:
      - id: ks__bit_field
        type: u1
      - id: layer_loader_path_hash
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_layer_loader_path_hash
      - id: platform_layers
        type: ks__array_of__sectr_platform_stream_layer__length_u
        if: ks__has_field_platform_layers
    instances:
      ks__has_field_layer_loader_path_hash: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_platform_layers: # Field №1
        value: (ks__bit_field & 0b10) != 0
  sectr_attach_stream_layer_runtime_native_ref:
    seq: []
    instances: {}
  sectr_attach_stream_layer:
    seq:
      - id: ks__bit_field
        type: u1
      - id: attach_name_hash
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_attach_name_hash
      - id: festival_layer_path_info
        type: sectr_combine_stream_path_info
        if: ks__has_field_festival_layer_path_info
      - id: routine_layer_path_info
        type: sectr_combine_stream_path_info
        if: ks__has_field_routine_layer_path_info
    instances:
      ks__has_field_attach_name_hash: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_festival_layer_path_info: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_routine_layer_path_info: # Field №2
        value: (ks__bit_field & 0b100) != 0
  sectr_stream_layer_runtime_native_ref:
    seq: []
    instances: {}
  ks__array_of__sectr_attach_stream_layer__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: sectr_attach_stream_layer
        repeat: expr
        repeat-expr: length.value
  sectr_stream_layer:
    seq:
      - id: ks__bit_field
        type: u1
      - id: sector_name_hash
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sector_name_hash
      - id: layer_name_hash
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_layer_name_hash
      - id: type
        type: ks__enum__sectr_layer_type
        if: ks__has_field_type
      - id: layer_full_name_hash
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_layer_full_name_hash
      - id: position
        type: vector
        if: ks__has_field_position
      - id: sector_size
        type: vector
        if: ks__has_field_sector_size
      - id: layer_path_info
        type: sectr_combine_stream_path_info
        if: ks__has_field_layer_path_info
      - id: attach_layers
        type: ks__array_of__sectr_attach_stream_layer__length_u
        if: ks__has_field_attach_layers
    instances:
      ks__has_field_sector_name_hash: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_layer_name_hash: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_type: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_layer_full_name_hash: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_position: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_sector_size: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_layer_path_info: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_attach_layers: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
  sectr_layer_group_runtime_native_ref:
    seq: []
    instances: {}
  ks__array_of__sectr_stream_layer__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: sectr_stream_layer
        repeat: expr
        repeat-expr: length.value
  sectr_layer_group:
    seq:
      - id: ks__bit_field
        type: u1
      - id: group_name_hash
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_group_name_hash
      - id: layer_infos
        type: ks__array_of__sectr_stream_layer__length_u
        if: ks__has_field_layer_infos
    instances:
      ks__has_field_group_name_hash: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_layer_infos: # Field №1
        value: (ks__bit_field & 0b10) != 0
  sectr_sector_runtime_native_ref:
    seq: []
    instances: {}
  ks__array_of__sectr_layer_group__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: sectr_layer_group
        repeat: expr
        repeat-expr: length.value
  sectr_sector:
    seq:
      - id: ks__bit_field
        type: u1
      - id: layer_groups
        type: ks__array_of__sectr_layer_group__length_u
        if: ks__has_field_layer_groups
      - id: sector_name_hash
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_sector_name_hash
      - id: type
        type: ks__enum__sectr_sector_type
        if: ks__has_field_type
      - id: width_index
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_width_index
      - id: height_index
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_height_index
      - id: distance_to_change
        type: f4
        if: ks__has_field_distance_to_change
      - id: center_pos
        type: vector
        if: ks__has_field_center_pos
    instances:
      ks__has_field_layer_groups: # Field №0
        value: (ks__bit_field & 0b0000001) != 0
      ks__has_field_sector_name_hash: # Field №1
        value: (ks__bit_field & 0b0000010) != 0
      ks__has_field_type: # Field №2
        value: (ks__bit_field & 0b0000100) != 0
      ks__has_field_width_index: # Field №3
        value: (ks__bit_field & 0b0001000) != 0
      ks__has_field_height_index: # Field №4
        value: (ks__bit_field & 0b0010000) != 0
      ks__has_field_distance_to_change: # Field №5
        value: (ks__bit_field & 0b0100000) != 0
      ks__has_field_center_pos: # Field №6
        value: (ks__bit_field & 0b1000000) != 0
  sectr_stream_object_runtime_native_ref:
    seq: []
    instances: {}
  sectr_stream_object:
    seq:
      - id: ks__bit_field
        type: u1
      - id: type
        type: ks__enum__sectr_stream_object_type
        if: ks__has_field_type
      - id: game_object_path_hash
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_game_object_path_hash
      - id: obj_pattern_name_hash
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_obj_pattern_name_hash
      - id: magitude
        type: f4
        if: ks__has_field_magitude
      - id: position
        type: vector
        if: ks__has_field_position
      - id: rotation
        type: vector
        if: ks__has_field_rotation
      - id: scale
        type: vector
        if: ks__has_field_scale
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field & 0b0000001) != 0
      ks__has_field_game_object_path_hash: # Field №1
        value: (ks__bit_field & 0b0000010) != 0
      ks__has_field_obj_pattern_name_hash: # Field №2
        value: (ks__bit_field & 0b0000100) != 0
      ks__has_field_magitude: # Field №3
        value: (ks__bit_field & 0b0001000) != 0
      ks__has_field_position: # Field №4
        value: (ks__bit_field & 0b0010000) != 0
      ks__has_field_rotation: # Field №5
        value: (ks__bit_field & 0b0100000) != 0
      ks__has_field_scale: # Field №6
        value: (ks__bit_field & 0b1000000) != 0
  sectr_stream_tree_object_runtime_native_ref:
    seq: []
    instances: {}
  sectr_stream_tree_object:
    seq:
      - id: ks__bit_field
        type: u1
      - id: color_index
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_color_index
    instances:
      ks__has_field_color_index: # Field №0
        value: (ks__bit_field & 0b1) != 0
  sectr_layer_loader_runtime_native_ref:
    seq: []
    instances: {}
  ks__array_of__sectr_stream_object__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: sectr_stream_object
        repeat: expr
        repeat-expr: length.value
  sectr_layer_loader:
    seq:
      - id: ks__bit_field
        type: u1
      - id: layer_name_hash
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_layer_name_hash
      - id: virtual_objects
        type: ks__array_of__sectr_stream_object__length_u
        if: ks__has_field_virtual_objects
    instances:
      ks__has_field_layer_name_hash: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_virtual_objects: # Field №1
        value: (ks__bit_field & 0b10) != 0
  sectr_bake_config:
    seq:
      - id: ks__bit_field
        type: u1
      - id: obj_type
        type: ks__enum__sectr_object_type
        if: ks__has_field_obj_type
      - id: name
        type: aux_types::string
        if: ks__has_field_name
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
    instances:
      ks__has_field_obj_type: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_name: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_id: # Field №2
        value: (ks__bit_field & 0b100) != 0
  sectr_bake_layer_info:
    seq:
      - id: ks__bit_field
        type: u1
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: invisible_list
        type: ks__array_of__aux_types__vlq_base128_le_s__length_u
        if: ks__has_field_invisible_list
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_invisible_list: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__array_of__sectr_bake_layer_info__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: sectr_bake_layer_info
        repeat: expr
        repeat-expr: length.value
  sectr_bake_layers_info:
    seq:
      - id: ks__bit_field
        type: u1
      - id: list
        type: ks__array_of__sectr_bake_layer_info__length_u
        if: ks__has_field_list
    instances:
      ks__has_field_list: # Field №0
        value: (ks__bit_field & 0b1) != 0
  ks__enum__center_pos_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: center_pos_type
  center_pos_type_comparer:
    seq: []
    instances: {}
  height_pos_type_comparer:
    seq: []
    instances: {}
  config_shape_circle_register:
    seq: []
    instances: {}
  config_shape_circle:
    seq:
      - id: ks__base
        type: config_base_shape
      - id: ks__bit_field
        type: u1
      - id: radius
        type: f4
        if: ks__has_field_radius
    instances:
      ks__has_field_radius: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      use_height:
        value: ks__base.use_height
      height:
        value: ks__base.height
      height_type:
        value: ks__base.height_type
  config_shape_rect_register:
    seq: []
    instances: {}
  config_shape_rect:
    seq:
      - id: ks__base
        type: config_base_shape
      - id: ks__bit_field
        type: u1
      - id: center_type
        type: ks__enum__center_pos_type
        if: ks__has_field_center_type
      - id: width
        type: f4
        if: ks__has_field_width
      - id: length
        type: f4
        if: ks__has_field_length
    instances:
      ks__has_field_center_type: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_width: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_length: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      use_height:
        value: ks__base.use_height
      height:
        value: ks__base.height
      height_type:
        value: ks__base.height_type
  config_shape_sector_register:
    seq: []
    instances: {}
  config_shape_sector:
    seq:
      - id: ks__base
        type: config_base_shape
      - id: ks__bit_field
        type: u1
      - id: radius
        type: f4
        if: ks__has_field_radius
      - id: full_degree
        type: f4
        if: ks__has_field_full_degree
    instances:
      ks__has_field_radius: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_full_degree: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      use_height:
        value: ks__base.use_height
      height:
        value: ks__base.height
      height_type:
        value: ks__base.height_type
  config_shape_polygon_register:
    seq: []
    instances: {}
  config_shape_polygon:
    seq:
      - id: ks__base
        type: config_base_shape
      - id: ks__bit_field
        type: u1
      - id: polygon_config_path
        type: aux_types::string
        if: ks__has_field_polygon_config_path
    instances:
      ks__has_field_polygon_config_path: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      use_height:
        value: ks__base.use_height
      height:
        value: ks__base.height
      height_type:
        value: ks__base.height_type
  config_shape_sphere_register:
    seq: []
    instances: {}
  config_shape_sphere:
    seq:
      - id: ks__base
        type: config_base_shape
      - id: ks__bit_field
        type: u1
      - id: radius
        type: f4
        if: ks__has_field_radius
    instances:
      ks__has_field_radius: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      use_height:
        value: ks__base.use_height
      height:
        value: ks__base.height
      height_type:
        value: ks__base.height_type
  template_param_float_register:
    seq: []
    instances: {}
  template_param_int32register:
    seq: []
    instances: {}
  template_param_int32:
    seq:
      - id: ks__base
        type: template_param
      - id: ks__bit_field
        type: u1
      - id: origin_value
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_origin_value
    instances:
      ks__has_field_origin_value: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      param:
        value: ks__base.param
  template_param_string_register:
    seq: []
    instances: {}
  config_skin:
    seq: []
    instances: {}
  skin_color:
    seq:
      - id: ks__bit_field
        type: u1
      - id: renderer
        type: aux_types::string
        if: ks__has_field_renderer
      - id: index
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_index
      - id: channel
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_channel
      - id: color
        type: aux_types::string
        if: ks__has_field_color
    instances:
      ks__has_field_renderer: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_index: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_channel: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_color: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  config_monster_skin_register:
    seq: []
    instances: {}
  ks__array_of__skin_color__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: skin_color
        repeat: expr
        repeat-expr: length.value
  config_monster_skin:
    seq:
      - id: ks__base
        type: config_skin
      - id: ks__bit_field
        type: u1
      - id: skin_colors
        type: ks__array_of__skin_color__length_u
        if: ks__has_field_skin_colors
    instances:
      ks__has_field_skin_colors: # Field №0
        value: (ks__bit_field & 0b1) != 0
  config_skin_fashion_effects:
    seq:
      - id: ks__bit_field
        type: u1
      - id: old_effects
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_old_effects
      - id: new_effects
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_new_effects
    instances:
      ks__has_field_old_effects: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_new_effects: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_skin_fashion_gadgets:
    seq:
      - id: ks__bit_field
        type: u1
      - id: old_gadgets
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_old_gadgets
      - id: new_gadgets
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_new_gadgets
    instances:
      ks__has_field_old_gadgets: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_new_gadgets: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_skin_info:
    seq:
      - id: ks__bit_field
        type: u1
      - id: effects
        type: config_skin_fashion_effects
        if: ks__has_field_effects
      - id: gadgets
        type: config_skin_fashion_gadgets
        if: ks__has_field_gadgets
    instances:
      ks__has_field_effects: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_gadgets: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__enum__sound_bank_unload_policy:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: sound_bank_unload_policy
  sound_bank_unload_policy_comparer:
    seq: []
    instances: {}
  config_sound_bank_unload_policy:
    seq:
      - id: ks__bit_field
        type: u1
      - id: policy
        type: ks__enum__sound_bank_unload_policy
        if: ks__has_field_policy
      - id: parameter
        type: f4
        if: ks__has_field_parameter
    instances:
      ks__has_field_policy: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_parameter: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__kvp_of_dict__aux_types__string_config_sound_bank_unload_policy:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: config_sound_bank_unload_policy
  ks__dict_of__aux_types__string_config_sound_bank_unload_policy:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_config_sound_bank_unload_policy
        repeat: expr
        repeat-expr: length.value
  config_sound_bank_lookup:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: default_cooldown
        type: f4
        if: ks__has_field_default_cooldown
      - id: unload_policies
        type: ks__dict_of__aux_types__string_config_sound_bank_unload_policy
        if: ks__has_field_unload_policies
      - id: plain_events
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_plain_events
      - id: bank_ids
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_bank_ids
      - id: conditionals
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_conditionals
      - id: bank_reuse_rate
        type: f8
        if: ks__has_field_bank_reuse_rate
      - id: switch_groups_affected_by_rtpcs
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_switch_groups_affected_by_rtpcs
      - id: switch_groups_affected_by_events
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_switch_groups_affected_by_events
      - id: state_groups_affected_by_events
        type: ks__array_of__aux_types__string__length_u
        if: ks__has_field_state_groups_affected_by_events
    instances:
      ks__has_field_default_cooldown: # Field №0
        value: (ks__bit_field.value & 0b000000001) != 0
      ks__has_field_unload_policies: # Field №1
        value: (ks__bit_field.value & 0b000000010) != 0
      ks__has_field_plain_events: # Field №2
        value: (ks__bit_field.value & 0b000000100) != 0
      ks__has_field_bank_ids: # Field №3
        value: (ks__bit_field.value & 0b000001000) != 0
      ks__has_field_conditionals: # Field №4
        value: (ks__bit_field.value & 0b000010000) != 0
      ks__has_field_bank_reuse_rate: # Field №5
        value: (ks__bit_field.value & 0b000100000) != 0
      ks__has_field_switch_groups_affected_by_rtpcs: # Field №6
        value: (ks__bit_field.value & 0b001000000) != 0
      ks__has_field_switch_groups_affected_by_events: # Field №7
        value: (ks__bit_field.value & 0b010000000) != 0
      ks__has_field_state_groups_affected_by_events: # Field №8
        value: (ks__bit_field.value & 0b100000000) != 0
  config_spatial_box_room_trigger:
    seq:
      - id: ks__bit_field
        type: u1
      - id: position
        type: vector
        if: ks__has_field_position
      - id: rotation
        type: vector
        if: ks__has_field_rotation
      - id: size
        type: vector
        if: ks__has_field_size
    instances:
      ks__has_field_position: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_rotation: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_size: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_spatial_sphere_room_trigger:
    seq:
      - id: ks__bit_field
        type: u1
      - id: position
        type: vector
        if: ks__has_field_position
      - id: radius
        type: f4
        if: ks__has_field_radius
    instances:
      ks__has_field_position: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_radius: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__array_of__config_spatial_box_room_trigger__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_spatial_box_room_trigger
        repeat: expr
        repeat-expr: length.value
  ks__array_of__config_spatial_sphere_room_trigger__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_spatial_sphere_room_trigger
        repeat: expr
        repeat-expr: length.value
  config_spatial_room:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: name
        type: aux_types::string
        if: ks__has_field_name
      - id: reverb_aux_bus
        type: config_wwise_string
        if: ks__has_field_reverb_aux_bus
      - id: reverb_level
        type: f4
        if: ks__has_field_reverb_level
      - id: wall_occlusion
        type: f4
        if: ks__has_field_wall_occlusion
      - id: aux_send_level_to_self
        type: f4
        if: ks__has_field_aux_send_level_to_self
      - id: keep_register
        type: u1
        if: ks__has_field_keep_register
      - id: priority
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_priority
      - id: is_major_room
        type: u1
        if: ks__has_field_is_major_room
      - id: box_room_triggers
        type: ks__array_of__config_spatial_box_room_trigger__length_u
        if: ks__has_field_box_room_triggers
      - id: sphere_room_triggers
        type: ks__array_of__config_spatial_sphere_room_trigger__length_u
        if: ks__has_field_sphere_room_triggers
    instances:
      ks__has_field_name: # Field №0
        value: (ks__bit_field.value & 0b0000000001) != 0
      ks__has_field_reverb_aux_bus: # Field №1
        value: (ks__bit_field.value & 0b0000000010) != 0
      ks__has_field_reverb_level: # Field №2
        value: (ks__bit_field.value & 0b0000000100) != 0
      ks__has_field_wall_occlusion: # Field №3
        value: (ks__bit_field.value & 0b0000001000) != 0
      ks__has_field_aux_send_level_to_self: # Field №4
        value: (ks__bit_field.value & 0b0000010000) != 0
      ks__has_field_keep_register: # Field №5
        value: (ks__bit_field.value & 0b0000100000) != 0
      ks__has_field_priority: # Field №6
        value: (ks__bit_field.value & 0b0001000000) != 0
      ks__has_field_is_major_room: # Field №7
        value: (ks__bit_field.value & 0b0010000000) != 0
      ks__has_field_box_room_triggers: # Field №8
        value: (ks__bit_field.value & 0b0100000000) != 0
      ks__has_field_sphere_room_triggers: # Field №9
        value: (ks__bit_field.value & 0b1000000000) != 0
  config_spatial_portal:
    seq:
      - id: ks__bit_field
        type: u1
      - id: name
        type: aux_types::string
        if: ks__has_field_name
      - id: position
        type: vector
        if: ks__has_field_position
      - id: rotation
        type: vector
        if: ks__has_field_rotation
      - id: size
        type: vector
        if: ks__has_field_size
      - id: enabled
        type: u1
        if: ks__has_field_enabled
      - id: front_room_name
        type: aux_types::string
        if: ks__has_field_front_room_name
      - id: back_room_name
        type: aux_types::string
        if: ks__has_field_back_room_name
    instances:
      ks__has_field_name: # Field №0
        value: (ks__bit_field & 0b0000001) != 0
      ks__has_field_position: # Field №1
        value: (ks__bit_field & 0b0000010) != 0
      ks__has_field_rotation: # Field №2
        value: (ks__bit_field & 0b0000100) != 0
      ks__has_field_size: # Field №3
        value: (ks__bit_field & 0b0001000) != 0
      ks__has_field_enabled: # Field №4
        value: (ks__bit_field & 0b0010000) != 0
      ks__has_field_front_room_name: # Field №5
        value: (ks__bit_field & 0b0100000) != 0
      ks__has_field_back_room_name: # Field №6
        value: (ks__bit_field & 0b1000000) != 0
  ks__array_of__config_spatial_room__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_spatial_room
        repeat: expr
        repeat-expr: length.value
  ks__array_of__config_spatial_portal__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_spatial_portal
        repeat: expr
        repeat-expr: length.value
  config_spatial_audio:
    seq:
      - id: ks__bit_field
        type: u1
      - id: scene_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_scene_id
      - id: room_list
        type: ks__array_of__config_spatial_room__length_u
        if: ks__has_field_room_list
      - id: portal_list
        type: ks__array_of__config_spatial_portal__length_u
        if: ks__has_field_portal_list
      - id: global_room
        type: aux_types::string
        if: ks__has_field_global_room
    instances:
      ks__has_field_scene_id: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_room_list: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_portal_list: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_global_room: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  state_audio_event_usage_comparer:
    seq: []
    instances: {}
  action_panel_state_comparer:
    seq: []
    instances: {}
  move_type_comparer:
    seq: []
    instances: {}
  ks__enum__state_camera_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: state_camera_type
  state_camera_type_comparer:
    seq: []
    instances: {}
  config_can_change_avatar:
    seq:
      - id: ks__bit_field
        type: u1
      - id: normalize_start
        type: f4
        if: ks__has_field_normalize_start
      - id: normalize_end
        type: f4
        if: ks__has_field_normalize_end
    instances:
      ks__has_field_normalize_start: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_normalize_end: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_equip_reattach:
    seq:
      - id: ks__bit_field
        type: u1
      - id: equip
        type: aux_types::string
        if: ks__has_field_equip
      - id: target_point
        type: aux_types::string
        if: ks__has_field_target_point
      - id: normalize_start
        type: f4
        if: ks__has_field_normalize_start
      - id: normalize_end
        type: f4
        if: ks__has_field_normalize_end
    instances:
      ks__has_field_equip: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_target_point: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_normalize_start: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_normalize_end: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  config_normal_state_id_info_register:
    seq: []
    instances: {}
  config_avatar_state_id_info_register:
    seq: []
    instances: {}
  ks__array_of__config_can_change_avatar__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_can_change_avatar
        repeat: expr
        repeat-expr: length.value
  ks__array_of__config_equip_reattach__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_equip_reattach
        repeat: expr
        repeat-expr: length.value
  config_avatar_state_id_info:
    seq:
      - id: ks__base
        type: config_normal_state_id_info
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: camera_type
        type: ks__enum__state_camera_type
        if: ks__has_field_camera_type
      - id: camera_param
        type: config_state_camera_param
        if: ks__has_field_camera_param
      - id: can_change_avatar
        type: ks__array_of__config_can_change_avatar__length_u
        if: ks__has_field_can_change_avatar
      - id: can_support_change
        type: u1
        if: ks__has_field_can_support_change
      - id: action_panel_state
        type: ks__enum__action_panel_state
        if: ks__has_field_action_panel_state
      - id: equip_reattach
        type: ks__array_of__config_equip_reattach__length_u
        if: ks__has_field_equip_reattach
      - id: jump_cancel_start
        type: f4
        if: ks__has_field_jump_cancel_start
      - id: jump_cancel_end
        type: f4
        if: ks__has_field_jump_cancel_end
      - id: sprint_cancel_start
        type: f4
        if: ks__has_field_sprint_cancel_start
      - id: sprint_cancel_end
        type: f4
        if: ks__has_field_sprint_cancel_end
      - id: fly_cancel_start
        type: f4
        if: ks__has_field_fly_cancel_start
      - id: fly_cancel_end
        type: f4
        if: ks__has_field_fly_cancel_end
      - id: animator_trigger_on_landed
        type: aux_types::string
        if: ks__has_field_animator_trigger_on_landed
      - id: battou_on_start
        type: u1
        if: ks__has_field_battou_on_start
      - id: sheathe_on_start
        type: u1
        if: ks__has_field_sheathe_on_start
      - id: sheathe_on_end
        type: u1
        if: ks__has_field_sheathe_on_end
    instances:
      ks__has_field_camera_type: # Field №0
        value: (ks__bit_field.value & 0b0000000000000001) != 0
      ks__has_field_camera_param: # Field №1
        value: (ks__bit_field.value & 0b0000000000000010) != 0
      ks__has_field_can_change_avatar: # Field №2
        value: (ks__bit_field.value & 0b0000000000000100) != 0
      ks__has_field_can_support_change: # Field №3
        value: (ks__bit_field.value & 0b0000000000001000) != 0
      ks__has_field_action_panel_state: # Field №4
        value: (ks__bit_field.value & 0b0000000000010000) != 0
      ks__has_field_equip_reattach: # Field №5
        value: (ks__bit_field.value & 0b0000000000100000) != 0
      ks__has_field_jump_cancel_start: # Field №6
        value: (ks__bit_field.value & 0b0000000001000000) != 0
      ks__has_field_jump_cancel_end: # Field №7
        value: (ks__bit_field.value & 0b0000000010000000) != 0
      ks__has_field_sprint_cancel_start: # Field №8
        value: (ks__bit_field.value & 0b0000000100000000) != 0
      ks__has_field_sprint_cancel_end: # Field №9
        value: (ks__bit_field.value & 0b0000001000000000) != 0
      ks__has_field_fly_cancel_start: # Field №10
        value: (ks__bit_field.value & 0b0000010000000000) != 0
      ks__has_field_fly_cancel_end: # Field №11
        value: (ks__bit_field.value & 0b0000100000000000) != 0
      ks__has_field_animator_trigger_on_landed: # Field №12
        value: (ks__bit_field.value & 0b0001000000000000) != 0
      ks__has_field_battou_on_start: # Field №13
        value: (ks__bit_field.value & 0b0010000000000000) != 0
      ks__has_field_sheathe_on_start: # Field №14
        value: (ks__bit_field.value & 0b0100000000000000) != 0
      ks__has_field_sheathe_on_end: # Field №15
        value: (ks__bit_field.value & 0b1000000000000000) != 0
      # Base class fields
      animator_states:
        value: ks__base.animator_states
      move_type:
        value: ks__base.move_type
      combat_move_on_water:
        value: ks__base.combat_move_on_water
      can_do_skill:
        value: ks__base.can_do_skill
      can_do_skill_start:
        value: ks__base.can_do_skill_start
      can_do_skill_end:
        value: ks__base.can_do_skill_end
      can_sync_move:
        value: ks__base.can_sync_move
      culling_model_always_animate:
        value: ks__base.culling_model_always_animate
      add_endure:
        value: ks__base.add_endure
      mass_ratio:
        value: ks__base.mass_ratio
      reset_animator_trigger_on_enter:
        value: ks__base.reset_animator_trigger_on_enter
      reset_animator_trigger_on_exit:
        value: ks__base.reset_animator_trigger_on_exit
      set_animator_boolean:
        value: ks__base.set_animator_boolean
      set_animator_float:
        value: ks__base.set_animator_float
      enable_rag_doll:
        value: ks__base.enable_rag_doll
      need_face_to_anim_param:
        value: ks__base.need_face_to_anim_param
      enable_ccd:
        value: ks__base.enable_ccd
      priority:
        value: ks__base.priority
  config_monster_state_id_info_register:
    seq: []
    instances: {}
  config_monster_state_id_info:
    seq:
      - id: ks__base
        type: config_normal_state_id_info
      - id: ks__bit_field
        type: u1
      - id: can_steer
        type: u1
        if: ks__has_field_can_steer
      - id: auto_steer
        type: u1
        if: ks__has_field_auto_steer
      - id: follow_anim_rotation
        type: u1
        if: ks__has_field_follow_anim_rotation
      - id: gravity_adjust_scale
        type: f4
        if: ks__has_field_gravity_adjust_scale
      - id: force_set_air_move
        type: u1
        if: ks__has_field_force_set_air_move
      - id: remote_force_use_animator_vel
        type: u1
        if: ks__has_field_remote_force_use_animator_vel
      - id: is_blend_move
        type: u1
        if: ks__has_field_is_blend_move
      - id: air_move_follow_animation
        type: u1
        if: ks__has_field_air_move_follow_animation
    instances:
      ks__has_field_can_steer: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_auto_steer: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_follow_anim_rotation: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_gravity_adjust_scale: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_force_set_air_move: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_remote_force_use_animator_vel: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_is_blend_move: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_air_move_follow_animation: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
      # Base class fields
      animator_states:
        value: ks__base.animator_states
      move_type:
        value: ks__base.move_type
      combat_move_on_water:
        value: ks__base.combat_move_on_water
      can_do_skill:
        value: ks__base.can_do_skill
      can_do_skill_start:
        value: ks__base.can_do_skill_start
      can_do_skill_end:
        value: ks__base.can_do_skill_end
      can_sync_move:
        value: ks__base.can_sync_move
      culling_model_always_animate:
        value: ks__base.culling_model_always_animate
      add_endure:
        value: ks__base.add_endure
      mass_ratio:
        value: ks__base.mass_ratio
      reset_animator_trigger_on_enter:
        value: ks__base.reset_animator_trigger_on_enter
      reset_animator_trigger_on_exit:
        value: ks__base.reset_animator_trigger_on_exit
      set_animator_boolean:
        value: ks__base.set_animator_boolean
      set_animator_float:
        value: ks__base.set_animator_float
      enable_rag_doll:
        value: ks__base.enable_rag_doll
      need_face_to_anim_param:
        value: ks__base.need_face_to_anim_param
      enable_ccd:
        value: ks__base.enable_ccd
      priority:
        value: ks__base.priority
  config_npc_state_id_info_register:
    seq: []
    instances: {}
  config_npc_state_id_info:
    seq:
      - id: ks__base
        type: config_normal_state_id_info
      - id: ks__bit_field
        type: u1
      - id: can_be_inter
        type: u1
        if: ks__has_field_can_be_inter
    instances:
      ks__has_field_can_be_inter: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      animator_states:
        value: ks__base.animator_states
      move_type:
        value: ks__base.move_type
      combat_move_on_water:
        value: ks__base.combat_move_on_water
      can_do_skill:
        value: ks__base.can_do_skill
      can_do_skill_start:
        value: ks__base.can_do_skill_start
      can_do_skill_end:
        value: ks__base.can_do_skill_end
      can_sync_move:
        value: ks__base.can_sync_move
      culling_model_always_animate:
        value: ks__base.culling_model_always_animate
      add_endure:
        value: ks__base.add_endure
      mass_ratio:
        value: ks__base.mass_ratio
      reset_animator_trigger_on_enter:
        value: ks__base.reset_animator_trigger_on_enter
      reset_animator_trigger_on_exit:
        value: ks__base.reset_animator_trigger_on_exit
      set_animator_boolean:
        value: ks__base.set_animator_boolean
      set_animator_float:
        value: ks__base.set_animator_float
      enable_rag_doll:
        value: ks__base.enable_rag_doll
      need_face_to_anim_param:
        value: ks__base.need_face_to_anim_param
      enable_ccd:
        value: ks__base.enable_ccd
      priority:
        value: ks__base.priority
  config_normal_state_layer_register:
    seq: []
    instances: {}
  config_normal_state_layer:
    seq:
      - id: ks__base
        type: config_base_state_layer
      - id: ks__bit_field
        type: u1
      - id: state_i_ds
        type: ks__dict_of__aux_types__string_ks__disp__config_base_state_id_info
        if: ks__has_field_state_i_ds
    instances:
      ks__has_field_state_i_ds: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      layer_index:
        value: ks__base.layer_index
      layer_index_name:
        value: ks__base.layer_index_name
  config_talent_mixin:
    seq: []
    instances: {}
  add_ability_register:
    seq: []
    instances: {}
  add_ability:
    seq:
      - id: ks__base
        type: config_talent_mixin
      - id: ks__bit_field
        type: u1
      - id: ability_name
        type: aux_types::string
        if: ks__has_field_ability_name
    instances:
      ks__has_field_ability_name: # Field №0
        value: (ks__bit_field & 0b1) != 0
  modify_ability_register:
    seq: []
    instances: {}
  modify_ability:
    seq:
      - id: ks__base
        type: config_talent_mixin
      - id: ks__bit_field
        type: u1
      - id: ability_name
        type: aux_types::string
        if: ks__has_field_ability_name
      - id: param_special
        type: aux_types::string
        if: ks__has_field_param_special
      - id: param_delta
        type: aux_types::dynamic_argument
        if: ks__has_field_param_delta
      - id: param_ratio
        type: aux_types::dynamic_argument
        if: ks__has_field_param_ratio
    instances:
      ks__has_field_ability_name: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_param_special: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_param_delta: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_param_ratio: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  unlock_talent_param_register:
    seq: []
    instances: {}
  unlock_talent_param:
    seq:
      - id: ks__base
        type: config_talent_mixin
      - id: ks__bit_field
        type: u1
      - id: ability_name
        type: aux_types::string
        if: ks__has_field_ability_name
      - id: talent_param
        type: aux_types::string
        if: ks__has_field_talent_param
    instances:
      ks__has_field_ability_name: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_talent_param: # Field №1
        value: (ks__bit_field & 0b10) != 0
  unlock_controller_conditions_register:
    seq: []
    instances: {}
  unlock_controller_conditions:
    seq:
      - id: ks__base
        type: config_talent_mixin
      - id: ks__bit_field
        type: u1
      - id: condition_name
        type: aux_types::string
        if: ks__has_field_condition_name
    instances:
      ks__has_field_condition_name: # Field №0
        value: (ks__bit_field & 0b1) != 0
  modify_skill_cd_register:
    seq: []
    instances: {}
  modify_skill_cd:
    seq:
      - id: ks__base
        type: config_talent_mixin
      - id: ks__bit_field
        type: u1
      - id: skill_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_skill_id
      - id: cd_delta
        type: f4
        if: ks__has_field_cd_delta
      - id: cd_ratio
        type: f4
        if: ks__has_field_cd_ratio
    instances:
      ks__has_field_skill_id: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_cd_delta: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_cd_ratio: # Field №2
        value: (ks__bit_field & 0b100) != 0
  modify_skill_cost_register:
    seq: []
    instances: {}
  modify_skill_cost:
    seq:
      - id: ks__base
        type: config_talent_mixin
      - id: ks__bit_field
        type: u1
      - id: skill_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_skill_id
      - id: cost_delta
        type: f4
        if: ks__has_field_cost_delta
      - id: cost_ratio
        type: f4
        if: ks__has_field_cost_ratio
    instances:
      ks__has_field_skill_id: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_cost_delta: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_cost_ratio: # Field №2
        value: (ks__bit_field & 0b100) != 0
  modify_skill_point_register:
    seq: []
    instances: {}
  modify_skill_point:
    seq:
      - id: ks__base
        type: config_talent_mixin
      - id: ks__bit_field
        type: u1
      - id: skill_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_skill_id
      - id: point_delta
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_point_delta
    instances:
      ks__has_field_skill_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_point_delta: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__enum__talent_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: talent_type
  talent_type_comparer:
    seq: []
    instances: {}
  add_talent_extra_level_register:
    seq: []
    instances: {}
  add_talent_extra_level:
    seq:
      - id: ks__base
        type: config_talent_mixin
      - id: ks__bit_field
        type: u1
      - id: talent_type
        type: ks__enum__talent_type
        if: ks__has_field_talent_type
      - id: talent_index
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_talent_index
      - id: extra_level
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_extra_level
    instances:
      ks__has_field_talent_type: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_talent_index: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_extra_level: # Field №2
        value: (ks__bit_field & 0b100) != 0
  talk_role_ex:
    seq:
      - id: ks__bit_field
        type: u1
      - id: type
        type: ks__enum__talk_role_type
        if: ks__has_field_type
      - id: id
        type: aux_types::string
        if: ks__has_field_id
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_id: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_dialog_scheme:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_id
      - id: next_dialogs
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_next_dialogs
      - id: talk_show_type
        type: ks__enum__talk_show_type
        if: ks__has_field_talk_show_type
      - id: talk_role
        type: talk_role_ex
        if: ks__has_field_talk_role
      - id: talk_content
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_talk_content
      - id: talk_title
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_talk_title
      - id: talk_role_name
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_talk_role_name
      - id: talk_asset_path
        type: aux_types::string
        if: ks__has_field_talk_asset_path
      - id: talk_asset_path_alter
        type: aux_types::string
        if: ks__has_field_talk_asset_path_alter
      - id: talk_audio_name
        type: aux_types::string
        if: ks__has_field_talk_audio_name
      - id: action_before
        type: aux_types::string
        if: ks__has_field_action_before
      - id: action_while
        type: aux_types::string
        if: ks__has_field_action_while
      - id: action_after
        type: aux_types::string
        if: ks__has_field_action_after
      - id: show_duration
        type: f4
        if: ks__has_field_show_duration
      - id: option_icon
        type: aux_types::string
        if: ks__has_field_option_icon
    instances:
      ks__has_field_id: # Field №0
        value: (ks__bit_field.value & 0b000000000000001) != 0
      ks__has_field_next_dialogs: # Field №1
        value: (ks__bit_field.value & 0b000000000000010) != 0
      ks__has_field_talk_show_type: # Field №2
        value: (ks__bit_field.value & 0b000000000000100) != 0
      ks__has_field_talk_role: # Field №3
        value: (ks__bit_field.value & 0b000000000001000) != 0
      ks__has_field_talk_content: # Field №4
        value: (ks__bit_field.value & 0b000000000010000) != 0
      ks__has_field_talk_title: # Field №5
        value: (ks__bit_field.value & 0b000000000100000) != 0
      ks__has_field_talk_role_name: # Field №6
        value: (ks__bit_field.value & 0b000000001000000) != 0
      ks__has_field_talk_asset_path: # Field №7
        value: (ks__bit_field.value & 0b000000010000000) != 0
      ks__has_field_talk_asset_path_alter: # Field №8
        value: (ks__bit_field.value & 0b000000100000000) != 0
      ks__has_field_talk_audio_name: # Field №9
        value: (ks__bit_field.value & 0b000001000000000) != 0
      ks__has_field_action_before: # Field №10
        value: (ks__bit_field.value & 0b000010000000000) != 0
      ks__has_field_action_while: # Field №11
        value: (ks__bit_field.value & 0b000100000000000) != 0
      ks__has_field_action_after: # Field №12
        value: (ks__bit_field.value & 0b001000000000000) != 0
      ks__has_field_show_duration: # Field №13
        value: (ks__bit_field.value & 0b010000000000000) != 0
      ks__has_field_option_icon: # Field №14
        value: (ks__bit_field.value & 0b100000000000000) != 0
  ks__enum__dialog_group_scheme_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: dialog_group_scheme_type
  dialog_group_scheme_type_comparer:
    seq: []
    instances: {}
  ks__array_of__config_dialog_scheme__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: config_dialog_scheme
        repeat: expr
        repeat-expr: length.value
  config_dialog_group:
    seq:
      - id: ks__bit_field
        type: u1
      - id: talk_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_talk_id
      - id: type
        type: ks__enum__dialog_group_scheme_type
        if: ks__has_field_type
      - id: dialog_list
        type: ks__array_of__config_dialog_scheme__length_u
        if: ks__has_field_dialog_list
    instances:
      ks__has_field_talk_id: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_type: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_dialog_list: # Field №2
        value: (ks__bit_field & 0b100) != 0
  config_free_dialog_group_register:
    seq: []
    instances: {}
  config_free_dialog_group:
    seq:
      - id: ks__base
        type: config_dialog_group
    instances:
      # Base class fields
      talk_id:
        value: ks__base.talk_id
      type:
        value: ks__base.type
      dialog_list:
        value: ks__base.dialog_list
  config_narrator_dialog_group_register:
    seq: []
    instances: {}
  config_narrator_dialog_group:
    seq:
      - id: ks__base
        type: config_dialog_group
    instances:
      # Base class fields
      talk_id:
        value: ks__base.talk_id
      type:
        value: ks__base.type
      dialog_list:
        value: ks__base.dialog_list
  config_blossom_dialog_group_register:
    seq: []
    instances: {}
  config_blossom_dialog_group:
    seq:
      - id: ks__base
        type: config_dialog_group
    instances:
      # Base class fields
      talk_id:
        value: ks__base.talk_id
      type:
        value: ks__base.type
      dialog_list:
        value: ks__base.dialog_list
  config_activity_dialog_group_register:
    seq: []
    instances: {}
  config_activity_dialog_group:
    seq:
      - id: ks__base
        type: config_dialog_group
    instances:
      # Base class fields
      talk_id:
        value: ks__base.talk_id
      type:
        value: ks__base.type
      dialog_list:
        value: ks__base.dialog_list
  config_coop_dialog_group_register:
    seq: []
    instances: {}
  config_coop_dialog_group:
    seq:
      - id: ks__base
        type: config_dialog_group
    instances:
      # Base class fields
      talk_id:
        value: ks__base.talk_id
      type:
        value: ks__base.type
      dialog_list:
        value: ks__base.dialog_list
  config_gadget_dialog_group_register:
    seq: []
    instances: {}
  config_gadget_dialog_group:
    seq:
      - id: ks__base
        type: config_dialog_group
    instances:
      # Base class fields
      talk_id:
        value: ks__base.talk_id
      type:
        value: ks__base.type
      dialog_list:
        value: ks__base.dialog_list
  ks__enum__text_map_platform_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: text_map_platform_type
  text_map_platform_type_comparer:
    seq: []
    instances: {}
  text_map_level_struct:
    seq:
      - id: ks__bit_field
        type: u1
      - id: min_file_num
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_min_file_num
      - id: max_file_num
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_max_file_num
      - id: auto_change_step
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_auto_change_step
    instances:
      ks__has_field_min_file_num: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_max_file_num: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_auto_change_step: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__kvp_of_dict__aux_types__vlq_base128_le_s_text_map_level_struct:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_s
      - id: value
        type: text_map_level_struct
  ks__dict_of__aux_types__vlq_base128_le_s_text_map_level_struct:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_s_text_map_level_struct
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__ks__enum__text_map_platform_type_aux_types__vlq_base128_le_s:
    seq:
      - id: key
        type: ks__enum__text_map_platform_type
      - id: value
        type: aux_types::vlq_base128_le_s
  ks__dict_of__ks__enum__text_map_platform_type_aux_types__vlq_base128_le_s:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__ks__enum__text_map_platform_type_aux_types__vlq_base128_le_s
        repeat: expr
        repeat-expr: length.value
  config_text_map_level:
    seq:
      - id: ks__bit_field
        type: u1
      - id: level_map
        type: ks__dict_of__aux_types__vlq_base128_le_s_text_map_level_struct
        if: ks__has_field_level_map
      - id: platform_map
        type: ks__dict_of__ks__enum__text_map_platform_type_aux_types__vlq_base128_le_s
        if: ks__has_field_platform_map
    instances:
      ks__has_field_level_map: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_platform_map: # Field №1
        value: (ks__bit_field & 0b10) != 0
  concern_type_comparer:
    seq: []
    instances: {}
  trigger_flag_comparer:
    seq: []
    instances: {}
  input_action_type_comparer:
    seq: []
    instances: {}
  ks__enum__input_value_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: input_value_type
  input_value_type_comparer:
    seq: []
    instances: {}
  action_event_type_comparer:
    seq: []
    instances: {}
  input_event_type_comparer:
    seq: []
    instances: {}
  ks__enum__input_device_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: input_device_type
  input_device_type_comparer:
    seq: []
    instances: {}
  config_base_input_action:
    seq:
      - id: ks__bit_field
        type: u1
      - id: value_type
        type: ks__enum__input_value_type
        if: ks__has_field_value_type
      - id: description_text_id
        type: aux_types::string
        if: ks__has_field_description_text_id
    instances:
      ks__has_field_value_type: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_description_text_id: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__enum__action_compound_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: action_compound_type
  action_compound_type_comparer:
    seq: []
    instances: {}
  config_compound_input_action_register:
    seq: []
    instances: {}
  config_compound_input_action:
    seq:
      - id: ks__base
        type: config_base_input_action
      - id: ks__bit_field
        type: u1
      - id: action1
        type: ks__enum__input_action_type
        if: ks__has_field_action1
      - id: action2
        type: ks__enum__input_action_type
        if: ks__has_field_action2
      - id: compound_type
        type: ks__enum__action_compound_type
        if: ks__has_field_compound_type
    instances:
      ks__has_field_action1: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_action2: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_compound_type: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      value_type:
        value: ks__base.value_type
      description_text_id:
        value: ks__base.description_text_id
  context_event_type_comparer:
    seq: []
    instances: {}
  config_ui_photograph:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: fov_max
        type: f4
        if: ks__has_field_fov_max
      - id: fov_min
        type: f4
        if: ks__has_field_fov_min
      - id: camera_shift_up
        type: f4
        if: ks__has_field_camera_shift_up
      - id: camera_shift_down
        type: f4
        if: ks__has_field_camera_shift_down
      - id: camera_shift_left
        type: f4
        if: ks__has_field_camera_shift_left
      - id: camera_shift_right
        type: f4
        if: ks__has_field_camera_shift_right
      - id: blur_distance
        type: f4
        if: ks__has_field_blur_distance
      - id: blur_range
        type: f4
        if: ks__has_field_blur_range
      - id: blur_amount
        type: f4
        if: ks__has_field_blur_amount
    instances:
      ks__has_field_fov_max: # Field №0
        value: (ks__bit_field.value & 0b000000001) != 0
      ks__has_field_fov_min: # Field №1
        value: (ks__bit_field.value & 0b000000010) != 0
      ks__has_field_camera_shift_up: # Field №2
        value: (ks__bit_field.value & 0b000000100) != 0
      ks__has_field_camera_shift_down: # Field №3
        value: (ks__bit_field.value & 0b000001000) != 0
      ks__has_field_camera_shift_left: # Field №4
        value: (ks__bit_field.value & 0b000010000) != 0
      ks__has_field_camera_shift_right: # Field №5
        value: (ks__bit_field.value & 0b000100000) != 0
      ks__has_field_blur_distance: # Field №6
        value: (ks__bit_field.value & 0b001000000) != 0
      ks__has_field_blur_range: # Field №7
        value: (ks__bit_field.value & 0b010000000) != 0
      ks__has_field_blur_amount: # Field №8
        value: (ks__bit_field.value & 0b100000000) != 0
  touchpad_focus_acceleration_sigmoid_para:
    seq:
      - id: ks__bit_field
        type: u1
      - id: phase
        type: f4
        if: ks__has_field_phase
      - id: slope
        type: f4
        if: ks__has_field_slope
      - id: amplitude
        type: f4
        if: ks__has_field_amplitude
      - id: clip
        type: f4
        if: ks__has_field_clip
    instances:
      ks__has_field_phase: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_slope: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_amplitude: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_clip: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  ks__kvp_of_dict__ks__enum__input_action_type_ks__disp__config_base_input_action:
    seq:
      - id: key
        type: ks__enum__input_action_type
      - id: value
        type: ks__disp__config_base_input_action
  ks__dict_of__ks__enum__input_action_type_ks__disp__config_base_input_action:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__ks__enum__input_action_type_ks__disp__config_base_input_action
        repeat: expr
        repeat-expr: length.value
  config_ui_global:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: input_actions
        type: ks__dict_of__ks__enum__input_action_type_ks__disp__config_base_input_action
        if: ks__has_field_input_actions
      - id: input_events
        type: ks__dict_of__ks__enum__input_event_type_config_base_input_event
        if: ks__has_field_input_events
      - id: action_groups
        type: ks__dict_of__aux_types__string_ks__array_of__input_action_event__length_u
        if: ks__has_field_action_groups
      - id: input_modes
        type: ks__dict_of__aux_types__string_config_base_context
        if: ks__has_field_input_modes
      - id: joypad_change_view_scale
        type: point2d
        if: ks__has_field_joypad_change_view_scale
      - id: joypad_long_press_duration
        type: f4
        if: ks__has_field_joypad_long_press_duration
      - id: joypad_sense_scales
        type: ks__array_of__f4__length_u
        if: ks__has_field_joypad_sense_scales
      - id: joypad_focus_sense_scales
        type: ks__array_of__f4__length_u
        if: ks__has_field_joypad_focus_sense_scales
      - id: mouse_sense_scales
        type: ks__array_of__f4__length_u
        if: ks__has_field_mouse_sense_scales
      - id: mouse_focus_sense_scales
        type: ks__array_of__f4__length_u
        if: ks__has_field_mouse_focus_sense_scales
      - id: touchpad_sense_scales
        type: ks__array_of__f4__length_u
        if: ks__has_field_touchpad_sense_scales
      - id: touchpad_focus_sense_scales
        type: ks__array_of__f4__length_u
        if: ks__has_field_touchpad_focus_sense_scales
      - id: touchpad_focus_acceleration_scales
        type: ks__array_of__f4__length_u
        if: ks__has_field_touchpad_focus_acceleration_scales
      - id: touchpad_focus_acceleration_para
        type: touchpad_focus_acceleration_sigmoid_para
        if: ks__has_field_touchpad_focus_acceleration_para
      - id: config_ui_photograph
        type: config_ui_photograph
        if: ks__has_field_config_ui_photograph
    instances:
      ks__has_field_input_actions: # Field №0
        value: (ks__bit_field.value & 0b000000000000001) != 0
      ks__has_field_input_events: # Field №1
        value: (ks__bit_field.value & 0b000000000000010) != 0
      ks__has_field_action_groups: # Field №2
        value: (ks__bit_field.value & 0b000000000000100) != 0
      ks__has_field_input_modes: # Field №3
        value: (ks__bit_field.value & 0b000000000001000) != 0
      ks__has_field_joypad_change_view_scale: # Field №4
        value: (ks__bit_field.value & 0b000000000010000) != 0
      ks__has_field_joypad_long_press_duration: # Field №5
        value: (ks__bit_field.value & 0b000000000100000) != 0
      ks__has_field_joypad_sense_scales: # Field №6
        value: (ks__bit_field.value & 0b000000001000000) != 0
      ks__has_field_joypad_focus_sense_scales: # Field №7
        value: (ks__bit_field.value & 0b000000010000000) != 0
      ks__has_field_mouse_sense_scales: # Field №8
        value: (ks__bit_field.value & 0b000000100000000) != 0
      ks__has_field_mouse_focus_sense_scales: # Field №9
        value: (ks__bit_field.value & 0b000001000000000) != 0
      ks__has_field_touchpad_sense_scales: # Field №10
        value: (ks__bit_field.value & 0b000010000000000) != 0
      ks__has_field_touchpad_focus_sense_scales: # Field №11
        value: (ks__bit_field.value & 0b000100000000000) != 0
      ks__has_field_touchpad_focus_acceleration_scales: # Field №12
        value: (ks__bit_field.value & 0b001000000000000) != 0
      ks__has_field_touchpad_focus_acceleration_para: # Field №13
        value: (ks__bit_field.value & 0b010000000000000) != 0
      ks__has_field_config_ui_photograph: # Field №14
        value: (ks__bit_field.value & 0b100000000000000) != 0
  ks__enum__main_page_ui_disable_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: main_page_ui_disable_type
  main_page_ui_disable_type_comparer:
    seq: []
    instances: {}
  ks__array_of__ks__enum__main_page_ui_disable_type__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__enum__main_page_ui_disable_type
        repeat: expr
        repeat-expr: length.value
  ks__array_of__ks__enum__input_event_type__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__enum__input_event_type
        repeat: expr
        repeat-expr: length.value
  config_main_page_disable_info:
    seq:
      - id: ks__bit_field
        type: u1
      - id: ui_disable_list
        type: ks__array_of__ks__enum__main_page_ui_disable_type__length_u
        if: ks__has_field_ui_disable_list
      - id: enabled_input_event_list
        type: ks__array_of__ks__enum__input_event_type__length_u
        if: ks__has_field_enabled_input_event_list
    instances:
      ks__has_field_ui_disable_list: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_enabled_input_event_list: # Field №1
        value: (ks__bit_field & 0b10) != 0
  ks__enum__activity_banner_ui_element_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: activity_banner_ui_element_type
  activity_banner_ui_element_type_comparer:
    seq: []
    instances: {}
  context_condition:
    seq: []
    instances: {}
  context_action:
    seq: []
    instances: {}
  context_condition_action_group:
    seq:
      - id: ks__bit_field
        type: u1
      - id: condition_name
        type: aux_types::string
        if: ks__has_field_condition_name
      - id: action_name
        type: aux_types::string
        if: ks__has_field_action_name
    instances:
      ks__has_field_condition_name: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_action_name: # Field №1
        value: (ks__bit_field & 0b10) != 0
  context_condition_and_register:
    seq: []
    instances: {}
  ks__array_of__ks__disp__context_condition__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__disp__context_condition
        repeat: expr
        repeat-expr: length.value
  context_condition_and:
    seq:
      - id: ks__base
        type: context_condition
      - id: ks__bit_field
        type: u1
      - id: conditions
        type: ks__array_of__ks__disp__context_condition__length_u
        if: ks__has_field_conditions
    instances:
      ks__has_field_conditions: # Field №0
        value: (ks__bit_field & 0b1) != 0
  context_condition_or_register:
    seq: []
    instances: {}
  context_condition_or:
    seq:
      - id: ks__base
        type: context_condition
      - id: ks__bit_field
        type: u1
      - id: conditions
        type: ks__array_of__ks__disp__context_condition__length_u
        if: ks__has_field_conditions
    instances:
      ks__has_field_conditions: # Field №0
        value: (ks__bit_field & 0b1) != 0
  context_condition_not_register:
    seq: []
    instances: {}
  context_condition_not:
    seq:
      - id: ks__base
        type: context_condition
      - id: ks__bit_field
        type: u1
      - id: condition
        type: ks__disp__context_condition
        if: ks__has_field_condition
    instances:
      ks__has_field_condition: # Field №0
        value: (ks__bit_field & 0b1) != 0
  context_condition_quest_state_register:
    seq: []
    instances: {}
  context_condition_quest_state:
    seq:
      - id: ks__base
        type: context_condition
      - id: ks__bit_field
        type: u1
      - id: quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_quest_id
      - id: state
        type: ks__enum__quest_state
        if: ks__has_field_state
    instances:
      ks__has_field_quest_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_state: # Field №1
        value: (ks__bit_field & 0b10) != 0
  context_condition_main_quest_state_register:
    seq: []
    instances: {}
  context_condition_main_quest_state:
    seq:
      - id: ks__base
        type: context_condition
      - id: ks__bit_field
        type: u1
      - id: main_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_main_quest_id
      - id: state
        type: ks__enum__quest_state
        if: ks__has_field_state
    instances:
      ks__has_field_main_quest_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_state: # Field №1
        value: (ks__bit_field & 0b10) != 0
  context_condition_main_quest_visible_register:
    seq: []
    instances: {}
  context_condition_main_quest_visible:
    seq:
      - id: ks__base
        type: context_condition
      - id: ks__bit_field
        type: u1
      - id: main_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_main_quest_id
      - id: visible
        type: u1
        if: ks__has_field_visible
    instances:
      ks__has_field_main_quest_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_visible: # Field №1
        value: (ks__bit_field & 0b10) != 0
  context_condition_chapter_quest_state_register:
    seq: []
    instances: {}
  context_condition_chapter_quest_state:
    seq:
      - id: ks__base
        type: context_condition
      - id: ks__bit_field
        type: u1
      - id: chapter_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_chapter_id
      - id: state
        type: ks__enum__quest_state
        if: ks__has_field_state
      - id: start_or_end_quest
        type: u1
        if: ks__has_field_start_or_end_quest
    instances:
      ks__has_field_chapter_id: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_state: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_start_or_end_quest: # Field №2
        value: (ks__bit_field & 0b100) != 0
  context_condition_chapter_quest_visible_register:
    seq: []
    instances: {}
  context_condition_chapter_quest_visible:
    seq:
      - id: ks__base
        type: context_condition
      - id: ks__bit_field
        type: u1
      - id: chapter_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_chapter_id
      - id: visible
        type: u1
        if: ks__has_field_visible
    instances:
      ks__has_field_chapter_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_visible: # Field №1
        value: (ks__bit_field & 0b10) != 0
  context_condition_quest_global_var_register:
    seq: []
    instances: {}
  context_condition_quest_global_var:
    seq:
      - id: ks__base
        type: context_condition
      - id: ks__bit_field
        type: u1
      - id: quest_global_var_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_quest_global_var_id
      - id: value
        type: aux_types::vlq_base128_le_s
        if: ks__has_field_value
    instances:
      ks__has_field_quest_global_var_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_value: # Field №1
        value: (ks__bit_field & 0b10) != 0
  context_action_execute_all_register:
    seq: []
    instances: {}
  ks__array_of__ks__disp__context_action__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__disp__context_action
        repeat: expr
        repeat-expr: length.value
  context_action_execute_all:
    seq:
      - id: ks__base
        type: context_action
      - id: ks__bit_field
        type: u1
      - id: actions
        type: ks__array_of__ks__disp__context_action__length_u
        if: ks__has_field_actions
    instances:
      ks__has_field_actions: # Field №0
        value: (ks__bit_field & 0b1) != 0
  context_action_select_monster_mark_register:
    seq: []
    instances: {}
  context_action_select_monster_mark:
    seq:
      - id: ks__base
        type: context_action
      - id: ks__bit_field
        type: u1
      - id: monster_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_monster_id
      - id: need_track
        type: u1
        if: ks__has_field_need_track
    instances:
      ks__has_field_monster_id: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_need_track: # Field №1
        value: (ks__bit_field & 0b10) != 0
  context_action_select_main_quest_register:
    seq: []
    instances: {}
  context_action_select_main_quest:
    seq:
      - id: ks__base
        type: context_action
      - id: ks__bit_field
        type: u1
      - id: main_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_main_quest_id
    instances:
      ks__has_field_main_quest_id: # Field №0
        value: (ks__bit_field & 0b1) != 0
  context_action_select_scene_mark_register:
    seq: []
    instances: {}
  context_action_select_scene_mark:
    seq:
      - id: ks__base
        type: context_action
      - id: ks__bit_field
        type: u1
      - id: icon_type
        type: ks__enum__mark_icon_type
        if: ks__has_field_icon_type
      - id: city_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_city_id
      - id: scene_ids
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_scene_ids
    instances:
      ks__has_field_icon_type: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_city_id: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_scene_ids: # Field №2
        value: (ks__bit_field & 0b100) != 0
  context_action_select_legend_quest_register:
    seq: []
    instances: {}
  context_action_select_legend_quest:
    seq:
      - id: ks__base
        type: context_action
      - id: ks__bit_field
        type: u1
      - id: legend_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_legend_quest_id
    instances:
      ks__has_field_legend_quest_id: # Field №0
        value: (ks__bit_field & 0b1) != 0
  context_action_select_chapter_ongoing_main_quest_register:
    seq: []
    instances: {}
  context_action_select_chapter_ongoing_main_quest:
    seq:
      - id: ks__base
        type: context_action
      - id: ks__bit_field
        type: u1
      - id: chapter_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_chapter_id
    instances:
      ks__has_field_chapter_id: # Field №0
        value: (ks__bit_field & 0b1) != 0
  context_action_set_text_register:
    seq: []
    instances: {}
  context_action_set_text:
    seq:
      - id: ks__base
        type: context_action
      - id: ks__bit_field
        type: u1
      - id: ui_element
        type: ks__enum__activity_banner_ui_element_type
        if: ks__has_field_ui_element
      - id: text_map
        type: aux_types::string
        if: ks__has_field_text_map
    instances:
      ks__has_field_ui_element: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_text_map: # Field №1
        value: (ks__bit_field & 0b10) != 0
  context_action_set_text_with_main_quest_name_register:
    seq: []
    instances: {}
  context_action_set_text_with_main_quest_name:
    seq:
      - id: ks__base
        type: context_action
      - id: ks__bit_field
        type: u1
      - id: ui_element
        type: ks__enum__activity_banner_ui_element_type
        if: ks__has_field_ui_element
      - id: text_map
        type: aux_types::string
        if: ks__has_field_text_map
      - id: main_quest_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_main_quest_id
    instances:
      ks__has_field_ui_element: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_text_map: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_main_quest_id: # Field №2
        value: (ks__bit_field & 0b100) != 0
  context_action_set_active_register:
    seq: []
    instances: {}
  context_action_set_active:
    seq:
      - id: ks__base
        type: context_action
      - id: ks__bit_field
        type: u1
      - id: ui_element
        type: ks__enum__activity_banner_ui_element_type
        if: ks__has_field_ui_element
      - id: active
        type: u1
        if: ks__has_field_active
      - id: set_parent
        type: u1
        if: ks__has_field_set_parent
    instances:
      ks__has_field_ui_element: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_active: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_set_parent: # Field №2
        value: (ks__bit_field & 0b100) != 0
  context_action_set_animator_trigger_register:
    seq: []
    instances: {}
  context_action_set_animator_trigger:
    seq:
      - id: ks__base
        type: context_action
      - id: ks__bit_field
        type: u1
      - id: ui_element
        type: ks__enum__activity_banner_ui_element_type
        if: ks__has_field_ui_element
      - id: trigger_name
        type: aux_types::string
        if: ks__has_field_trigger_name
      - id: set_or_reset
        type: u1
        if: ks__has_field_set_or_reset
    instances:
      ks__has_field_ui_element: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_trigger_name: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_set_or_reset: # Field №2
        value: (ks__bit_field & 0b100) != 0
  context_action_report_activity_buried_point_register:
    seq: []
    instances: {}
  context_action_report_activity_buried_point:
    seq:
      - id: ks__base
        type: context_action
      - id: ks__bit_field
        type: u1
      - id: activity_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_activity_id
      - id: button_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_button_id
      - id: schedule_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_schedule_id
      - id: additional_info
        type: aux_types::string
        if: ks__has_field_additional_info
    instances:
      ks__has_field_activity_id: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_button_id: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_schedule_id: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_additional_info: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  ks__kvp_of_dict__aux_types__string_ks__disp__context_condition:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: ks__disp__context_condition
  ks__dict_of__aux_types__string_ks__disp__context_condition:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_ks__disp__context_condition
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__aux_types__string_ks__disp__context_action:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: ks__disp__context_action
  ks__dict_of__aux_types__string_ks__disp__context_action:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_ks__disp__context_action
        repeat: expr
        repeat-expr: length.value
  ks__array_of__context_condition_action_group__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: context_condition_action_group
        repeat: expr
        repeat-expr: length.value
  config_activity_banner:
    seq:
      - id: ks__bit_field
        type: u1
      - id: condition_defines
        type: ks__dict_of__aux_types__string_ks__disp__context_condition
        if: ks__has_field_condition_defines
      - id: action_defines
        type: ks__dict_of__aux_types__string_ks__disp__context_action
        if: ks__has_field_action_defines
      - id: update_groups
        type: ks__array_of__context_condition_action_group__length_u
        if: ks__has_field_update_groups
      - id: click_groups
        type: ks__array_of__context_condition_action_group__length_u
        if: ks__has_field_click_groups
    instances:
      ks__has_field_condition_defines: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_action_defines: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_update_groups: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_click_groups: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  vod_player_type_comparer:
    seq: []
    instances: {}
  config_live_player_register:
    seq: []
    instances: {}
  config_weather_type_comparer:
    seq: []
    instances: {}
  elem_ball_trigger_type_comparer:
    seq: []
    instances: {}
  ks__enum__config_weather_effect_control_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: config_weather_effect_control_type
  config_weather_effect_control_type_comparer:
    seq: []
    instances: {}
  ks__enum__ornaments_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: ornaments_type
  ornaments_type_comparer:
    seq: []
    instances: {}
  config_base_widget:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: material_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_material_id
      - id: is_consume_material
        type: u1
        if: ks__has_field_is_consume_material
      - id: is_equipable
        type: u1
        if: ks__has_field_is_equipable
      - id: cool_down
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cool_down
      - id: cool_down_on_fail
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cool_down_on_fail
      - id: cool_down_group
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cool_down_group
      - id: is_cd_under_time_scale
        type: u1
        if: ks__has_field_is_cd_under_time_scale
      - id: is_allowed_in_dungeon
        type: u1
        if: ks__has_field_is_allowed_in_dungeon
      - id: is_allowed_in_room
        type: u1
        if: ks__has_field_is_allowed_in_room
      - id: ornaments_type
        type: ks__enum__ornaments_type
        if: ks__has_field_ornaments_type
    instances:
      ks__has_field_material_id: # Field №0
        value: (ks__bit_field.value & 0b0000000001) != 0
      ks__has_field_is_consume_material: # Field №1
        value: (ks__bit_field.value & 0b0000000010) != 0
      ks__has_field_is_equipable: # Field №2
        value: (ks__bit_field.value & 0b0000000100) != 0
      ks__has_field_cool_down: # Field №3
        value: (ks__bit_field.value & 0b0000001000) != 0
      ks__has_field_cool_down_on_fail: # Field №4
        value: (ks__bit_field.value & 0b0000010000) != 0
      ks__has_field_cool_down_group: # Field №5
        value: (ks__bit_field.value & 0b0000100000) != 0
      ks__has_field_is_cd_under_time_scale: # Field №6
        value: (ks__bit_field.value & 0b0001000000) != 0
      ks__has_field_is_allowed_in_dungeon: # Field №7
        value: (ks__bit_field.value & 0b0010000000) != 0
      ks__has_field_is_allowed_in_room: # Field №8
        value: (ks__bit_field.value & 0b0100000000) != 0
      ks__has_field_ornaments_type: # Field №9
        value: (ks__bit_field.value & 0b1000000000) != 0
  config_widget_anchor_point_register:
    seq: []
    instances: {}
  config_widget_anchor_point:
    seq:
      - id: ks__base
        type: config_base_widget
      - id: ks__bit_field
        type: u1
      - id: lasting_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_lasting_time
      - id: max_count_in_scene
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_count_in_scene
      - id: gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gadget_id
      - id: invalid_scene_ids
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_invalid_scene_ids
    instances:
      ks__has_field_lasting_time: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_max_count_in_scene: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_gadget_id: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_invalid_scene_ids: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      material_id:
        value: ks__base.material_id
      is_consume_material:
        value: ks__base.is_consume_material
      is_equipable:
        value: ks__base.is_equipable
      cool_down:
        value: ks__base.cool_down
      cool_down_on_fail:
        value: ks__base.cool_down_on_fail
      cool_down_group:
        value: ks__base.cool_down_group
      is_cd_under_time_scale:
        value: ks__base.is_cd_under_time_scale
      is_allowed_in_dungeon:
        value: ks__base.is_allowed_in_dungeon
      is_allowed_in_room:
        value: ks__base.is_allowed_in_room
      ornaments_type:
        value: ks__base.ornaments_type
  config_widget_bonfire_register:
    seq: []
    instances: {}
  config_widget_bonfire:
    seq:
      - id: ks__base
        type: config_base_widget
      - id: ks__bit_field
        type: u1
      - id: lasting_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_lasting_time
      - id: max_count_in_scene
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_count_in_scene
      - id: max_count_by_player
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_count_by_player
      - id: gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gadget_id
      - id: distance_to_avatar
        type: f4
        if: ks__has_field_distance_to_avatar
      - id: radius
        type: f4
        if: ks__has_field_radius
      - id: combat_destroy_distance
        type: f4
        if: ks__has_field_combat_destroy_distance
    instances:
      ks__has_field_lasting_time: # Field №0
        value: (ks__bit_field & 0b0000001) != 0
      ks__has_field_max_count_in_scene: # Field №1
        value: (ks__bit_field & 0b0000010) != 0
      ks__has_field_max_count_by_player: # Field №2
        value: (ks__bit_field & 0b0000100) != 0
      ks__has_field_gadget_id: # Field №3
        value: (ks__bit_field & 0b0001000) != 0
      ks__has_field_distance_to_avatar: # Field №4
        value: (ks__bit_field & 0b0010000) != 0
      ks__has_field_radius: # Field №5
        value: (ks__bit_field & 0b0100000) != 0
      ks__has_field_combat_destroy_distance: # Field №6
        value: (ks__bit_field & 0b1000000) != 0
      # Base class fields
      material_id:
        value: ks__base.material_id
      is_consume_material:
        value: ks__base.is_consume_material
      is_equipable:
        value: ks__base.is_equipable
      cool_down:
        value: ks__base.cool_down
      cool_down_on_fail:
        value: ks__base.cool_down_on_fail
      cool_down_group:
        value: ks__base.cool_down_group
      is_cd_under_time_scale:
        value: ks__base.is_cd_under_time_scale
      is_allowed_in_dungeon:
        value: ks__base.is_allowed_in_dungeon
      is_allowed_in_room:
        value: ks__base.is_allowed_in_room
      ornaments_type:
        value: ks__base.ornaments_type
  config_widget_condense_resin_register:
    seq: []
    instances: {}
  config_widget_condense_resin:
    seq:
      - id: ks__base
        type: config_base_widget
      - id: ks__bit_field
        type: u1
      - id: replace_resin_count
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_replace_resin_count
    instances:
      ks__has_field_replace_resin_count: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      material_id:
        value: ks__base.material_id
      is_consume_material:
        value: ks__base.is_consume_material
      is_equipable:
        value: ks__base.is_equipable
      cool_down:
        value: ks__base.cool_down
      cool_down_on_fail:
        value: ks__base.cool_down_on_fail
      cool_down_group:
        value: ks__base.cool_down_group
      is_cd_under_time_scale:
        value: ks__base.is_cd_under_time_scale
      is_allowed_in_dungeon:
        value: ks__base.is_allowed_in_dungeon
      is_allowed_in_room:
        value: ks__base.is_allowed_in_room
      ornaments_type:
        value: ks__base.ornaments_type
  config_widget_lunch_box_heal_material:
    seq:
      - id: ks__bit_field
        type: u1
      - id: notice_add_hp_materials
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_notice_add_hp_materials
      - id: other_add_hp_materials
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_other_add_hp_materials
    instances:
      ks__has_field_notice_add_hp_materials: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_other_add_hp_materials: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_widget_lunch_box_register:
    seq: []
    instances: {}
  config_widget_lunch_box:
    seq:
      - id: ks__base
        type: config_base_widget
      - id: ks__bit_field
        type: u1
      - id: revive_materials
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_revive_materials
      - id: heal_materials
        type: config_widget_lunch_box_heal_material
        if: ks__has_field_heal_materials
    instances:
      ks__has_field_revive_materials: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_heal_materials: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      material_id:
        value: ks__base.material_id
      is_consume_material:
        value: ks__base.is_consume_material
      is_equipable:
        value: ks__base.is_equipable
      cool_down:
        value: ks__base.cool_down
      cool_down_on_fail:
        value: ks__base.cool_down_on_fail
      cool_down_group:
        value: ks__base.cool_down_group
      is_cd_under_time_scale:
        value: ks__base.is_cd_under_time_scale
      is_allowed_in_dungeon:
        value: ks__base.is_allowed_in_dungeon
      is_allowed_in_room:
        value: ks__base.is_allowed_in_room
      ornaments_type:
        value: ks__base.ornaments_type
  config_widget_oneoff_gather_point_detector_register:
    seq: []
    instances: {}
  config_widget_oneoff_gather_point_detector:
    seq:
      - id: ks__base
        type: config_base_widget
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: hint_radius
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_hint_radius
      - id: nearby_radius
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_nearby_radius
      - id: grid_search_range
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_grid_search_range
      - id: success_gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_success_gadget_id
      - id: failed_gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_failed_gadget_id
      - id: gather_point_type
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gather_point_type
      - id: hint_group
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_hint_group
      - id: effect_last_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_effect_last_time
      - id: distance_to_avatar
        type: f4
        if: ks__has_field_distance_to_avatar
      - id: height
        type: f4
        if: ks__has_field_height
    instances:
      ks__has_field_hint_radius: # Field №0
        value: (ks__bit_field.value & 0b0000000001) != 0
      ks__has_field_nearby_radius: # Field №1
        value: (ks__bit_field.value & 0b0000000010) != 0
      ks__has_field_grid_search_range: # Field №2
        value: (ks__bit_field.value & 0b0000000100) != 0
      ks__has_field_success_gadget_id: # Field №3
        value: (ks__bit_field.value & 0b0000001000) != 0
      ks__has_field_failed_gadget_id: # Field №4
        value: (ks__bit_field.value & 0b0000010000) != 0
      ks__has_field_gather_point_type: # Field №5
        value: (ks__bit_field.value & 0b0000100000) != 0
      ks__has_field_hint_group: # Field №6
        value: (ks__bit_field.value & 0b0001000000) != 0
      ks__has_field_effect_last_time: # Field №7
        value: (ks__bit_field.value & 0b0010000000) != 0
      ks__has_field_distance_to_avatar: # Field №8
        value: (ks__bit_field.value & 0b0100000000) != 0
      ks__has_field_height: # Field №9
        value: (ks__bit_field.value & 0b1000000000) != 0
      # Base class fields
      material_id:
        value: ks__base.material_id
      is_consume_material:
        value: ks__base.is_consume_material
      is_equipable:
        value: ks__base.is_equipable
      cool_down:
        value: ks__base.cool_down
      cool_down_on_fail:
        value: ks__base.cool_down_on_fail
      cool_down_group:
        value: ks__base.cool_down_group
      is_cd_under_time_scale:
        value: ks__base.is_cd_under_time_scale
      is_allowed_in_dungeon:
        value: ks__base.is_allowed_in_dungeon
      is_allowed_in_room:
        value: ks__base.is_allowed_in_room
      ornaments_type:
        value: ks__base.ornaments_type
  config_widget_client_detector_register:
    seq: []
    instances: {}
  config_widget_client_detector:
    seq:
      - id: ks__base
        type: config_base_widget
      - id: ks__bit_field
        type: u1
      - id: gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gadget_id
      - id: allow_city_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_allow_city_id
      - id: hint_group
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_hint_group
      - id: distance_to_avatar
        type: f4
        if: ks__has_field_distance_to_avatar
      - id: height
        type: f4
        if: ks__has_field_height
    instances:
      ks__has_field_gadget_id: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_allow_city_id: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_hint_group: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_distance_to_avatar: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_height: # Field №4
        value: (ks__bit_field & 0b10000) != 0
      # Base class fields
      material_id:
        value: ks__base.material_id
      is_consume_material:
        value: ks__base.is_consume_material
      is_equipable:
        value: ks__base.is_equipable
      cool_down:
        value: ks__base.cool_down
      cool_down_on_fail:
        value: ks__base.cool_down_on_fail
      cool_down_group:
        value: ks__base.cool_down_group
      is_cd_under_time_scale:
        value: ks__base.is_cd_under_time_scale
      is_allowed_in_dungeon:
        value: ks__base.is_allowed_in_dungeon
      is_allowed_in_room:
        value: ks__base.is_allowed_in_room
      ornaments_type:
        value: ks__base.ornaments_type
  config_widget_client_collector_register:
    seq: []
    instances: {}
  ks__enum__collector_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: collector_type
  config_widget_client_collector:
    seq:
      - id: ks__base
        type: config_base_widget
      - id: ks__bit_field
        type: u1
      - id: target_type
        type: ks__enum__collector_type
        if: ks__has_field_target_type
      - id: element_type
        type: ks__enum__element_type
        if: ks__has_field_element_type
      - id: recharge_points
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_recharge_points
      - id: max_points
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_points
      - id: effect_gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_effect_gadget_id
      - id: use_gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_use_gadget_id
      - id: allow_other_world
        type: u1
        if: ks__has_field_allow_other_world
    instances:
      ks__has_field_target_type: # Field №0
        value: (ks__bit_field & 0b0000001) != 0
      ks__has_field_element_type: # Field №1
        value: (ks__bit_field & 0b0000010) != 0
      ks__has_field_recharge_points: # Field №2
        value: (ks__bit_field & 0b0000100) != 0
      ks__has_field_max_points: # Field №3
        value: (ks__bit_field & 0b0001000) != 0
      ks__has_field_effect_gadget_id: # Field №4
        value: (ks__bit_field & 0b0010000) != 0
      ks__has_field_use_gadget_id: # Field №5
        value: (ks__bit_field & 0b0100000) != 0
      ks__has_field_allow_other_world: # Field №6
        value: (ks__bit_field & 0b1000000) != 0
      # Base class fields
      material_id:
        value: ks__base.material_id
      is_consume_material:
        value: ks__base.is_consume_material
      is_equipable:
        value: ks__base.is_equipable
      cool_down:
        value: ks__base.cool_down
      cool_down_on_fail:
        value: ks__base.cool_down_on_fail
      cool_down_group:
        value: ks__base.cool_down_group
      is_cd_under_time_scale:
        value: ks__base.is_cd_under_time_scale
      is_allowed_in_dungeon:
        value: ks__base.is_allowed_in_dungeon
      is_allowed_in_room:
        value: ks__base.is_allowed_in_room
      ornaments_type:
        value: ks__base.ornaments_type
  config_widget_attach_avatar_register:
    seq: []
    instances: {}
  config_widget_attach_avatar:
    seq:
      - id: ks__base
        type: config_base_widget
      - id: ks__bit_field
        type: u1
      - id: use_gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_use_gadget_id
    instances:
      ks__has_field_use_gadget_id: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      material_id:
        value: ks__base.material_id
      is_consume_material:
        value: ks__base.is_consume_material
      is_equipable:
        value: ks__base.is_equipable
      cool_down:
        value: ks__base.cool_down
      cool_down_on_fail:
        value: ks__base.cool_down_on_fail
      cool_down_group:
        value: ks__base.cool_down_group
      is_cd_under_time_scale:
        value: ks__base.is_cd_under_time_scale
      is_allowed_in_dungeon:
        value: ks__base.is_allowed_in_dungeon
      is_allowed_in_room:
        value: ks__base.is_allowed_in_room
      ornaments_type:
        value: ks__base.ornaments_type
  config_widget_treasure_map_detector_register:
    seq: []
    instances: {}
  config_widget_treasure_map_detector:
    seq:
      - id: ks__base
        type: config_base_widget
      - id: ks__bit_field
        type: u1
      - id: gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gadget_id
      - id: radius_succ
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_radius_succ
      - id: detect_range
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_detect_range
      - id: gadget_duration
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gadget_duration
    instances:
      ks__has_field_gadget_id: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_radius_succ: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_detect_range: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_gadget_duration: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      material_id:
        value: ks__base.material_id
      is_consume_material:
        value: ks__base.is_consume_material
      is_equipable:
        value: ks__base.is_equipable
      cool_down:
        value: ks__base.cool_down
      cool_down_on_fail:
        value: ks__base.cool_down_on_fail
      cool_down_group:
        value: ks__base.cool_down_group
      is_cd_under_time_scale:
        value: ks__base.is_cd_under_time_scale
      is_allowed_in_dungeon:
        value: ks__base.is_allowed_in_dungeon
      is_allowed_in_room:
        value: ks__base.is_allowed_in_room
      ornaments_type:
        value: ks__base.ornaments_type
  config_widget_gadget_builder_register:
    seq: []
    instances: {}
  config_widget_gadget_builder:
    seq:
      - id: ks__base
        type: config_base_widget
      - id: ks__bit_field
        type: u1
      - id: lasting_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_lasting_time
      - id: max_count_in_scene
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_count_in_scene
      - id: max_count_by_player
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_count_by_player
      - id: gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gadget_id
      - id: distance_to_avatar
        type: f4
        if: ks__has_field_distance_to_avatar
      - id: height_to_avatar
        type: f4
        if: ks__has_field_height_to_avatar
      - id: radius
        type: f4
        if: ks__has_field_radius
      - id: check_collision
        type: u1
        if: ks__has_field_check_collision
    instances:
      ks__has_field_lasting_time: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_max_count_in_scene: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_max_count_by_player: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_gadget_id: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_distance_to_avatar: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_height_to_avatar: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_radius: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_check_collision: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
      # Base class fields
      material_id:
        value: ks__base.material_id
      is_consume_material:
        value: ks__base.is_consume_material
      is_equipable:
        value: ks__base.is_equipable
      cool_down:
        value: ks__base.cool_down
      cool_down_on_fail:
        value: ks__base.cool_down_on_fail
      cool_down_group:
        value: ks__base.cool_down_group
      is_cd_under_time_scale:
        value: ks__base.is_cd_under_time_scale
      is_allowed_in_dungeon:
        value: ks__base.is_allowed_in_dungeon
      is_allowed_in_room:
        value: ks__base.is_allowed_in_room
      ornaments_type:
        value: ks__base.ornaments_type
  config_widget_take_photo_register:
    seq: []
    instances: {}
  config_widget_take_photo:
    seq:
      - id: ks__base
        type: config_base_widget
      - id: ks__bit_field
        type: u1
      - id: has_camera_effect
        type: u1
        if: ks__has_field_has_camera_effect
      - id: camera_ui_effect
        type: aux_types::string
        if: ks__has_field_camera_ui_effect
      - id: camera_screen_effect
        type: aux_types::string
        if: ks__has_field_camera_screen_effect
      - id: main_camera_effect
        type: aux_types::string
        if: ks__has_field_main_camera_effect
    instances:
      ks__has_field_has_camera_effect: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_camera_ui_effect: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_camera_screen_effect: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_main_camera_effect: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      material_id:
        value: ks__base.material_id
      is_consume_material:
        value: ks__base.is_consume_material
      is_equipable:
        value: ks__base.is_equipable
      cool_down:
        value: ks__base.cool_down
      cool_down_on_fail:
        value: ks__base.cool_down_on_fail
      cool_down_group:
        value: ks__base.cool_down_group
      is_cd_under_time_scale:
        value: ks__base.is_cd_under_time_scale
      is_allowed_in_dungeon:
        value: ks__base.is_allowed_in_dungeon
      is_allowed_in_room:
        value: ks__base.is_allowed_in_room
      ornaments_type:
        value: ks__base.ornaments_type
  config_widget_blessing_camera_register:
    seq: []
    instances: {}
  config_widget_blessing_camera:
    seq:
      - id: ks__base
        type: config_base_widget
      - id: ks__bit_field
        type: u1
      - id: is_fixed
        type: u1
        if: ks__has_field_is_fixed
    instances:
      ks__has_field_is_fixed: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      material_id:
        value: ks__base.material_id
      is_consume_material:
        value: ks__base.is_consume_material
      is_equipable:
        value: ks__base.is_equipable
      cool_down:
        value: ks__base.cool_down
      cool_down_on_fail:
        value: ks__base.cool_down_on_fail
      cool_down_group:
        value: ks__base.cool_down_group
      is_cd_under_time_scale:
        value: ks__base.is_cd_under_time_scale
      is_allowed_in_dungeon:
        value: ks__base.is_allowed_in_dungeon
      is_allowed_in_room:
        value: ks__base.is_allowed_in_room
      ornaments_type:
        value: ks__base.ornaments_type
  config_widget_miracle_ring_register:
    seq: []
    instances: {}
  config_widget_miracle_ring:
    seq:
      - id: ks__base
        type: config_base_widget
      - id: ks__bit_field
        type: u1
      - id: max_count_in_scene
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_count_in_scene
      - id: max_count_by_player
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_count_by_player
      - id: gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gadget_id
      - id: distance_to_avatar
        type: f4
        if: ks__has_field_distance_to_avatar
      - id: radius
        type: f4
        if: ks__has_field_radius
      - id: combat_destroy_distance
        type: f4
        if: ks__has_field_combat_destroy_distance
    instances:
      ks__has_field_max_count_in_scene: # Field №0
        value: (ks__bit_field & 0b000001) != 0
      ks__has_field_max_count_by_player: # Field №1
        value: (ks__bit_field & 0b000010) != 0
      ks__has_field_gadget_id: # Field №2
        value: (ks__bit_field & 0b000100) != 0
      ks__has_field_distance_to_avatar: # Field №3
        value: (ks__bit_field & 0b001000) != 0
      ks__has_field_radius: # Field №4
        value: (ks__bit_field & 0b010000) != 0
      ks__has_field_combat_destroy_distance: # Field №5
        value: (ks__bit_field & 0b100000) != 0
      # Base class fields
      material_id:
        value: ks__base.material_id
      is_consume_material:
        value: ks__base.is_consume_material
      is_equipable:
        value: ks__base.is_equipable
      cool_down:
        value: ks__base.cool_down
      cool_down_on_fail:
        value: ks__base.cool_down_on_fail
      cool_down_group:
        value: ks__base.cool_down_group
      is_cd_under_time_scale:
        value: ks__base.is_cd_under_time_scale
      is_allowed_in_dungeon:
        value: ks__base.is_allowed_in_dungeon
      is_allowed_in_room:
        value: ks__base.is_allowed_in_room
      ornaments_type:
        value: ks__base.ornaments_type
  config_widget_water_sprite_register:
    seq: []
    instances: {}
  config_widget_water_sprite:
    seq:
      - id: ks__base
        type: config_base_widget
      - id: ks__bit_field
        type: u1
      - id: ability_group_name
        type: aux_types::string
        if: ks__has_field_ability_group_name
      - id: ability_trigger_name
        type: aux_types::string
        if: ks__has_field_ability_trigger_name
      - id: ability_trigger_name_second
        type: aux_types::string
        if: ks__has_field_ability_trigger_name_second
    instances:
      ks__has_field_ability_group_name: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_ability_trigger_name: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_ability_trigger_name_second: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      material_id:
        value: ks__base.material_id
      is_consume_material:
        value: ks__base.is_consume_material
      is_equipable:
        value: ks__base.is_equipable
      cool_down:
        value: ks__base.cool_down
      cool_down_on_fail:
        value: ks__base.cool_down_on_fail
      cool_down_group:
        value: ks__base.cool_down_group
      is_cd_under_time_scale:
        value: ks__base.is_cd_under_time_scale
      is_allowed_in_dungeon:
        value: ks__base.is_allowed_in_dungeon
      is_allowed_in_room:
        value: ks__base.is_allowed_in_room
      ornaments_type:
        value: ks__base.ornaments_type
  config_widget_water_sprite_toy_register:
    seq: []
    instances: {}
  config_widget_water_sprite_toy:
    seq:
      - id: ks__base
        type: config_base_widget
      - id: ks__bit_field
        type: u1
      - id: ability_group_name
        type: aux_types::string
        if: ks__has_field_ability_group_name
    instances:
      ks__has_field_ability_group_name: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      material_id:
        value: ks__base.material_id
      is_consume_material:
        value: ks__base.is_consume_material
      is_equipable:
        value: ks__base.is_equipable
      cool_down:
        value: ks__base.cool_down
      cool_down_on_fail:
        value: ks__base.cool_down_on_fail
      cool_down_group:
        value: ks__base.cool_down_group
      is_cd_under_time_scale:
        value: ks__base.is_cd_under_time_scale
      is_allowed_in_dungeon:
        value: ks__base.is_allowed_in_dungeon
      is_allowed_in_room:
        value: ks__base.is_allowed_in_room
      ornaments_type:
        value: ks__base.ornaments_type
  config_widget_ability_group_generator_register:
    seq: []
    instances: {}
  config_widget_ability_group_generator:
    seq:
      - id: ks__base
        type: config_base_widget
      - id: ks__bit_field
        type: u1
      - id: ability_group_name
        type: aux_types::string
        if: ks__has_field_ability_group_name
    instances:
      ks__has_field_ability_group_name: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      material_id:
        value: ks__base.material_id
      is_consume_material:
        value: ks__base.is_consume_material
      is_equipable:
        value: ks__base.is_equipable
      cool_down:
        value: ks__base.cool_down
      cool_down_on_fail:
        value: ks__base.cool_down_on_fail
      cool_down_group:
        value: ks__base.cool_down_group
      is_cd_under_time_scale:
        value: ks__base.is_cd_under_time_scale
      is_allowed_in_dungeon:
        value: ks__base.is_allowed_in_dungeon
      is_allowed_in_room:
        value: ks__base.is_allowed_in_room
      ornaments_type:
        value: ks__base.ornaments_type
  config_widget_open_page_register:
    seq: []
    instances: {}
  config_widget_open_page:
    seq:
      - id: ks__base
        type: config_base_widget
      - id: ks__bit_field
        type: u1
      - id: page_name
        type: aux_types::string
        if: ks__has_field_page_name
    instances:
      ks__has_field_page_name: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      material_id:
        value: ks__base.material_id
      is_consume_material:
        value: ks__base.is_consume_material
      is_equipable:
        value: ks__base.is_equipable
      cool_down:
        value: ks__base.cool_down
      cool_down_on_fail:
        value: ks__base.cool_down_on_fail
      cool_down_group:
        value: ks__base.cool_down_group
      is_cd_under_time_scale:
        value: ks__base.is_cd_under_time_scale
      is_allowed_in_dungeon:
        value: ks__base.is_allowed_in_dungeon
      is_allowed_in_room:
        value: ks__base.is_allowed_in_room
      ornaments_type:
        value: ks__base.ornaments_type
  config_widget_use_attach_ability_group_toy_register:
    seq: []
    instances: {}
  config_widget_use_attach_ability_group_toy:
    seq:
      - id: ks__base
        type: config_base_widget
      - id: ks__bit_field
        type: u1
      - id: ability_group_name
        type: aux_types::string
        if: ks__has_field_ability_group_name
      - id: ability_group_name_second
        type: aux_types::string
        if: ks__has_field_ability_group_name_second
      - id: ability_name
        type: aux_types::string
        if: ks__has_field_ability_name
      - id: is_update_cd_after_ability_trigger
        type: u1
        if: ks__has_field_is_update_cd_after_ability_trigger
    instances:
      ks__has_field_ability_group_name: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_ability_group_name_second: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_ability_name: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_is_update_cd_after_ability_trigger: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      material_id:
        value: ks__base.material_id
      is_consume_material:
        value: ks__base.is_consume_material
      is_equipable:
        value: ks__base.is_equipable
      cool_down:
        value: ks__base.cool_down
      cool_down_on_fail:
        value: ks__base.cool_down_on_fail
      cool_down_group:
        value: ks__base.cool_down_group
      is_cd_under_time_scale:
        value: ks__base.is_cd_under_time_scale
      is_allowed_in_dungeon:
        value: ks__base.is_allowed_in_dungeon
      is_allowed_in_room:
        value: ks__base.is_allowed_in_room
      ornaments_type:
        value: ks__base.ornaments_type
  config_widget_use_item_toy_register:
    seq: []
    instances: {}
  config_widget_use_item_toy:
    seq:
      - id: ks__base
        type: config_base_widget
    instances:
      # Base class fields
      material_id:
        value: ks__base.material_id
      is_consume_material:
        value: ks__base.is_consume_material
      is_equipable:
        value: ks__base.is_equipable
      cool_down:
        value: ks__base.cool_down
      cool_down_on_fail:
        value: ks__base.cool_down_on_fail
      cool_down_group:
        value: ks__base.cool_down_group
      is_cd_under_time_scale:
        value: ks__base.is_cd_under_time_scale
      is_allowed_in_dungeon:
        value: ks__base.is_allowed_in_dungeon
      is_allowed_in_room:
        value: ks__base.is_allowed_in_room
      ornaments_type:
        value: ks__base.ornaments_type
  config_widget_add_buff_toy_register:
    seq: []
    instances: {}
  config_widget_add_buff_toy:
    seq:
      - id: ks__base
        type: config_base_widget
      - id: ks__bit_field
        type: u1
      - id: buff_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_buff_id
    instances:
      ks__has_field_buff_id: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      material_id:
        value: ks__base.material_id
      is_consume_material:
        value: ks__base.is_consume_material
      is_equipable:
        value: ks__base.is_equipable
      cool_down:
        value: ks__base.cool_down
      cool_down_on_fail:
        value: ks__base.cool_down_on_fail
      cool_down_group:
        value: ks__base.cool_down_group
      is_cd_under_time_scale:
        value: ks__base.is_cd_under_time_scale
      is_allowed_in_dungeon:
        value: ks__base.is_allowed_in_dungeon
      is_allowed_in_room:
        value: ks__base.is_allowed_in_room
      ornaments_type:
        value: ks__base.ornaments_type
  ks__kvp_of_dict__aux_types__string_ks__disp__config_base_widget:
    seq:
      - id: key
        type: aux_types::string
      - id: value
        type: ks__disp__config_base_widget
  ks__dict_of__aux_types__string_ks__disp__config_base_widget:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__string_ks__disp__config_base_widget
        repeat: expr
        repeat-expr: length.value
  config_widget:
    seq:
      - id: ks__bit_field
        type: u1
      - id: widgets
        type: ks__dict_of__aux_types__string_ks__disp__config_base_widget
        if: ks__has_field_widgets
    instances:
      ks__has_field_widgets: # Field №0
        value: (ks__bit_field & 0b1) != 0
  widget_event_type_comparer:
    seq: []
    instances: {}
  collector_type_comparer:
    seq: []
    instances: {}
  ks__enum__widget_occupy_tag:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: widget_occupy_tag
  widget_occupy_tag_comparer:
    seq: []
    instances: {}
  ks__enum__widget_business_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: widget_business_type
  widget_business_type_comparer:
    seq: []
    instances: {}
  ks__enum__widget_skill_replace_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: widget_skill_replace_type
  widget_skill_replace_type_comparer:
    seq: []
    instances: {}
  config_widget_gadget:
    seq:
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: max_count_in_scene
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_count_in_scene
      - id: max_count_by_player
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_count_by_player
      - id: is_combat_destroy
        type: u1
        if: ks__has_field_is_combat_destroy
      - id: combat_destroy_distance
        type: f4
        if: ks__has_field_combat_destroy_distance
      - id: is_distance_destroy
        type: u1
        if: ks__has_field_is_distance_destroy
      - id: distance_destroy_distance
        type: f4
        if: ks__has_field_distance_destroy_distance
      - id: is_has_collision
        type: u1
        if: ks__has_field_is_has_collision
      - id: collision_include_npc
        type: u1
        if: ks__has_field_collision_include_npc
      - id: collision_include_water
        type: u1
        if: ks__has_field_collision_include_water
      - id: radius
        type: f4
        if: ks__has_field_radius
      - id: distance_to_avatar
        type: f4
        if: ks__has_field_distance_to_avatar
      - id: create_height
        type: f4
        if: ks__has_field_create_height
      - id: create_rot
        type: vector
        if: ks__has_field_create_rot
      - id: is_leave_scene_destroy
        type: u1
        if: ks__has_field_is_leave_scene_destroy
    instances:
      ks__has_field_max_count_in_scene: # Field №0
        value: (ks__bit_field.value & 0b00000000000001) != 0
      ks__has_field_max_count_by_player: # Field №1
        value: (ks__bit_field.value & 0b00000000000010) != 0
      ks__has_field_is_combat_destroy: # Field №2
        value: (ks__bit_field.value & 0b00000000000100) != 0
      ks__has_field_combat_destroy_distance: # Field №3
        value: (ks__bit_field.value & 0b00000000001000) != 0
      ks__has_field_is_distance_destroy: # Field №4
        value: (ks__bit_field.value & 0b00000000010000) != 0
      ks__has_field_distance_destroy_distance: # Field №5
        value: (ks__bit_field.value & 0b00000000100000) != 0
      ks__has_field_is_has_collision: # Field №6
        value: (ks__bit_field.value & 0b00000001000000) != 0
      ks__has_field_collision_include_npc: # Field №7
        value: (ks__bit_field.value & 0b00000010000000) != 0
      ks__has_field_collision_include_water: # Field №8
        value: (ks__bit_field.value & 0b00000100000000) != 0
      ks__has_field_radius: # Field №9
        value: (ks__bit_field.value & 0b00001000000000) != 0
      ks__has_field_distance_to_avatar: # Field №10
        value: (ks__bit_field.value & 0b00010000000000) != 0
      ks__has_field_create_height: # Field №11
        value: (ks__bit_field.value & 0b00100000000000) != 0
      ks__has_field_create_rot: # Field №12
        value: (ks__bit_field.value & 0b01000000000000) != 0
      ks__has_field_is_leave_scene_destroy: # Field №13
        value: (ks__bit_field.value & 0b10000000000000) != 0
  config_widget_cd_group:
    seq:
      - id: ks__bit_field
        type: u1
      - id: is_under_time_scale
        type: u1
        if: ks__has_field_is_under_time_scale
      - id: cool_down_success
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cool_down_success
      - id: cool_down_fail
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cool_down_fail
    instances:
      ks__has_field_is_under_time_scale: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_cool_down_success: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_cool_down_fail: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ks__array_of__ks__enum__widget_occupy_tag__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__enum__widget_occupy_tag
        repeat: expr
        repeat-expr: length.value
  config_base_widget_toy:
    seq:
      - id: ks__bit_field
        type: u1
      - id: is_consume_material
        type: u1
        if: ks__has_field_is_consume_material
      - id: cd_group
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cd_group
      - id: tags
        type: ks__array_of__ks__enum__widget_occupy_tag__length_u
        if: ks__has_field_tags
      - id: business_type
        type: ks__enum__widget_business_type
        if: ks__has_field_business_type
    instances:
      ks__has_field_is_consume_material: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_cd_group: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_tags: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_business_type: # Field №3
        value: (ks__bit_field & 0b1000) != 0
  config_widget_toy_anchor_point_register:
    seq: []
    instances: {}
  config_widget_toy_anchor_point:
    seq:
      - id: ks__base
        type: config_base_widget_toy
      - id: ks__bit_field
        type: u1
      - id: cool_down
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cool_down
      - id: lasting_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_lasting_time
      - id: max_count_in_scene
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_count_in_scene
      - id: gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gadget_id
      - id: invalid_scene_ids
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_invalid_scene_ids
    instances:
      ks__has_field_cool_down: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_lasting_time: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_max_count_in_scene: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_gadget_id: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_invalid_scene_ids: # Field №4
        value: (ks__bit_field & 0b10000) != 0
      # Base class fields
      is_consume_material:
        value: ks__base.is_consume_material
      cd_group:
        value: ks__base.cd_group
      tags:
        value: ks__base.tags
      business_type:
        value: ks__base.business_type
  config_widget_toy_bonfire_register:
    seq: []
    instances: {}
  config_widget_toy_bonfire:
    seq:
      - id: ks__base
        type: config_base_widget_toy
      - id: ks__bit_field
        type: u1
      - id: cool_down
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_cool_down
      - id: lasting_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_lasting_time
      - id: max_count_in_scene
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_count_in_scene
      - id: max_count_by_player
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_count_by_player
      - id: gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gadget_id
      - id: distance_to_avatar
        type: f4
        if: ks__has_field_distance_to_avatar
      - id: radius
        type: f4
        if: ks__has_field_radius
      - id: combat_destroy_distance
        type: f4
        if: ks__has_field_combat_destroy_distance
    instances:
      ks__has_field_cool_down: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_lasting_time: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_max_count_in_scene: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_max_count_by_player: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_gadget_id: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_distance_to_avatar: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_radius: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_combat_destroy_distance: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
      # Base class fields
      is_consume_material:
        value: ks__base.is_consume_material
      cd_group:
        value: ks__base.cd_group
      tags:
        value: ks__base.tags
      business_type:
        value: ks__base.business_type
  config_widget_toy_lunch_box_heal_material:
    seq:
      - id: ks__bit_field
        type: u1
      - id: notice_add_hp_materials
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_notice_add_hp_materials
      - id: other_add_hp_materials
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_other_add_hp_materials
    instances:
      ks__has_field_notice_add_hp_materials: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_other_add_hp_materials: # Field №1
        value: (ks__bit_field & 0b10) != 0
  config_widget_toy_lunch_box_register:
    seq: []
    instances: {}
  config_widget_toy_lunch_box:
    seq:
      - id: ks__base
        type: config_base_widget_toy
      - id: ks__bit_field
        type: u1
      - id: revive_materials
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_revive_materials
      - id: heal_materials
        type: config_widget_toy_lunch_box_heal_material
        if: ks__has_field_heal_materials
    instances:
      ks__has_field_revive_materials: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_heal_materials: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      is_consume_material:
        value: ks__base.is_consume_material
      cd_group:
        value: ks__base.cd_group
      tags:
        value: ks__base.tags
      business_type:
        value: ks__base.business_type
  config_widget_toy_clint_detector_register:
    seq: []
    instances: {}
  config_widget_toy_clint_detector:
    seq:
      - id: ks__base
        type: config_base_widget_toy
      - id: ks__bit_field
        type: u1
      - id: gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gadget_id
      - id: allow_city_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_allow_city_id
      - id: hint_group
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_hint_group
      - id: distance_to_avatar
        type: f4
        if: ks__has_field_distance_to_avatar
      - id: height
        type: f4
        if: ks__has_field_height
    instances:
      ks__has_field_gadget_id: # Field №0
        value: (ks__bit_field & 0b00001) != 0
      ks__has_field_allow_city_id: # Field №1
        value: (ks__bit_field & 0b00010) != 0
      ks__has_field_hint_group: # Field №2
        value: (ks__bit_field & 0b00100) != 0
      ks__has_field_distance_to_avatar: # Field №3
        value: (ks__bit_field & 0b01000) != 0
      ks__has_field_height: # Field №4
        value: (ks__bit_field & 0b10000) != 0
      # Base class fields
      is_consume_material:
        value: ks__base.is_consume_material
      cd_group:
        value: ks__base.cd_group
      tags:
        value: ks__base.tags
      business_type:
        value: ks__base.business_type
  config_widget_toy_oneoff_gather_point_detector_register:
    seq: []
    instances: {}
  config_widget_toy_oneoff_gather_point_detector:
    seq:
      - id: ks__base
        type: config_base_widget_toy
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: hint_radius
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_hint_radius
      - id: nearby_radius
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_nearby_radius
      - id: grid_search_range
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_grid_search_range
      - id: success_gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_success_gadget_id
      - id: failed_gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_failed_gadget_id
      - id: gather_point_type
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gather_point_type
      - id: hint_group
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_hint_group
      - id: effect_last_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_effect_last_time
      - id: distance_to_avatar
        type: f4
        if: ks__has_field_distance_to_avatar
      - id: height
        type: f4
        if: ks__has_field_height
    instances:
      ks__has_field_hint_radius: # Field №0
        value: (ks__bit_field.value & 0b0000000001) != 0
      ks__has_field_nearby_radius: # Field №1
        value: (ks__bit_field.value & 0b0000000010) != 0
      ks__has_field_grid_search_range: # Field №2
        value: (ks__bit_field.value & 0b0000000100) != 0
      ks__has_field_success_gadget_id: # Field №3
        value: (ks__bit_field.value & 0b0000001000) != 0
      ks__has_field_failed_gadget_id: # Field №4
        value: (ks__bit_field.value & 0b0000010000) != 0
      ks__has_field_gather_point_type: # Field №5
        value: (ks__bit_field.value & 0b0000100000) != 0
      ks__has_field_hint_group: # Field №6
        value: (ks__bit_field.value & 0b0001000000) != 0
      ks__has_field_effect_last_time: # Field №7
        value: (ks__bit_field.value & 0b0010000000) != 0
      ks__has_field_distance_to_avatar: # Field №8
        value: (ks__bit_field.value & 0b0100000000) != 0
      ks__has_field_height: # Field №9
        value: (ks__bit_field.value & 0b1000000000) != 0
      # Base class fields
      is_consume_material:
        value: ks__base.is_consume_material
      cd_group:
        value: ks__base.cd_group
      tags:
        value: ks__base.tags
      business_type:
        value: ks__base.business_type
  config_widget_toy_clint_collector_register:
    seq: []
    instances: {}
  config_widget_toy_clint_collector:
    seq:
      - id: ks__base
        type: config_base_widget_toy
      - id: ks__bit_field
        type: u1
      - id: target_type
        type: ks__enum__collector_type
        if: ks__has_field_target_type
      - id: element_type
        type: ks__enum__element_type
        if: ks__has_field_element_type
      - id: recharge_points
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_recharge_points
      - id: max_points
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_points
      - id: effect_gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_effect_gadget_id
      - id: use_gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_use_gadget_id
      - id: allow_other_world
        type: u1
        if: ks__has_field_allow_other_world
    instances:
      ks__has_field_target_type: # Field №0
        value: (ks__bit_field & 0b0000001) != 0
      ks__has_field_element_type: # Field №1
        value: (ks__bit_field & 0b0000010) != 0
      ks__has_field_recharge_points: # Field №2
        value: (ks__bit_field & 0b0000100) != 0
      ks__has_field_max_points: # Field №3
        value: (ks__bit_field & 0b0001000) != 0
      ks__has_field_effect_gadget_id: # Field №4
        value: (ks__bit_field & 0b0010000) != 0
      ks__has_field_use_gadget_id: # Field №5
        value: (ks__bit_field & 0b0100000) != 0
      ks__has_field_allow_other_world: # Field №6
        value: (ks__bit_field & 0b1000000) != 0
      # Base class fields
      is_consume_material:
        value: ks__base.is_consume_material
      cd_group:
        value: ks__base.cd_group
      tags:
        value: ks__base.tags
      business_type:
        value: ks__base.business_type
  config_widget_toy_treasure_map_detector_register:
    seq: []
    instances: {}
  config_widget_toy_treasure_map_detector:
    seq:
      - id: ks__base
        type: config_base_widget_toy
      - id: ks__bit_field
        type: u1
      - id: gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gadget_id
      - id: radius_succ
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_radius_succ
      - id: detect_range
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_detect_range
      - id: gadget_duration
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gadget_duration
    instances:
      ks__has_field_gadget_id: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_radius_succ: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_detect_range: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_gadget_duration: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      is_consume_material:
        value: ks__base.is_consume_material
      cd_group:
        value: ks__base.cd_group
      tags:
        value: ks__base.tags
      business_type:
        value: ks__base.business_type
  config_widget_toy_blessing_camera_register:
    seq: []
    instances: {}
  config_widget_toy_blessing_camera:
    seq:
      - id: ks__base
        type: config_base_widget_toy
      - id: ks__bit_field
        type: u1
      - id: is_fixed
        type: u1
        if: ks__has_field_is_fixed
    instances:
      ks__has_field_is_fixed: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      is_consume_material:
        value: ks__base.is_consume_material
      cd_group:
        value: ks__base.cd_group
      tags:
        value: ks__base.tags
      business_type:
        value: ks__base.business_type
  config_widget_toy_gadget_builder_register:
    seq: []
    instances: {}
  config_widget_toy_gadget_builder:
    seq:
      - id: ks__base
        type: config_base_widget_toy
      - id: ks__bit_field
        type: u1
      - id: lasting_time
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_lasting_time
      - id: max_count_in_scene
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_count_in_scene
      - id: max_count_by_player
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_count_by_player
      - id: gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gadget_id
      - id: distance_to_avatar
        type: f4
        if: ks__has_field_distance_to_avatar
      - id: height_to_avatar
        type: f4
        if: ks__has_field_height_to_avatar
      - id: radius
        type: f4
        if: ks__has_field_radius
      - id: check_collision
        type: u1
        if: ks__has_field_check_collision
    instances:
      ks__has_field_lasting_time: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_max_count_in_scene: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_max_count_by_player: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_gadget_id: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_distance_to_avatar: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_height_to_avatar: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_radius: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_check_collision: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
      # Base class fields
      is_consume_material:
        value: ks__base.is_consume_material
      cd_group:
        value: ks__base.cd_group
      tags:
        value: ks__base.tags
      business_type:
        value: ks__base.business_type
  config_widget_toy_miracle_ring_register:
    seq: []
    instances: {}
  config_widget_toy_miracle_ring:
    seq:
      - id: ks__base
        type: config_base_widget_toy
      - id: ks__bit_field
        type: u1
      - id: is_allowed_in_dungeon
        type: u1
        if: ks__has_field_is_allowed_in_dungeon
      - id: is_allowed_in_room
        type: u1
        if: ks__has_field_is_allowed_in_room
      - id: max_count_in_scene
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_count_in_scene
      - id: max_count_by_player
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_max_count_by_player
      - id: create_gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_create_gadget_id
      - id: distance_to_avatar
        type: f4
        if: ks__has_field_distance_to_avatar
      - id: radius
        type: f4
        if: ks__has_field_radius
      - id: combat_destroy_distance
        type: f4
        if: ks__has_field_combat_destroy_distance
    instances:
      ks__has_field_is_allowed_in_dungeon: # Field №0
        value: (ks__bit_field & 0b00000001) != 0
      ks__has_field_is_allowed_in_room: # Field №1
        value: (ks__bit_field & 0b00000010) != 0
      ks__has_field_max_count_in_scene: # Field №2
        value: (ks__bit_field & 0b00000100) != 0
      ks__has_field_max_count_by_player: # Field №3
        value: (ks__bit_field & 0b00001000) != 0
      ks__has_field_create_gadget_id: # Field №4
        value: (ks__bit_field & 0b00010000) != 0
      ks__has_field_distance_to_avatar: # Field №5
        value: (ks__bit_field & 0b00100000) != 0
      ks__has_field_radius: # Field №6
        value: (ks__bit_field & 0b01000000) != 0
      ks__has_field_combat_destroy_distance: # Field №7
        value: (ks__bit_field & 0b10000000) != 0
      # Base class fields
      is_consume_material:
        value: ks__base.is_consume_material
      cd_group:
        value: ks__base.cd_group
      tags:
        value: ks__base.tags
      business_type:
        value: ks__base.business_type
  config_widget_toy_open_page_register:
    seq: []
    instances: {}
  config_widget_toy_open_page:
    seq:
      - id: ks__base
        type: config_base_widget_toy
      - id: ks__bit_field
        type: u1
      - id: page_name
        type: aux_types::string
        if: ks__has_field_page_name
    instances:
      ks__has_field_page_name: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      is_consume_material:
        value: ks__base.is_consume_material
      cd_group:
        value: ks__base.cd_group
      tags:
        value: ks__base.tags
      business_type:
        value: ks__base.business_type
  config_widget_toy_water_sprite_register:
    seq: []
    instances: {}
  config_widget_toy_water_sprite:
    seq:
      - id: ks__base
        type: config_base_widget_toy
      - id: ks__bit_field
        type: u1
      - id: ability_group_name
        type: aux_types::string
        if: ks__has_field_ability_group_name
      - id: ability_trigger_name
        type: aux_types::string
        if: ks__has_field_ability_trigger_name
      - id: ability_trigger_name_second
        type: aux_types::string
        if: ks__has_field_ability_trigger_name_second
    instances:
      ks__has_field_ability_group_name: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_ability_trigger_name: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_ability_trigger_name_second: # Field №2
        value: (ks__bit_field & 0b100) != 0
      # Base class fields
      is_consume_material:
        value: ks__base.is_consume_material
      cd_group:
        value: ks__base.cd_group
      tags:
        value: ks__base.tags
      business_type:
        value: ks__base.business_type
  config_widget_toy_take_photo_register:
    seq: []
    instances: {}
  config_widget_toy_take_photo:
    seq:
      - id: ks__base
        type: config_base_widget_toy
      - id: ks__bit_field
        type: u1
      - id: has_camera_effect
        type: u1
        if: ks__has_field_has_camera_effect
      - id: camera_ui_effect
        type: aux_types::string
        if: ks__has_field_camera_ui_effect
      - id: camera_screen_effect
        type: aux_types::string
        if: ks__has_field_camera_screen_effect
      - id: main_camera_effect
        type: aux_types::string
        if: ks__has_field_main_camera_effect
    instances:
      ks__has_field_has_camera_effect: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_camera_ui_effect: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_camera_screen_effect: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_main_camera_effect: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      is_consume_material:
        value: ks__base.is_consume_material
      cd_group:
        value: ks__base.cd_group
      tags:
        value: ks__base.tags
      business_type:
        value: ks__base.business_type
  config_widget_toy_feather_register:
    seq: []
    instances: {}
  config_widget_toy_feather:
    seq:
      - id: ks__base
        type: config_base_widget_toy
      - id: ks__bit_field
        type: aux_types::vlq_base128_le_u
      - id: show_on_radar
        type: u1
        if: ks__has_field_show_on_radar
      - id: ui_camera_effect
        type: aux_types::string
        if: ks__has_field_ui_camera_effect
      - id: main_camera_effect
        type: aux_types::string
        if: ks__has_field_main_camera_effect
      - id: show_hint
        type: u1
        if: ks__has_field_show_hint
      - id: show_hint_distance
        type: f4
        if: ks__has_field_show_hint_distance
      - id: show_hint_entity_id_list
        type: ks__array_of__aux_types__vlq_base128_le_u__length_u
        if: ks__has_field_show_hint_entity_id_list
      - id: ability_name
        type: aux_types::string
        if: ks__has_field_ability_name
      - id: exclude_suite_index
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_exclude_suite_index
      - id: ability_group_name
        type: aux_types::string
        if: ks__has_field_ability_group_name
      - id: is_team
        type: u1
        if: ks__has_field_is_team
    instances:
      ks__has_field_show_on_radar: # Field №0
        value: (ks__bit_field.value & 0b0000000001) != 0
      ks__has_field_ui_camera_effect: # Field №1
        value: (ks__bit_field.value & 0b0000000010) != 0
      ks__has_field_main_camera_effect: # Field №2
        value: (ks__bit_field.value & 0b0000000100) != 0
      ks__has_field_show_hint: # Field №3
        value: (ks__bit_field.value & 0b0000001000) != 0
      ks__has_field_show_hint_distance: # Field №4
        value: (ks__bit_field.value & 0b0000010000) != 0
      ks__has_field_show_hint_entity_id_list: # Field №5
        value: (ks__bit_field.value & 0b0000100000) != 0
      ks__has_field_ability_name: # Field №6
        value: (ks__bit_field.value & 0b0001000000) != 0
      ks__has_field_exclude_suite_index: # Field №7
        value: (ks__bit_field.value & 0b0010000000) != 0
      ks__has_field_ability_group_name: # Field №8
        value: (ks__bit_field.value & 0b0100000000) != 0
      ks__has_field_is_team: # Field №9
        value: (ks__bit_field.value & 0b1000000000) != 0
      # Base class fields
      is_consume_material:
        value: ks__base.is_consume_material
      cd_group:
        value: ks__base.cd_group
      tags:
        value: ks__base.tags
      business_type:
        value: ks__base.business_type
  ks__enum__create_sever_gadget_op_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: create_sever_gadget_op_type
  create_sever_gadget_op_type_comparer:
    seq: []
    instances: {}
  config_widget_toy_create_gadget_base_register:
    seq: []
    instances: {}
  config_widget_toy_create_gadget_base:
    seq:
      - id: ks__base
        type: config_base_widget_toy
      - id: ks__bit_field
        type: u1
      - id: gadget_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_gadget_id
      - id: is_set_camera
        type: u1
        if: ks__has_field_is_set_camera
      - id: set_camera_angle
        type: f4
        if: ks__has_field_set_camera_angle
      - id: do_bag_type
        type: ks__enum__create_sever_gadget_op_type
        if: ks__has_field_do_bag_type
    instances:
      ks__has_field_gadget_id: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_is_set_camera: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_set_camera_angle: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_do_bag_type: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      is_consume_material:
        value: ks__base.is_consume_material
      cd_group:
        value: ks__base.cd_group
      tags:
        value: ks__base.tags
      business_type:
        value: ks__base.business_type
  config_widget_toy_adepti_abode_register:
    seq: []
    instances: {}
  config_widget_toy_adepti_abode:
    seq:
      - id: ks__base
        type: config_widget_toy_create_gadget_base
      - id: ks__bit_field
        type: u1
      - id: ability_name
        type: aux_types::string
        if: ks__has_field_ability_name
      - id: effect_last_time
        type: f4
        if: ks__has_field_effect_last_time
    instances:
      ks__has_field_ability_name: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_effect_last_time: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      gadget_id:
        value: ks__base.gadget_id
      is_set_camera:
        value: ks__base.is_set_camera
      set_camera_angle:
        value: ks__base.set_camera_angle
      do_bag_type:
        value: ks__base.do_bag_type
      is_consume_material:
        value: ks__base.is_consume_material
      cd_group:
        value: ks__base.cd_group
      tags:
        value: ks__base.tags
      business_type:
        value: ks__base.business_type
  config_widget_add_buff_register:
    seq: []
    instances: {}
  config_widget_add_buff:
    seq:
      - id: ks__base
        type: config_base_widget_toy
      - id: ks__bit_field
        type: u1
      - id: buff_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_buff_id
    instances:
      ks__has_field_buff_id: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      is_consume_material:
        value: ks__base.is_consume_material
      cd_group:
        value: ks__base.cd_group
      tags:
        value: ks__base.tags
      business_type:
        value: ks__base.business_type
  config_widget_toy_camera_register:
    seq: []
    instances: {}
  config_widget_toy_camera:
    seq:
      - id: ks__base
        type: config_base_widget_toy
      - id: ks__bit_field
        type: u1
      - id: camera_id
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_camera_id
    instances:
      ks__has_field_camera_id: # Field №0
        value: (ks__bit_field & 0b1) != 0
      # Base class fields
      is_consume_material:
        value: ks__base.is_consume_material
      cd_group:
        value: ks__base.cd_group
      tags:
        value: ks__base.tags
      business_type:
        value: ks__base.business_type
  config_widget_toy_ability_group_generator_register:
    seq: []
    instances: {}
  config_widget_toy_ability_group_generator:
    seq:
      - id: ks__base
        type: config_base_widget_toy
      - id: ks__bit_field
        type: u1
      - id: ability_group_name
        type: aux_types::string
        if: ks__has_field_ability_group_name
      - id: is_team
        type: u1
        if: ks__has_field_is_team
    instances:
      ks__has_field_ability_group_name: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_is_team: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      is_consume_material:
        value: ks__base.is_consume_material
      cd_group:
        value: ks__base.cd_group
      tags:
        value: ks__base.tags
      business_type:
        value: ks__base.business_type
  config_widget_use_attach_ability_group_register:
    seq: []
    instances: {}
  ks__array_of__ks__enum__widget_skill_replace_type__length_u:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: data
        type: ks__enum__widget_skill_replace_type
        repeat: expr
        repeat-expr: length.value
  config_widget_use_attach_ability_group:
    seq:
      - id: ks__base
        type: config_base_widget_toy
      - id: ks__bit_field
        type: u1
      - id: ability_group_name
        type: aux_types::string
        if: ks__has_field_ability_group_name
      - id: ability_group_name_second
        type: aux_types::string
        if: ks__has_field_ability_group_name_second
      - id: replace_skill_hint_list
        type: ks__array_of__ks__enum__widget_skill_replace_type__length_u
        if: ks__has_field_replace_skill_hint_list
      - id: is_update_cd_after_ability_trigger
        type: u1
        if: ks__has_field_is_update_cd_after_ability_trigger
    instances:
      ks__has_field_ability_group_name: # Field №0
        value: (ks__bit_field & 0b0001) != 0
      ks__has_field_ability_group_name_second: # Field №1
        value: (ks__bit_field & 0b0010) != 0
      ks__has_field_replace_skill_hint_list: # Field №2
        value: (ks__bit_field & 0b0100) != 0
      ks__has_field_is_update_cd_after_ability_trigger: # Field №3
        value: (ks__bit_field & 0b1000) != 0
      # Base class fields
      is_consume_material:
        value: ks__base.is_consume_material
      cd_group:
        value: ks__base.cd_group
      tags:
        value: ks__base.tags
      business_type:
        value: ks__base.business_type
  config_widget_use_attach_ability_trigger_register:
    seq: []
    instances: {}
  config_widget_use_attach_ability_trigger:
    seq:
      - id: ks__base
        type: config_base_widget_toy
      - id: ks__bit_field
        type: u1
      - id: ability_group_name
        type: aux_types::string
        if: ks__has_field_ability_group_name
      - id: trigger_ability_name
        type: aux_types::string
        if: ks__has_field_trigger_ability_name
    instances:
      ks__has_field_ability_group_name: # Field №0
        value: (ks__bit_field & 0b01) != 0
      ks__has_field_trigger_ability_name: # Field №1
        value: (ks__bit_field & 0b10) != 0
      # Base class fields
      is_consume_material:
        value: ks__base.is_consume_material
      cd_group:
        value: ks__base.cd_group
      tags:
        value: ks__base.tags
      business_type:
        value: ks__base.business_type
  config_widget_dig_scanner_register:
    seq: []
    instances: {}
  config_widget_dig_scanner:
    seq:
      - id: ks__base
        type: config_widget_toy_create_gadget_base
    instances:
      # Base class fields
      gadget_id:
        value: ks__base.gadget_id
      is_set_camera:
        value: ks__base.is_set_camera
      set_camera_angle:
        value: ks__base.set_camera_angle
      do_bag_type:
        value: ks__base.do_bag_type
      is_consume_material:
        value: ks__base.is_consume_material
      cd_group:
        value: ks__base.cd_group
      tags:
        value: ks__base.tags
      business_type:
        value: ks__base.business_type
  ks__kvp_of_dict__aux_types__vlq_base128_le_u_config_widget_gadget:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_u
      - id: value
        type: config_widget_gadget
  ks__dict_of__aux_types__vlq_base128_le_u_config_widget_gadget:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_u_config_widget_gadget
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__aux_types__vlq_base128_le_u_config_widget_cd_group:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_u
      - id: value
        type: config_widget_cd_group
  ks__dict_of__aux_types__vlq_base128_le_u_config_widget_cd_group:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_u_config_widget_cd_group
        repeat: expr
        repeat-expr: length.value
  ks__kvp_of_dict__aux_types__vlq_base128_le_u_ks__disp__config_base_widget_toy:
    seq:
      - id: key
        type: aux_types::vlq_base128_le_u
      - id: value
        type: ks__disp__config_base_widget_toy
  ks__dict_of__aux_types__vlq_base128_le_u_ks__disp__config_base_widget_toy:
    seq:
      - id: length
        type: aux_types::vlq_base128_le_u
      - id: items
        type: ks__kvp_of_dict__aux_types__vlq_base128_le_u_ks__disp__config_base_widget_toy
        repeat: expr
        repeat-expr: length.value
  config_main_widget_toy:
    seq:
      - id: ks__bit_field
        type: u1
      - id: gadget_config_map
        type: ks__dict_of__aux_types__vlq_base128_le_u_config_widget_gadget
        if: ks__has_field_gadget_config_map
      - id: cd_group_config_map
        type: ks__dict_of__aux_types__vlq_base128_le_u_config_widget_cd_group
        if: ks__has_field_cd_group_config_map
      - id: widget_config_map
        type: ks__dict_of__aux_types__vlq_base128_le_u_ks__disp__config_base_widget_toy
        if: ks__has_field_widget_config_map
    instances:
      ks__has_field_gadget_config_map: # Field №0
        value: (ks__bit_field & 0b001) != 0
      ks__has_field_cd_group_config_map: # Field №1
        value: (ks__bit_field & 0b010) != 0
      ks__has_field_widget_config_map: # Field №2
        value: (ks__bit_field & 0b100) != 0
  ability_common_local_id:
    seq: []
    instances: {}
  create_item:
    seq:
      - id: ks__base
        type: create_entity
    instances:
      # Base class fields
      owner_is_target:
        value: ks__base.owner_is_target
      owner_is:
        value: ks__base.owner_is
      prop_owner_is:
        value: ks__base.prop_owner_is
      life_by_owner_is_alive:
        value: ks__base.life_by_owner_is_alive
      born:
        value: ks__base.born
      check_ground:
        value: ks__base.check_ground
      sight_group_with_owner:
        value: ks__base.sight_group_with_owner
      token:
        value: ks__base.token
      target:
        value: ks__base.target
      other_targets:
        value: ks__base.other_targets
      do_off_stage:
        value: ks__base.do_off_stage
      do_after_die:
        value: ks__base.do_after_die
      can_be_handled_on_recover:
        value: ks__base.can_be_handled_on_recover
      mute_remote_action:
        value: ks__base.mute_remote_action
      predicates:
        value: ks__base.predicates
      predicates_foreach:
        value: ks__base.predicates_foreach
  ks__enum__param_method:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: param_method
  mixin_effect:
    seq: []
    instances: {}
  mixin_copy_parent_modifiers_option:
    seq: []
    instances: {}
  ai_bits_flag:
    seq: []
    instances: {}
  config_animator_event_pattern_full_inspector:
    seq: []
    instances: {}
  animator_event_pattern_full_inspector:
    seq: []
    instances: {}
  audio_mutual_exclusion_item:
    seq: []
    instances: {}
  voice_output_method:
    seq: []
    instances: {}
  voice_output_method_equality_comparer:
    seq: []
    instances: {}
  music_game_param_equality_comparer:
    seq: []
    instances: {}
  config_aux_object_registry:
    seq: []
    instances: {}
  aux_object_entry:
    seq: []
    instances: {}
  config_aux_object_registry_full_inspector:
    seq: []
    instances: {}
  aux_object_entry_full_inspector:
    seq: []
    instances: {}
  config_override_group:
    seq: []
    instances: {}
  config_override_group_converter:
    seq: []
    instances: {}
  trail_data:
    seq: []
    instances: {}
  config_trail_data:
    seq: []
    instances: {}
  native_allocator_ex:
    seq: []
    instances: {}
  native_array:
    seq: []
    instances: {}
  native_dynamic_allocator:
    seq: []
    instances: {}
  native_helper:
    seq: []
    instances: {}
  native_static_allocator:
    seq: []
    instances: {}
  native_tool:
    seq: []
    instances: {}
  config_dialog_voice_segment:
    seq: []
    instances: {}
  voice_segment_item:
    seq: []
    instances: {}
  dialog_voice_segment_data:
    seq: []
    instances: {}
  config_face_animation:
    seq: []
    instances: {}
  face_animation_item:
    seq: []
    instances: {}
  face_animation_frame_block:
    seq: []
    instances: {}
  config_context_pattern:
    seq: []
    instances: {}
  ks__enum__view_cache_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: view_cache_type
  ks__enum__dont_destroy_on_load_type:
    seq:
      - id: data
        type: aux_types::vlq_base128_le_s
    instances:
      value:
        value: data.value
        enum: dont_destroy_on_load_type
  context_pattern:
    seq: []
    instances: {}
  sectr_stream_object_serialize:
    seq:
      - id: ks__bit_field
        type: u1
      - id: type
        type: ks__enum__sectr_stream_object_type
        if: ks__has_field_type
      - id: game_object_path_hash
        type: aux_types::vlq_base128_le_u
        if: ks__has_field_game_object_path_hash
      - id: obj_pattern_name
        type: aux_types::string
        if: ks__has_field_obj_pattern_name
      - id: magitude
        type: f4
        if: ks__has_field_magitude
      - id: position
        type: vector
        if: ks__has_field_position
      - id: rotation
        type: vector
        if: ks__has_field_rotation
      - id: scale
        type: vector
        if: ks__has_field_scale
    instances:
      ks__has_field_type: # Field №0
        value: (ks__bit_field & 0b0000001) != 0
      ks__has_field_game_object_path_hash: # Field №1
        value: (ks__bit_field & 0b0000010) != 0
      ks__has_field_obj_pattern_name: # Field №2
        value: (ks__bit_field & 0b0000100) != 0
      ks__has_field_magitude: # Field №3
        value: (ks__bit_field & 0b0001000) != 0
      ks__has_field_position: # Field №4
        value: (ks__bit_field & 0b0010000) != 0
      ks__has_field_rotation: # Field №5
        value: (ks__bit_field & 0b0100000) != 0
      ks__has_field_scale: # Field №6
        value: (ks__bit_field & 0b1000000) != 0
  text_map:
    seq: []
    instances: {}
  text_map_config_loader:
    seq: []
    instances: {}
enums:
  luna_rite_region_type:
    0: luna_rite_region_type_invalid
    1: luna_rite_region_type_liyue
    2: luna_rite_region_type_mengde
    3: luna_rite_region_type_dragonspine
  avatar_use_type:
    0: avatar_test
    1: avatar_sync_test
    2: avatar_formal
    3: avatar_abandon
  body_type:
    0: body_none
    1: body_boy
    2: body_girl
    3: body_lady
    4: body_male
    5: body_loli
  quality_type:
    0: quality_none
    1: quality_white
    2: quality_green
    3: quality_blue
    4: quality_purple
    5: quality_orange
    105: quality_orange_sp
  weapon_type:
    0: weapon_none
    1: weapon_sword_one_hand
    2: weapon_crossbow
    3: weapon_staff
    4: weapon_double_dagger
    5: weapon_katana
    6: weapon_shuriken
    7: weapon_stick
    8: weapon_spear
    9: weapon_shield_small
    10: weapon_catalyst
    11: weapon_claymore
    12: weapon_bow
    13: weapon_pole
  avatar_identity_type:
    0: avatar_identity_master
    1: avatar_identity_normal
  fight_prop_type:
    0: fight_prop_none
    1: fight_prop_base_hp
    2: fight_prop_hp
    3: fight_prop_hp_percent
    4: fight_prop_base_attack
    5: fight_prop_attack
    6: fight_prop_attack_percent
    7: fight_prop_base_defense
    8: fight_prop_defense
    9: fight_prop_defense_percent
    10: fight_prop_base_speed
    11: fight_prop_speed_percent
    12: fight_prop_hp_mp_percent
    13: fight_prop_attack_mp_percent
    20: fight_prop_critical
    21: fight_prop_anti_critical
    22: fight_prop_critical_hurt
    23: fight_prop_charge_efficiency
    24: fight_prop_add_hurt
    25: fight_prop_sub_hurt
    26: fight_prop_heal_add
    27: fight_prop_healed_add
    28: fight_prop_element_mastery
    29: fight_prop_physical_sub_hurt
    30: fight_prop_physical_add_hurt
    31: fight_prop_defence_ignore_ratio
    32: fight_prop_defence_ignore_delta
    40: fight_prop_fire_add_hurt
    41: fight_prop_elec_add_hurt
    42: fight_prop_water_add_hurt
    43: fight_prop_grass_add_hurt
    44: fight_prop_wind_add_hurt
    45: fight_prop_rock_add_hurt
    46: fight_prop_ice_add_hurt
    47: fight_prop_hit_head_add_hurt
    50: fight_prop_fire_sub_hurt
    51: fight_prop_elec_sub_hurt
    52: fight_prop_water_sub_hurt
    53: fight_prop_grass_sub_hurt
    54: fight_prop_wind_sub_hurt
    55: fight_prop_rock_sub_hurt
    56: fight_prop_ice_sub_hurt
    60: fight_prop_effect_hit
    61: fight_prop_effect_resist
    62: fight_prop_freeze_resist
    63: fight_prop_torpor_resist
    64: fight_prop_dizzy_resist
    65: fight_prop_freeze_shorten
    66: fight_prop_torpor_shorten
    67: fight_prop_dizzy_shorten
    70: fight_prop_max_fire_energy
    71: fight_prop_max_elec_energy
    72: fight_prop_max_water_energy
    73: fight_prop_max_grass_energy
    74: fight_prop_max_wind_energy
    75: fight_prop_max_ice_energy
    76: fight_prop_max_rock_energy
    80: fight_prop_skill_cd_minus_ratio
    81: fight_prop_shield_cost_minus_ratio
    1000: fight_prop_cur_fire_energy
    1001: fight_prop_cur_elec_energy
    1002: fight_prop_cur_water_energy
    1003: fight_prop_cur_grass_energy
    1004: fight_prop_cur_wind_energy
    1005: fight_prop_cur_ice_energy
    1006: fight_prop_cur_rock_energy
    1010: fight_prop_cur_hp
    2000: fight_prop_max_hp
    2001: fight_prop_cur_attack
    2002: fight_prop_cur_defense
    2003: fight_prop_cur_speed
    3000: fight_prop_nonextra_attack
    3001: fight_prop_nonextra_defense
    3002: fight_prop_nonextra_critical
    3003: fight_prop_nonextra_anti_critical
    3004: fight_prop_nonextra_critical_hurt
    3005: fight_prop_nonextra_charge_efficiency
    3006: fight_prop_nonextra_element_mastery
    3007: fight_prop_nonextra_physical_sub_hurt
    3008: fight_prop_nonextra_fire_add_hurt
    3009: fight_prop_nonextra_elec_add_hurt
    3010: fight_prop_nonextra_water_add_hurt
    3011: fight_prop_nonextra_grass_add_hurt
    3012: fight_prop_nonextra_wind_add_hurt
    3013: fight_prop_nonextra_rock_add_hurt
    3014: fight_prop_nonextra_ice_add_hurt
    3015: fight_prop_nonextra_fire_sub_hurt
    3016: fight_prop_nonextra_elec_sub_hurt
    3017: fight_prop_nonextra_water_sub_hurt
    3018: fight_prop_nonextra_grass_sub_hurt
    3019: fight_prop_nonextra_wind_sub_hurt
    3020: fight_prop_nonextra_rock_sub_hurt
    3021: fight_prop_nonextra_ice_sub_hurt
    3022: fight_prop_nonextra_skill_cd_minus_ratio
    3023: fight_prop_nonextra_shield_cost_minus_ratio
    3024: fight_prop_nonextra_physical_add_hurt
  grow_curve_type:
    0: grow_curve_none
    1: grow_curve_hp
    2: grow_curve_attack
    3: grow_curve_stamina
    4: grow_curve_strike
    5: grow_curve_anti_strike
    6: grow_curve_anti_strike1
    7: grow_curve_anti_strike2
    8: grow_curve_anti_strike3
    9: grow_curve_strike_hurt
    10: grow_curve_element
    11: grow_curve_kill_exp
    12: grow_curve_defense
    13: grow_curve_attack_bomb
    14: grow_curve_hp_littlemonster
    15: grow_curve_element_mastery
    16: grow_curve_progression
    17: grow_curve_defending
    18: grow_curve_mhp
    19: grow_curve_matk
    20: grow_curve_toweratk
    21: grow_curve_hp_s5
    22: grow_curve_hp_s4
    23: grow_curve_hp_2
    31: grow_curve_attack_s5
    32: grow_curve_attack_s4
    33: grow_curve_attack_s3
    34: grow_curve_strike_s5
    41: grow_curve_defense_s5
    42: grow_curve_defense_s4
    1101: grow_curve_attack_101
    1102: grow_curve_attack_102
    1103: grow_curve_attack_103
    1104: grow_curve_attack_104
    1105: grow_curve_attack_105
    1201: grow_curve_attack_201
    1202: grow_curve_attack_202
    1203: grow_curve_attack_203
    1204: grow_curve_attack_204
    1205: grow_curve_attack_205
    1301: grow_curve_attack_301
    1302: grow_curve_attack_302
    1303: grow_curve_attack_303
    1304: grow_curve_attack_304
    1305: grow_curve_attack_305
    2101: grow_curve_critical_101
    2102: grow_curve_critical_102
    2103: grow_curve_critical_103
    2104: grow_curve_critical_104
    2105: grow_curve_critical_105
    2201: grow_curve_critical_201
    2202: grow_curve_critical_202
    2203: grow_curve_critical_203
    2204: grow_curve_critical_204
    2205: grow_curve_critical_205
    2301: grow_curve_critical_301
    2302: grow_curve_critical_302
    2303: grow_curve_critical_303
    2304: grow_curve_critical_304
    2305: grow_curve_critical_305
  talent_filter_cond:
    0: talent_filter_none
    1: talent_filter_fire_avatar
    2: talent_filter_elec_avatar
    3: talent_filter_water_avatar
    4: talent_filter_grass_avatar
    5: talent_filter_wind_avatar
    6: talent_filter_ice_avatar
    7: talent_filter_rock_avatar
  proud_life_effect_type:
    0: proud_effect_none
    1: proud_effect_combine_return_material
    2: proud_effect_combine_multiply_output
    3: proud_effect_combine_extra_output
    4: proud_effect_combine_add_extra_prob
    101: proud_effect_cook_extra_proficiency
    102: proud_effect_cook_widen_judge_area
    103: proud_effect_cook_add_bonus_prob
    104: proud_effect_cook_perfect_multi_output
    105: proud_effect_cook_prob_multi_output
    106: proud_effect_cook_can_not_cook
    203: proud_effect_forge_reduce_time
    204: proud_effect_forge_add_extra_prob
    205: proud_effect_forge_return_material
    301: proud_effect_expedition_shorten_time
    401: proud_effect_furniture_make_return_material
    501: proud_effect_weapon_promote_reduce_scoin
    601: proud_effect_fishing_extra_output
  const_value_type:
    1: const_value_game_time_per_day
    2: const_value_init_game_time
    3: const_value_init_team_avatar
    4: const_value_change_avatar_cd
    5: const_value_avatar_hp_recover
    6: const_value_dash_cost_stamina
    7: const_value_climb_cost_stamina
    8: const_value_climb_jump_cost_stamina
    9: const_value_swim_cost_stamina
    10: const_value_swim_dash_cost_stamina
    11: const_value_fly_cost_stamina
    12: const_value_fall_hurt
    13: const_value_pack_max_weight
    14: const_value_depot_max_weight
    15: const_value_kill_monster_exp
    16: const_value_player_world_scene_id
    17: const_value_player_pickup_range
    18: const_value_item_stack_max
    19: const_value_avatar_die_max_time
    20: const_value_defense_resist_ratio
    21: const_value_critical_limit
    22: const_value_block_refresh_param
    23: const_value_dungeon_keep_time
    24: const_value_adsorbate_pickup_range
    25: const_value_adsorbate_stay_time
    26: const_value_element_overload_max
    27: const_value_element_overload_reduce
    28: const_value_purge_decrement
    29: const_value_water_fire_decrate
    30: const_value_ice_fire_decrate
    31: const_value_effect_resist_level_fix
    32: const_value_dungeon_revive_wait_time
    33: const_value_food_weapon_exp_discount_param
    34: const_value_food_reliquary_exp_discount_param
    35: const_value_damage_level_fix
    36: const_value_dungeon_cancel_wait_time
    37: const_value_endure_level_fix
    38: const_value_secret_chest_day_limit
    39: const_value_hurt_revive_hp_percent
    40: const_value_no_hurt_die_sub_hp_percent
    41: const_value_spring_recover_time
    42: const_value_spring_recover_param
    43: const_value_spring_auto_recover_delay
    44: const_value_back_avatar_auto_recover_param
    45: const_value_stamina_limit
    46: const_value_bored_limit
    47: const_value_bored_create_monster
    48: const_value_skill_cd_min_preserve_time
    49: const_value_talent_point_limit
    50: const_value_elementreaction_arealeveldelta_limit
    51: const_value_bored_enable_quest_id
    52: const_value_extra_stamina_limit
    53: const_value_modifier_min_preserve_time
    54: const_value_nickname_max_length
    55: const_value_area_check_cd
    56: const_value_portal_transport_time
    58: const_value_env_animal_refresh
    59: const_value_env_animal_group
    61: const_value_bush_drop
    62: const_value_cook_auto_quality
    63: const_value_kill_drop_exp_config
    64: const_value_avatar_max_promote_level
    65: const_value_violin_list
    66: const_value_crouch_roll_cost_stamina
    67: const_value_stamina_recover_wait_time
    68: const_value_fireworm_escape_parma
    69: const_value_timeout_second_parma
    70: const_value_timeout_cound_parma
    71: const_value_dash_bs_cost_stamina
    72: const_value_mail_max_num
    73: const_value_record_monster_dis
    74: const_value_record_monster_angle
    75: const_value_compound_queue_max_count
    76: const_value_weapon_auto_hide_time
    77: const_value_weapon_levelup_cost
    78: const_value_reliquary_levelup_cost
    79: const_value_climb_min_stamina
    80: const_value_element_show_distance
    81: const_value_walk_to_swim_add_stamina
    82: const_value_questguide_show_distance
    83: const_value_limit_quality_ondrop
    84: const_value_steer_min_angle
    85: const_value_map_warning_distance
    86: const_value_map_warning_interval
    87: const_value_area_level_warning_thr
    88: const_value_superconductor_durability
    89: const_value_swirl_param
    91: const_value_is_mp_open
    92: const_value_crash_param
    93: const_value_element_mastery_param
    94: const_value_daily_task_param
    95: const_value_next_day
    96: const_value_rand_task_refresh_param
    97: const_value_rand_task_pos_param
    98: const_value_energy_rechange_ratio
    99: const_value_default_world_id
    100: const_value_rand_task_qest_param
    101: const_value_rand_task_comp_param
    102: const_value_expedition_init_limit
    103: const_value_world_level_formula
    104: const_value_swim_dash_cost_stamina_per_second
    105: const_value_rand_task_point_param
    106: const_value_weather_interval
    107: const_value_dungeon_daily_item
    108: const_value_dungeon_weekly_item
    109: const_value_avatar_combat_force_param
    110: const_value_player_combat_force_param
    111: const_value_core_proud_skill_max_level
    112: const_value_inherent_proud_skill_max_level
    113: const_value_active_skill_max_level
    114: const_value_cook_qte_perfect_range_value
    115: const_value_teamname_max_length
    116: const_value_dungeon_oepn_quest
    117: const_value_mp_chat_param
    118: const_value_climb_cost_stamina_formula
    119: const_value_climb_jump_cost_stamina_formula
    120: const_value_dungeon_candidate_invite_vaild_time_sec
    121: const_value_set_struggle_level_difference_threshold
    122: const_value_dungeon_invite_need_trans_distance
    123: const_value_player_level_reward_unlock_preview_limit
    124: const_value_drop_subfield_param
    125: const_value_npc_conflict_distance
    126: const_value_sea_lamp_activity
    127: const_value_activity
    128: const_value_avatar_upgrade_cost_ratio
    129: const_value_sea_lamp_pray_url
    130: const_value_sea_lamp_activity2
    131: const_value_daily_task_param2
    132: const_value_sea_lamp_quest
    133: const_value_daily_task_open_custom_pool
    134: const_value_resin_param
    136: const_value_resin_buying_cost
    138: const_value_tower_daily_mail_id
    139: const_value_tower_monthly_mail_id
    140: const_value_tower_overflow_first_pass
    141: const_value_limit_region_path
    142: const_value_sea_lamp_activity3
    144: const_value_default_material_gadget_id
    145: const_value_distance_check
    146: const_value_proficient_player_child_quest
    147: const_value_gacha_guarantee_start_coefficient
    148: const_value_gacha_guarantee_increase_coefficient
    149: const_value_gacha_dynamic_up_base
    150: const_value_quest_trial_avatar_combat_force_convert_ratio
    151: const_value_output_limit_switch
    152: const_value_output_control_switch
    153: const_value_fromback_limittime
    154: const_value_fromback_limitratio
    155: const_value_reconnect_delay_base
    156: const_value_fromback_reconnect_duration
    157: const_value_force_reconnect_duration
    158: const_value_social_config
    159: const_value_battle_pass_mission_refresh
    160: const_value_product_param
    161: const_value_satiation_param
    162: const_value_mall_limittimept_showtime
    163: const_value_gagdet_creation_limit_drop_tag
    164: const_value_loading_light_bg_period
    165: const_value_dungeon_level_limit
    166: const_value_move_speed_check_param
    167: const_value_disconnecthint_timeout_seconds
    168: const_value_bag_overflow_mail_id
    169: const_value_activity_crucible_quest_id
    170: const_value_mp_play_config
    172: const_value_rebate_mail_id
    173: const_value_crucible_config
    174: const_value_default_flycloak_config
    175: const_value_default_name_card_id
    176: const_value_material_item_limit
    177: const_value_reliquary_item_limit
    178: const_value_weapon_item_limit
    180: const_value_battlepass_video_config
    181: const_value_material_destroy_return_material_limit
    182: const_value_battle_pass_item_use_config
    183: const_value_activity_newbee_id
    184: const_value_personal_line_config
    185: const_value_rtt_low
    186: const_value_rtt_mid
    187: const_value_rtt_high
    188: const_value_rtt_refresh_time
    189: const_value_speech_bubble_default_duration
    190: const_value_speech_bubble_extra_duration
    191: const_value_forge_point_day_limit
    192: const_value_first_share_reward
    193: const_value_point_card_recharge
    194: const_value_explore
    195: const_value_map_mark_max_length
    196: const_value_guide_rating_chapterid
    197: const_value_ps4_trophy_switch
    198: const_value_aster_middle_recover
    199: const_value_aster_middle_npc_talk_id
    200: const_value_hunting_revise_level
    201: const_value_reminder_interrupt_show_delay
    202: const_value_upgrade_weapon_return_material_id
    203: const_value_city_reputation_param
    204: const_value_report_param
    205: const_value_dragon_spine_config
    206: const_value_dungeon_restart_invite_vaild_time_sec
    207: const_value_reunion_param
    208: const_value_tower_reset
    209: const_value_snow_mountain_routine
    210: const_value_element_trial_mark_show_level_limit
    211: const_value_anti_harassment_config
    212: const_value_dragon_spine_mp_play_config
    213: const_value_die_invincible_config
    214: const_value_grass_tile_element_reaction_pos_offset
    215: const_value_ask_add_friend_frequency_config
    216: const_value_blessing_config
    217: const_value_miracle_ring_cd
    218: const_value_miracle_ring_drop_count
    219: const_value_miracle_ring_deliver_value
    220: const_value_miracle_ring_random_drop_prob
    221: const_value_miracle_ring_item_add_pack
    222: const_value_mp_reward_reserved_time_config
    223: const_value_chat_param
    224: const_value_activity_expedition_daily_refresh_path_limit
    225: const_value_activity_expedition_daily_count_limit
    226: const_value_activity_expedition_super_elem_coef
    227: const_value_activity_monster_banner_drake_primo_rock
    228: const_value_shop_output_switch
    229: const_value_mechanicus_rotation_param
    230: const_value_mechanicus_card_param
    231: const_value_force_drag_back_param
    232: const_value_activity_expedition_content_duration
    233: const_value_activity_expedition_challenge_hint_cd
    234: const_value_muip_mail_reward_limit
    235: const_value_arena_challenge_reward_worktop
    236: const_value_activity_water_sprite_para
    237: const_value_world_level_adjust
    238: const_value_nechanicus_open_questid
    239: const_value_activity_water_sprite_para_secondpart
    240: const_value_coop_questid_interval
    241: const_value_hit_tree_drop_param
    243: const_value_hit_tree_drop_prob
    244: const_value_default_home_world_id
    245: const_value_home_speechbubble_default_delay
    246: const_value_home_speechbubble_default_interval
    247: const_value_home_speechbubble_priority
    248: const_value_home_greet_dist_min
    249: const_value_home_greet_dist_max
    250: const_value_home_greet_angle_max
    251: const_value_home_greet_turn_angle
    252: const_value_home_greet_turn_duration
    253: const_value_multi_play_fetter_exp_ratio
    254: const_value_room_minimap_default_scale
    255: const_value_home_furniture_type_limit
    256: const_value_home_furniture_arrangement_cost_level
    257: const_value_home_lego_height
    258: const_value_home_accelerate_param
    259: const_value_home_weekend_djinn_param
    260: const_value_activity_effigy_ice
    261: const_value_activity_homeworld
    262: const_value_homeworld_tutrial_quest
    263: const_value_channeller_slab_single_buff_energy_limit
    264: const_value_channeller_slab_mp_buff_energy_limit
    265: const_value_home_resource_produce_interval
    266: const_value_weekly_boss_resin_discount_param
    267: const_value_bush_drop_cacha_num
    268: const_value_general_match
    269: const_value_home_djinn_param
    270: const_value_furniture_item_limit
    271: const_value_summer_time_scene_id
    272: const_value_can_not_destroy_material_type_list
    273: const_value_dangerzone_get_lost_countdown
    274: const_value_skiff_sprint_cost_stamina
    275: const_value_skiff_dash_cost_stamina
    276: const_value_signal_active_distance
    277: const_value_default_costume_icon
    278: const_value_hero_course_transfer_config
    279: const_value_vehicle_config
    280: const_value_home_greet_leave_delay
    281: const_value_chess_params
    282: const_value_genshin_release_time
    283: const_value_init_home_time
    300: const_value_home_cd_limit
    301: const_value_home_furniture_num_limit
    302: const_value_home_resource_base_value
    303: const_value_home_prior_check_time_range
    304: const_value_home_plant_box
    350: const_value_home_furniture_arrangement_cost_level_hall
    351: const_value_home_furniture_arrangement_cost_level_room
    352: const_value_home_comfort_modifer
    353: const_value_home_suite_furniture_id
    400: const_value_battlepass_purchase_about_to_close_threshold
    401: const_value_battlepass_purchase_close_ahead_minutes
    410: const_value_activity_daoqi_advertisement
    411: const_value_map_mark_param
    412: const_value_gather_savetype_to_gatherid
    413: const_value_home_npc_event_transfer_time
    414: const_value_activity_effigy_fire
    415: const_value_activity_perpetual
    416: const_value_mechanicus_2_attack
    417: const_value_mechanicus_2_mastery
    418: const_value_mechanicus_2_attack_speed
    419: const_value_mechanicus_2_alert_range
    420: const_value_condense_resinre_place_resin_count
    422: const_value_blossom_bag_reward_radius
    425: const_value_chess_card_config
    426: const_value_psn_social_config
    427: const_value_sumo_activity_config
    428: const_value_fishing
    431: const_value_emoji_collect_num_limit
    440: const_value_activity_expedition_2_params
    441: const_value_qiandaogua_params
    442: const_value_custom_gadget_parts_max_num
    443: const_value_dig_activity_hint_rand_degree
    444: const_value_roguelike_activity_params
    445: const_value_moonfin_banner
  cook_food_type:
    0: cook_food_none
    1: cook_food_heal
    2: cook_food_attack
    3: cook_food_function
    4: cook_food_defense
    5: cook_recipe
  cook_method_type:
    0: cook_method_none
    1: cook_method_steam
    2: cook_method_boil
    3: cook_method_fry
    4: cook_method_bake
  compound_type:
    0: compound_none
    1: compound_cook
    2: compound_placeholder_2
  daily_task_type:
    0: daily_task_quest
    1: daily_task_scene
  daily_task_finish_type:
    0: daily_finish_none
    1: daily_finish_monster_id_num
    2: daily_finish_gadget_id_num
    3: daily_finish_monster_config_num
    4: daily_finish_gadget_config_num
    5: daily_finish_monster_num
    6: daily_finish_chest_config
    7: daily_finish_gather
    8: daily_finish_challenge
  player_die_type:
    0: player_die_none
    1: player_die_kill_by_monster
    2: player_die_kill_by_gear
    3: player_die_fall
    4: player_die_drawn
    5: player_die_abyss
  dungeon_type:
    0: dungeon_none
    1: dungeon_plot
    2: dungeon_fight
    3: dungeon_daily_fight
    4: dungeon_weekly_fight
    5: dungeon_discarded
    6: dungeon_tower
    7: dungeon_boss
    8: dungeon_activity
    9: dungeon_effigy
    10: dungeon_element_challenge
    11: dungeon_theatre_mechanicus
    12: dungeon_fleur_fair
    13: dungeon_channeller_slab_loop
    14: dungeon_channeller_slab_one_off
    15: dungeon_blitz_rush
    16: dungeon_chess
    17: dungeon_sumo_combat
    18: dungeon_roguelike
  dungeon_play_type:
    0: dungeon_play_type_none
    1: dungeon_play_type_foggy_maze
    2: dungeon_play_type_trial_avatar
    3: dungeon_play_type_mist_trial
  involve_type:
    0: involve_none
    1: involve_only_single
    2: involve_single_multiple
    3: involve_dynamic_multiple
    4: involve_only_multiple
  settle_show_type:
    0: settle_show_none
    1: settle_show_time_cost
    2: settle_show_open_chest_count
    3: settle_show_kill_monster_count
    4: settle_show_blackscreen
  settle_ui_type:
    0: settle_ui_al_ways_show
    1: settle_ui_on_success
    2: settle_ui_on_fail
    3: settle_ui_never_show
  element_type:
    0: none
    1: fire
    2: water
    3: grass
    4: electric
    5: ice
    6: frozen
    7: wind
    8: rock
    9: anti_fire
    10: vehicle_mute_ice
    11: count
  dungeon_state_type:
    0: dungeon_state_none
    1: dungeon_state_release
    2: dungeon_state_test
  fetter_cond_type:
    0: fetter_cond_none
    1: fetter_cond_fetter_level
    2: fetter_cond_avatar_level
    3: fetter_cond_finish_dungeon
    4: fetter_cond_unlock_trans_point
    5: fetter_cond_unlock_area
    6: fetter_cond_finish_quest
    7: fetter_cond_avatar_promote_level
    8: fetter_cond_player_birthday
    9: fetter_cond_avatar_birthday
    10: fetter_cond_not_open
    11: fetter_cond_finish_parent_quest
    12: fetter_cond_unlock_arena_by_city_id
  gallery_type:
    0: gallery_type_none
    1: gallery_type_balloon
    2: gallery_type_fall
    3: gallery_type_arena_challenge
    4: gallery_type_catch_flower
    5: gallery_type_fadeout_floor
    6: gallery_type_avoid_rays
    7: gallery_type_broken_floor
    8: gallery_type_bullet_game
    9: gallery_type_avoid_bubbles
    10: gallery_type_remember_road
    11: gallery_type_mist_trial
    12: gallery_type_hide_and_seek
    13: gallery_type_buoyant_combat
    14: gallery_type_bounce_conjuring
    15: gallery_type_handball
    16: gallery_type_sumo_combat
    17: gallery_type_fish
    18: gallery_type_dig_combat
  home_world_area_type:
    0: interior_area
    1: exterior_area
  furniture_deploy_surface_type:
    0: ground
    1: wall
    2: ceil
    3: stack_obj_plane
    4: door
    5: chandelier
    6: floor
    7: wall_body
    8: carpet
    9: lego_rockery
    10: stair
    11: npc
    12: animal
    13: apartment
    14: furniture_suite
    15: road
    16: terrain
  speical_furniture_type:
    0: normal_furnitrue
    1: block_dependent
    2: farm_field
    3: teleport_point
    4: fishpond
    5: npc
    6: apartment
    7: furniture_suite
    8: paimon
    9: fish
    10: custom_base_furnitrue
    11: custom_node_furnitrue
  item_type:
    0: item_none
    1: item_virtual
    2: item_material
    3: item_reliquary
    4: item_weapon
    5: item_display
    6: item_furniture
  hunting_monster_finish_type:
    0: hunting_finish_type_none
    1: hunting_finish_type_all
    2: hunting_finish_type_target_monster
  hunting_monster_create_pos_type:
    0: hunting_pos_none
    1: hunting_pos_ground
    2: hunting_pos_shoal_water
    3: hunting_pos_snow_mountain
  hunting_offer_difficulty_type:
    0: hunting_difficulty_easy
    1: hunting_difficulty_medium
    2: hunting_difficulty_hard
  hunting_refresh_cond_type:
    0: hunting_refresh_cond_none
    1: hunting_refresh_cond_time
    2: hunting_refresh_cond_weather
  open_state_type:
    0: open_state_none
    1: open_state_paimon
    2: open_state_paimon_navigation
    3: open_state_avatar_promote
    4: open_state_avatar_talent
    5: open_state_weapon_promote
    6: open_state_weapon_awaken
    7: open_state_quest_remind
    8: open_state_game_guide
    9: open_state_cook
    10: open_state_weapon_upgrade
    11: open_state_reliquary_upgrade
    12: open_state_reliquary_promote
    13: open_state_weapon_promote_guide
    14: open_state_weapon_change_guide
    15: open_state_player_lvup_guide
    16: open_state_freshman_guide
    17: open_state_skip_freshman_guide
    18: open_state_guide_move_camera
    19: open_state_guide_scale_camera
    20: open_state_guide_keyboard
    21: open_state_guide_move
    22: open_state_guide_jump
    23: open_state_guide_sprint
    24: open_state_guide_map
    25: open_state_guide_attack
    26: open_state_guide_fly
    27: open_state_guide_talent
    28: open_state_guide_relic
    29: open_state_guide_relic_prom
    30: open_state_combine
    31: open_state_gacha
    32: open_state_guide_gacha
    33: open_state_guide_team
    34: open_state_guide_proud
    35: open_state_guide_avatar_promote
    36: open_state_guide_adventure_card
    37: open_state_forge
    38: open_state_guide_bag
    39: open_state_expedition
    40: open_state_guide_adventure_dailytask
    41: open_state_guide_adventure_dungeon
    42: open_state_tower
    43: open_state_world_stamina
    44: open_state_tower_first_enter
    45: open_state_resin
    47: open_state_limit_region_freshmeat
    48: open_state_limit_region_global
    49: open_state_multiplayer
    50: open_state_guide_mousepc
    51: open_state_guide_multiplayer
    52: open_state_guide_dungeonreward
    53: open_state_guide_blossom
    54: open_state_avatar_fashion
    55: open_state_photograph
    56: open_state_guide_kslquest
    57: open_state_personal_line
    58: open_state_guide_personal_line
    59: open_state_guide_appearance
    60: open_state_guide_process
    61: open_state_guide_personal_line_key
    62: open_state_guide_widget
    63: open_state_guide_activity_skill_aster
    64: open_state_guide_coldclimate
    65: open_state_derivative_mall
    66: open_state_guide_exitmultiplayer
    67: open_state_guide_theatremachanicus_build
    68: open_state_guide_theatremachanicus_rebuild
    69: open_state_guide_theatremachanicus_card
    70: open_state_guide_theatremachanicus_monster
    71: open_state_guide_theatremachanicus_mission_check
    72: open_state_guide_theatremachanicus_build_select
    73: open_state_guide_theatremachanicus_challenge_start
    74: open_state_guide_convert
    75: open_state_guide_theatremachanicus_multiplayer
    76: open_state_guide_coop_task
    77: open_state_guide_homeworld_adeptiabode
    78: open_state_guide_homeworld_deploy
    79: open_state_guide_channellerslab_equip
    80: open_state_guide_channellerslab_mp_solution
    81: open_state_guide_channellerslab_power
    82: open_state_guide_hideandseek_skill
    83: open_state_guide_homeworld_maplist
    84: open_state_guide_relicresolve
    85: open_state_guide_gguide
    86: open_state_guide_gguide_hint
    800: open_state_city_repuation_mengde
    801: open_state_city_repuation_liyue
    802: open_state_city_repuation_ui_hint
    803: open_state_city_repuation_inazuma
    900: open_state_shop_type_mall
    901: open_state_shop_type_recommanded
    902: open_state_shop_type_genesiscrystal
    903: open_state_shop_type_giftpackage
    1001: open_state_shop_type_paimon
    1002: open_state_shop_type_city
    1003: open_state_shop_type_blacksmith
    1004: open_state_shop_type_grocery
    1005: open_state_shop_type_food
    1006: open_state_shop_type_sea_lamp
    1007: open_state_shop_type_virtual_shop
    1008: open_state_shop_type_liyue_grocery
    1009: open_state_shop_type_liyue_souvenir
    1010: open_state_shop_type_liyue_restaurant
    1011: open_state_shop_type_inazuma_souvenir
    1012: open_state_shop_type_npc_tomoki
    1100: open_adventure_manual
    1101: open_adventure_manual_city_mengde
    1102: open_adventure_manual_city_liyue
    1103: open_adventure_manual_monster
    1104: open_adventure_manual_boss_dungeon
    1200: open_state_activity_sealamp
    1201: open_state_activity_sealamp_tab2
    1202: open_state_activity_sealamp_tab3
    1300: open_state_battle_pass
    1301: open_state_battle_pass_entry
    1400: open_state_activity_crucible
    1401: open_state_activity_newbeebouns_open
    1402: open_state_activity_newbeebouns_close
    1403: open_state_activity_entry_open
    1404: open_state_mengde_infusedcrystal
    1405: open_state_liyue_infusedcrystal
    1406: open_state_snow_mountain_elder_tree
    1407: open_state_miracle_ring
    1408: open_state_coop_line
    1409: open_state_inazuma_infusedcrystal
    1410: open_state_fish
    1411: open_state_guide_sumo_team_skill
    1412: open_state_guide_fish_recipe
    1500: open_state_home
    1501: open_state_activity_homeworld
    1502: open_state_adeptiabode
    1503: open_state_home_avatar
    1504: open_state_home_edit
    1505: open_state_home_edit_tips
    1600: open_state_reliquary_decompose
    1700: open_state_activity_h5
    2000: open_state_oraionokami
    2001: open_state_guide_chess_mission_check
    2002: open_state_guide_chess_build
    2003: open_state_guide_chess_wind_tower_circle
    2004: open_state_guide_chess_card_select
    2005: open_state_inazuma_mainquest_finished
    2100: open_state_paimon_lvinfo
    2101: open_state_teleport_hud
    2102: open_state_guide_map_unlock
    2103: open_state_guide_paimon_lvinfo
    2104: open_state_guide_ambortransport
    2105: open_state_guide_fly_second
    2106: open_state_guide_kaeya_clue
    2200: open_state_activity_fish_open
    2201: open_state_activity_fish_close
    2205: open_state_guide_rogue_map
    2206: open_state_guide_rogue_rune
  limit_region_type:
    0: limit_region_type_none
    1: limit_region_type_bigworld
    2: limit_region_type_activity
    3: limit_region_type_homeworld
  material_type:
    0: material_none
    1: material_food
    2: material_quest
    4: material_exchange
    5: material_consume
    6: material_exp_fruit
    7: material_avatar
    8: material_adsorbate
    9: material_cricket
    10: material_elem_crystal
    11: material_weapon_exp_stone
    12: material_chest
    13: material_reliquary_material
    14: material_avatar_material
    15: material_notice_add_hp
    16: material_sea_lamp
    17: material_selectable_chest
    18: material_flycloak
    19: material_namecard
    20: material_talent
    21: material_widget
    22: material_chest_batch_use
    23: material_fake_absorbate
    24: material_consume_batch_use
    25: material_wood
    27: material_furniture_formula
    28: material_channeller_slab_buff
    29: material_furniture_suite_formula
    30: material_costume
    31: material_home_seed
    32: material_fish_bait
    33: material_fish_rod
    34: material_sumo_buff
  item_use_target:
    0: item_use_target_none
    1: item_use_target_cur_avatar
    2: item_use_target_cur_team
    3: item_use_target_specify_avatar
    4: item_use_target_specify_alive_avatar
    5: item_use_target_specify_dead_avatar
  item_use_op:
    0: item_use_none
    1: item_use_accept_quest
    2: item_use_trigger_ability
    3: item_use_gain_avatar
    4: item_use_add_exp
    5: item_use_relive_avatar
    6: item_use_add_big_talent_point
    7: item_use_add_persist_stamina
    8: item_use_add_temporary_stamina
    9: item_use_add_cur_stamina
    10: item_use_add_cur_hp
    11: item_use_add_elem_energy
    12: item_use_add_all_energy
    13: item_use_add_dungeon_cond_time
    14: item_use_add_weapon_exp
    15: item_use_add_server_buff
    16: item_use_del_server_buff
    17: item_use_unlock_cook_recipe
    20: item_use_open_random_chest
    24: item_use_make_gadget
    25: item_use_add_item
    26: item_use_grant_select_reward
    27: item_use_add_select_item
    28: item_use_gain_flycloak
    29: item_use_gain_name_card
    30: item_use_unlock_paid_battle_pass_normal
    31: item_use_gain_card_product
    32: item_use_unlock_forge
    33: item_use_unlock_combine
    34: item_use_unlock_codex
    35: item_use_chest_select_item
    36: item_use_gain_resin_card_product
    37: item_use_add_reliquary_exp
    38: item_use_unlock_furniture_formula
    39: item_use_unlock_furniture_suite
    40: item_use_add_channeller_slab_buff
    41: item_use_gain_costume
    42: item_use_add_treasure_map_bonus_region_fragment
    43: item_use_combine_item
    44: item_use_unlock_home_module
  food_quality_type:
    0: food_quality_none
    1: food_quality_strange
    2: food_quality_ordinary
    3: food_quality_delicious
  material_destroy_type:
    0: destroy_none
    1: destroy_return_material
  op_activity_bonus_source_type:
    0: source_type_none
    1: source_type_blossom
    2: source_type_dungeon
  op_activity_track_type:
    0: track_none
    1: track_by_city
  overflow_transform_type:
    0: overflow_transform_none
    1: overflow_transform_player_exp
  item_limit_type:
    0: item_limit_none
    1: item_limit_unlimited
    2: item_limit_gm
    3: item_limit_quest
    4: item_limit_city_upgrade
    5: item_limit_unlock_trans_point
    6: item_limit_unlock_dungeon
    7: item_limit_investigation
    8: item_limit_player_level_upgrade
    9: item_limit_push_tips_reward
    10: item_limit_avatar_fetter_reward
    11: item_limit_world_area_explore_event_reward
    12: item_limit_activity_sea_lamp
    13: item_limit_battle_pass_paid_reward
    14: item_limit_oneoff_big_world_drop
    15: item_limit_gameplay_niche
    16: item_limit_oneoff_dungeon_drop
    17: item_limit_oneoff_plunder_drop
    18: item_limit_oneoff_subfield_drop
    19: item_limit_big_world_chest
    20: item_limit_gacha_token_drop
    22: item_limit_daily_big_world_drop
    23: item_limit_daily_dungeon_drop
    24: item_limit_daily_plunder_drop
    25: item_limit_daily_subfield_drop
    26: item_limit_daily_sea_lamp_drop
    27: item_limit_normal_dungeon
    28: item_limit_daily_task
    29: item_limit_daily_task_score
    30: item_limit_rand_task_drop
    31: item_limit_expedition
    32: item_limit_small_monster_die
    33: item_limit_elite_monster_die
    34: item_limit_boss_monster_die
    35: item_limit_big_boss_monster_die
    36: item_limit_small_env_animal_die
    37: item_limit_monster_excel_drop
    38: item_limit_repeatable_quest_reward
    39: item_limit_env_animal
    40: item_limit_gather
    41: item_limit_operation_daily_activity
    42: item_limit_quest_add_item
    43: item_limit_bonus_activity
    44: item_limit_tower_monthly
    45: item_limit_battle_pass_level_reward
    46: item_limit_sign_in
    47: item_limit_gacha
    48: item_limit_shop
    49: item_limit_cook
    50: item_limit_compound
    51: item_limit_combine
    52: item_limit_forge
    53: item_limit_random_chest
    54: item_limit_use_item
    55: item_limit_use_item_reward
    56: item_limit_blossom_chest_drop
    57: item_limit_mp_play_drop
    58: item_limit_forge_drop
    59: item_limit_mp_play_crucible_drop
    60: item_limit_activity_crucible_reward
    61: item_limit_activity_reward
    62: item_limit_activity_trial_avatar
    63: item_limit_activity_salesman
    64: item_limit_rebate
    65: item_limit_month_card
    67: item_limit_birthday_benefit
    68: item_limit_achievement_reward
    69: item_limit_achievement_goal_reward
    70: item_limit_destroy_return_material
    71: item_limit_tower_reward
    72: item_limit_share_reward
    73: item_limit_fetter_level_reward
    74: item_limit_dungeon_first_pass_reward
    75: item_limit_codex_levelup_reward
    76: item_limit_activity_delivery
    77: item_limit_city_reputation_level
    78: item_limit_city_reputation_quest
    79: item_limit_upgrade_weapon_return_material
    80: item_limit_city_reputation_request
    81: item_limit_hunting_reward
    82: item_limit_city_reputation_explore
    83: item_limit_activity_flight_reward
    84: item_limit_activity_aster_reward
    85: item_limit_activity_aster_drop
    86: item_limit_activity_drgaon_spine_reward
    87: item_limit_activity_dragon_spine_drop
    88: item_limit_snow_mountain_tree_task
    89: item_limit_snow_mountain_tree_level
    90: item_limit_activity_salesman_chest_drop
    91: item_limit_activity_effigy_reward
    92: item_limit_reunion_reward
    93: item_limit_avatar_promote_reward
    94: item_limit_activity_salesman_mp
    95: item_limit_activity_treasure_map_reward
    96: item_limit_resin_card
    97: item_limit_activity_blessing
    98: item_limit_miracle_ring_reward
    99: item_limit_activity_expedition_reward
    100: item_limit_mechanicus_battle_settle_reward
    101: item_limit_sea_lamp_activity_avatar_reward
    1401: item_limit_player_exp_overflow_transform
    1402: item_limit_activity_arena_challenge_reward
    1403: item_limit_coop_task_reward
    1404: item_limit_water_spirit_reward
    1405: item_limit_region_search_reward
    1406: item_limit_water_spirit_drop
    1407: item_limtt_activity_fleur_fair_reward
    1501: item_limit_hit_tree_drop
    1502: item_limit_activity_mist_trial
    1503: item_limit_activity_channeller_slab
    1504: item_limit_activity_hide_and_seek
    1505: item_limit_activity_find_hilichurl
    1506: item_limit_furniture_make_cancel
    1507: item_limit_home_levelup_reward
    1508: item_limit_furniture_make
    1509: item_limit_activity_condition_mail_reward
    1510: item_limit_battle_pass_notify_mail_reward
    1511: item_limit_activity_channeller_slab_avatar_reward
    1512: item_limit_home_resource
    1513: item_limit_operation_welfare
    1601: item_limit_activity_summer_time_reward
    1602: item_limit_activity_echo_shell
    1603: item_limit_reliquary_decompose
    1604: item_limit_home_fetter
    1605: item_limit_home_event_reward
    1606: item_limit_activity_buoyant_combat_reward
    1607: item_limit_activity_bounce_conjuring_reward
    2000: item_limit_oraionokami_reward
    2001: item_limit_book_leaf_drop
    2002: item_limit_exploration_line_level_reward
    2003: item_limit_activity_blitz_rush_reward
    2004: item_limit_activity_blitz_rush_avatar_reward
    2005: item_limit_activity_chess_reward
    2006: item_limit_home_plant_box_seed_drop
    2007: item_limit_home_plant_gather_drop
    2008: item_limit_home_furniture_make_return
    2100: item_limit_activity_sumo
    2101: item_limit_activity_luna_rite
    2102: item_limit_fish_reward
    2103: item_limit_activity_moonfin_trial
    2104: item_limit_activity_luna_rite_drop
    2200: item_limit_activity_roguelike_dungeon
    2201: item_limit_activity_roguelike_dungeon_avatar_reward
    2202: item_limit_activity_plant_flower
    2203: item_limit_activity_dig_reward
    2204: item_limit_activity_dig_drop
    2205: item_limit_activity_music_game_reward
  quest_type:
    0: aq
    1: fq
    2: lq
    3: eq
    4: dq
    5: iq
    6: vq
    7: wq
  main_quest_tag_type:
    0: mainquest_tag_none
    1: mainquest_tag_guide
    2: mainquest_tag_activity
  play_mode:
    0: play_mode_all
    1: play_mode_single
    2: play_mode_multiple
    3: play_mode_host
    4: play_mode_guest
  quest_show_type:
    0: quest_show
    1: quest_hidden
  talk_begin_way:
    0: talk_begin_none
    1: talk_begin_auto
    2: talk_begin_manual
  logic_type:
    0: logic_none
    1: logic_and
    2: logic_or
    3: logic_not
    4: logic_a_and_etcor
    5: logic_a_and_b_and_etcor
    6: logic_a_or_etcand
    7: logic_a_or_b_or_etcand
    8: logic_a_and_b_or_etcand
  quest_cond_type:
    0: quest_cond_none
    1: quest_cond_state_equal
    2: quest_cond_state_not_equal
    3: quest_cond_pack_have_item
    4: quest_cond_avatar_element_equal
    5: quest_cond_avatar_element_not_equal
    6: quest_cond_avatar_can_change_element
    7: quest_cond_city_level_equal_greater
    8: quest_cond_item_num_less_than
    9: quest_cond_daily_task_start
    10: quest_cond_open_state_equal
    11: quest_cond_daily_task_open
    12: quest_cond_daily_task_reward_can_get
    13: quest_cond_daily_task_reward_received
    14: quest_cond_player_level_reward_can_get
    15: quest_cond_exploration_reward_can_get
    16: quest_cond_is_world_owner
    17: quest_cond_player_level_equal_greater
    18: quest_cond_scene_area_unlocked
    19: quest_cond_item_giving_actived
    20: quest_cond_item_giving_finished
    21: quest_cond_is_daytime
    22: quest_cond_current_avatar
    23: quest_cond_current_area
    24: quest_cond_quest_var_equal
    25: quest_cond_quest_var_greater
    26: quest_cond_quest_var_less
    27: quest_cond_forge_have_finish
    28: quest_cond_daily_task_in_progress
    29: quest_cond_daily_task_finished
    30: quest_cond_activity_cond
    31: quest_cond_activity_open
    32: quest_cond_daily_task_var_gt
    33: quest_cond_daily_task_var_eq
    34: quest_cond_daily_task_var_lt
    35: quest_cond_bargain_item_gt
    36: quest_cond_bargain_item_eq
    37: quest_cond_bargain_item_lt
    38: quest_cond_complete_talk
    39: quest_cond_not_have_blossom_talk
    40: quest_cond_is_cur_blossom_talk
    41: quest_cond_quest_not_receive
    42: quest_cond_quest_server_cond_valid
    43: quest_cond_activity_client_cond
    44: quest_cond_quest_global_var_equal
    45: quest_cond_quest_global_var_greater
    46: quest_cond_quest_global_var_less
    47: quest_cond_personal_line_unlock
    48: quest_cond_city_reputation_request
    49: quest_cond_main_coop_start
    50: quest_cond_main_coop_enter_save_point
    51: quest_cond_city_reputation_level
    52: quest_cond_city_reputation_unlock
    53: quest_cond_lua_notify
    54: quest_cond_cur_climate
    55: quest_cond_activity_end
    56: quest_cond_coop_point_running
    57: quest_cond_gadget_talk_state_equal
    58: quest_cond_avatar_fetter_gt
    59: quest_cond_avatar_fetter_eq
    60: quest_cond_avatar_fetter_lt
    61: quest_cond_new_homeworld_moudle_unlock
    62: quest_cond_new_homeworld_level_reward
    63: quest_cond_new_homeworld_make_finish
    64: quest_cond_homeworld_npc_event
    65: quest_cond_time_var_gt_eq
    66: quest_cond_time_var_pass_day
    67: quest_cond_homeworld_npc_new_talk
    68: quest_cond_player_choose_male
    69: quest_cond_history_got_any_item
    70: quest_cond_learned_recipe
    71: quest_cond_lunarite_region_unlocked
    72: quest_cond_lunarite_has_region_hint_count
    73: quest_cond_lunarite_collect_finish
    74: quest_cond_lunarite_mark_all_finish
    75: quest_cond_new_homeworld_shop_item
  talk_hero_type:
    0: talk_hero_local
    1: talk_hero_main
  talk_load_type:
    0: talk_normal_quest
    1: talk_blossom
    2: talk_activity
    3: talk_coop
    4: talk_gadget
  talk_mark_type:
    0: talk_mark_none
    1: talk_mark_common
  talk_exec_type:
    0: talk_exec_none
    1: talk_exec_set_gadget_state
    2: talk_exec_set_game_time
    3: talk_exec_notify_group_lua
    4: talk_exec_set_daily_task_var
    5: talk_exec_inc_daily_task_var
    6: talk_exec_dec_daily_task_var
    7: talk_exec_set_quest_var
    8: talk_exec_inc_quest_var
    9: talk_exec_dec_quest_var
    10: talk_exec_set_quest_global_var
    11: talk_exec_inc_quest_global_var
    12: talk_exec_dec_quest_global_var
  talk_show_type:
    0: talk_show_default
    1: talk_show_force_select
  talk_role_type:
    0: talk_role_none
    1: talk_role_npc
    2: talk_role_player
    3: talk_role_mate_avatar
    4: talk_role_gadget
  reminder_style_type:
    0: normal
    1: banner
    2: info_text_dialog
    3: event_prompt_down
    4: white_message
  reputation_entrance_type:
    0: reputation_entrance_none
    1: reputation_entrance_quest
    2: reputation_entrance_request
    3: reputation_entrance_explore
    4: reputation_entrance_hunter
  reputation_entrance_cond_type:
    0: reputation_entrance_cond_none
    1: reputation_entrance_cond_reputation_level
    2: reputation_entrance_cond_player_level
    3: reputation_entrance_cond_quest
  general_routine_type:
    0: routine_type_none
    1: routine_snow_mountain
  routine_finish_type:
    0: routine_finish_none
    1: routine_finish_kill_monster
    2: routine_finish_gather
    3: routine_challenge_finish
  routine_cond_type:
    0: routine_cond_none
    1: routine_cond_quest_finish
  routine_actionype:
    0: routine_action_none
  show_type:
    0: showtype_show
    1: showtype_hide
  progress_show_type:
    0: progresstype_none
    1: progresstype_finish
    2: progresstype_thousand_to_one
  watcher_trigger_type:
    0: trigger_none
    1: trigger_combat_config_common
    2: trigger_element_view
    5: trigger_enter_airflow
    6: trigger_new_monster
    8: trigger_new_affix
    9: trigger_change_input_device_type
    10: trigger_paimon_angry_voice_easter_egg
    11: trigger_wind_crystal
    101: trigger_element_ball
    102: trigger_world_level_up
    103: trigger_dungeon_entry_to_be_explored
    104: trigger_unlock_gate_temple
    105: trigger_unlock_area
    106: trigger_unlock_trans_point
    107: trigger_open_chest_with_gadget_id
    108: trigger_city_level_up
    109: trigger_monster_die
    110: trigger_platform_start_move
    111: trigger_group_notify
    112: trigger_element_type_change
    113: trigger_gadget_interactable
    114: trigger_collect_set_of_readings
    115: trigger_teleport_with_certain_portal
    116: trigger_world_gather
    117: trigger_take_general_reward
    118: trigger_battle_for_monster_die_or
    119: trigger_battle_for_monster_die_and
    120: trigger_open_world_chest
    121: trigger_enter_climate_area
    122: trigger_unlock_scene_point
    201: trigger_obtain_avatar
    202: trigger_player_level
    203: trigger_avatar_upgrade
    204: trigger_avatar_promote
    205: trigger_weapon_upgrade
    206: trigger_weapon_promote
    207: trigger_reliquary_upgrade
    208: trigger_wear_reliquary
    209: trigger_upgrade_talent
    210: trigger_unlock_recipe
    211: trigger_reliquary_set_num
    212: trigger_obtain_material_num
    213: trigger_obtain_reliquary_num
    214: trigger_gacha_num
    215: trigger_any_reliquary_upgrade
    216: trigger_fetter_level_avatar_num
    217: trigger_skilled_at_recipe
    218: trigger_reliquary_upgrade_equal_rank_level
    219: trigger_specified_weapon_upgrade
    220: trigger_specified_weapon_awaken
    221: trigger_unlock_specific_recipe_or
    222: trigger_possess_material_num
    223: trigger_exhibition_accumulable_value
    224: trigger_exhibition_replaceable_value_settle_num
    225: trigger_any_weapon_upgrade_num
    226: trigger_any_reliquary_upgrade_num
    227: trigger_activity_score_exceed_value
    228: trigger_unlock_specific_forge_or
    229: trigger_unlock_specific_animal_codex
    230: trigger_obtain_item_num
    301: trigger_daily_task
    302: trigger_rand_task
    303: trigger_avatar_expedition
    304: trigger_finish_tower_level
    306: trigger_world_boss_reward
    307: trigger_finish_dungeon
    308: trigger_start_avatar_expedition
    309: trigger_open_blossom_chest
    310: trigger_finish_blossom_progress
    311: trigger_done_tower_gadget_unhurt
    312: trigger_done_tower_stars
    313: trigger_done_tower_unhurt
    314: trigger_steal_food_times
    315: trigger_done_dungeon_with_same_element_avatars
    316: trigger_group_flight_challenge_reach_points
    317: trigger_finish_daily_delivery_num
    318: trigger_tower_stars_num
    319: trigger_finish_specifed_type_blossom_num
    320: trigger_finish_specifed_type_blossom_climate_meter
    321: trigger_finish_blossom_group_variable_gt
    322: trigger_effigy_challenge_score
    323: trigger_finish_routine
    324: trigger_activity_expedition_finish
    325: trigger_activity_channeller_slab_finish_all_camp
    326: trigger_activity_channeller_slab_finish_all_oneoff_dungeon
    327: trigger_activity_channeller_slab_loop_dungeon_total_score
    328: trigger_group_summer_time_sprint_boat_reach_points
    329: trigger_weekly_boss_kill
    330: trigger_bounce_conjuring_finish_count
    331: trigger_bounce_conjuring_score
    332: trigger_group_variable_set_value_to
    333: trigger_kill_gadgets_by_specific_skill
    334: trigger_kill_monsters_without_vehicle
    335: trigger_kill_monster_in_area
    336: trigger_enter_vehicle
    337: trigger_vehicle_duration
    338: trigger_vehicle_friends
    339: trigger_vehicle_killed_by_monster
    340: trigger_vehicle_dash
    401: trigger_do_cook
    402: trigger_do_forge
    403: trigger_do_compound
    404: trigger_do_combine
    405: trigger_buy_shop_goods
    406: trigger_forge_weapon
    421: trigger_mp_play_battle_win
    422: trigger_kill_group_monster
    423: trigger_crucible_element_score
    424: trigger_mp_dungeon_times
    425: trigger_mp_kill_monster_num
    426: trigger_crucible_max_ball
    427: trigger_crucible_max_score
    428: trigger_crucible_submit_ball
    429: trigger_crucible_world_level_score
    430: trigger_mp_play_group_statistic
    431: trigger_kill_group_specific_monster
    432: trigger_reach_mp_play_score
    433: trigger_reach_mp_play_record
    434: trigger_treasure_map_done_region
    435: trigger_sea_lamp_mini_quest
    436: trigger_finish_find_hilichurl_level
    437: trigger_combine_item
    438: trigger_finish_challenge_in_duration
    439: trigger_finish_challenge_left_time
    440: trigger_mp_kill_monster_id_num
    501: trigger_login
    502: trigger_cost_material
    503: trigger_deliver_item_to_salesman
    504: trigger_use_item
    505: trigger_accumulate_daily_login
    601: trigger_finish_challenge
    602: trigger_mechanicus_unlock_gear
    603: trigger_mechanicus_levelup_gear
    604: trigger_mechanicus_difficult
    605: trigger_mechanicus_difficult_score
    606: trigger_mechanicus_kill_monster
    607: trigger_mechanicus_building_point
    608: trigger_mechanicus_difficult_eq
    609: trigger_mechanicus_battle_end
    610: trigger_mechanicus_battle_end_excaped_less_than
    611: trigger_mechanicus_battle_end_points_more_than
    612: trigger_mechanicus_battle_end_gear_more_than
    613: trigger_mechanicus_battle_end_pure_gear_damage
    614: trigger_mechanicus_battle_end_card_pick_more_than
    615: trigger_mechanicus_battle_end_card_target_more_than
    616: trigger_mechanicus_battle_end_build_gear_more_than
    617: trigger_mechanicus_battle_end_gear_kill_more_than
    618: trigger_mechanicus_battle_end_round_more_than
    619: trigger_mechanicus_battle_end_round
    620: trigger_mechanicus_battle_fin_challenge_more_than
    621: trigger_mechanicus_battle_watcher_finish_count
    622: trigger_mechanicus_battle_interact_count
    623: trigger_mechanicus_battle_difficult_escape
    624: trigger_mechanicus_battle_difficult_gear_num
    625: trigger_mechanicus_battle_difficult_gear_id_num
    626: trigger_fleur_fair_dungeon_finish_in_limit_time
    627: trigger_fleur_fair_dungeon_finish_keep_energy
    628: trigger_fleur_fair_dungeon_finish_with_group_variable
    629: trigger_fleur_fair_dungeon_finish_with_buff_num
    630: trigger_fleur_fair_dungeon_mission_finish
    631: trigger_finish_dungeon_and_challenge_remain_time_greater_than
    632: trigger_finish_dungeon_with_mist_trial_stat
    633: trigger_dungeon_mist_trial_stat
    634: trigger_dungeon_element_reaction_num
    635: trigger_level_avatar_finish_dungeon_count
    636: trigger_chess_reach_level
    637: trigger_chess_dungeon_add_score
    638: trigger_chess_dungeon_succ_with_escaped_monsters_less_than
    639: trigger_chess_dungeon_succ_with_tower_count_less_or_equal
    640: trigger_chess_dungeon_succ_with_card_count_less_or_equal
    641: trigger_chess_dungeon_succ_with_card_count_greater_than
    642: trigger_chess_kill_monsters
    643: trigger_chess_cost_building_points
    644: trigger_sumo_stage_score_reach
    645: trigger_sumo_total_max_score_reach
    646: trigger_rogue_destroy_gadget_num
    647: trigger_rogue_kill_monster_num
    649: trigger_rogue_finish_without_using_spring_cell
    650: trigger_rogue_finish_all_challenge_cell
    651: trigger_rogue_finish_with_avatar_element_type_num_less_than
    652: trigger_rogue_finish_with_avatar_num_less_than
    653: trigger_rogue_finish_no_avatar_dead
    654: trigger_rogue_shikigami_upgrade
    655: trigger_rogue_curse_num
    656: trigger_rogue_select_card_num
    700: trigger_finish_quest_and
    701: trigger_finish_quest_or
    702: trigger_daily_task_var_equal
    703: trigger_quest_global_var_equal
    704: trigger_talk_num
    705: trigger_finish_parent_quest_and
    706: trigger_finish_parent_quest_or
    800: trigger_element_reaction_timelimit_num
    801: trigger_element_reaction_timelimit_kill_num
    802: trigger_element_reaction_timelimit_damage_num
    803: trigger_ability_state_pass_time
    804: trigger_max_critical_damage
    805: trigger_full_satiation_team_avatar_num
    806: trigger_killed_by_certain_monster
    807: trigger_cur_avatar_hurt
    808: trigger_cur_avatar_ability_state
    809: trigger_use_energy_skill_num_timelimit
    810: trigger_shield_source_num
    811: trigger_cur_avatar_hurt_by_specific_ability
    812: trigger_killed_by_specific_ability
    900: trigger_max_dash_time
    901: trigger_max_fly_time
    902: trigger_max_fly_map_distance
    903: trigger_sit_down_in_point
    904: trigger_dash
    905: trigger_climb
    906: trigger_fly
    930: trigger_city_reputation_level
    931: trigger_city_reputation_finish_request
    932: trigger_hunting_finish_num
    933: trigger_hunting_fail_num
    934: trigger_offering_level
    935: trigger_miracle_ring_deliver_item
    936: trigger_miracle_ring_take_reward
    937: trigger_blessing_exchange_pic_num
    938: trigger_blessing_redeem_reward_num
    939: trigger_gallery_balloon_reach_score
    940: trigger_gallery_fall_reach_score
    941: trigger_fleur_fair_music_game_reach_score
    942: trigger_main_coop_save_point_and
    943: trigger_main_coop_save_point_or
    944: trigger_main_coop_var_equal
    945: trigger_finish_all_arena_challenge_watcher_in_schedule
    946: trigger_gallery_buoyant_combat_reach_score
    947: trigger_buoyant_combat_reach_new_score_level
    948: trigger_place_miracle_ring
    949: trigger_luna_rite_search
    950: trigger_gallery_fish_reach_score
    1000: trigger_obtain_wood_type
    1001: trigger_obtain_wood_count
    1002: trigger_unlock_furniture_count
    1003: trigger_furniture_make
    1004: trigger_home_level
    1005: trigger_home_coin
    1006: trigger_home_comfort_level
    1007: trigger_home_limited_shop_buy
    1008: trigger_furniture_suite_type
    1009: trigger_arrangement_furniture_count
    1010: trigger_enter_self_home
    1011: trigger_home_module_comfort_value
    1012: trigger_home_enter_room
    1013: trigger_home_avatar_in
    1014: trigger_home_avatar_reward_event_count
    1015: trigger_home_avatar_talk_finish_count
    1016: trigger_home_avatar_reward_event_all_count
    1017: trigger_home_avatar_talk_finish_all_count
    1018: trigger_home_avatar_fetter_get
    1019: trigger_home_avatar_in_count
    1020: trigger_home_do_plant
    1021: trigger_arrangement_furniture
    1022: trigger_home_gather_count
    1023: trigger_home_field_gather_count
    1100: trigger_fishing_succ_num
    1101: trigger_fishing_keep_bonus
    1102: trigger_empty_fish_pool
    1103: trigger_fishing_fail_num
    1104: trigger_shock_fish_num
    1105: trigger_plant_flower_set_wish
    1106: trigger_plant_flower_give_flower
    1107: trigger_plant_flower_obtain_flower_type
    1108: trigger_plant_flower_common_obtain_flower_type
  activity_banner_type:
    0: activity_banner_default
    1: activity_banner_monster
    2: activity_banner_chapter
  blessing_scan_type:
    0: blessing_scan_type_none
    1: blessing_scan_type_monster
    2: blessing_scan_type_gather
  channeller_slab_buff_quality:
    0: channeller_slab_buff_quality_none
    1: channeller_slab_buff_quality_green
    2: channeller_slab_buff_quality_blue
    3: channeller_slab_buff_quality_purple
    4: channeller_slab_buff_quality_orange
  channeller_slab_difficulty:
    0: channeller_slab_difficulty_none
    1: channeller_slab_difficulty_primer
    2: channeller_slab_difficulty_normal
    3: channeller_slab_difficulty_hard
    4: channeller_slab_difficulty_expert
  channeller_slab_condition:
    0: channeller_slab_condition_none
    1: channeller_slab_condition_limit
    2: channeller_slab_condition_config
    3: channeller_slab_lineup_replace
  card_fortune_type:
    0: chess_cardfortune_bad
    1: chess_cardfortune_normal
    2: chess_cardfortune_good
    3: chess_cardfortune_verygood
    4: chess_cardfortune_perfect
  chess_card_tag:
    0: card_tag_none
    1: card_tag_water
    2: card_tag_fire
    3: card_tag_ice
    4: card_tag_wind
    5: card_tag_electric
    6: card_tag_physics
    7: card_tag_help
    8: card_tag_other
  chess_card_numerical_modification_type:
    0: card_numerical_default_type
    1: card_numerical_attack
    2: card_numerical_mastery
    3: card_numerical_attack_interval
    4: card_numerical_attack_range
  chess_card_numerical_modification_mode:
    0: card_numerical_default_mode
    1: card_numerical_base
    2: card_numerical_percentage
  chess_card_type:
    0: chess_card_curse
    1: chess_card_mechanism
    2: chess_card_challenge
    3: chess_card_strengthen
  chess_card_quality_type:
    0: card_quality_noraml
    1: card_quality_good
    2: card_quality_percect
  chess_card_target_type:
    0: chess_card_target_default
    1: chess_card_target_all
    2: chess_card_target_gadgets
  chess_card_effect_type:
    0: chess_card_effect_default
    1: chess_card_effect_set_sgv
    2: chess_card_effect_mod_cost
    3: chess_card_effect_mod_refund
    4: chess_card_effect_set_home_hp
    5: chess_card_effect_add_home_hp
    6: chess_card_effect_add_kill_points
    7: chess_card_effect_mod_kill_points
    8: chess_card_effect_add_gear_num
    9: chess_card_effect_kill_gears
    10: chess_card_effect_grant_points
    11: chess_passive_aura_bonus_points
    12: chess_passive_aura_sgv
    13: chess_card_effect_random_remove
    14: chess_card_effect_points_on_round_end
    15: chess_card_effect_sgv_pick_card_lte
    16: chess_card_effect_mod_card_cost
    17: chess_card_effect_cards_type_count_no_cost
    18: chess_card_effect_mod_candidate_cards
    19: chess_card_effect_mod_quality_prob
    20: chess_card_effect_free_card_refresh
    21: chess_card_effect_mod_refresh_cost
    22: chess_card_effect_cards_count_stack_sgv
    23: chess_card_effect_points_stack_sgv
    24: chess_card_effect_card_type_stack_sgv
    25: chess_card_effect_card_type_force_curse
  dragon_spine_mission_finish_exec_type:
    0: dragon_spine_exec_type_none
    1: dragon_spine_exec_type_ban_drop
    2: dragon_spine_exec_type_clear_item
  effigy_difficulty:
    0: effigy_difficulty_none
    1: effigy_difficulty_primer
    2: effigy_difficulty_normal
    3: effigy_difficulty_hard
    4: effigy_difficulty_expert
  effigy_condition:
    0: effigy_condition_none
    1: effigy_condition_time_limit
    2: effigy_condition_level_config
    3: effigy_condition_monster_config
  fleur_fair_mini_game_type:
    0: fleur_fair_mini_game_none
    1: fleur_fair_mini_game_balloon
    2: fleur_fair_mini_game_fall
    3: fleur_fair_mini_game_music
  fleur_fair_dungeon_stat_type:
    0: fleur_fair_dungeon_stat_none
    1: fleur_fair_dungeon_stat_group_variable
    2: fleur_fair_dungeon_stat_monster_hurt
  ordering_type:
    0: less
    1: equal
    2: greater
    3: less_or_equal
    4: greater_or_equal
  fleur_fair_dungeon_stat_method:
    0: fleur_fair_dungeon_stat_method_none
    1: fleur_fair_dungeon_stat_method_maximum
    2: fleur_fair_dungeon_stat_method_minimum
  activity_group_link_type:
    0: discrete
    1: circle
  activity_group_link_reward_type:
    0: none
    1: finish
  hide_and_seek_skill_category:
    0: hide_and_seek_skill_category_none
    1: hide_and_seek_skill_category_hunter
    2: hide_and_seek_skill_category_prey
  hide_and_seek_skill_sub_category:
    0: hide_and_seek_skill_sub_category_none
    1: hide_and_seek_skill_sub_category_common
    2: hide_and_seek_skill_sub_category_skill1
    3: hide_and_seek_skill_sub_category_skill2
  match_limit_type:
    0: match_limit_type_none
    1: match_limit_type_map_unlock
  luna_rite_quest_type:
    0: luna_rite_quest_type_mainline
    1: luna_rite_quest_type_bigworld
  find_hilichurl_assignment_type:
    0: assignment_type_giving
    1: assignment_type_fight
  mist_trial_client_sync_type:
    0: mist_trial_sync_none
    1: mist_trial_sync_progress
    2: mist_trial_sync_stat_value
    3: mist_trial_sync_challenge_left_time
  mist_trial_statistic_type:
    0: mist_trial_stat_type_none
    1: mist_trial_stat_type_finish_challenge_count
    2: mist_trial_stat_type_attack_by_gear_count
    3: mist_trial_stat_type_kill_monster_by_attack_tag
    4: mist_trial_stat_type_recover_hp_count
    5: mist_trial_stat_type_kill_shield_count
    6: mist_trial_stat_type_be_hurt_count
    7: mist_trial_stat_type_kill_monster_by_shield
    8: mist_trial_stat_type_disable_gear_count
    9: mist_trial_stat_type_element_reaction_type_num
  moonfin_trial_activity_level_type:
    0: moonfin_trial_activity_level_type_quest
    1: moonfin_trial_activity_level_type_challenge_total
    2: moonfin_trial_activity_level_type_challenge_specific
    3: moonfin_trial_activity_level_type_challenge_continuous
    4: moonfin_trial_activity_level_type_special_fish
  region_search_type:
    0: region_search_type_none
    1: region_search_type_activity
  region_search_cond_type:
    0: region_search_cond_none
    1: region_search_cond_activity_cond
    2: region_search_cond_finish_search
  region_search_recycle_type:
    0: region_search_recycle_none
    1: region_search_recycle_progress
  roguelike_shikigami_unlock_type:
    0: shikigami_unlock_none
    1: shikigami_unlock_shikigami
    2: shikigami_unlock_activity_day
    3: shikigami_unlock_roguelike_stage
  roguelike_effect_type:
    0: roguelike_effect_none
    1: roguelike_effect_static_combat
    2: roguelike_effect_dynamic_combat
    3: roguelike_effect_disable_spring_cell
    4: roguelike_effect_add_talent
    5: roguelike_effect_add_level_trap
    6: roguelike_effect_clear_level_trap
    7: roguelike_effect_random_clear_a_curse
    8: roguelike_effect_clear_all_curse
    9: roguelike_effect_add_rune_max_count
    10: roguelike_effect_add_rune_use_count
    11: roguelike_effect_fill_rune_use_count
    12: roguelike_effect_use_rune_prob_not_sub
    13: roguelike_effect_clear_mist
    14: roguelike_effect_add_resource
    15: roguelike_effect_random_avatar_noheal
    16: roguelike_effect_add_card_type_weight
    17: roguelike_effect_sub_refresh_card_cost
    18: roguelike_effect_change_gadget_num
    19: roguelike_effect_sub_curse_prob
    20: roguelike_effect_prob_free_refresh_card
    21: roguelike_effect_add_card_type_weight_room_first
    22: roguelike_effect_at_most_trap_count
    23: roguelike_effect_spring_and_boss
    24: roguelike_effect_at_least_store_count
    25: roguelike_effect_ban_guard
  roguelike_card_label:
    0: roguelike_card_label_combat
    1: roguelike_card_label_level
    2: roguelike_card_label_rune
    3: roguelike_card_label_equipment
  roguelike_card_type:
    0: roguelike_card_tpye_none
    1: roguelike_card_tpye_ssr
    2: roguelike_card_tpye_sr
    3: roguelike_card_tpye_r
  rogue_cell_type:
    0: rogue_cell_type_none
    1: rogue_cell_type_init
    2: rogue_cell_type_store
    3: rogue_cell_type_elite
    4: rogue_cell_type_normal
    5: rogue_cell_type_spring
    6: rogue_cell_type_boss
    7: rogue_cell_type_chest
  rogue_create_gadget_type:
    0: rogue_gadget_type_none
    1: rogue_gadget_type_door
    2: rogue_gadget_type_normal_operator
    3: rogue_gadget_type_elite_operator
    4: rogue_gadget_type_spring_operator_reveal
    5: rogue_gadget_type_spring_operator_revive
    6: rogue_gadget_type_spring_operator_switch
    7: rogue_gadget_type_spring_store
    8: rogue_gadget_type_blast
    9: rogue_gadget_type_trap
    10: rogue_gadget_type_breakages
    11: rogue_gadget_type_ball
    12: rogue_gadget_type_guard
  rogue_gadget_state_type:
    0: rogue_gadget_state_none
    1: rogue_gadget_state_door_open
    2: rogue_gadget_state_door_close
    3: rogue_gadget_state_operator_default
    4: rogue_gadget_state_operator_in_challenge
    5: rogue_gadget_state_operator_finish_challenge
    6: rogue_gadget_state_operator_after_use
    7: rogue_gadget_state_operator_forbid
  rogue_gadget_dir_type:
    0: rogue_gadget_rot_up
    1: rogue_gadget_rot_down
    2: rogue_gadget_rot_left
    3: rogue_gadget_rot_right
  rogue_monster_pool_difficulty_type:
    0: rogue_monster_difficulty_normal
    1: rogue_monster_difficulty_elite_easy
    2: rogue_monster_difficulty_elite_hard
    3: rogue_monster_difficulty_boss
  salesman_special_reward_type:
    0: special_reward
    1: special_material
    2: special_drop
  salesman_special_reward_obtain_method:
    0: method_day_probability
    1: method_day_accumulation
  reward_resource_type:
    0: elec
    1: fire
    2: grass
    3: ice
    4: rock
    5: water
    6: wind
  shop_type:
    0: shop_type_none
    900: shop_type_recommend
    901: shop_type_hcoin
    902: shop_type_package
    903: shop_type_mcoin
    1001: shop_type_paimon
    1002: shop_type_city
    1003: shop_type_blacksmith
    1004: shop_type_grocery
    1005: shop_type_food
    1006: shop_type_sea_lamp
    1007: shop_type_virtual_shop
    1008: shop_type_liyue_grocery
    1009: shop_type_liyue_souvenir
    1010: shop_type_liyue_restaurant
    1011: shop_type_npc_flora
    1012: shop_type_npc_charles
    1013: shop_type_npc_shiliu
    1014: shop_type_npc_schulz
    1015: shop_type_npc_brook
    1016: shop_type_npc_hopkins
    1017: shop_type_npc_draff
    1018: shop_type_npc_chloris
    1019: shop_type_npc_licai
    1020: shop_type_npc_yueshu
    1021: shop_type_npc_gui
    1022: shop_type_npc_gao
    1023: shop_type_npc_sun
    1024: shop_type_npc_qiming
    1025: shop_type_npc_zhangshun
    1026: shop_type_npc_chen
    1027: shop_type_npc_er_niang
    1028: shop_type_npc_shitou
    1029: shop_type_npc_jifang
    1030: shop_type_npc_zhu
    1031: shop_type_npc_bai
    1032: shop_type_npc_kai
    1033: shop_type_npc_linglang
    1034: shop_type_npc_verr_goldet
    1035: shop_type_npc_zhou
    1036: shop_type_task_ekaterina
    1037: shop_type_activity_aster
    1038: shop_type_task_tartaglia
    1039: shop_type_npc_harris
    1040: shop_type_activity_dragon_spine
    1041: shop_type_activity_treasure_map
    1042: shop_type_npc_yinian
    1043: shop_type_activity_sea_lamp
    1044: shop_type_activity_fleur_fair
    1045: shop_type_npc_changshun
    1046: shop_type_npc_bolai
    1047: shop_type_npc_ashanpo
    1048: shop_type_home
    1049: shop_type_home_limit
    1050: shop_type_npc_master_lu
    1051: shop_type_npc_goth
    1052: shop_type_costume
    1053: shop_type_npc_obata
    1054: shop_type_npc_qiuyue
    1055: shop_type_npc_ryouko
    1056: shop_type_inazuma_grocery
    1057: shop_type_inazuma_souvenir
    1058: shop_type_inazuma_restaurant
    1059: shop_type_npc_kuroda
    1060: shop_type_npc_kiminami_anna
    1061: shop_type_npc_tomoki
    1062: shop_type_npc_karpillia
    1063: shop_type_blacksmith_inazuma
    1064: shop_type_fish
    1065: shop_type_fish_liyue
    1066: shop_type_fish_inazuma
    1067: shop_type_npc_kiyoko
    1068: shop_type_expired_widget_mengde
    15001: shop_type_activity_channeller_slab
    16001: shop_type_activity_summer_time
    16002: shop_type_activity_bounce_conjuring
    20001: shop_type_activity_blitz_rush
    20002: shop_type_activity_chess
    20003: shop_type_activity_roguelike_dungeon
  activity_shop_sheet_cond_type:
    0: activity_shop_sheet_cond_none
    1: activity_shop_sheet_cond_quest_finish
    2: activity_shop_sheet_cond_time_equal_greater
    3: activity_shop_sheet_cond_sea_lamp_phase
  sumo_difficulty_type:
    0: sumo_difficulty_easy
    1: sumo_difficulty_mid
    2: sumo_difficulty_hard
  skill_drag:
    0: drag_none
    1: drag_rotate_camera
    2: drag_rotate_character
  monitor_type:
    0: monitor_never
    1: monitor_off_stage
    2: monitor_on_stage
    3: monitor_always
  ability_state:
    0: none
    1: invincible
    2: deny_lock_on
    4: is_ghost_to_allied
    8: is_ghost_to_enemy
    16: element_burning
    32: element_wet
    64: element_grass_growing
    128: element_frozen
    256: paralyze
    512: lock_hp
    1024: ignore_trigger_bullet
    2048: element_shock
    4096: struggle
    8192: element_rock
    16384: element_conductive
    32768: element_ice
    65536: element_freeze
    131072: attack_up
    262144: defense_up
    524288: speed_up
    1048576: defense_down
    2097152: speed_down
    4194304: element_wind
    8388608: element_electric
    16777216: element_fire
    33554432: element_stick_rock
    67108864: limbo
    134217728: mute_taunt
    268435456: element_petrifaction
    1073741824: ignore_add_energy
    2147483648: no_heal
    8589934592: corruption
    17179869184: unlock_frequency_limit
  activity_skill_target:
    0: ast_avatar
    1: ast_team
    2: ast_play
  battle_pass_schedule_reward_type:
    0: battle_pass_schedule_reward_weapon
    1: battle_pass_schedule_reward_wing
  battle_pass_mission_refresh_type:
    0: battle_pass_mission_refresh_daily
    1: battle_pass_mission_refresh_cycle
    2: battle_pass_mission_refresh_schedule
  quest_guide_type:
    0: quest_guide_none
    1: quest_guide_location
    2: quest_guide_npc
    3: quest_guide_gadget
  quest_guide_auto:
    0: quest_guide_auto_none
    1: quest_guide_auto_enable
    2: quest_guide_auto_disable
  quest_guide_style:
    0: quest_guide_style_none
    1: quest_guide_style_start
    2: quest_guide_style_target
    3: quest_guide_style_finish
    4: quest_guide_style_point
  quest_guide_layer:
    0: quest_guide_layer_none
    1: quest_guide_layer_ui
    2: quest_guide_layer_scene
  blossom_refresh_type:
    0: blossom_refresh_none
    1: blossom_refresh_scoin
    2: blossom_refresh_weapon
    3: blossom_refresh_exp
    4: blossom_refresh_crystal
    5: blossom_refresh_infused_crystal
    6: blossom_refresh_dragon_spine_a
    7: blossom_refresh_dragon_spine_b
    8: blossom_island_sentry_tower_a
    9: blossom_island_sentry_tower_b
    10: blossom_island_bomb
    11: blossom_refresh_blitz_rush_a
    12: blossom_refresh_blitz_rush_b
  blossom_refresh_cond_type:
    0: blossom_refresh_cond_none
    1: blossom_refresh_cond_player_level_equal_greater
    2: blossom_refresh_cond_player_level_less_than
    3: blossom_refresh_cond_open_state
    4: blossom_refresh_cond_quest_finish
    5: blossom_refresh_cond_activity_cond
    6: blossom_refresh_cond_scene_tag_added
  blossom_show_type:
    0: blossom_showtype_none
    1: blossom_showtype_challenge
    2: blossom_showtype_npctalk
    3: blossom_showtype_groupchallenge
  blossom_reward_type:
    0: blossom_reward_type_default
    1: blossom_reward_type_to_bag
  blossom_chest_show_type:
    0: blossom_chest_showtype_blossom
    1: blossom_chest_showtype_no_resin
  board_event_type:
    0: board_event_none
    1: board_event_kill_monster
    101: board_event_game
    102: board_event_gather
    104: board_event_accelerate
    105: board_event_use_item
    106: board_event_change_avatar
    107: board_event_skill
    108: board_event_region
  bored_action_type:
    0: bored_action_none
    1: bored_action_create_monster
    2: bored_action_ambush
    3: bored_action_enhance_gather
  buff_stack_type:
    0: buff_refresh
    1: buff_extend
    2: buff_stack
  server_buff_type:
    0: server_buff_none
    1: server_buff_avatar
    2: server_buff_team
    3: server_buff_tower
  animal_codex_type:
    0: codex_animal
    1: codex_monster
  animal_codex_sub_type:
    0: codex_subtype_elemental
    1: codex_subtype_hilichurl
    2: codex_subtype_abyss
    3: codex_subtype_fatui
    4: codex_subtype_automatron
    5: codex_subtype_human
    6: codex_subtype_beast
    7: codex_subtype_boss
    8: codex_subtype_aviary
    9: codex_subtype_animal
    10: codex_subtype_fish
    11: codex_subtype_critter
  animal_codex_count_type:
    0: codex_count_type_none
    1: codex_count_type_kill
    2: codex_count_type_fish
  material_codex_type:
    0: codex_collection
    1: codex_cooking_food
    2: codex_war_trophies
    3: codex_widget
  taunt_level:
    0: ability_taunt_level_1
    1: ability_taunt_level_2
    2: ability_taunt_level_3
    3: ability_taunt_level_4
    4: ability_taunt_level_5
    10: ability_taunt_level_max
    11: monster_taunt_level_1
    12: monster_taunt_level_2
    13: monster_taunt_level_3
    14: monster_taunt_level_4
    15: monster_taunt_level_5
    16: monster_taunt_level_6
    20: monster_taunt_level_max
  charge_fill_effect:
    0: charing_fill_positive
    1: charing_fill_negative
    2: charing_fill_none
  recipe_type:
    0: recipe_type_none
    1: recipe_type_combine
    2: recipe_type_convert
    3: recipe_type_combine_homeworld
  cook_bonus_type:
    0: cook_bonus_none
    1: cook_bonus_replace
    2: cook_bonus_proficiency
  coop_task_cond_type:
    0: coop_cond_none
    1: coop_cond_finish_quest
    2: coop_cond_player_level
    3: coop_cond_coop_point_finish
    4: coop_cond_avatar_fetter_level
    5: coop_cond_chapter_end_all_finish
    6: coop_cond_chapter_end_finish_count
  coop_cg_type:
    0: cg_none
    1: cg_male
    2: cg_female
  coop_point_type:
    0: point_none
    1: point_start
    2: point_middle
    3: point_end
  display_item_type:
    0: reliquary_item
  draft_exec_type:
    0: draft_exec_none
    1: draft_exec_gallery
    2: draft_exec_hide_and_seek
  dungun_entry_type:
    0: dungen_entry_type_none
    1: dungen_entry_type_avatar_exp
    2: dungen_entry_type_weapon_promote
    3: dungen_entry_type_avatar_talent
    4: dungen_entry_type_reliquary
    5: dungen_entry_type_scoin
    6: dungeon_entry_type_obscurae
    7: dungeon_entry_type_normal
    8: dungeon_entry_type_trial
    9: dungeon_entry_type_effigy
    10: dungeon_entry_type_fleur_fair
    11: dungeon_entry_type_channeller_slab_loop
    12: dungeon_entry_type_channeller_slab_one_off
    13: dungeon_entry_type_blitz_rush
    14: dungeon_entry_type_sumo
    15: dungeon_entry_type_activity
  dungeon_entry_satisfied_condition_type:
    0: dungeon_entry_condition_none
    1: dungeon_entry_condition_level
    2: dungeon_entry_condition_quest
  dungeon_cond_type:
    0: dungeon_cond_none
    3: dungeon_cond_kill_monster
    5: dungeon_cond_kill_group_monster
    7: dungeon_cond_kill_type_monster
    9: dungeon_cond_finish_quest
    11: dungeon_cond_kill_monster_count
    13: dungeon_cond_in_time
    14: dungeon_cond_finish_challenge
    15: dungeon_cond_end_multistage_play
  challenge_type:
    0: challenge_none
    1: challenge_kill_count
    2: challenge_kill_count_in_time
    3: challenge_survive
    4: challenge_time_fly
    5: challenge_kill_count_fast
    6: challenge_kill_count_frozen_less
    7: challenge_kill_monster_in_time
    8: challenge_trigger_in_time
    9: challenge_guard_hp
    10: challenge_kill_count_guard_hp
    11: challenge_trigger_in_time_fly
    12: challenge_trigger2_avoid_trigger1
    13: challenge_father_succ_in_time
    14: challenge_monster_damage_count
    15: challenge_element_reaction_count
    16: challenge_freeze_enemy_in_time
    17: challenge_crystal_element_reaction_count
    18: challenge_sheild_absorb_damage_count
    19: challenge_element_trial
    20: challenge_swirl_element_reaction_count
    21: challenge_die_less_in_time
    22: challenge_survive_in_time
    23: challenge_trigger_count
  challenge_record_type:
    0: challenge_record_type_none
    1: challenge_record_type_in_time
  interrupt_button_type:
    0: interrupt_button_type_none
    1: interrupt_button_type_host
    2: interrupt_button_type_all
  sub_challenge_fade_out_type:
    0: subchallenge_fadeout_type_none
    1: subchallenge_fadeout_type_success
    2: subchallenge_fadeout_type_fail
    3: subchallenge_fadeout_type_finish
  sub_challenge_banner_type:
    0: subchallenge_banner_type_none
    1: subchallenge_banner_type_success
    2: subchallenge_banner_type_fail
    3: subchallenge_banner_type_show_final
    4: subchallenge_banner_type_hide_final
  dungeon_roster_cycle_type:
    0: dungeon_roster_cycle_type_none
    1: dungeon_roster_cycle_type_by_order
  element_reaction_type:
    0: none
    1: explode
    2: stream
    3: burning
    4: burned
    5: wet
    6: grass_growing
    7: melt
    8: freeze
    9: anti_fire
    10: rock
    11: slow_down
    12: shock
    13: wind
    14: electric
    15: fire
    16: superconductor
    17: swirl_fire
    18: swirl_water
    19: swirl_electric
    20: swirl_ice
    21: swirl_fire_accu
    22: swirl_water_accu
    23: swirl_electric_accu
    24: swirl_ice_accu
    25: stick_rock
    26: stick_water
    27: crystallize_fire
    28: crystallize_water
    29: crystallize_electric
    30: crystallize_ice
    31: frozen_broken
  endure_type:
    0: none
    1: default
    2: avatar_sword
    3: avatar_pole
    4: avatar_claymore
    5: avatar_bow
    6: avatar_catalyst
    7: monster_minion
    8: monster_grunt_humanoid
    9: monster_grunt_other
    10: monster_demiboss_humanoid
    11: monster_demiboss_other
    12: monster_boss_humanoid
    13: monster_boss_other
    14: monster_slime
    15: monster_tartaglia
  entity_type:
    0: none
    1: avatar
    2: monster
    3: bullet
    4: attack_phyisical_unit
    5: aoe
    6: camera
    7: enviro_area
    8: equip
    9: monster_equip
    10: grass
    11: level
    12: npc
    13: trans_point_first
    14: trans_point_first_gadget
    15: trans_point_second
    16: trans_point_second_gadget
    17: drop_item
    18: field
    19: gadget
    20: water
    21: gather_point
    22: gather_object
    23: airflow_field
    24: speedup_field
    25: gear
    26: chest
    27: energy_ball
    28: elem_crystal
    29: timeline
    30: worktop
    31: team
    32: platform
    33: amber_wind
    34: env_animal
    35: seal_gadget
    36: tree
    37: bush
    38: quest_gadget
    39: lightning
    40: reward_point
    41: reward_statue
    42: mp_level
    43: wind_seed
    44: mp_play_reward_point
    45: view_point
    46: remote_avatar
    47: general_reward_point
    48: play_team
    49: offering_gadget
    50: eye_point
    51: miracle_ring
    52: foundation
    53: widget_gadget
    54: vehicle
    55: danger_zone
    56: echo_shell
    57: home_gather_object
    58: projector
    59: screen
    60: custom_tile
    61: fish_pool
    62: fish_rod
    63: custom_gadget
    64: roguelike_operator_gadget
    99: place_holder
  environment_type:
    0: environment_none
    1: environment_general
    2: environment_grass
    3: environment_riverside
    4: environment_mountain
    5: environment_crab
    6: environment_butterfly
    7: environment_grassshopper
    8: environment_bush
    9: environment_firefly
    10: environment_woods
    11: environment_butterfly_inazuma_high
    12: environment_butterfly_inazuma_low
    13: environment_firefly_inazuma
    14: environment_crab_inazuma
    15: environment_lizard_inazuma
  exhibition_card_order_type:
    0: exhibition_card_order_none
    1: exhibition_card_order_less_better
    2: exhibition_card_order_greater_better
  exhibition_score_type:
    0: exhibition_score_none
    1: exhibition_score_value
    2: exhibition_score_display_param_factor
  expedition_open_cond_type:
    0: exp_open_cond_level
    1: exp_open_cond_point
    2: exp_open_cond_quest
  assoc_type:
    0: assoc_type_none
    1: assoc_type_mondstadt
    2: assoc_type_liyue
    3: assoc_type_mainactor
    4: assoc_type_fatui
    5: assoc_type_inazuma
    6: assoc_type_ranger
  fish_stock_type:
    0: fish_stock_type_none
    1: fish_stock_type_any
    2: fish_stock_type_day
    3: fish_stock_type_night
  fish_skill_category:
    0: fish_skill_category_none
    1: fish_skill_category_force
    2: fish_skill_category_bonus
  fish_skill_type:
    0: fish_skill_none
    1: fish_skill_hp
    2: fish_skill_force
    3: fish_skill_time
  vision_level_type:
    0: vision_level_normal
    1: vision_level_little_remote
    2: vision_level_remote
    3: vision_level_super
    4: vision_level_nearby
    5: vision_level_super_nearby
    6: vision_level_num
  interact_action_type:
    0: interact_action_none
    1: interact_action_state
    2: interact_action_set_gadget_chain_buff
  interact_cond_type:
    0: interact_cond_none
    1: interact_cond_widget_on
    2: interact_cond_has_item
  guest_button_show_type:
    0: hide
    1: grap
  point_location:
    0: point_ground
    1: point_air
  gather_save_type:
    0: gather_save_type_none
    1: gather_save_type_low
    2: gather_save_type_mid
    3: gather_save_type_high
    4: gather_save_type_own
  bag_tab:
    0: tab_none
    1: tab_weapon
    2: tab_equip
    3: tab_avatar
    4: tab_food
    5: tab_material
    6: tab_quest
    7: tab_consume
    8: tab_widget
    9: tab_homeworld
  giving_method:
    0: giving_method_none
    1: giving_method_exact
    2: giving_method_group
    3: giving_method_vague_group
    4: giving_method_any_no_finish
  arith_type:
    0: arith_none
    1: arith_add
    2: arith_multi
    3: arith_sub
    4: arith_divide
  guide_trigger_type:
    0: player_level
    1: any_avatar_level
    2: get_new_item
    3: openstate_change
    4: has_avatar_num
    5: personalline_key
    6: climate_type_change
    7: worldplayer_update
    8: pushtips_notify_finish
    9: new_pushtips
  guide_platform_type:
    0: platform_ios
    1: platform_android
    2: platform_pc
    3: platform_ps4
  h5activity_cond_type:
    0: h5_activity_cond_none
    1: h5_activity_cond_player_level
    2: h5_activity_cond_register_time_great_equal
    3: h5_activity_cond_day_count_great_equal
  furniture_deploy_type:
    0: interior
    1: exterior
    2: interior_room
    3: interior_hall
    4: sky_box
  home_world_limit_shop_cond_type:
    0: homeworld_limit_shop_cond_type_none
    1: homeworld_limit_shop_cond_type_home_level
  home_avatar_event_type:
    0: home_avatar_event_none
    1: home_avatar_reward_event
    2: home_avatar_summon_event
  home_avatar_event_cond_type:
    0: home_avatar_cond_none
    1: home_avatar_cond_fetter_level
    2: home_avatar_cond_exp_level
  home_world_field_type:
    0: home_field_none
    1: home_field_dry
    2: home_field_flower
    3: home_field_water
  hunting_clue_point_type:
    0: hunting_clue_iteract
    1: hunting_clue_monster
    2: hunting_clue_gather
    3: hunting_clue_final
  hunting_monster_group_type:
    0: hunting_group_type_none
    1: hunting_group_type_clue
    2: hunting_group_type_associated
  investigation_type:
    0: investigation_adventure
    1: investigation_homeworld
  investigation_monster_map_mark_create_type:
    0: after_unlock
    1: nerver_create
    2: extra_conditions
  investigation_monster_map_mark_create_condition_type:
    0: invalid
    1: player_level_ge
  monster_category:
    0: all
    1: common
    2: elite
    3: boss
    4: enum_count
  loading_tips_situation_type:
    0: situation_type_none
    1: situation_type_common_transport
    2: situation_type_enter_quest_dungeon
    3: situation_type_enter_daily_dungeon
    4: situation_type_enter_tower
    5: situation_type_enter_room
    6: situation_type_login
    7: situation_type_logout
    8: situation_type_revive
    9: situation_type_enter_homeworld
    10: situation_type_enter_island
  loading_area_type:
    0: loading_area_none
    1: loading_area_city
    2: loading_area_outdoor
  localization_asset_type:
    0: loc_default
    1: loc_image
    2: loc_text
    3: loc_subtitle
    4: loc_trophy_set_icon
  match_sub_type:
    0: match_sub_type_none
    1: match_sub_type_hide
    2: match_sub_type_bounce_conjuring
  document_type:
    0: book
    1: video
  source_jump_type:
    0: jump_none
    1: jump_mall
  miracle_tag:
    0: tag_none
    1: tag_fire
    2: tag_test_one
    3: tag_test_two
    4: tag_scoin
    5: tag_avatar_exp
    6: tag_weapon_exp
    7: tag_avatar_promote
    8: tag_weapon_promote
    9: tag_skill_book
  monster_type:
    0: monster_none
    1: monster_ordinary
    2: monster_boss
    3: monster_env_animal
    4: monster_little_monster
    5: monster_fish
  monster_security_level:
    0: normal
    1: elite
    2: boss
  monster_rarity_type:
    0: monster_rarity_none
    1: monster_rarity_small_monster
    2: monster_rarity_elite_monster
    3: monster_rarity_boss_monster
    4: monster_rarity_big_boss_monster
    5: monster_rarity_small_env_animal
  mp_play_type:
    0: mp_play_none
    1: mp_play_crucible
    2: mp_play_aster
    3: mp_play_dragon_spine
    4: mp_play_water_sprite
  mp_play_show_type:
    0: mp_play_show_normal
    1: mp_play_show_no_resin
    2: mp_play_show_two_material
  mp_player_settle_type:
    0: mp_play_settle_type_none
    1: mp_play_settle_type_watcher_finish
    2: mp_play_settle_type_watcher_progress
    3: mp_play_settle_type_monster_take_demage
    4: mp_play_settle_type_monster_kill_num
    5: mp_play_settle_type_monster_killer
  mp_player_settle_sync_type:
    0: mp_play_settle_sync_type_none
    1: mp_play_settle_sync_type_watcher_progress
    2: mp_play_settle_sync_type_mp_group_variable
    3: mp_play_settle_sync_type_statistic_value
  new_activity_type:
    0: new_activity_general
    1: new_activity_sea_lamp
    2: new_activity_crucible
    3: new_activity_salesman
    4: new_activity_trial_avatar
    5: new_activity_signin
    6: new_activity_bonus
    7: new_activity_newbeebonus
    8: new_activity_personal_liine
    9: new_activity_delivery
    10: new_activity_flight
    1100: new_activity_aster
    1200: new_activity_dragonspine
    1201: new_activity_reunion
    1202: new_activity_effigy
    1203: new_activity_tower_reset
    1204: new_activity_treasure_map
    99: new_activity_temp
    1205: new_activity_salesman_mp
    1300: new_activity_blessing
    1301: new_activity_expedition
    1302: new_activity_sea_lamp_new
    1401: new_activity_operations_bonus
    1501: new_activity_monster_banner_drake_primo_rock
    1400: new_activity_fleur_fair
    1402: new_activity_arena_challenge
    1403: new_activity_water_spirit_challenge
    1404: new_activity_signin_companion
    1405: new_activity_coop
    1502: new_activity_channeler_slab
    1503: new_activity_misttrial
    1504: new_activity_hideandseek
    1505: new_activity_find_hilichurl
    1506: new_activity_monster_banner_effigy_ice
    1507: new_activity_homeworld
    1508: new_activity_h5
    1600: new_activity_summer_time
    1601: new_activity_buoyant_combat
    1602: new_activity_echo_shell
    1603: new_activity_bounce_conjuring
    1604: new_activity_daoqi_advertisement
    2001: new_activity_blitz_rush
    2002: new_activity_chess
    2003: new_activity_monster_banner_effigy_fire
    2004: new_activity_monster_banner_perpetual
    2005: new_activity_personal_liine_2
    2100: new_activity_general_banner
    2101: new_activity_luna_rite
    2102: new_activity_sumo
    2103: new_activity_moonfin_trial
    2104: new_activity_monster_banner_effigy_water
    2105: new_activity_monster_banner_raijin
    2200: new_activity_plant_flower
    2201: new_activity_roguelike_dungeon
    2202: new_activity_music_game
    2203: new_activity_dig
    2204: new_activity_moonfin_banner
  new_activity_cond_type:
    0: new_activity_cond_none
    1: new_activity_cond_time_greater
    2: new_activity_cond_time_less
    3: new_activity_cond_player_level_greater
    4: new_activity_cond_quest_finish
    5: new_activity_cond_finish_talk
    6: new_activity_cond_create_npc
    7: new_activity_cond_not_finish_talk
    8: new_activity_cond_salesman_can_deliver
    9: new_activity_cond_salesman_can_get_reward
    10: new_activity_cond_aster_mid_camp_refreshable
    11: new_activity_cond_finish_watcher
    12: new_activity_cond_days_great_equal
    13: new_activity_cond_days_less
    14: new_activity_cond_player_level_great_equal
    15: new_activity_cond_scene_mp_play_activated
    16: new_activity_cond_sea_lamp_popularit
    17: new_activity_cond_sea_lamp_phase
    18: new_activity_cond_mechanicus_open
    19: new_activity_cond_finish_region_search_logic
    20: new_activity_cond_finish_region_search
    21: new_activity_cond_finish_water_spirit_phase
    22: new_activity_cond_finish_find_hilichurl_level_equal
    23: new_activity_cond_finish_find_hilichurl_level_less
    24: new_activity_cond_finish_channeller_slab_oneoff_dungeon_in_stage
    25: new_activity_cond_finish_channeller_slab_any_oneoff_dungeon
    26: new_activity_cond_sepcified_activity_end
    27: new_activity_cond_unlocked_all_listed_scene_points
    28: new_activity_cond_treasure_map_bonus_spot_got_any_fragment
    29: new_activity_cond_item_count_greater
    30: new_activity_cond_quest_global_var_greater
    31: new_activity_cond_quest_global_var_less
    32: new_activity_cond_quest_global_var_equal
    33: new_activity_cond_finish_dig_activity
    34: new_activity_cond_group_bundle_finished
    35: new_activity_cond_plant_flower_can_deliver
    36: new_activity_cond_luna_rite_atmosphere
  new_activity_sale_type:
    0: new_activity_sale_type_none
    1: new_activity_sale_type_weapon_upgrade
  billboard_type:
    0: none
    1: sneak
    2: icon
  npc_body_type:
    0: none
    1: avatar_male
    2: avatar_lady
    3: avatar_boy
    4: avatar_girl
    5: avatar_loli
    6: avatar_paimon
    7: npc_male
    8: npc_female
    9: npc_muscleman
    10: npc_elder
    11: npc_child
    12: barbara
    13: bennett
    14: chongyun
    15: noel
    16: diona
    17: sayu
  offering_action_type:
    0: offering_action_none
    1: offering_action_open_routine
    2: offering_action_close_routine
    3: offering_action_notify_group
    4: offering_action_set_gadget_chain_level
  op_activity_bonus_type:
    0: type_none
    1: type_daily
    2: type_sum
  open_state_cond_type:
    0: open_state_cond_none
    1: open_state_cond_player_level
    2: open_state_cond_quest
    3: open_state_cond_parent_quest
    4: open_state_city_reputation_level
    5: open_state_offering_level
  personal_line_activity_feature:
    0: legend_quest
    1: no_legend_quest
  photograph_task_type:
    0: photograph_task_type_normal
    1: photograph_task_type_interaction
  ps_activities_category_type:
    0: progress
    1: open_ended
    2: competitive
    3: challenge
  qte_type:
    0: qte_type_none
    1: qte_type_any_step_fail_to_fail
    2: qte_type_never_fail
  qte_action_type:
    0: qte_action_none
    1: qte_action_finish_quest
    2: qte_action_fail_quest
  ban_group_type:
    0: ban_group_invalid
    1: ban_group_common
    2: ban_group_transport_only
    3: ban_group_transport_map
    4: ban_group_transpor_goto_scene
  quest_content_type:
    0: quest_content_none
    1: quest_content_kill_monster
    2: quest_content_complete_talk
    3: quest_content_monster_die
    4: quest_content_finish_plot
    5: quest_content_obtain_item
    6: quest_content_trigger_fire
    7: quest_content_clear_group_monster
    8: quest_content_not_finish_plot
    9: quest_content_enter_dungeon
    10: quest_content_enter_my_world
    11: quest_content_finish_dungeon
    12: quest_content_destroy_gadget
    13: quest_content_obtain_material_with_subtype
    14: quest_content_nick_name
    15: quest_content_worktop_select
    16: quest_content_seal_battle_result
    17: quest_content_enter_room
    18: quest_content_game_time_tick
    19: quest_content_fail_dungeon
    20: quest_content_lua_notify
    21: quest_content_team_dead
    22: quest_content_complete_any_talk
    23: quest_content_unlock_trans_point
    24: quest_content_add_quest_progress
    25: quest_content_interact_gadget
    26: quest_content_daily_task_comp_finish
    27: quest_content_finish_item_giving
    107: quest_content_skill
    109: quest_content_city_level_up
    110: quest_content_pattern_group_clear_monster
    111: quest_content_item_less_than
    112: quest_content_player_level_up
    113: quest_content_dungeon_open_statue
    114: quest_content_unlock_area
    115: quest_content_open_chest_with_gadget_id
    116: quest_content_unlock_trans_point_with_type
    117: quest_content_finish_daily_dungeon
    118: quest_content_finish_weekly_dungeon
    119: quest_content_quest_var_equal
    120: quest_content_quest_var_greater
    121: quest_content_quest_var_less
    122: quest_content_obtain_various_item
    123: quest_content_finish_tower_level
    124: quest_content_bargain_succ
    125: quest_content_bargain_fail
    126: quest_content_item_less_than_bargain
    127: quest_content_activity_trigger_failed
    128: quest_content_main_coop_enter_save_point
    129: quest_content_any_manual_transport
    130: quest_content_use_item
    131: quest_content_main_coop_enter_any_save_point
    132: quest_content_enter_my_home_world
    133: quest_content_enter_my_world_scene
    134: quest_content_time_var_gt_eq
    135: quest_content_time_var_pass_day
    136: quest_content_quest_state_equal
    137: quest_content_quest_state_not_equal
    138: quest_content_unlocked_recipe
    139: quest_content_not_unlocked_recipe
    140: quest_content_fishing_succ
    141: quest_content_enter_rogue_dungeon
    142: quest_content_use_widget
  show_quest_guide_type:
    0: quest_guide_item_enable
    1: quest_guide_item_disable
    2: quest_guide_item_move_hide
  quest_exec_type:
    0: quest_exec_none
    1: quest_exec_del_pack_item
    2: quest_exec_unlock_point
    3: quest_exec_unlock_area
    4: quest_exec_unlock_force
    5: quest_exec_lock_force
    6: quest_exec_change_avatar_elemet
    7: quest_exec_refresh_group_monster
    8: quest_exec_set_is_flyable
    9: quest_exec_set_is_weather_locked
    10: quest_exec_set_is_game_time_locked
    11: quest_exec_set_is_transferable
    12: quest_exec_grant_trial_avatar
    13: quest_exec_open_bored
    14: quest_exec_rollback_quest
    15: quest_exec_notify_group_lua
    16: quest_exec_set_open_state
    17: quest_exec_lock_point
    18: quest_exec_del_pack_item_batch
    19: quest_exec_refresh_group_suite
    20: quest_exec_remove_trial_avatar
    21: quest_exec_set_game_time
    22: quest_exec_set_weather_gadget
    23: quest_exec_add_quest_progress
    24: quest_exec_notify_daily_task
    25: quest_exec_create_pattern_group
    26: quest_exec_remove_pattern_group
    27: quest_exec_refresh_group_suite_random
    28: quest_exec_active_item_giving
    29: quest_exec_del_all_specific_pack_item
    30: quest_exec_rollback_parent_quest
    31: quest_exec_lock_avatar_team
    32: quest_exec_unlock_avatar_team
    33: quest_exec_update_parent_quest_reward_index
    34: quest_exec_set_daily_task_var
    35: quest_exec_inc_daily_task_var
    36: quest_exec_dec_daily_task_var
    37: quest_exec_active_activity_cond_state
    38: quest_exec_inactive_activity_cond_state
    39: quest_exec_add_cur_avatar_energy
    41: quest_exec_start_bargain
    42: quest_exec_stop_bargain
    43: quest_exec_set_quest_global_var
    44: quest_exec_inc_quest_global_var
    45: quest_exec_dec_quest_global_var
    46: quest_exec_register_dynamic_group
    47: quest_exec_unregister_dynamic_group
    48: quest_exec_set_quest_var
    49: quest_exec_inc_quest_var
    50: quest_exec_dec_quest_var
    51: quest_exec_random_quest_var
    52: quest_exec_activate_scanning_pic
    53: quest_exec_reload_scene_tag
    54: quest_exec_register_dynamic_group_only
    55: quest_exec_change_skill_depot
    56: quest_exec_add_scene_tag
    57: quest_exec_del_scene_tag
    58: quest_exec_init_time_var
    59: quest_exec_clear_time_var
    60: quest_exec_modify_climate_area
    61: quest_exec_grant_trial_avatar_and_lock_team
    62: quest_exec_change_map_area_state
    63: quest_exec_deactive_item_giving
  random_quest_filter_type:
    0: rq_filter_none
    1: rq_filter_player_pos_ring
    2: rq_filter_npc
    3: rq_filter_player_level
  quest_special_show_type:
    0: special_show_none
    1: special_show_finish
    2: special_show_global_value_equal_to
  rand_task_content_type:
    0: rand_task_content_none
    1: rand_task_content_cleanup
    2: rand_task_content_rescue
    3: rand_task_content_guard
    4: rand_task_content_attack
    5: rand_task_content_investigate
    6: rand_task_content_pay
    7: rand_task_content_dungeon
    8: rand_task_content_tall
  refresh_type:
    0: refresh_none
    1: refresh_interval
    2: refresh_daily
    3: refresh_wee_kl_y
    4: refresh_daybegin_interval
  refresh_index_type:
    0: refreshindex_monster
    1: refreshindex_gadget
  equip_type:
    0: equip_none
    1: equip_bracer
    2: equip_necklace
    3: equip_shoes
    4: equip_ring
    5: equip_dress
    6: equip_weapon
  reliquary_main_affix_name:
    0: reliquary_main_affix_none
    1: reliquary_main_affix_tough
    2: reliquary_main_affix_strong
    3: reliquary_main_affix_ruthless
    4: reliquary_main_affix_fatal
    5: reliquary_main_affix_glory
    6: reliquary_main_affix_eminence
    7: reliquary_main_affix_exultation
    8: reliquary_main_affix_cruel
    9: reliquary_main_affix_holiness
    10: reliquary_main_affix_fierce
    11: reliquary_main_affix_wisdom
    12: reliquary_main_affix_concentration
  reminder_show_type:
    0: none
    1: talk
    2: bubble
  template_reminder_style_type:
    0: normal
    1: message_dialog
    2: dialog_box
    3: message_push_page_first_time
  server_message_show_type:
    0: server_message_show_type_none
    1: server_message_show_type_message
    2: server_message_show_type_info_message
  reunion_privilege_type:
    0: reunion_privilege_type_none
    1: reunion_privilege_type_dungeon
    2: reunion_privilege_type_blossom
  reward_source_system_type:
    0: none
    1: mp_play
  scene_type:
    0: scene_none
    1: scene_world
    2: scene_dungeon
    3: scene_room
    4: scene_home_world
    5: scene_home_room
    6: scene_activity
  world_type:
    0: world_none
    1: world_player
    2: world_home
  scene_tag_cond_type:
    0: scene_tag_cond_type_none
    1: scene_tag_cond_type_specific_activity_open
    2: scene_tag_cond_type_quest_global_var_equal
    4: scene_tag_cond_type_activity_content_open
    5: scene_tag_cond_type_quest_finish
  shop_refresh_type:
    0: shop_refresh_none
    1: shop_refresh_monthly
    2: shop_refresh_weekly
    3: shop_refresh_daily
  shop_precondition:
    0: shop_precondition_none
    1: shop_precondition_specify
    2: shop_precondition_rest
    3: shop_precondition_sheet_rest
    4: shop_precondition_sheet_teasure_map_region
    5: shop_precondition_home_level
    6: shop_precondition_quest_finish
    7: shop_precondition_sheet_fleur_fair_watcher_finish
    8: shop_precondition_quest_finish_all
    9: shop_precondition_quest_finish_any
  shopmall_entrance_type:
    0: entrance_normal
    1: entrance_recharge
    2: entrance_tab
  shop_recommend_tab_type:
    0: recommend_one
    1: recommend_col
    2: recommend_item
    3: recommend_jump
    4: recommend_package
  shopmall_recommend_cond_type:
    0: shopmall_recommend_cond_type_none
    1: shopmall_recommend_cond_player_level_ge
    2: shopmall_recommend_cond_time_begin
    3: shopmall_recommend_cond_time_end
  shop_recommend_tag_type:
    0: shop_recommend_tag_type_none
    1: shop_recommend_tag_type_limittime
    2: shop_recommend_tag_type_discount
    3: shop_recommend_tag_type_new
  card_product_type:
    0: card_product_type_invalid
    1: card_product_type_hcoin
    2: card_product_type_resin
  product_play_type:
    0: product_play_type_none
    1: product_play_type_battle_pass_normal
    2: product_play_type_battle_pass_extra
    3: product_play_type_battle_pass_upgrade
  sign_in_cond_type:
    0: sign_in_cond_none
    1: sign_in_cond_player_level
    2: sign_in_cond_finish_quest
    3: sign_in_cond_finish_parent_quest
    4: sign_in_cond_average_avatar_level
    5: sign_in_cond_max_avatar_level
    6: sign_in_cond_avatar_num
  bonus_activity_type:
    0: bonus_common
    1: bonus_xiangling
    2: bonus_babala
  state_type:
    0: buff_none
    1: buff_control
  strengthen_dungeon_type:
    0: dungeon_type_none
    1: dungeon_type_boss
    2: dungeon_type_break
    3: dungeon_type_normal
    4: dungeon_type_daily
    5: dungeon_type_tower
    6: dungeon_type_effigy
  team_resonance_cond_type:
    0: team_resonance_cond_none
    1: team_resonance_cond_all_different
  text_param_type:
    0: text_param_none
    1: text_param_avatar_name
    2: text_param_routine_type
  tower_cond_type:
    0: tower_cond_none
    1: tower_cond_finish_time_less_than
    2: tower_cond_left_hp_greater_than
    3: tower_cond_challenge_left_time_more_than
  tower_buff_lasting_type:
    0: tower_buff_lasting_none
    1: tower_buff_lasting_floor
    2: tower_buff_lasting_immediate
    3: tower_buff_lasting_level
  mechanicus_card_type:
    0: mechanicus_card_none
    1: mechanicus_card_buff
    2: mechanicus_card_curse
    3: mechanicus_card_challenge
  mechanicus_card_target_type:
    0: mechanicus_card_target_none
    1: mechanicus_card_target_all
    2: mechanicus_card_target_gadgets
  mechanicus_card_effect_type:
    0: mechanicus_card_effect_none
    1: mechanicus_card_effect_set_sgv
    2: mechanicus_card_effect_mod_cost
    3: mechanicus_card_effect_mod_refund
    4: mechanicus_card_effect_set_home_hp
    5: mechanicus_card_effect_add_home_hp
    6: mechanicus_card_effect_add_kill_points
    7: mechanicus_card_effect_mod_kill_points
    8: mechanicus_card_effect_add_gear_num
    9: mechanicus_card_effect_kill_gears
    10: mechanicus_card_effect_grant_points
    11: mechanicus_card_notify_lua
    12: mechanicus_passive_aura_bonus_points
    13: mechanicus_passive_aura_sgv
  tree_type:
    1: tree_type_birch
    2: tree_type_maple
    3: tree_type_pine
    4: tree_type_populus_euphratica
    5: tree_type_bamboo
    6: tree_type_energy_wood
    7: tree_type_cypress
    8: tree_type_firtree
    9: tree_type_cerasus
    10: tree_type_acer
    11: tree_type_cryptomeria
    12: tree_type_otogi
  tutorial_detail_type:
    0: tut_default
    1: tut_full_screen
  watcher_predicate_type:
    0: predicate_none
    1: predicate_quest_finish
    2: predicate_current_avatar
  push_tips_type:
    0: push_tips_none
    1: push_tips_tutorial
    2: push_tips_monster
  push_tips_codex_type:
    0: codex_none
    1: codex_element
    2: codex_enemy
    3: codex_system
    4: codex_adventure
    999: codex_unrecorded
  weapon_material_type:
    0: weapon_material_none
  climate_type:
    0: climate_none
    1: climate_sunny
    2: climate_cloudy
    3: climate_rain
    4: climate_thunderstorm
    5: climate_snow
    6: climate_mist
  widget_camera_action_type:
    0: widget_camera_action_none
    1: widget_camera_action_notify_server
  vehicle_limit_type:
    0: vehicle_limit_none
    1: vehicle_limit_only_vehicle
    2: vehicle_limit_not_vehicle
  world_area_type:
    0: level_none
    1: level_1
    2: level_2
    3: level_3
    10: level_play
  area_terrain_type:
    0: area_terrain_none
    1: area_terrain_city
    2: area_terrain_outdoor
  map_area_state:
    0: mist_close
    1: mist_open
  explore_event_type:
    0: explore_event_none
    1: explore_event_unlock_point
    2: explore_event_open_chest
    3: explore_event_clear_group_monster
    4: explore_event_item_add
    5: explore_event_enter_force
    6: explore_event_open_chest_by_gadget
    7: explore_event_gather
  world_area_levelup_action_type:
    0: world_area_action_none
    1: world_area_action_reward
    2: world_area_action_improve_stamina
    3: world_area_action_unlock_force
    4: world_area_action_unlock_dungeon_entrance
    5: world_area_action_activate_item
    6: world_area_action_unlock_dynamic_hard
    7: world_area_action_unlock_air_portal
    8: world_area_action_notify_group
  map_tag_type:
    0: big_world
    1: home_world
    2: islands
  camera_shake_type:
    0: center
    1: custom_vector
    2: hit_vector
  pin_type:
    0: none
    1: reference_counting
    2: fully_pin
  cutscene_type:
    0: none
    1: time_line_asset
    2: time_line_prefab
    3: time_line_scene
    4: other
  cutscene_init_pos_type:
    0: free
    1: relative_to_local_avatar
    2: relative_to_intee
    3: other
    4: relative_to_local_avatar_with_rotation
    5: relative_to_entity_with_rotation
  interaction_type:
    0: none
    1: dialog
    2: dialog_next
    3: dialog_finish
    4: dialog_select
    5: body_lang
    6: steer_to
    7: look_at
    8: look_at_eyectrl
    9: camera_move
    10: sound
    11: cutscene
    12: shop_exchange
    13: gadget_touch
    14: emo_sync
    15: ui_trigger
    16: emotion
    17: visible
    18: lua_action
    19: black_screen
    20: goddess
    21: show_message
    22: camera_focus
    23: dialog_clear
    24: audio_play
    25: video_play
    26: camera_dof
    27: move_to
    28: request_msg
    29: camera_shake
    30: emoji_bubble
    31: time_protect
    32: simple_black_screen
    33: simple_ui_show
    34: open_blossom_mark
    35: speech_bubble
    36: emotion_template
    37: sit_or_stand
    38: play_effect
    39: teleport_to
    40: first_sight
    41: set_animator
    42: play_post_effect
    43: play_frame_face_animation
    44: hide_widget_pet
    45: local_gadget_op
    46: other
  dialog_steer_type:
    0: free
    1: absolute
    2: to_local_avatar
    3: return_
    4: to_local_avatar_advanced
    5: look_at_only
    6: to_target
    7: to_target_advanced
    8: follow_camera
    9: other
  property_type:
    0: entity
    1: actor
  stack_method:
    0: top
    1: sum
    2: multiplied
    3: one_minus_multiplied
  select_targets_sort_type:
    0: default
    1: reversed
    2: nearest
    3: random
    4: higher_score
    5: low_hp_ratio
  ability_targetting:
    0: self
    1: caster
    2: target
    3: self_attack_target
    4: other
    5: applier
    6: owner
    7: cur_team_avatars
    8: cur_local_avatar
    9: origin_owner
    10: team
    11: target_owner
    12: target_origin_owner
    13: all_player_avatars
    14: all_teams
    15: remote_teams
    16: target_team
    17: caster_owner
    18: caster_origin_owner
    19: mp_level
    20: vehicle
  target_type:
    0: none
    1: alliance
    2: enemy
    3: self
    4: self_camp
    5: all
    6: all_except_self
  modifier_time_scale:
    0: owner
    1: level
  modifier_stacking:
    0: refresh
    1: unique
    2: prolong
    3: refresh_and_add_durability
    4: multiple
    5: multiple_refresh
    6: multiple_refresh_no_remove
    7: multiple_all_refresh
    8: global_unique
    9: overlap
    10: refresh_unique_durability
  unique_modifier_cond:
    0: greater
    1: smaller
  action_token_type:
    0: never_token
    1: frame_delay_token
    2: frame_cancel_token
  direction_angle_type:
    0: free
    1: horizontal
    2: vertical
  strike_type:
    0: default
    1: slash
    2: blunt
    3: pierce
    4: spear
    5: none
  attack_type:
    0: none
    1: melee
    2: range
    3: default
  hit_level:
    0: mute
    1: shake
    2: light
    3: heavy
    4: air
  retreat_type:
    0: by_attacker
    1: by_hit_direction
    2: by_tangent
    3: by_origin_owner
    4: by_hit_direction_inverse
  can_be_modified_by:
    0: none
    1: owner
    2: origin_owner
  gadget_state:
    0: default
    1: gather_drop
    101: chest_locked
    102: chest_opened
    103: chest_trap
    104: chest_bramble
    105: chest_frozen
    106: chest_rock
    201: gear_start
    202: gear_stop
    203: gear_action1
    204: gear_action2
    301: crystal_resonate1
    302: crystal_resonate2
    303: crystal_explode
    304: crystal_drain
    401: statue_active
    901: action01
    902: action02
    903: action03
  animator_param_type:
    0: trigger
    1: bool
    2: int
    3: float
  volatile_type:
    0: default
    1: topmost
    2: high
    3: middle
    4: low
    5: very_low
    6: off
  light_level:
    0: low
    1: middle
    2: high
    3: invalid
  grass_quality_level:
    1: very_low
    2: low
    3: middle
    4: high
    5: very_high
    6: ultra_high
    8: num
  antialiasing_method:
    0: none
    3: smaa
    4: taa
  taa_quality:
    0: taa_low
    1: taa_high
  smaa_quality:
    0: low
    1: medium
    2: high
    3: ultra
  option_type:
    0: default
    1: very_low
    2: low
    3: medium
    4: high
    5: very_high
  checkboard_type:
    0: none
    1: msaa2x
    2: line_half
  ssao_mode:
    0: disable
    1: ssao
    2: hbao
  motion_blur_quality:
    0: low
    1: high
    2: very_high
  particle_emit_level_type:
    0: extreme_low
    1: low
    2: middle
    3: high
  fade_tint_quality_level:
    1: very_low
    2: low
    3: middle
    4: high
    5: very_high
    6: num
  graphics_setting_entry_type:
    0: invalid
    1: target_frame_rate
    2: render_resolution
    3: shadow_quality
    4: postprocess_effect
    5: particle_effect
    6: comprehensive_quality
    7: v_sync
    8: anti_aliasing
    9: volumetric_fog
    10: reflection
    11: motion_blur
    12: bloom
    13: crowd_density
    14: obsolete_online_effect
    15: screen_subsurface_scattering
    16: online_effect
    17: anisotropic_filtering
  setting_entry_display_type:
    0: grade
    1: literally
    2: text_map
  config_graphic_setting_entry_sort_type:
    0: none
    1: num_ascend
    2: num_descend
  shadow_quality:
    0: very_low
    1: low
    2: medium
    3: high
    4: very_high
  config_shadow_resolution:
    0: low
    1: medium
    2: high
    3: very_high
  perf_cost_ratio_grade:
    0: min
    1: low
    2: middle
    4: high
    10: max
  text_language_type:
    0: language_none
    1: language_en
    2: language_sc
    3: language_tc
    4: language_fr
    5: language_de
    6: language_es
    7: language_pt
    8: language_ru
    9: language_jp
    10: language_kr
    11: language_th
    12: language_vn
    13: language_id
  voice_language_type:
    0: chinese
    1: english
    2: japanese
    3: korean
  real_scene_point_type:
    0: other
    1: trans_point_normal
    2: trans_point_statue
    3: trans_point_portal
    4: dungeon_entry
    5: dungeon_exit
    6: dungeon_way_point
    7: dungeon_quit_point
    8: dungeon_reward_point
    9: personal_scene_jump_point
    10: scene_building_point
    11: dungeon_slip_revive_point
    12: vehicle_summon_point
  scene_point_type:
    0: normal
    1: tower
    2: portal
    3: other
  point_map_visibility:
    0: normal
    1: on_unlocked
    2: never
  dungeon_entry_type:
    0: normal
    1: weekly
    2: daily
    3: tower
    4: effigy
    5: fleur_fair
    6: arena
    7: channeller_slab_loop
    8: channeller_slab_one_off
    9: blitz_rush
    10: sumo
    11: roguelike
  scene_building_type:
    0: none
    1: church
    2: knights
    3: pub
    4: souvenir
    5: restaurant
    6: general_cargo
    7: blacksmith
    8: team_arranger
    9: adventurers
    10: alchemy
    11: sea_lamp_giving
    12: blacksmith_liyue
    13: souvenir_liyue
    14: restaurant_liyue
    15: reputation
    16: reputation_liyue
    17: aster_middle_npc
    18: elder_tree
    19: miscs_marvs
    20: treasure_map_npc
    21: drake_primo_rock_npc
    22: activity_blessing_npc
    23: mechanicus_npc
    24: activity_arena_challenge
    25: fleur_fair_npc
    26: hide_and_seek_npc
    27: channeller_slab_npc
    28: bounce_conjuring_npc
    29: reputation_inazuma
    30: perpetual_npc
    31: oraionokami_tree
    32: restaurant_inazuma
    33: blacksmith_inazuma
    34: souvenir_inazuma
    35: bugyowu
    36: chashitsu
    37: luna_rite_npc
    38: fish
    39: fish_liyue
    40: fish_inazuma
    41: music_game_npc
    42: grow_flowers_npc
  vehicle_type:
    0: none
    1: ship
    2: skiff
  tile_special_type:
    0: none
    1: world_type_begin
    2: world_grass
    3: world_water
    4: world_electric_water
    5: world_type_end
    6: count
  massive_element_trigger_type:
    0: trigger_anti_fire
    1: trigger_burning
    2: trigger_explode
    3: trigger_superconductor
    4: trigger_melt
    5: trigger_steam
    6: trigger_freeze
    7: trigger_frozen
    8: trigger_electric_add
    9: trigger_vehicle_mute_ice
    10: count
  input_event_type:
    0: invalid
    1: move_event
    2: change_view_event
    3: open_map_event
    4: open_character_event
    5: open_bag_event
    6: open_gacha_event
    7: open_chat_event
    8: open_paimon_event
    9: toggle_quest_book_event
    10: to_avatar1event
    11: to_avatar2event
    12: to_avatar3event
    13: to_avatar4event
    14: trigger_change_with_skill_event
    15: cancel_change_with_skill_event
    16: trigger_wheel_menu_event
    17: close_wheel_menu_event
    18: trigger_skill1event
    19: trigger_skill2event
    20: trigger_skill3event
    21: trigger_skill4event
    22: trigger_skill5event
    23: release_skill1event
    24: release_skill2event
    25: release_skill3event
    26: release_skill4event
    27: release_skill5event
    28: selecting_event
    29: cancel_selecting_event
    30: toggle_attack_mode_event
    31: enter_focus_mode_event
    32: exit_focus_mode_event
    33: talk_or_pick_event
    34: left_shoulder_event
    35: left_shoulder_release_event
    36: right_shoulder_event
    37: right_shoulder_release_event
    38: menu_back_event
    39: menu_backing_event
    40: menu_backing_cancel_event
    41: menu_confirm_event
    42: menu_confirming_event
    43: menu_confirming_cancel_event
    44: menu_left_event
    45: menu_left_pressing_event
    46: menu_left_just_released_event
    47: menu_up_event
    48: menu_right_event
    49: menu_down_event
    50: left_stick_left_event
    51: left_stick_right_event
    52: left_stick_up_event
    53: left_stick_down_event
    54: left_stick_event
    55: right_stick_event
    56: left_trigger_event
    57: left_trigger_release_event
    58: left_trigger_axis_event
    59: right_trigger_event
    60: right_trigger_release_event
    61: right_trigger_axis_event
    62: zoom_camera_event
    63: reset_camera_event
    64: enter_element_view_event
    65: exit_element_view_event
    66: toggle_slow_move_event
    67: toggle_slow_move_temp_event
    68: reset_temp_slow_move_event
    69: slip_event
    70: debug_menu_event
    71: left_stick_button_event
    72: right_stick_button_event
    73: quest_transport_event
    74: left_stick_vertical_event
    75: left_stick_horizontal_event
    76: left_stick_move_event
    77: right_stick_vertical_event
    78: right_stick_horizontal_event
    79: right_stick_move_event
    80: right_stick_left_event
    81: right_stick_right_event
    82: right_stick_up_event
    83: right_stick_down_event
    84: d_pad_up_event
    85: d_pad_right_event
    86: d_pad_down_event
    87: d_pad_left_event
    88: key_up_event
    89: key_down_event
    90: key_left_event
    91: key_right_event
    92: d_pad_up_pressing_event
    93: d_pad_right_pressing_event
    94: d_pad_down_pressing_event
    95: d_pad_left_pressing_event
    96: d_pad_up_release_event
    97: d_pad_right_release_event
    98: d_pad_down_release_event
    99: d_pad_left_release_event
    100: help_event
    101: multiplayer_event
    102: to_prev_intee_event
    103: to_next_intee_event
    104: joypad_toggle_intee_event
    105: open_notify_event
    106: open_dungeon_factor_event
    107: open_handbook_event
    108: track_quest_event
    109: open_activity_normal_event
    110: open_push_tips_event
    111: open_battle_pass_event
    112: to_avatar5event
    113: open_chat_joystick_event
    114: open_chat_cancel_joystick_event
    115: challenge_interrupt_event
    116: challenge_interrupt_joystick_event
    117: hide_event
    118: trigger_quick_use_event
    119: release_quick_use_event
    120: trigger_activity_skill_event
    121: release_activity_skill_event
    122: extera_select_up_event
    123: extera_select_down_event
    124: extera_select_left_event
    125: extera_select_right_event
    126: music_game_left_up_event
    127: music_game_left_right_event
    128: music_game_left_down_event
    129: music_game_left_left_event
    130: music_game_right_up_event
    131: music_game_right_right_event
    132: music_game_right_down_event
    133: music_game_right_left_event
    134: music_game_left_up_released_event
    135: music_game_left_right_released_event
    136: music_game_left_down_released_event
    137: music_game_left_left_released_event
    138: music_game_right_up_released_event
    139: music_game_right_right_released_event
    140: music_game_right_down_released_event
    141: music_game_right_left_released_event
    142: music_game_free1event
    143: music_game_free2event
    144: music_game_free3event
    145: music_game_free4event
    146: music_game_free5event
    147: music_game_free6event
    148: music_game_free7event
    149: music_game_free8event
    150: music_game_free9event
    151: music_game_free10event
    152: music_game_free11event
    153: music_game_free12event
    154: music_game_free13event
    155: music_game_free14event
    156: music_game_free15event
    157: music_game_free16event
    158: music_game_free17event
    159: music_game_free18event
    160: music_game_free19event
    161: music_game_free20event
    162: music_game_free21event
    163: menu_next_event
    164: f1event
    165: f2event
    166: f3event
    167: return_event
    168: open_homeworld_handbook_event
    169: open_homeworld_editor_event
    170: open_team_page_event
    171: open_friend_page_event
    172: object_turn_up_event
    173: object_turn_down_event
    174: object_turn_left_event
    175: object_turn_right_event
    176: count
  context_event_type:
    0: invalid
    1: context_end
    2: frame_end
    3: close_event
    4: back_event
    5: confirm_event
    6: confirming_event
    7: confirming_cancel_event
    8: to_prev_primary_tab_event
    9: to_next_primary_tab_event
    10: to_prev_secondary_tab_event
    11: to_next_secondary_tab_event
    12: menu_navigation_up
    13: menu_navigation_down
    14: menu_navigation_left
    15: menu_navigation_right
    16: increase_count_event
    17: decrease_count_event
    18: trigger_input_event
    19: logout_confirming_event
    20: logout_confirm_end_event
    21: backing_event
    22: backing_cancel_event
    23: open_sorting_dropdown_event
    24: open_screen_dropdown_event
    25: revert_sorting_order_event
    26: open_dropdown_event
    27: to_next_dropdown_option_event
    28: to_prev_dropdown_option_event
    29: confirm_dropdown_select_event
    30: cancel_dropdown_select_event
    31: scroll_primary_scroller_event
    32: return_to_quest_event
    33: to_avatar1event
    34: to_avatar2event
    35: to_avatar3event
    36: to_avatar4event
    37: open_chat_event
    38: to_avatar5event
    39: action_north_event
    40: action_east_event
    41: action_south_event
    42: action_west_event
    43: show_item_detail_event
    44: show_player_level_reward_event
    45: change_team_event
    46: change_team_name_event
    47: fast_team_select_event
    48: submit_fast_team_select
    49: show_help_tips
    51: buy_resin
    52: change_focus_zone
    53: show_cycle_dungeon_only
    54: change_custom_mark_name
    55: remove_custom_mark
    56: open_chat_cancel_event
    57: increase_count_release_event
    58: decrease_count_release_event
    59: item_source_select_event
    60: challenge_interrupt_event
    61: to_next_scroller_option_event
    62: to_prev_scroller_option_event
    63: confirm_scroller_select_event
    64: cancel_scroller_select_event
    100: to_reward_detail_event
    101: to_prev_reward_event
    102: to_next_reward_event
    103: to_prev_main_quest_event
    104: to_next_main_quest_event
    105: toggle_chapter_fold
    106: navigate_to_quest_event
    107: scroll_sub_quest_event
    108: chapter_select_event
    109: choose_prev_chapter_event
    110: choose_next_chapter_event
    111: show_sub_quest_detail_event
    112: to_reward_page_event
    113: toggle_quest_tracking_event
    200: to_prev_tab_event
    201: to_next_tab_event
    202: use_event
    203: drop_event
    204: to_prev_row_event
    205: to_next_row_event
    206: to_prev_slot_event
    207: to_next_slot_event
    300: re_name_event
    400: ui_zoom_camera_event
    401: ui_details
    500: move_cursor_event
    501: zoom_in_map_event
    502: zoom_out_map_event
    600: common_left_stick_up_event
    601: common_left_stick_down_event
    602: common_left_stick_left_event
    603: common_left_stick_right_event
    604: common_change_view_event
    605: common_menu_up_event
    606: common_menu_left_event
    607: common_right_stick_left_event
    608: common_right_stick_right_event
    630: common_right_stick_up_event
    631: common_right_stick_down_event
    610: common_left_stick_button_event
    611: common_right_stick_button_event
    612: common_right_trigger_event
    613: common_left_trigger_event
    614: common_right_shoulder_event
    615: common_left_shoulder_event
    616: common_left_shoulder_release_event
    617: common_right_shoulder_release_event
    620: common_left_stick_vertical_event
    621: common_right_stick_vertical_event
    622: common_left_stick_horizontal_event
    700: revive
    800: goddess_contribute_some
    801: goddess_contribute_all
    802: goddess_scroll_upgrade_reward
    803: toggle_spring_auto_use_event
    900: dialog_select_event
    901: to_next_dialog_event
    1000: visitor_login_event
    1001: switch_server_login_event
    1020: gacha_notice_event
    1021: gacha_history_event
    1022: gacha_once_event
    1023: gacha_ten_times_event
    1024: gacha_next_event
    1101: buy_event
    1102: tips_event
    1103: buy_info_event
    1104: mall_help_event
    1201: material_add_event
    1202: mcoin_add_event
    1301: hide_event
    1302: photograph_open_emotion
    1401: quick_use_event
    1402: activity_skill_event
    1403: extera_select_up_event
    1404: extera_select_down_event
    1405: extera_select_left_event
    1406: extera_select_right_event
    1407: music_game_left_up_event
    1408: music_game_left_right_event
    1409: music_game_left_down_event
    1410: music_game_left_left_event
    1411: music_game_right_up_event
    1412: music_game_right_right_event
    1413: music_game_right_down_event
    1414: music_game_right_left_event
    1415: music_game_left_up_released_event
    1416: music_game_left_right_released_event
    1417: music_game_left_down_released_event
    1418: music_game_left_left_released_event
    1419: music_game_right_up_released_event
    1420: music_game_right_right_released_event
    1421: music_game_right_down_released_event
    1422: music_game_right_left_released_event
    1423: music_game_free1event
    1424: music_game_free2event
    1425: music_game_free3event
    1426: music_game_free4event
    1427: music_game_free5event
    1428: music_game_free6event
    1429: music_game_free7event
    1430: music_game_free8event
    1431: music_game_free9event
    1432: music_game_free10event
    1433: music_game_free11event
    1434: music_game_free12event
    1435: music_game_free13event
    1436: music_game_free14event
    1437: music_game_free15event
    1438: music_game_free16event
    1439: music_game_free17event
    1440: music_game_free18event
    1441: music_game_free19event
    1442: music_game_free20event
    1443: music_game_free21event
    1444: music_game_pause_event
    1445: open_team_page_event
    1446: open_friend_page_event
    1447: common_left_trigger_press_event
    1448: common_left_trigger_release_event
    1449: common_right_trigger_press_event
    1450: common_right_trigger_release_event
  input_action_type:
    -1: internal
    23: move_forward
    26: move_backward
    24: move_left
    25: move_right
    0: move_horizontal
    1: move_vertical
    29: move
    30: view_horizontal
    31: view_vertical
    32: change_view
    2: open_map
    3: open_character
    4: open_bag
    73: open_gacha
    75: open_chat
    5: open_paimon
    6: toggle_quest_book
    7: to_avatar1
    8: to_avatar2
    9: to_avatar3
    66: to_avatar4
    56: change_with_skill
    33: wheel_menu_trigger
    16: skill1
    17: skill2
    21: sprint_or_skill3
    15: jump_or_skill4
    20: skill5
    27: toggle_attack_mode
    28: enter_focus_mode
    22: talk_or_pick
    34: left_shoulder
    35: right_shoulder
    42: menu_back
    40: menu_confirm
    41: menu_left
    63: menu_up
    50: left_stick_left
    48: left_stick_right
    47: left_stick_up
    49: left_stick_down
    70: left_stick_vertical
    69: left_stick_horizontal
    128: left_stick_move
    67: left_stick_button
    62: right_stick_left
    60: right_stick_right
    59: right_stick_up
    61: right_stick_down
    43: d_pad_up
    44: d_pad_right
    45: d_pad_down
    46: d_pad_left
    51: left_trigger
    52: right_trigger
    54: zoom_camera
    57: reset_camera
    55: slow_move
    53: slip
    58: debug_menu
    18: quest_transport
    64: right_stick_vertical
    68: right_stick_horizontal
    137: right_stick_move
    19: right_stick_button
    10: help
    65: multiplayer
    71: menu_right
    72: menu_down
    76: open_notify
    77: open_dungeon_factor
    78: to_avatar5
    1000: to_avatar1trigger_skill
    1001: to_avatar2trigger_skill
    1002: to_avatar3trigger_skill
    1003: to_avatar4trigger_skill
    1004: to_avatar5trigger_skill
    79: open_handbook
    80: track_quest
    82: open_activity_normal
    81: open_push_tips
    83: open_battle_pass
    84: challenge_interrupt
    85: challenge_interrupt_joystick
    86: hide
    87: quick_use
    88: activity_skill
    89: extera_select_up
    90: extera_select_down
    91: extera_select_left
    92: extera_select_right
    94: music_game_left_up
    95: music_game_left_right
    96: music_game_left_down
    97: music_game_left_left
    98: music_game_right_up
    99: music_game_right_right
    100: music_game_right_down
    101: music_game_right_left
    102: music_game_free1
    103: music_game_free2
    104: music_game_free3
    105: music_game_free4
    106: music_game_free5
    107: music_game_free6
    108: music_game_free7
    109: music_game_free8
    110: music_game_free9
    111: music_game_free10
    112: music_game_free11
    113: music_game_free12
    114: music_game_free13
    115: music_game_free14
    116: music_game_free15
    117: music_game_free16
    118: music_game_free17
    119: music_game_free18
    120: music_game_free19
    121: music_game_free20
    122: music_game_free21
    123: menu_next
    124: f1
    125: f2
    126: f3
    127: return_
    129: open_homeworld_handbook
    130: open_homeworld_editor
    131: open_team_page
    132: open_friend_page
    133: object_turn_up
    134: object_turn_down
    135: object_turn_left
    136: object_turn_right
  action_event_type:
    0: any
    1: button_pressed
    2: button_released
    3: button_pressing
    4: button_unpressing
    5: button_long_pressed
    6: button_long_pressing
    7: button_long_released
    8: button_short_press_up
    9: button_repeating
    10: axis_active
    11: negative_button_repeating
  aster_phase:
    0: aster_phase_none
    1: aster_phase_little
    2: aster_phase_mid
    3: aster_phase_large
  dragon_spine_phase:
    0: dragon_spine_phase_none
    1: dragon_spine_phase_first
    2: dragon_spine_phase_second
    3: dragon_spine_phase_third
    4: dragon_spine_phase_fourth
  avatar_fashion_type:
    0: fashion_type_none
    1: fashion_type_flycloak
  talent_point_type:
    0: talent_point_none
    1: talent_point_small
    2: talent_point_big
  proud_skill_type:
    0: proud_skill_none
    1: proud_skill_core
    2: proud_skill_inherent
    3: proud_skill_active
  effect_target_type:
    0: effect_target_none
    1: effect_target_solo
    2: effect_target_team
  combine_unlock_method:
    0: combine_unlock_none
    1: combine_unlock_quest
    2: combine_unlock_formula
    3: combine_unlock_sea_lamp_quest
    4: combine_unlock_activity_cond_meet
  job_type:
    0: job_none
    1: job_swordman
    2: job_archer
  life_state:
    0: life_none
    1: life_alive
    2: life_dead
    3: life_revive
  prop_type:
    0: prop_none
    1001: prop_exp
    1002: prop_break_level
    1003: prop_satiation_val
    1004: prop_satiation_penalty_time
    2001: prop_gear_start_val
    2002: prop_gear_stop_val
    4001: prop_level
    10001: prop_last_change_avatar_time
    10002: prop_max_spring_volume
    10003: prop_cur_spring_volume
    10004: prop_is_spring_auto_use
    10005: prop_spring_auto_use_percent
    10006: prop_is_flyable
    10007: prop_is_weather_locked
    10008: prop_is_game_time_locked
    10009: prop_is_transferable
    10010: prop_max_stamina
    10011: prop_cur_persist_stamina
    10012: prop_cur_temporary_stamina
    10013: prop_player_level
    10014: prop_player_exp
    10015: prop_player_hcoin
    10016: prop_player_scoin
    10017: prop_player_mp_setting_type
    10018: prop_is_mp_mode_available
    10019: prop_player_world_level
    10020: prop_player_resin
    10022: prop_player_wait_sub_hcoin
    10023: prop_player_wait_sub_scoin
    10024: prop_is_only_mp_with_ps_player
    10025: prop_player_mcoin
    10026: prop_player_wait_sub_mcoin
    10027: prop_player_legendary_key
    10028: prop_is_has_first_share
    10029: prop_player_forge_point
    10035: prop_cur_climate_meter
    10036: prop_cur_climate_type
    10037: prop_cur_climate_area_id
    10038: prop_cur_climate_area_climate_type
    10039: prop_player_world_level_limit
    10040: prop_player_world_level_adjust_cd
    10041: prop_player_legendary_daily_task_num
    10042: prop_player_home_coin
    10043: prop_player_wait_sub_home_coin
    10044: prop_is_auto_unlock_specific_equip
  type_count:
    5: reliquary_type_count
  round_type:
    0: round_type_floor
    1: round_type_round
    2: round_type_ceil
  watcher_trigger_trace_back_type:
    0: watcher_trace_back_none
    1: watcher_trace_back_yes
    2: watcher_trace_back_no
  region_shape:
    0: region_none
    1: region_sphere
    2: region_cubic
    3: region_cylinder
    4: region_polygon
  event_type:
    0: event_none
    1: event_any_monster_die
    2: event_any_gadget_die
    3: event_variable_change
    4: event_enter_region
    5: event_leave_region
    6: event_gadget_create
    7: event_gadget_state_change
    8: event_dungeon_settle
    9: event_select_option
    10: event_client_execute
    11: event_any_monster_live
    12: event_specific_monster_hp_change
    13: event_city_levelup_unlock_dungeon_entry
    14: event_dungeon_broadcast_ontimer
    15: event_timer_event
    16: event_challenge_success
    17: event_challenge_fail
    18: event_seal_battle_begin
    19: event_seal_battle_end
    20: event_gather
    21: event_quest_finish
    22: event_monster_battle
    23: event_city_levelup
    24: event_cutscene_end
    25: event_avatar_near_platform
    26: event_platform_reach_point
    27: event_unlock_trans_point
    28: event_quest_start
    29: event_group_load
    30: event_group_will_unload
    31: event_group_will_refresh
    32: event_group_refresh
    33: event_dungeon_reward_get
    34: event_specific_gadget_hp_change
    35: event_monster_tide_over
    36: event_monster_tide_create
    37: event_monster_tide_die
    38: event_sealamp_phase_change
    39: event_blossom_progress_finish
    40: event_blossom_chest_die
    41: event_gadget_play_start
    42: event_gadget_play_start_cd
    43: event_gadget_play_stop
    44: event_gadget_lua_notify
    45: event_mp_play_prepare
    46: event_mp_play_battle
    47: event_mp_play_prepare_interrupt
    48: event_select_difficulty
    49: event_scene_mp_play_battle_state
    50: event_scene_mp_play_battle_stage_change
    51: event_scene_mp_play_battle_result
    52: event_seal_battle_progress_decrease
    53: event_general_reward_die
    54: event_scene_mp_play_battle_interrupt
    55: event_monster_die_before_leave_scene
    56: event_scene_mp_play_open
    57: event_offering_levelup
    58: event_dungeon_revive
    59: event_scene_mp_play_all_avatar_die
    60: event_dungeon_all_avatar_die
    61: event_general_reward_taken
    62: event_platform_reach_arraypoint
    63: event_scene_multistage_play_stage_end
    64: event_scene_multistage_play_end_stage_req
    65: event_mechanicus_picked_card
    66: event_pool_monster_tide_over
    67: event_pool_monster_tide_create
    68: event_pool_monster_tide_die
    69: event_dungeon_avatar_slip_die
    70: event_gallery_start
    71: event_gallery_stop
    72: event_time_axis_pass
    73: event_fleur_fair_dungeon_all_player_enter
    74: event_gadgettalk_done
    75: event_set_game_time
    76: event_hide_and_seek_player_quit
    77: event_avatar_die
    78: event_scene_multistage_play_stage_start
    79: event_gallery_progress_pass
    80: event_gallery_progress_empty
    81: event_gallery_progress_full
    82: event_hunting_finish_final
    83: event_use_widget_toy_fox_camera
    84: event_luna_rite_sacrifice
    85: event_sumo_switch_team_event
    86: event_fishing_start
    87: event_fishing_stop
    88: event_fishing_qte_finish
    89: event_fishing_timeout_flee
    90: event_rogue_cell_state_change
    91: event_rogue_cell_construct
    92: event_rogue_cell_finish_select_card
  gadget_type:
    0: gadget_none
    1: gadget_world_chect
    2: gadget_dungeon_secret_chest
    3: gadget_dungeon_pass_chest
  group_kill_policy:
    0: group_kill_none
    1: group_kill_all
    2: group_kill_monster
    3: group_kill_gadget
    4: group_kill_npc
  platform_rot_type:
    0: platform_rot_none
    1: platform_rot_speed
    2: platform_rot_round
  explore_type:
    0: explore_none
    1: explore_chest
    2: explore_temple
    3: explore_gather
  father_challenge_property:
    0: duration
    1: cur_succ
    2: cur_fail
    3: sum_succ
    4: sum_fail
  challenge_event_mark_type:
    0: challenge_event_none
    1: flight_time
    2: flight_gather_point
    3: summer_time_sprint_boat_time
    4: summer_time_sprint_boat_gather_point
  multistage_stage_type:
    0: multistage_stage_mechanicus_build
    1: multistage_stage_mechanicus_kill
    2: multistage_stage_mechanicus_flip_card
    3: multistage_stage_idle
    4: multistage_stage_fleur_fair_gallery
    5: multistage_stage_fleur_fair_boss
    6: multistage_stage_fleur_fair_preview
    7: multistage_stage_chess_build
    8: multistage_stage_chess_kill
  group_io_type:
    0: group_io_type_default
    1: group_io_type_flow
  common_player_tips_type:
    0: common_player_tips_type_finish
    1: common_player_tips_type_start
    2: common_player_tips_type_fail
  flow_suite_operate_policy:
    0: flow_suite_op_default
    1: flow_suite_op_complete
  gallery_progress_score_ui_type:
    0: gallery_progress_score_ui_type_none
    1: gallery_progress_score_ui_type_buoyant_combat
    2: gallery_progress_score_ui_type_sumo_stage
    3: gallery_progress_score_ui_type_dig
  gallery_progress_score_type:
    0: gallery_progress_score_none
    1: gallery_progress_score_no_degrade
  condition_type:
    0: condition_none
    1: condition_quest
    2: condition_player_level
    3: condition_var_eq
    4: condition_var_ne
    5: condition_var_gt
    6: condition_var_lt
    7: condition_unlock_point
    8: condition_player_level_gt_eq
    9: condition_player_level_lt
    10: condition_specific_activity_open
    11: condition_activity_type_open
  daily_task_action_type:
    0: daily_task_action_none
    1: daily_task_action_set_var
    2: daily_task_action_inc_var
    3: daily_task_action_dec_var
    4: daily_task_action_add_sure_pool
    5: daily_task_action_add_possible_pool
  daily_task_cond_type:
    0: daily_task_cond_none
    1: daily_task_cond_var_eq
    2: daily_task_cond_var_ne
    3: daily_task_cond_var_gt
    4: daily_task_cond_var_lt
  drop_random_type:
    0: drop_random_by_weight
    1: drop_random_independent
  drop_node_type:
    0: drop_node_leaf
    1: drop_node_tree
  data_entity_type:
    0: data_entity_none
    1: data_entity_monster
    2: data_entity_gadget
  challenge_cond_type:
    0: challenge_cond_none
    1: challenge_cond_in_time
    2: challenge_cond_all_time
    3: challenge_cond_kill_count
    4: challenge_cond_survive
    5: challenge_cond_time_inc
    6: challenge_cond_kill_fast
    7: challenge_cond_down_less
    8: challenge_cond_beaten_less
    9: challenge_cond_unnatural_count
    10: challenge_cond_frozen_less
    11: challenge_cond_kill_monster
    12: challenge_cond_trigger
    13: challenge_cond_guard_hp
    14: challenge_cond_time_dec
    15: challenge_cond_child_succ
    16: challenge_cond_child_fail
    17: challenge_cond_flight_get_badge
    18: challenge_cond_monster_damage_count
    19: challenge_cond_element_reaction_cont
    20: challenge_cond_freeze_enemy_in_time
    21: challenge_cond_crystal_element_reaction_count
    22: challenge_cond_sheild_absorb_damage_count
    23: challenge_cond_swirl_element_reaction_count
    24: challenge_cond_die_less
  exclusive_platform_type:
    0: exclusive_none
    1: exclusive_psn
  exclusive_rule_type:
    0: exclusive_rule_none
    1: exclusive_rule_weapon_affix
    2: exclusive_rule_flycloak
  exhibition_key_type:
    0: exhibition_key_none
    1: exhibition_key_server
    2: exhibition_key_lua
  exhibition_server_trigger_type:
    0: exhibition_server_trigger_none
    1: exhibition_server_trigger_test
    2: exhibition_server_trigger_hide_and_seek_hunter_win_last_time
    3: exhibition_server_trigger_hide_and_seek_hider_survival_time
    4: exhibition_server_trigger_hide_and_seek_win
    5: exhibition_server_trigger_damage_by_group_configid
    6: exhibition_server_trigger_damage_by_monsterid
    7: exhibition_server_trigger_chess_success
    8: exhibition_server_trigger_chess_settle_round
    9: exhibition_server_trigger_chess_escaped_monsters
    10: exhibition_server_trigger_chess_pick_curse_card_count
    11: exhibition_server_trigger_chess_pick_challenge_card_count
    12: exhibition_server_trigger_chess_obtain_building_points
    13: exhibition_server_trigger_chess_pick_ssr_card_count
    14: exhibition_server_trigger_chess_last_round_kill_stage_cost_time
  exhibition_display_cond_type:
    0: exhibition_display_cond_none
    1: exhibition_display_cond_a_ge_b
    2: exhibition_display_cond_and
    3: exhibition_display_cond_or
  exhibition_display_cond_param_type:
    0: exhibition_display_cond_param_none
    1: exhibition_display_cond_param_replaceable_value
    2: exhibition_display_cond_param_accumulable_value
    3: exhibition_display_cond_param_unsigned_integer
    4: exhibition_display_cond_param_display_value
  exhibition_series_type:
    0: exhibition_series_none
    1: exhibition_series_activity
    2: exhibition_series_dungeon
  forge_unlock_method:
    0: forge_unlock_none
    1: forge_unlock_quest
    2: forge_unlock_formula
  gacha_type:
    100: gacha_type_newbie
    200: gacha_type_standard
    201: gacha_type_standard_avatar
    202: gacha_type_standard_weapon
    300: gacha_type_activity
    301: gacha_type_activity_avatar
    302: gacha_type_activity_weapon
  gacha_item_parent_type:
    0: gacha_item_parent_invalid
    1: gacha_item_parent_s5
    2: gacha_item_parent_s4
    3: gacha_item_parent_s3
  radar_hint_type:
    0: none_radar
    1: oculus
    2: ore
    3: harvet_gadget
    4: small_meteorite
    5: dulins_essence
    6: hide_energy_ball
    7: echo_shell
    8: luna_rite_moonlit_sigil
    9: regin_feather_intact
    10: regin_tree_frag
  gather_area_type:
    1: ability_radar_collectables_mengde
    2: ability_radar_collectables_liyue
    3: ability_radar_collectables_daoqi
    998: ability_radar_ore
    999: collect_general
  item_limit_refresh_type:
    0: item_limit_refresh_none
    1: item_limit_refresh_daily
    2: item_limit_refresh_monthly
    3: item_limit_refresh_persistent
  output_control_type:
    0: output_control_none
    1: output_control_drop
    2: output_control_reward
    3: output_control_other
  item_limit_const_value_type:
    1: limit_const_value_day_bonus_count
    2: limit_const_value_bonus_output_switch_one
    3: limit_const_value_bonus_output_switch_two
  bonus_source_type:
    0: bonus_source_none
    1: bonus_source_reunion
    2: bonus_source_op_activity
  excel_mail_type:
    0: excel_mail_none
    1: excel_mail_tower_daily
    2: excel_mail_tower_monthly
    3: excel_mail_tower_overflow_first_pass
  material_expire_type:
    1: count_down
    2: date_time
    3: delay_week_count_down
  rand_task_type:
    0: rand_task_quest
    1: rand_task_scene
  product_type:
    0: product_type_none
    1: product_type_hcoin
    2: product_type_card
    3: product_type_package
    4: product_type_play
    5: product_type_google_gift_card
    6: product_type_concert
    7: product_type_apple_gift_card
  bonus_activity_state:
    0: bonus_activity_state_none
    1: bonus_activity_state_unstarted
    2: bonus_activity_state_unfinished
    3: bonus_activity_state_unrewarded
    4: bonus_activity_state_rewarded
  strengthen_point_type:
    0: strengthen_point_none
    1: strengthen_point_avatar
    2: strengthen_point_weapon
    3: strengthen_point_reliquary
    4: strengthen_point_talent
  text_show_place:
    0: text_show_none
  trial_avatar_template_placeholder_type:
    0: trial_avatar_template_placeholder
  avatar_filter_type:
    0: avatar_filter_none
    1: avatar_filter_avatar_id
    2: avatar_filter_weapon_type
    3: avatar_filter_element_type
  weapon_enhance_rule_type:
    0: weapon_enhance_type_enable
    1: weapon_enhance_type_disabled
  action_token_source_type:
    -1: source_invalid
    0: source_hit
    1: element_reaction
    2: low_effect_in_token_queue
    3: source_count
  entity_token_action_type:
    -1: entity_token_action_type_invalid
    0: entity_token_action_type_fire_effect
    1: entity_token_action_type_attach_effect
    2: entity_token_action_type_apply_modifier
    3: entity_token_action_type_apply_level_modifier
    4: entity_token_action_type_audio
    5: entity_token_action_type_trigger_attack_event
    6: entity_token_action_type_send_effect_trigger
    7: entity_token_action_type_internal_fire_effect_god
    8: entity_token_action_type_internal_fire_effect_normal
    9: entity_token_action_type_internal_fire_effect_low
    10: entity_token_action_type_internal_attach_effect_god
    11: entity_token_action_type_internal_attach_effect_normal
    12: entity_token_action_type_internal_attach_effect_low
    13: entity_token_action_type_create_entity_sync
    14: entity_token_action_type_create_entity_async
    15: entity_token_action_type_ui_spawn
    16: entity_token_action_type_count
  param_logic_type:
    0: replace
    1: add
  level_buff_special:
    0: none
    1: witch_time_duration_scaled_by_evaded_attack
    2: infinite_duration
  sort_modifier_type:
    0: none
    1: priority
    2: durability_asc
    3: durability_des
    4: all
  ability_camera_shot_type:
    0: avatar
    1: level
  turn_mode:
    0: prefer_target_to_input
    1: only_input
    2: only_target
    3: prefer_target_to_camera
    4: only_camera
  ability_formula:
    0: none
    1: dummy_throw_speed
  round_random_type:
    0: none
    1: floor
    2: ceil
    3: round
  system_valuer_type:
    0: none
    1: element_level_co
    2: player_element_level_co
    3: player_shield_level_co
    4: player_element_level_co_with_mastery
  get_pos_type:
    0: center
  damage_attacker:
    0: caster
    1: self
  rocket_jump_type:
    0: xiao_ult
    1: klee_mine_explode
    2: gear_spring
    3: dungeon_jump
    4: itto_gang_plank
    5: max_value
  trigger_type:
    0: trigger_once
    1: trigger_no_repeat
    2: trigger_always
  check_hit_layer_type:
    0: only_hit_box
    1: only_hit_scene
    2: only_hit_massive_entity
    3: both
  entity_attack_filter:
    0: all_entities
    1: only_water
    2: only_grass
    3: only_grass_and_water
    4: ignore_scene_prop
  kill_self_type:
    0: none
    1: normal
    2: disappear
  die_state_flag:
    0: none
    1: frozen_to_death
    2: burning_to_ashes
    3: die_fall
    4: die_drawn
    5: die_abyss
    6: broken
    7: petrified_to_death
  op_responder:
    0: caster
    1: receiver
    2: free_agent
  blink_hit_scene_test_type:
    0: blink_hit_scene_test_by_straight_line
    1: blink_hit_scene_test_by_three_segments
  drop_elem_ball_type:
    0: level_control
    1: big_world_only
    2: force_drop
  control_part_target_type:
    0: ai_threat_target
    1: action_set_target
  velocity_force_type:
    0: retreat_type
    1: retreat_air_type
    2: rush_move_type
    3: wind_zone_type
    4: airflow_type
    5: rise_type
    6: speedup_type
    7: airflow_acc_type
    8: inertia_type
    9: fixed_rush_move_type
    10: light_core_type_normal
    11: light_core_type_accelerate
  paimon_request_from:
    1: self_tick
    2: dev_ui
    3: task
    4: navigation
  paimon_skill:
    1: show
    2: anger
    3: domangic
    4: guide
    5: hope
    6: wave
    7: show_move
  body_material_type:
    0: all
    1: body
    2: hair
    3: face
    4: weapon
    5: arm
    999: in_valid
  effect_type:
    0: wind_effect
  play_mode_type:
    0: normal
    1: sneak
    2: dvalin_s01fly_state
    3: bomber
    4: find_cat
    5: wild_sneak
    6: gliding_challenge_state
    7: look_at_camera_state
    8: fleur_fair_fall
    9: endora_state
    10: fleur_fair_balloon
    11: hide_and_seek
    12: hide_and_seek_ghost
    13: vehicle_skiff
    14: bounce_conjuring
    15: activity_aim_state
    16: electric_core_state
    17: fishing
    18: avatar_trans_move
    19: tail
  scene_surface_type:
    0: invalid
    1: grass
    2: dirt
    3: rock
    4: snow
    5: water
    6: tile
    7: sand
    8: wood
    9: iron
    10: tree
    11: ice
    12: marble
    13: carpet
    14: wood_log
    15: cloud
    16: coin
    17: snow_rock
    18: electric_water
    19: sakura
  action_point_type:
    0: invalid_point
    1: sleep_point
    2: sit_point
    3: landing_point
    4: extraction_point
    5: dvalin_special_point
    6: lupi_colosseum_point
    7: dancing_point
    8: making_point
    9: building_point
    10: search_point
    11: supervise_point
    12: threat_point
    13: preach_point
    14: surround_point
    15: training_point
    16: mole_hole_point
    17: aureae_point
    18: standby_point
    19: sit_on_chair_point
    20: pray_point
    21: guard_point
    22: forge_point
    23: fishing_point
    24: kid_play_point
    25: drinking_point
    26: multi_talk_point
    27: multi_talk_prim_point
    28: shop_owner_point
    29: feeding_point
    30: watering_point
    31: sweeping_point
    32: shelter_point
    33: hiding_point
    34: oceanid_move_point
    35: afraid_point
    36: investigate_point
    37: operation_point
    38: arrange_point
    39: splash_point
    40: repair_point
    41: performing_point
    42: cat_feed_point
    43: dog_feed_point
    44: tanuki_target_point
  neuron_name:
    0: hit
    1: fear
    2: asleep
    3: awake
    4: weather_bad
    5: weather_clearsky
    6: weather_cloudy
    7: weather_foggy
    8: weather_rain
    9: weather_snow
    10: weather_storm
    11: surround
    12: hungry
    13: block_avatar_landing
    14: preach
    15: supervise
    16: train
    17: dance
    18: make
    19: build
    20: search
    21: sit
    22: threat
    23: invalid
  json_climate_type:
    0: normal
    1: cold
    2: hot
    3: cold_monster
    4: hot_monster
    5: sea_mist
    6: hero_course
    7: sea_mist_surrounding
    8: tatari_region
    9: trans_climate
    10: seirai_storm
    11: tsurumi_mist
    12: tsurumi_thunder
    13: tsurumi_regional_mist
    14: count
  extra_ability_state:
    0: start
    1: success
    2: interrupt
  use_skill_type:
    0: none
    1: normal_attack
    2: skill
    3: ultimate_skill
    4: count
  lua_call_type:
    0: gadget
    1: owner_gadegt
    2: from_group
    3: owner_from_group
    4: specific_group
    5: cur_scene_play
    6: cur_challenge_group
    7: cur_gallery_control_group
    8: cur_rogue_boss_group
  widget_event_type:
    1: collection_wind_seed
  action_panel_effect_slot:
    0: element_art
    1: element_burst
  fishing_event:
    0: none
    1: qte_start
    2: qte_trigger
    3: request_quit
    4: cast_anchor_point
    5: select_bait
    6: pull
    7: notify_bait
  team_type:
    0: cur_team
    1: big_team
  relational_operator:
    0: greater
    1: greater_or_equal
    2: equal
    3: lesser
    4: lesser_or_equal
  mixin_targetting:
    0: none
    1: allied
    2: enemy
    3: all
  bitwise_operator:
    0: and_
    1: or_
    2: not_
    3: xor
  switch_skill_priority:
    0: base
    4: avatar_common
    5: avatar_special
    101: playmode
    102: quest
  ability_group_source_type:
    0: ability_group_source_none
    1: ability_group_source_challenge
    2: ability_group_source_quest
    3: ability_group_source_activity
    4: ability_group_source_hunting
    5: ability_group_source_watcher
    6: ability_group_source_avatar_skill_depot
    7: ability_group_source_gallery
    8: ability_group_source_widget
    9: ability_group_source_fishing
  ability_group_target_type:
    0: ability_group_target_none
    1: ability_group_target_avatar
    2: ability_group_target_team
  avatar_stage_type:
    0: both
    1: current
    2: off_stage
  on_event_type:
    0: none
    1: hp
    2: exp_gain
    3: chest_open
    4: quest_finish
    5: pick_item
    6: hp_up
    7: hp_down
    8: energy_donw_by_skill
  add_action_type:
    0: idle
    1: reset_global_value
  ccd_type:
    0: only_high_speed
    1: always
    2: never
  collider_trigger_type:
    0: trigger_once
    1: trigger_no_repeat
    2: trigger_always
  change_field_type:
    0: follow_ownner
    1: size_by_time
  trigger_weather_type:
    0: area
    1: weather
    2: skill
  reject_event_type:
    0: none
    1: has_attack_landed
    255: reject_all
  attack_cost_type:
    0: max
    1: min
    2: sum
  level_day_time_type:
    0: day
    1: night
  create_gadget_mixin_type:
    0: only_origin_owner
    1: only_sub_owner
    2: both_owner
  tile_camp_type:
    0: enviro
    1: fix_camp_id
    2: owner_camp
  e_shader_data:
    0: none
    1: character_frozen
    2: character_petrifaction
    3: character_die
    4: character_burning_to_ashes
    5: character_dissolve
    6: gadget_frozen
    7: gadget_petrifaction
    8: gadget_die
    9: avatar_die
    10: monster_equip_die
    11: monster_die
    12: character_clip
  watcher_system_mixin_type:
    0: element_reaction
    1: element_reaction_by_water
    2: element_reaction_by_grass
    3: element_reaction_by_bush
    4: attack_landed
    5: do_skill_succ_nomal_attack
    6: do_skill_succ_elemental_art
    7: do_skill_succ_elemental_burst
    8: element_shield_add
    9: global_sub_shield_add
    10: listen_ability_action
    11: local_avatar_hp_change
    12: get_first_wind_bullet
    13: get_second_wind_bullet
    14: spawn_wind_field_by_wind_bullet
    15: avatar_state_id_change
    16: avatar_weapon_element_override
  watcher_system_listen_type:
    0: none
    1: local_avatar
    2: team
  climate_source_type:
    0: none
    1: climate
    2: other
    3: all
  climate_trend_type:
    0: none
    1: rise
    2: fade
    3: all
  move_state_mixin_type:
    0: dash
  td_play_tower_type:
    0: default
    1: fire
    2: water
    3: ice
    4: wind
    5: electric
    6: simple
    7: supporter
    8: builder
    9: mine
    10: gate
  entity_mark_type:
    0: default
    1: show_effect
  ability_entity_visible_reason:
    0: default
    1: gallary
  follow_attach_occupy_priority:
    10: follow_pet
    50: theme_play
    80: quest_event
    90: activity_event
    100: quest_blank
  neuron_mixin_remove_operator_type:
    0: one_by_one
    1: first_finish_delete
    2: all_finish_delete
  damage_clamp_type:
    0: hp_max_percent
    1: hp_cur_percent
    2: damage_constant
  do_action_by_damage_received_param_type:
    0: hp_max_percent
  hit_box_type:
    0: normal
    1: head
  relation_type:
    0: equal
    1: more_than
    2: less_and_equal
    3: between
    4: more_than_and_equal
    5: none_or_equal
  scene_obj_state:
    0: normal
    1: burning
    2: burned
    3: cut
    4: frozen
    5: melt
  target_pos_to_self_pos_type:
    0: xz
    1: y
    2: xyz
  target_altitude_type:
    0: ground_only
    1: water_only
    2: both
  component_tag:
    0: ability
    1: ai
    2: avatar_ai
    3: avatar_ai_no_combat
    4: combat
    5: gadget_combat
    6: bullet_combat
    7: gadget_collided_combat
    8: scene_prop_combat
    9: scene_grass_water_combat
    10: character_combat
    11: avatar_combat
    12: monster_combat
    13: has_equip
    14: has_avatar_equip
    15: has_monster_equip
    16: level
    17: paimon
    18: scene_prop
    19: team
    20: has_emotion
    21: has_billboard
    22: has_collision
    23: has_emoji_bubble
    24: has_face_animation
    25: has_move
    26: has_bullet_move
    27: has_humanoid_move
    28: has_non_humanoid_move
    29: has_animator_move
    30: has_npc_move
    31: has_simple_move
    32: has_rigid_body_move
  compare_property:
    0: hp_ratio
  entity_appear_vision_type:
    0: vision_none
    1: vision_meet
    2: vision_reborn
    3: vision_replace
    4: vision_waypoint_reborn
    5: vision_miss
    6: vision_die
    7: vision_gather_escape
    8: vision_refresh
    9: vision_transport
    10: vision_replace_die
  element_reaction_source_type:
    0: none
    1: being_hit
    2: modifier_add
    3: modifier_remove
  has_shield_type:
    0: elite_shield
    1: element_shield
    2: global_shield
    3: all
  target_position_area_level:
    0: city
    1: first_area
    2: second_area
  logic_operation:
    0: and_
    1: or_
    2: not_
  trigger_mode:
    0: inside
    1: outside
  ai_target_system_type:
    0: threat
    1: master
    2: servant
    3: owner
    4: children
    5: buddy
  config_weather_type:
    0: clear_sky
    1: cloudy
    2: foggy
    3: rain
    4: snow
    5: storm
    6: skill
  move_category_ai:
    0: land
    1: amphibious
    2: water
  ai_basic_move_type:
    0: straight
    1: snakelike
  decision_archetype:
    0: general
    1: cicin
    2: animal
    3: dahaka
    4: animal_homeworld
    5: animal_fishable
    100: player_auto
  config_ai_combat_phase:
    0: default
    1: p1
    2: p2
    3: p3
    4: p4
    5: p5
  config_ai_combat_role:
    0: unclassified
    1: fighter
    2: mage
    3: sup
    4: combatrole_count
  config_ai_skill_type:
    0: free
    1: combat
    2: on_aware
    3: on_alert
    4: on_nerve
    5: action_point
    6: combat_buddy
  config_ai_combat_skill_type:
    0: unclassified
    1: melee_attack
    2: ranged_attack
  ai_lod_strategy_type:
    0: best
    1: npc
    2: monster
    3: minor_animal
    4: monster_vista
    5: count
  state_audio_event_usage:
    0: any
    1: in_set
    2: except_
  reference_type:
    0: none
    1: use_entity
    2: use_target
  circle_detect_direction:
    0: center_to_side
    1: clockwise
    2: counterclockwise
  sphere_detect_direction:
    0: none
    1: center_to_side
  multi_position_type:
    0: single_source
    1: multi_sources
    2: multi_directions
  audio_platform_move_type:
    0: none
    1: linear
    2: angular
    3: both
  audio_emitter_multi_position_type:
    0: multi_sources
    1: multi_directions
  audio_scope:
    0: global_
    1: local_
  audio_voice_trigger:
    0: invalid
    1: weather_monologue
    2: dialog
    3: dungeon_reminder
    4: animator_event
    5: fetter
    6: gacha
    7: join_team
  voice_personality:
    0: first
    1: third
    2: npc
  voice_positioning:
    0: two_dimensional
    1: three_dimensional
    2: tutorial_special
    3: three_dimensional_passby
    4: inner_monologue
  codex_quest_item_type:
    1: text_center
    2: text_left
    3: text_right
    4: single_dialog
    5: multi_dialog
    6: single_dialog_gender
    7: multi_dialog_gender
  codex_quest_text_type:
    1: chapter_title
    2: chapter_num
    3: main_quest_title
    4: main_quest_desp
    5: sub_quest_title
    6: ip_customized_whole
    7: ip_customized_partial
    8: dialog_normal
    9: dialog_branch
    10: speaker_known
    11: speaker_unknown
    12: speaker_player
    13: aside
    14: narratage
  combat_property_index:
    0: hp
    1: attack
    2: defense
    3: weight
    4: endure
    5: level
    6: elementaddhurt
    7: defenseignore
  level_option:
    0: none
    1: dungeon_level
    2: world_level
  particle_shape_type:
    0: volume
    1: edge
    2: shell
  billboard_offset_type:
    0: normal
    1: character
  combat_billboard_size:
    0: normal
    1: big
    2: grand
    3: small
  progress_billboard_type:
    0: none
    1: miracle
    2: cook
  ban_type:
    0: ban_invalid
    1: ban_transport
    2: ban_goto_scene
    3: ban_npc_interaction
    4: ban_goto_multiplayer
  move_type:
    0: normal_move
    1: combat_move
    2: combat_air
    3: combat_skill_air
    4: perform_move
  coop_cond_type:
    0: coop_cond_none
    1: coop_cond_temperament_compare
    2: coop_cond_confidence_compare
    3: coop_cond_ending_finish
    4: coop_cond_quest_finish
    5: coop_cond_item_num_compare
    6: coop_cond_player_level_compare
    7: coop_cond_fetter_compare
    8: coop_cond_temp_value_compare
  coop_temperament_type:
    1: coop_temperament_1
    2: coop_temperament_2
    3: coop_temperament_3
    4: coop_temperament_4
  coop_action_type:
    0: coop_action_none
    1: coop_action_temperament_add
    2: coop_action_temperament_minus
    3: coop_action_confidence_add
    4: coop_action_confidence_minus
    5: coop_action_temp_value_set
    6: coop_action_select_temperament_set
    7: coop_action_temp_value_add
    8: coop_action_temp_value_minus
  coop_node_type:
    0: coop_node_none
    1: coop_node_talk
    2: coop_node_select
    3: coop_node_cond
    4: coop_node_action
    5: coop_node_end
  quest_state:
    0: quest_state_none
    1: quest_state_unstarted
    2: quest_state_unfinished
    3: quest_state_finished
    4: quest_state_failed
  crowd_spawn_condition_type:
    0: inclusive
    1: exclusive
  cutscene_index_type:
    0: cutscene
    1: video
    2: other
  timer_limit_type:
    0: finite
    1: infinite
  e_shader_plus:
    0: plus_hit_flash
    1: plus_emission
    2: plus_skill_emission
    3: plus_outer_glow
  shader_use_type:
    0: none
    1: character
    2: gadget
  die_flag:
    0: alive
    1: normal
    2: drowned
    3: in_air
    4: retreat
    5: fall
  attach_point_target_type:
    0: target
    1: self
    2: caster
    3: applier
  target_indicator_type:
    0: default
    1: quest
    2: gadget
    3: task
    4: anchor
  tween_ease_type:
    0: ease_in_quad
    1: ease_out_quad
    2: ease_in_out_quad
    3: ease_in_cubic
    4: ease_out_cubic
    5: ease_in_out_cubic
    6: ease_in_quart
    7: ease_out_quart
    8: ease_in_out_quart
    9: ease_in_quint
    10: ease_out_quint
    11: ease_in_out_quint
    12: ease_in_sine
    13: ease_out_sine
    14: ease_in_out_sine
    15: ease_in_expo
    16: ease_out_expo
    17: ease_in_out_expo
    18: ease_in_circ
    19: ease_out_circ
    20: ease_in_out_circ
    21: linear
    22: spring
    23: ease_in_bounce
    24: ease_out_bounce
    25: ease_in_out_bounce
    26: ease_in_back
    27: ease_out_back
    28: ease_in_out_back
    29: ease_in_elastic
    30: ease_out_elastic
    31: ease_in_out_elastic
  hp_bar_style:
    0: auto
    1: elite
    2: boss
    3: friendly
    4: element_charge
  equip_in_slot_type:
    0: none
    1: take
    2: put
  equip_entity_type:
    0: none
    1: sword_one_hand
    2: cross_bow
    3: small_shield
    4: spear
    5: catalyst
    6: bow
    7: claymore
    8: pole
  token_force_enqueue_reason:
    0: element_reaction
    1: ability_state
  touch_interact_type:
    0: default
    1: normal_chest
    2: flora_chest
    3: multiple_reward
    4: single_reward
    5: owner_only_reward
    6: gadget_chain
    7: widget_mp_support
    8: post_ui_interact_gadget_action
  gear_type:
    0: none
    1: ray
    2: spray
    3: wall
  seal_progress_type:
    0: circle
    1: bar
  pick_type:
    0: none
    1: monster
    2: auto
    3: select
    4: attract
    5: auto_select
    6: group_auto
  custom_gadget_type:
    0: default
    1: furniture
    2: activity_flower_shelf_base
  custom_gadget_node_slot_type:
    0: default
    1: furniture
  control_part_forward_by:
    0: parent
    1: entity_forward
    2: named_transform
  control_part_rotate_by:
    0: world_xz
    1: forward_trans_local
  control_part_do_on_un_enabled:
    0: stay
    1: to_forward_immediately
    2: rotate_to_forward
  trigger_flag:
    0: none
    1: no_revive_region
    2: dead_region
    3: return_region
    4: camera_scene_look
    5: level_ability
    6: audio_event
    7: global_value
    8: teleport
  concern_type:
    0: all_exclude_gwgo
    1: combat_exclude_gwgo
    2: all_avatars
    3: local_avatar
    4: local_team
    5: all_vehicle
    6: all_avatars_on_vehicle
    7: local_vehicle
  nav_type:
    0: none
    1: obstacle
  elem_ball_trigger_type:
    0: none
    1: in_rain
    2: after_rain
    3: in_snow
    4: in_storm
  vod_player_type:
    0: live
  e_footprint_platform:
    0: all
    1: all_no_tessellation
    2: pc_no_tessellation
    3: pc
    4: android
    5: ios
    6: ps4
    7: ps
  drop_elem_control_type:
    0: all
    1: none
  group_entity_type:
    0: none
    1: monster
    2: npc
    3: gadget
    4: trigger
  guide_open_state_type:
    0: open_state_none
    1: open_state_paimon
    2: open_state_paimon_navigation
    3: open_state_avatar_promote
    4: open_state_avatar_talent
    5: open_state_weapon_promote
    6: open_state_weapon_awaken
    7: open_state_quest_remind
    8: open_state_game_guide
    9: open_state_cook
    10: open_state_weapon_upgrade
    11: open_state_reliquary_upgrade
    12: open_state_reliquary_promote
    13: open_state_weapon_promote_guide
    14: open_state_weapon_change_guide
    15: open_state_player_lvup_guide
    16: open_state_freshman_guide
    17: open_state_skip_freshman_guide
    18: open_state_guide_move_camera
    19: open_state_guide_scale_camera
    20: open_state_guide_keyboard
    21: open_state_guide_move
    22: open_state_guide_jump
    23: open_state_guide_sprint
    24: open_state_guide_map
    25: open_state_guide_attack
    26: open_state_guide_fly
    27: open_state_guide_talent
    28: open_state_guide_relic
    29: open_state_guide_relic_prom
    30: open_state_combine
    31: open_state_gacha
    32: open_state_guide_gacha
    33: open_state_guide_team
    34: open_state_guide_proud
    35: open_state_guide_avatar_promote
    36: open_state_guide_adventure_card
    37: open_state_forge
    38: open_state_guide_bag
    40: open_state_guide_adventure_dailytask
    41: open_state_guide_adventure_dungeon
    49: open_state_multiplayer
    50: open_state_guide_mousepc
    51: open_state_guide_multiplayer
    52: open_state_guide_dungeonreward
    54: open_state_avatar_fashion
    56: open_state_guide_kslquest
    57: open_state_personal_line
    58: open_state_guide_personal_line
    59: open_state_guide_appearance
    60: open_state_guide_process
    61: open_state_guide_personal_line_key
    62: open_state_guide_widget
    63: open_state_guide_activity_skill_aster
    64: open_state_guide_coldclimate
    66: open_state_guide_exitmultiplayer
    67: open_state_guide_theatremachanicus_build
    68: open_state_guide_theatremachanicus_rebuild
    69: open_state_guide_theatremachanicus_card
    70: open_state_guide_theatremachanicus_monster
    71: open_state_guide_theatremachanicus_mission_check
    72: open_state_guide_theatremachanicus_build_select
    73: open_state_guide_theatremachanicus_challenge_start
    74: open_state_guide_convert
    75: open_state_guide_theatremachanicus_multiplayer
    76: open_state_guide_coop_task
    77: open_state_guide_homeworld_adeptiabode
    78: open_state_guide_homeworld_deploy
    79: open_state_guide_channellerslab_equip
    80: open_state_guide_channellerslab_mp_solution
    81: open_state_guide_channellerslab_power
    82: open_state_guide_hideandseek_skill
    83: open_state_guide_homeworld_maplist
    84: open_state_guide_relicresolve
    85: open_state_guide_gguide
    86: open_state_guide_gguide_hint
    1001: open_state_shop_type_paimon
    1002: open_state_shop_type_city
    1003: open_state_shop_type_blacksmith
    1004: open_state_shop_type_grocery
    1005: open_state_shop_type_food
    1411: open_state_guide_sumo_team_skill
    1412: open_state_guide_fish_recipe
    2001: open_state_guide_chess_mission_check
    2002: open_state_guide_chess_build
    2003: open_state_guide_chess_wind_tower_circle
    2004: open_state_guide_chess_card_select
    2100: open_state_paimon_lvinfo
    2101: open_state_teleport_hud
    2102: open_state_guide_map_unlock
    2103: open_state_guide_paimon_lvinfo
    2104: open_state_guide_ambortransport
    2105: open_state_guide_fly_second
    2106: open_state_guide_kaeya_clue
    2205: open_state_guide_rogue_map
    2206: open_state_guide_rogue_rune
  guide_page_type:
    0: normal
    1: equip_promote
    2: relic_promote
    3: talent_info
    4: relic_info
    5: weapon_info
    6: skill_info
    7: weapon_select
    8: relic_select
    9: theatre_mechanicus_building
    10: theatre_mechanicus_rebuilding
  guide_operator:
    0: equal
    1: greater
    2: less
    3: greater_equal
    4: less_equal
  guide_multi_player_mode:
    0: all
    1: host
    2: guest
  guide_avatar_state:
    0: normal
    1: move
    2: can_fly
    3: fly
    4: try_to_move
    5: can_promote
    6: can_up_grade
  guide_button_click:
    0: click
    1: press_down
    2: charge
    3: toggle
  guide_widget_special_type:
    0: normal
    1: slot
    2: character_avatar_btn
    3: character_func_btn
    4: character_avatar_btn_by_level
    5: button
    6: tab_item
    7: synthesis_list_item
    8: quest_select_item
    9: dyn_ui_item
    10: grid_scroller
    11: simple_list
  guide_item_type:
    0: normal
    1: weapon
    2: relic
    3: any
    4: material
  guide_camera_action:
    0: move
    1: scale
  guide_avatar_action:
    0: move
    1: attack
  guide_has_avatar_type:
    0: normal
    1: in_team
  guide_has_avatar_con_type:
    0: id
    1: level
  guide_navigation_type:
    0: none
    1: task
    2: quest
  guide_navigation_check_type:
    0: none
    1: open
    2: close
  guide_virtual_dial_action:
    0: none
    1: open_map
    2: open_quest_book
    3: open_character
    4: open_bag
    5: switch_element_view
    6: open_tutorial
    7: open_gacha
    8: open_adventure_book
    9: to_avatar1
    10: to_avatar2
    11: to_avatar3
    12: to_avatar4
    13: to_avatar5
    14: open_battle_pass
    15: open_multiplayer
    16: open_dungeon_factor
    17: open_activity_normal
    18: press_quick_use_button
    19: press_activity_skill_button
    20: homeworld_editor
  guide_platform:
    0: none
    1: i_os
    2: standalone
    3: android
    4: ps4
    5: switch
  guide_level_type:
    0: all
    1: not_dungeon
    2: only_big_world
  guide_key_click:
    0: press_down
    1: click
    2: charge
  button_guide_type:
    0: normal
    1: red
    2: blink
    3: bubble
  mask_guide_type:
    0: normal
    1: black
    2: transparent
  widget_info_pos:
    0: tl
    1: t
    2: tr
    3: l
    4: r
    5: bl
    6: b
    7: br
  config_guide_context_list_type:
    0: common
  guide_cmd_type:
    0: bag_page_scroll_tab
  persistent_furniture_type:
    0: wall
    1: floor
    2: ceil
    3: chandelier
    4: door
    5: stair
    6: invalid
  inter_priority_type:
    0: override
    1: insert
    2: additive
    3: free_to_do
  animator_param_type2:
    0: trigger
    1: bool
    2: int
    3: float
  dialog_type:
    0: lock_frame
    1: bubble
    2: narration
    3: other
  story_camera_pos_type:
    0: absolute
    1: relative_to_intee
    2: relative_to_inter
    3: relative_pos_to_intee
    4: relative_pos_to_inter
    5: exit
    6: relative_to_intee_only
    7: relative_to_inter_only
    8: relative_to_target_entity
    9: relative_to_multi_target_entity
    10: other
  story_camera_target_type:
    0: absolute
    1: to_intee
    2: to_inter
    3: to_mid
    4: relative_to_inter
    5: relative_to_target_entity
    6: relative_to_intee_forward
    7: relative_to_inter_forward
    8: relative_to_multi_target_entity
    9: other
  black_screen_type:
    0: to_keep_from_black
    1: to_black
    2: from_black
    3: blend_out
    4: keep_black
  emo_back_type:
    0: none
    1: without_blink
    2: with_blink
  move_to_type:
    0: none
    1: walk
    2: run
    3: noneaccurate
  stand_direction:
    0: left
    1: front
    2: right
  remove_actor_type:
    0: none
    1: remove
    2: remove_with_disappear
  look_at_target_type:
    0: npc
    1: camera
    2: none
  frame_face_animation_play_type:
    0: loop
    1: normal
    2: clamp
  keyboard_type:
    0: invalid
    1033: en
    1036: fr
    1031: de
  input_action_group_type:
    0: all
    1: gameplay
    2: menu
  config_key_code:
    0: none
    8: backspace
    9: tab
    12: clear
    13: return_
    19: pause
    27: escape
    32: space
    33: exclaim
    34: double_quote
    35: hash
    36: dollar
    38: ampersand
    39: quote
    40: left_paren
    41: right_paren
    42: asterisk
    43: plus
    44: comma
    45: minus
    46: period
    47: slash
    48: alpha0
    49: alpha1
    50: alpha2
    51: alpha3
    52: alpha4
    53: alpha5
    54: alpha6
    55: alpha7
    56: alpha8
    57: alpha9
    58: colon
    59: semicolon
    60: less
    61: equals
    62: greater
    63: question
    64: at
    91: left_bracket
    92: backslash
    93: right_bracket
    94: caret
    95: underscore
    96: back_quote
    97: a
    98: b
    99: c
    100: d
    101: e
    102: f
    103: g
    104: h
    105: i
    106: j
    107: k
    108: l
    109: m
    110: n
    111: o
    112: p
    113: q
    114: r
    115: s
    116: t
    117: u
    118: v
    119: w
    120: x
    121: y
    122: z
    127: delete
    256: keypad0
    257: keypad1
    258: keypad2
    259: keypad3
    260: keypad4
    261: keypad5
    262: keypad6
    263: keypad7
    264: keypad8
    265: keypad9
    266: keypad_period
    267: keypad_divide
    268: keypad_multiply
    269: keypad_minus
    270: keypad_plus
    271: keypad_enter
    272: keypad_equals
    273: up_arrow
    274: down_arrow
    275: right_arrow
    276: left_arrow
    277: insert
    278: home
    279: end
    280: page_up
    281: page_down
    282: f1
    283: f2
    284: f3
    285: f4
    286: f5
    287: f6
    288: f7
    289: f8
    290: f9
    291: f10
    292: f11
    293: f12
    294: f13
    295: f14
    296: f15
    300: numlock
    301: caps_lock
    302: scroll_lock
    303: right_shift
    304: left_shift
    305: right_control
    306: left_control
    307: right_alt
    308: left_alt
    309: right_command
    310: left_command
    311: left_windows
    312: right_windows
    313: alt_gr
    315: help
    316: print
    317: sys_req
    318: break_
    319: menu
    323: mouse0
    324: mouse1
    325: mouse2
    326: mouse3
    327: mouse4
    328: mouse5
    329: mouse6
    330: joystick_button0
    331: joystick_button1
    332: joystick_button2
    333: joystick_button3
    334: joystick_button4
    335: joystick_button5
    336: joystick_button6
    337: joystick_button7
    338: joystick_button8
    339: joystick_button9
    340: joystick_button10
    341: joystick_button11
    342: joystick_button12
    343: joystick_button13
    344: joystick_button14
    345: joystick_button15
    346: joystick_button16
    347: joystick_button17
    348: joystick_button18
    349: joystick_button19
    350: joystick1button0
    351: joystick1button1
    352: joystick1button2
    353: joystick1button3
    354: joystick1button4
    355: joystick1button5
    356: joystick1button6
    357: joystick1button7
    358: joystick1button8
    359: joystick1button9
    360: joystick1button10
    361: joystick1button11
    362: joystick1button12
    363: joystick1button13
    364: joystick1button14
    365: joystick1button15
    366: joystick1button16
    367: joystick1button17
    368: joystick1button18
    369: joystick1button19
    370: joystick2button0
    371: joystick2button1
    372: joystick2button2
    373: joystick2button3
    374: joystick2button4
    375: joystick2button5
    376: joystick2button6
    377: joystick2button7
    378: joystick2button8
    379: joystick2button9
    380: joystick2button10
    381: joystick2button11
    382: joystick2button12
    383: joystick2button13
    384: joystick2button14
    385: joystick2button15
    386: joystick2button16
    387: joystick2button17
    388: joystick2button18
    389: joystick2button19
    390: joystick3button0
    391: joystick3button1
    392: joystick3button2
    393: joystick3button3
    394: joystick3button4
    395: joystick3button5
    396: joystick3button6
    397: joystick3button7
    398: joystick3button8
    399: joystick3button9
    400: joystick3button10
    401: joystick3button11
    402: joystick3button12
    403: joystick3button13
    404: joystick3button14
    405: joystick3button15
    406: joystick3button16
    407: joystick3button17
    408: joystick3button18
    409: joystick3button19
    410: joystick4button0
    411: joystick4button1
    412: joystick4button2
    413: joystick4button3
    414: joystick4button4
    415: joystick4button5
    416: joystick4button6
    417: joystick4button7
    418: joystick4button8
    419: joystick4button9
    420: joystick4button10
    421: joystick4button11
    422: joystick4button12
    423: joystick4button13
    424: joystick4button14
    425: joystick4button15
    426: joystick4button16
    427: joystick4button17
    428: joystick4button18
    429: joystick4button19
    430: joystick5button0
    431: joystick5button1
    432: joystick5button2
    433: joystick5button3
    434: joystick5button4
    435: joystick5button5
    436: joystick5button6
    437: joystick5button7
    438: joystick5button8
    439: joystick5button9
    440: joystick5button10
    441: joystick5button11
    442: joystick5button12
    443: joystick5button13
    444: joystick5button14
    445: joystick5button15
    446: joystick5button16
    447: joystick5button17
    448: joystick5button18
    449: joystick5button19
    450: joystick6button0
    451: joystick6button1
    452: joystick6button2
    453: joystick6button3
    454: joystick6button4
    455: joystick6button5
    456: joystick6button6
    457: joystick6button7
    458: joystick6button8
    459: joystick6button9
    460: joystick6button10
    461: joystick6button11
    462: joystick6button12
    463: joystick6button13
    464: joystick6button14
    465: joystick6button15
    466: joystick6button16
    467: joystick6button17
    468: joystick6button18
    469: joystick6button19
    470: joystick7button0
    471: joystick7button1
    472: joystick7button2
    473: joystick7button3
    474: joystick7button4
    475: joystick7button5
    476: joystick7button6
    477: joystick7button7
    478: joystick7button8
    479: joystick7button9
    480: joystick7button10
    481: joystick7button11
    482: joystick7button12
    483: joystick7button13
    484: joystick7button14
    485: joystick7button15
    486: joystick7button16
    487: joystick7button17
    488: joystick7button18
    489: joystick7button19
    490: joystick8button0
    491: joystick8button1
    492: joystick8button2
    493: joystick8button3
    494: joystick8button4
    495: joystick8button5
    496: joystick8button6
    497: joystick8button7
    498: joystick8button8
    499: joystick8button9
    500: joystick8button10
    501: joystick8button11
    502: joystick8button12
    503: joystick8button13
    504: joystick8button14
    505: joystick8button15
    506: joystick8button16
    507: joystick8button17
    508: joystick8button18
    509: joystick8button19
  chest_show_moment:
    0: none
    1: on_create
    2: on_unlock
  chest_show_ui_remind:
    0: none
    1: normal
    2: all_show
  chest_show_cutscene_type:
    0: none
    1: camera_look
    2: cutscene
  indicator_distance_info_type:
    0: none
    1: to_avatar
    2: remaining_distance
  indicator_operator:
    0: and_
    1: or_
  config_level_polygon_tag:
    0: plain
    1: forest
    2: hill
    3: water
    4: mountain
  route_type:
    0: one_way
    1: reciprocate
    2: loop
  rot_type:
    0: rot_none
    1: rot_angle
    2: rot_round
  rot_angle_type:
    0: rot_angle_x
    1: rot_angle_y
    2: rot_angle_z
  route_record_mode:
    0: none
    1: prereach
    2: reach
  actor_type:
    0: invalid
    1: base_entity
    2: npc_actor
    3: quest_actor
    4: global_actor
    5: gadget_actor
    6: sub_global_actor
    7: cutscene_actor
    8: interaction_actor
    9: npcglobal_actor
  task_id:
    0: move_task_id
    1: narrator_task_id
    2: lock_task_id
    3: thread_task_id
    4: transmit_btn_id
    5: force_walk_id
    6: steer_to_autonomy_id
    7: home_task_id
    8: safe_circle
    9: warning_task_id
  inter_timing_type:
    0: enter
    1: btn
    2: exit
  actor_evt_target_type:
    0: single
    1: all
  weather_type:
    0: clear_sky
    1: cloudy
    2: foggy
    3: rain
    4: snow
    5: storm
  lua_task_type:
    0: normal
    1: move
    2: threat
    3: free_style
    4: limit_region
    5: btn_trans
    6: steer
    7: speech_bubble
    8: force_walk
    9: home
    10: safe_circle
  be_follow_state:
    0: ing
    1: waiting
    2: trans
    3: pre_failed
    4: failed
    5: success
  narrator_state:
    0: ing
    1: pausing
  q_state:
    -1: invalid
    0: accepted
    1: updated
    2: finished
    3: failed
  dist_type:
    0: euler
    1: euler_xz
  mark_view_type:
    0: none
    1: map_mark_normal
    2: map_mark_local_avatar
    3: map_mark_local_sight
    4: map_mark_south
    5: map_mark_mini_other
    6: map_mark_custom
    7: other
  mark_visible_type:
    0: none
    1: always
    2: around
    3: condition_only
    4: other
  mark_layer_type:
    0: normal
    1: first
    2: last
  mark_custom_type:
    0: red_circle
    1: blue_circle
    2: other
  mark_type:
    0: default
    1: trans_point
    2: quest
    3: custom
    4: local_avatar
    5: companion
    6: monster
    8: near_hint
    9: scene_point
    10: task
    11: boss
    12: talk
    13: packet_anchor
    14: widget
    15: flight_challenge
    16: hunting
    17: routine
    18: activity_search_region
    19: gallery_challenge
    20: homeworld_dynamic
    21: signal_point
    22: vehicle
    23: homeworld_furniture_suite
    24: activity
    25: homeworld_farm_field
  mark_icon_type:
    0: default
    1: mark_church
    2: mark_knights
    3: mark_pub
    4: mark_souvenir
    5: mark_restaurant
    6: mark_general_cargo
    7: mark_blacksmith
    8: mark_team_arranger
    9: mark_daily_task
    10: mark_random_task
    11: mark_adventurers
    12: mark_alchemy
    13: mark_sea_lamp_giving
    14: mark_investigation_monster
    15: mark_blacksmith_liyue
    16: mark_souvenir_liyue
    17: mark_restaurant_liyue
    18: mark_reputation
    19: mark_reputation_liyue
    20: mark_reputation_inazuma
    21: mark_blacksmith_inazuma
    22: mark_souvenir_inazuma
    23: mark_restaurant_inazuma
    24: mark_group_link
    25: mark_fish
    26: mark_fish_liyue
    27: mark_fish_inazuma
    100: mark_trans_point
    101: mark_trans_point_locked
    102: mark_portal
    103: mark_dungeon_entry
    104: mark_dungeon_entry_locked
    105: mark_weekly_dungeon_entry
    106: mark_weekly_dungeon_entry_locked
    107: mark_daily_dungeon_entry
    108: mark_daily_dungeon_entry_locked
    109: mark_tower_dungeon_entry
    110: mark_tower_dungeon_entry_locked
    111: mark_daily_dungeon_entry_to_be_explored
    112: mark_tower_dungeon_entry_to_be_explored
    113: mark_effigy_dungeon_entry
    114: mark_effigy_dungeon_entry_locked
    115: mark_fleur_fair_dungeon_entry
    116: mark_blitz_rush_dungeon_entry
    199: mark_goddess_locked
    204: mark_goddess_unlocked
    205: mark_packet_anchor
    300: mark_quest
    301: mark_dangerous_quest
    302: mark_quest_area
    303: mark_dangerous_quest_area
    400: mark_custom
    402: mark_custom_boss
    403: mark_custom_box
    404: mark_custom_collect
    405: mark_custom_cooking
    407: mark_custom_main_task
    408: mark_custom_monster
    411: mark_custom_slime
    412: mark_custom_trap
    413: mark_custom_wind
    414: mark_custom_fish
    500: mark_local_avatar
    501: mark_player1
    502: mark_player2
    503: mark_player3
    504: mark_player4
    505: mark_bored_monster
    506: mark_radar_hint
    507: mark_activity
    508: mark_talk
    509: mark_miscs_marvs
    510: mark_activity_aster_little
    511: mark_activity_aster_middle
    512: mark_radar_hint_area
    513: mark_activity_asterlarge
    514: mark_hunting_area
    515: mark_activity_aster_middle_npc
    516: mark_widget_sever_detector_area
    517: mark_activity_flight_challenge_point
    518: mark_elder_tree
    519: mark_elder_tree_event
    520: mark_widget_treasure_map_area
    521: mark_activity_treasure_map_npc
    522: mark_activity_dragon_spine_boss
    523: mark_activity_blessing
    524: mark_activity_monster_banner_drake_primo_rock
    525: mark_activity_expedition_challenge_area
    526: mark_mechanicis_npc
    527: mark_activity_water_sprite_explore_area
    528: mark_activity_arena_challenge
    529: mark_activity_fleur_fair_fall
    530: mark_activity_fleur_fair_balloon
    531: mark_activity_water_sprite_boss
    532: mark_activity_summer_time_race
    600: mark_activity_region_search
    601: mark_gallery_challenge
    602: mark_activity_fleur_fair_npc
    603: mark_channeller_slab_camp_low
    604: mark_channeller_slab_camp_middle
    605: mark_channeller_slab_camp_high
    606: mark_channeller_slab_one_off_dungeon
    607: mark_channeller_slab_loop_dungeon
    608: mark_channeller_slab_npc
    609: mark_activity_mini_tomo_hili_wei_area
    610: mark_activity_hide_and_seek_npc
    611: mark_homeworld_djinn
    612: mark_homeworld_djinn_weekend
    613: mark_homeworld_main_house
    614: mark_hide_and_seek_hunter
    615: mark_activity_buoyant_combat_point
    616: mark_activity_bounce_conjuring
    617: mark_homeworld_npc
    620: mark_summer_isle_signal_point
    621: mark_vehicle_summon_point
    622: mark_vehicle_summon_point_locked
    625: mark_bounce_conjuring_npc
    626: mark_vehicle
    630: mark_homeworld_furniture_suite
    631: mark_homeworld_trans_point
    633: mark_homeworld_farm_field1
    634: mark_homeworld_farm_field2
    635: mark_homeworld_farm_field3
    700: mark_activity_treasure_map_challenge
    701: mark_activity_blitz_rush_parkour
    705: mark_activity_perpetual_npc
    710: mark_oraionokami_tree
    711: mark_sumo_dungeon
    712: mark_moonfin_trial_challenge
    713: mark_moonfin_trial_final
    720: mark_luna_rite_explore_area
    721: mark_luna_rite_npc
    722: mark_luna_rite_crystal
    723: mark_luna_rite_chest
    730: mark_roguelike
    800: mark_bugyowu
    801: mark_chashitsu
    802: mark_homeworld_paimon
    803: mark_music_game_npc
    804: mark_grow_flowers_npc
  mark_order:
    0: none
    1: local_player
    2: other_player
    3: quest_main
    4: quest_branch
    5: radar
    6: transport_goddess
    7: dungeon
    8: quest_event
    9: quest_activity
    10: quest_world
    11: quest_random
    12: ore
    13: activity
    14: custom
    15: monster
    16: transport_other
    17: npc_adventure
    18: npc_activity
    19: area
    20: default
    21: npc_other
    22: vehicle
    1001: homeworld_main_house
    1002: homeworld_farm_field
    1003: homeworld_furniture_suite
    1004: homeworld_djinn
    1005: homeworld_npc
    1006: homeworld_trans_point
  mark_visibility_type:
    0: none
    1: invisible
    2: around
    3: always
  mark_plugin_icon_type:
    0: none
    1: boss
    2: character
    3: paimon
  facing_move_type:
    0: forward_only
    1: forward_backward
    2: four_direction
    3: left_right
    4: air_blend
  monster_size_type:
    0: normal_humanoid_type
    1: stoop_type
    2: strong_humanoid_type
    3: slime_type
    99: other_type
  position_modify_state:
    0: all
    1: walk
    2: run
    3: none
  move_platform_delay_type:
    0: no_delay
    1: normal
    2: long
  unstick_action:
    0: stay
    1: keep
    2: destroy
    3: stay_and_return
  follow_target:
    0: local_avatar
    1: local_avatar_authority
    2: target_entity
    3: group_gadget_entity
    4: group_monster_entity
  entity_collider_type:
    0: move_collider
    1: scene_prop_collider
  music_game_param:
    0: none
    1: time
    2: scene_id
    4: area_id
    8: weather
    16: enemy_count
    32: enemy_distance
    64: quest_id_list
    128: last_user_cue
    256: random
  music_stimulus:
    0: none
    1: stage_start
    2: stage_ready
    4: stage_finish
    8: quest_begin
    16: quest_end
    32: cutscene_begin
    64: cutscene_end
    128: cutscene_custom
    256: dialog_begin
    512: dialog_end
    1024: combat_begin
    2048: combat_end
    4096: teleport_begin
    8192: teleport_end
    16384: area_change
    32768: death
    65536: weather_change
    131072: menu_open
    262144: menu_close
  music_behaviour_ignorance:
    1: beat
    2: bar
    4: grid
    8: cue
    16: exit
    32: time
    64: stimulus
  music_key_type:
    0: left_up
    1: left_right
    2: left_down
    3: left_left
    4: right_up
    5: right_right
    6: right_down
    7: right_left
  action_btn_type:
    0: sprint
    1: jump
    2: slip
    3: attack_mode
    4: skill1
    5: skill2
    6: skill3
    7: skill4
    8: skill5
    9: skill_left
    10: squat
    11: roll
    12: charge
    13: quick_use
    14: vehicle_off
  action_slot_type:
    0: slot_am
    1: slot1
    2: slot2
    3: slot3
    4: slot4
    5: slot5
    6: slot_left
    7: slot_charge
    8: slot_quick_use
  action_panel_state:
    0: normal
    1: jump
    2: climb
    3: fly
    4: aim
    5: fast_aim
    6: swim
    7: ladder
    8: squat
    9: combat_air
    10: perform
    11: close_all
  config_preload_type:
    0: on_create
    1: on_combat
    2: on_scene_data_notify
  qte_step_button_input_type:
    0: qte_step_button_input_jump
  qte_step_camera_pos_type:
    0: qte_camera_pos_none
    1: qte_camera_pos_exit
    2: qte_camera_pos_relative_to_avatar
  qte_step_camera_target_type:
    0: qte_camera_tar_none
    1: qte_camera_tar_relative_to_avatar
  qte_step_cond_type:
    0: qte_step_cond_none
    1: qte_step_cond_power_bar_value
  qte_step_action_type:
    0: qte_step_action_none
    1: qte_step_action_success
    2: qte_step_action_fail
    3: qte_step_action_power_bar_value_change
    4: qte_step_action_power_bar_press_down
    5: qte_step_action_avatar_shake_head
    6: qte_step_action_play_audio
    7: qte_step_action_camera_move
    8: qte_step_action_emotion
  parent_quest_state:
    0: parent_quest_state_none
    1: parent_quest_state_finished
    2: parent_quest_state_failed
    3: parent_quest_state_canceled
  quest_cond_compare_type:
    0: equal
    1: greater_than
    2: less_than
  quest_fish_type:
    0: quest_fish_none
    1: quest_fish_material
    2: quest_fish_furniture
  quest_guide_npc_select_type:
    0: select_npc_none
    1: select_npc_by_playermale
  emo_record_type_enum:
    0: reset_emotion
    1: reset_phoneme
    2: set_emotion
    3: set_phoneme
    4: set_emotion_and_phoneme
    5: toggle
    6: play_sequence_sub
    7: play_sequence
    8: clear_emotion
    9: toggle_eye_ctrl
    10: clear_sequence
    11: blink
  record_actor_type:
    0: entity
    1: effect
  scene_area_type:
    0: normal
    1: all
    2: other
  height_pos_type:
    0: bottom
    1: center
  env_zone_event_type:
    1: zone_animal
    2: zone_rand_task
    4: zone_rand_quest
    8: zone_ambush_monster
  config_schedule_platform:
    0: default_hight
    1: default_lowest
    2: pc
    3: ps4_high
    4: ps4_low
    5: switch
    6: ios_high
    7: ios_medium
    8: ios_low
    9: android_high
    10: android_medium
    11: android_low
  config_schedule_job_type:
    0: default
    1: lose
  config_scheduler_type:
    0: i_update
    1: i_late_pre_update
    2: i_late_post_update
    3: i_after_res_to_update_end
    4: i_late_post_update_to_next_before_late_update
    5: i_render_to_next_before_res
    6: i_render_to_next_before_late_update
    7: i_render_to_next_before_network
    8: i_after_network_to_render
    9: i_after_entity_to_effect_end
    10: i_after_late_update_post
    100: g_render_to_next_before_late_update
  sectr_platform_type:
    0: base
    1: pc
    2: mobile
    3: ps4base
  sectr_object_type:
    0: object
    1: layer
    2: sector
  sectr_sector_type:
    0: normal
    1: city
    2: navmesh
  sectr_layer_type:
    0: persistence
    1: terrain
    2: static_model
    3: stone_model
    4: dynamic_model
    5: navmesh
    6: collider
    7: very_high_model
    8: terrain_grass
    9: tree_model
    10: water_tile
    11: fog_texture
    12: small_light
    13: far_light
    14: dynamic_small_light
    15: dynamic_far_light
    16: reflection_prob
  sectr_stream_object_type:
    0: none
    1: terrain
    2: lod
    3: vo
    4: other
    5: terrain_grass
    6: water_tile
    7: navmesh
    8: occlusion
    9: particle
    10: fog_texture
    11: hlod
    12: limit_region
    13: vo_collider
    14: lod_collider
    15: reflection_prob_tile
  center_pos_type:
    0: bottom_center
    1: center
  sound_bank_unload_policy:
    0: never
    1: exit_stage
    2: cooldown
  state_camera_type:
    0: normal_move
    1: combat_normal
    2: combat_be_hit
  talent_type:
    0: none
    1: core_proud_skill
    2: inherent_proud_skill
    3: avatar_skill
  dialog_group_scheme_type:
    0: quest
    1: free
    2: narrator
    3: blossom
    4: activity
    5: coop
    6: gadget
  text_map_platform_type:
    0: default
    1: ios
    2: pc
    3: android
    4: ps4
    5: switch
    6: ps5
  input_value_type:
    0: button_input
    1: one_axis_input
    2: two_axis_input
  input_device_type:
    0: touch_screen
    1: keyboard_with_touch_screen
    2: keyboard_with_mouse
    3: joypad
  action_compound_type:
    0: two_axis
    1: all_press
  main_page_ui_disable_type:
    0: none
    1: easy_touch
    2: action_panel
    3: team_btn
    4: message_tips
    5: intee_panel
    6: aim_container
    7: self_rtt
    8: top_btns
    9: map_info
    10: chat_info
    11: move
    12: game_info
  activity_banner_ui_element_type:
    0: none
    1: unlock_tips
    2: finish_tips
    3: reward_scroller
    4: button_goto
    5: button_check
    6: animator
  config_weather_effect_control_type:
    0: set_emit_offset_pos
    1: set_emit_play_speed
    2: set_emit_play_speed_with_lerp
    3: set_velocity_multiplier
    4: set_emit_position
  ornaments_type:
    0: none
    1: fly
  collector_type:
    1: wind_seed
  widget_occupy_tag:
    1: action_panel
    2: fly_attach
  widget_business_type:
    1: resident
    2: activity
  widget_skill_replace_type:
    1: a
    2: e
    3: q
  create_sever_gadget_op_type:
    1: none
    2: retract
    3: retract_and_create
  param_method:
    0: replace
    1: add
    2: minus
    3: one_add_multipled
    4: negative
  view_cache_type:
    0: lru_cached
    1: always_cached
    2: dont_cache
  dont_destroy_on_load_type:
    0: no
    1: once
    2: always
